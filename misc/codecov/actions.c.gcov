        -:    0:Source:actions.c
        -:    1:/* actions.c -- a few functions for the plugins systems */
        -:    2:
        -:    3:/*
        -:    4: * This file is part of CliFM
        -:    5: * 
        -:    6: * Copyright (C) 2016-2021, L. Abramovich <johndoe.arch@outlook.com>
        -:    7: * All rights reserved.
        -:    8:
        -:    9: * CliFM is free software; you can redistribute it and/or modify
        -:   10: * it under the terms of the GNU General Public License as published by
        -:   11: * the Free Software Foundation; either version 2 of the License, or
        -:   12: * (at your option) any later version.
        -:   13: *
        -:   14: * CliFM is distributed in the hope that it will be useful,
        -:   15: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   16: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   17: * GNU General Public License for more details.
        -:   18: *
        -:   19: * You should have received a copy of the GNU General Public License
        -:   20: * along with this program; if not, write to the Free Software
        -:   21: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
        -:   22: * MA 02110-1301, USA.
        -:   23:*/
        -:   24:
        -:   25:#include "helpers.h"
        -:   26:
        -:   27:#include <errno.h>
        -:   28:#include <fcntl.h>
        -:   29:#include <stdio.h>
        -:   30:#include <string.h>
        -:   31:#include <sys/stat.h>
        -:   32:#include <sys/wait.h>
        -:   33:#include <unistd.h>
        -:   34:
        -:   35:#include "aux.h"
        -:   36:#include "checks.h"
        -:   37:#include "exec.h"
        -:   38:#include "file_operations.h"
        -:   39:#include "init.h"
        -:   40:#include "mime.h"
        -:   41:#include "misc.h"
        -:   42:
        -:   43:/* The core of this function was taken from NNN's run_selected_plugin
        -:   44: * function and modified to fit our needs. Thanks NNN! */
        -:   45:int
function run_action called 2 returned 100% blocks executed 38%
        2:   46:run_action(char *action, char **args)
        -:   47:{
        2:   48:	if (!action)
        2:   48-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   49:		return EXIT_FAILURE;
    %%%%%:   49-block  0
unconditional  0 never executed
        -:   50:
        2:   51:	int exit_status = EXIT_SUCCESS;
        2:   52:	char *cmd = (char *)NULL;
        2:   53:	size_t len = 0,
        2:   54:		   action_len = strlen(action);
        -:   55:
        -:   56:		/* #####################################
        -:   57:		 * #    1) CREATE CMD TO BE EXECUTED   #
        -:   58:		 * ##################################### */
        -:   59:
        -:   60:	/* Remove terminating new line char */
        2:   61:	if (action[action_len - 1] == '\n')
        2:   61-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   62:		action[action_len - 1] = '\0';
    %%%%%:   62-block  0
unconditional  0 never executed
        -:   63:
        2:   64:	int dir_path = 0;
        2:   65:	if (strchr(action, '/')) {
        2:   65-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   66:		cmd = (char *)xnmalloc(action_len + 1, sizeof(char));
    %%%%%:   66-block  0
call    0 never executed
    #####:   67:		strcpy(cmd, action);
    #####:   68:		dir_path = 1;
unconditional  0 never executed
        -:   69:	} else { /* If not a path, PLUGINS_DIR is assumed */
        2:   70:		cmd = (char *)xnmalloc(action_len + strlen(plugins_dir) + 2,
        2:   70-block  0
call    0 returned 2
        -:   71:								sizeof(char));
        2:   72:		sprintf(cmd, "%s/%s", plugins_dir, action);
unconditional  0 taken 2
        -:   73:	}
        -:   74:
        -:   75:	/* Check if the action file exists and is executable */
        2:   76:	if (access(cmd, X_OK) == -1) {
        2:   76-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:   77:		/* If not in local dir, check system data dir as well */
    #####:   78:		if (data_dir && !dir_path) {
    %%%%%:   78-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   78-block  1
branch  2 never executed
branch  3 never executed
    #####:   79:			cmd = (char *)xrealloc(cmd, (action_len + strlen(data_dir)
    #####:   80:						+ strlen(PNL) + 11) * sizeof(char));
    %%%%%:   80-block  0
call    0 never executed
    #####:   81:			sprintf(cmd, "%s/%s/plugins/%s", data_dir, PNL, action);
    #####:   82:			if (access(cmd, X_OK) == -1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   83:				fprintf(stderr, "actions: %s: %s\n", cmd, strerror(errno));
    %%%%%:   83-block  0
call    0 never executed
call    1 never executed
    #####:   84:				free(cmd);
    #####:   85:				return EXIT_FAILURE;
unconditional  0 never executed
        -:   86:			}
        -:   87:		} else {
    #####:   88:			fprintf(stderr, "actions: %s: %s\n", cmd, strerror(errno));
    %%%%%:   88-block  0
call    0 never executed
call    1 never executed
    #####:   89:			free(cmd);
    #####:   90:			return EXIT_FAILURE;
unconditional  0 never executed
        -:   91:		}
        -:   92:	}
        -:   93:
        -:   94:	/* Append arguments to command */
        -:   95:	size_t i;
        2:   96:	len = strlen(cmd);
       2*:   97:	for (i = 1; args[i]; i++) {
        2:   97-block  0
unconditional  0 taken 2
        2:   97-block  1
branch  1 taken 0
branch  2 taken 2 (fallthrough)
    #####:   98:		len += (strlen(args[i]) + 2);
    #####:   99:		cmd = (char *)xrealloc(cmd, len * sizeof(char));
    %%%%%:   99-block  0
call    0 never executed
    #####:  100:		strcat(cmd, " ");
    #####:  101:		strcat(cmd, args[i]);
unconditional  0 never executed
        -:  102:	}
        -:  103:
        -:  104:			/* ##############################
        -:  105:			 * #    2) CREATE A PIPE FILE   #
        -:  106:			 * ############################## */
        -:  107:
        2:  108:	char *rand_ext = gen_rand_str(6);
        2:  108-block  0
call    0 returned 2
        -:  109:
        2:  110:	if (!rand_ext) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  111:		free(cmd);
    #####:  112:		return EXIT_FAILURE;
    %%%%%:  112-block  0
unconditional  0 never executed
        -:  113:	}
        -:  114:
        -:  115:	char fifo_path[PATH_MAX];
        2:  116:	sprintf(fifo_path, "%s/.pipe.%s", tmp_dir, rand_ext);
        2:  117:	free(rand_ext);
        -:  118:
        2:  119:	setenv("CLIFM_BUS", fifo_path, 1);
        2:  119-block  0
call    0 returned 2
        -:  120:
        2:  121:	if (mkfifo(fifo_path, 0600) != EXIT_SUCCESS) {
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:  122:		free(cmd);
    #####:  123:		printf("%s: %s\n", fifo_path, strerror(errno));
    %%%%%:  123-block  0
call    0 never executed
call    1 never executed
    #####:  124:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  125:	}
        -:  126:
        -:  127:	/* ################################################
        -:  128:	 * #   3) EXEC CMD & LET THE CHILD WRITE TO PIPE  #
        -:  129:	 * ################################################ */
        -:  130:
        -:  131:	/* Set terminal title to plugin name */
        2:  132:	if (xargs.cwd_in_title == 1)
        2:  132-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  133:		set_term_title(action);
        2:  133-block  0
call    0 returned 2
unconditional  1 taken 2
        -:  134:
        2:  135:	pid_t pid = fork();
        2:  135-block  0
call    0 returned 2
        -:  136:
        2:  137:	if (pid == 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:  138:		/* Child: write-only end of the pipe */
    #####:  139:		int wfd = open(fifo_path, O_WRONLY | O_CLOEXEC);
    %%%%%:  139-block  0
call    0 never executed
        -:  140:
    #####:  141:		if (wfd == -1)
branch  0 never executed
branch  1 never executed
    #####:  142:			_exit(EXIT_FAILURE);
    %%%%%:  142-block  0
call    0 never executed
        -:  143:
    #####:  144:		launch_execle(cmd);
    %%%%%:  144-block  0
call    0 never executed
        -:  145:
    #####:  146:		close(wfd);
call    0 never executed
    #####:  147:		_exit(EXIT_SUCCESS);
call    0 never executed
        -:  148:	}
        -:  149:
        2:  150:	free(cmd);
        2:  150-block  0
unconditional  0 taken 2
        -:  151:
        -:  152:		/* ########################################
        -:  153:		 * #    4) LET THE PARENT READ THE PIPE   #
        -:  154:		 * ######################################## */
        -:  155:
        -:  156:	/* Parent: read-only end of the pipe */
        -:  157:	int rfd;
        -:  158:
        -:  159:	do
        2:  160:		rfd = open(fifo_path, O_RDONLY);
        2:  160-block  0
call    0 returned 2
       2*:  161:	while (rfd == -1 && errno == EINTR);
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:  161-block  0
branch  2 never executed
branch  3 never executed
        -:  162:
        2:  163:	char buf[PATH_MAX] = "";
        2:  164:	ssize_t buf_len = 0;
        2:  164-block  0
unconditional  0 taken 2
        -:  165:
        -:  166:	do
        2:  167:		buf_len = read(rfd, buf, sizeof(buf));
        2:  167-block  0
call    0 returned 2
       2*:  168:	while (buf_len == -1 && errno == EINTR);
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:  168-block  0
branch  2 never executed
branch  3 never executed
        -:  169:
        2:  170:	close(rfd);
        2:  170-block  0
call    0 returned 2
        -:  171:
        -:  172:	/* Wait for the child to finish. Otherwise, the child is left as
        -:  173:	 * zombie process */
        2:  174:	int status = 0;
        2:  175:	waitpid(pid, &status, 0);
call    0 returned 2
        -:  176:
        -:  177:	/* If the pipe is empty */
        2:  178:	if (!*buf) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  179:		unlink(fifo_path);
        2:  179-block  0
call    0 returned 2
        2:  180:		if (xargs.cwd_in_title == 1)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  181:			set_term_title(ws[cur_ws].path);
        2:  181-block  0
call    0 returned 2
unconditional  1 taken 2
        2:  182:		return EXIT_SUCCESS;
        2:  182-block  0
unconditional  0 taken 2
        -:  183:	}
        -:  184:
    #####:  185:	if (buf[buf_len - 1] == '\n')
    %%%%%:  185-block  0
branch  0 never executed
branch  1 never executed
    #####:  186:		buf[buf_len - 1] = '\0';
    %%%%%:  186-block  0
unconditional  0 never executed
        -:  187:
        -:  188:	/* If a valid file */
        -:  189:	struct stat attr;
        -:  190:
    #####:  191:	if (lstat(buf, &attr) != -1) {
    %%%%%:  191-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  192:		char *o_cmd[] = {"o", buf, NULL};
    #####:  193:		exit_status = open_function(o_cmd);
    %%%%%:  193-block  0
call    0 never executed
        -:  194:	}
        -:  195:
        -:  196:	/* If not a file, take it as a command*/
        -:  197:	else {
    #####:  198:		size_t old_args = args_n;
    #####:  199:		args_n = 0;
        -:  200:
    #####:  201:		char **_cmd = parse_input_str(buf);
    %%%%%:  201-block  0
call    0 never executed
        -:  202:
    #####:  203:		if (_cmd) {
branch  0 never executed
branch  1 never executed
        -:  204:
    #####:  205:			char **alias_cmd = check_for_alias(_cmd);
    %%%%%:  205-block  0
call    0 never executed
        -:  206:
    #####:  207:			if (alias_cmd) {
branch  0 never executed
branch  1 never executed
    #####:  208:				exit_status = exec_cmd(alias_cmd);
    %%%%%:  208-block  0
call    0 never executed
        -:  209:
    #####:  210:				for (i = 0; alias_cmd[i]; i++)
unconditional  0 never executed
    %%%%%:  210-block  0
branch  1 never executed
branch  2 never executed
    #####:  211:					free(alias_cmd[i]);
    %%%%%:  211-block  0
unconditional  0 never executed
        -:  212:
    #####:  213:				free(alias_cmd);
    %%%%%:  213-block  0
unconditional  0 never executed
        -:  214:			} else {
    #####:  215:				exit_status = exec_cmd(_cmd);
    %%%%%:  215-block  0
call    0 never executed
        -:  216:
    #####:  217:				for (i = 0; i <= args_n; i++)
unconditional  0 never executed
    %%%%%:  217-block  0
branch  1 never executed
branch  2 never executed
    #####:  218:					free(_cmd[i]);
    %%%%%:  218-block  0
unconditional  0 never executed
        -:  219:
    #####:  220:				free(_cmd);
    %%%%%:  220-block  0
unconditional  0 never executed
        -:  221:			}
        -:  222:		}
        -:  223:
    #####:  224:		args_n = old_args;
    %%%%%:  224-block  0
unconditional  0 never executed
        -:  225:	}
        -:  226:
        -:  227:	/* Remove the pipe file */
    #####:  228:	unlink(fifo_path);
    %%%%%:  228-block  0
call    0 never executed
        -:  229:
    #####:  230:	if (xargs.cwd_in_title == 1)
branch  0 never executed
branch  1 never executed
    #####:  231:		set_term_title(ws[cur_ws].path);
    %%%%%:  231-block  0
call    0 never executed
unconditional  1 never executed
        -:  232:
    #####:  233:	return exit_status;
    %%%%%:  233-block  0
unconditional  0 never executed
        -:  234:}
        -:  235:
        -:  236:int
function edit_actions called 3 returned 100% blocks executed 77%
        3:  237:edit_actions(void)
        -:  238:{
        3:  239:	if (xargs.stealth_mode == 1) {
        3:  239-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  240:		printf("%s: Access to configuration files is not allowed in "
    %%%%%:  240-block  0
call    0 never executed
        -:  241:		       "stealth mode\n", PROGRAM_NAME);
    #####:  242:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  243:	}
        -:  244:
        -:  245:	/* Get actions file's current modification time */
        -:  246:	struct stat file_attrib;
        -:  247:
        3:  248:	if (stat(actions_file, &file_attrib) == -1) {
        3:  248-block  0
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
    #####:  249:		fprintf(stderr, "actions: %s: %s\n", actions_file, strerror(errno));
    %%%%%:  249-block  0
call    0 never executed
call    1 never executed
    #####:  250:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  251:	}
        -:  252:
        3:  253:	time_t mtime_bfr = (time_t)file_attrib.st_mtime;
        -:  254:
        3:  255:	int ret = open_file(actions_file);
        3:  255-block  0
call    0 returned 3
        3:  256:	if (ret != EXIT_SUCCESS)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  257:		return EXIT_FAILURE;
    %%%%%:  257-block  0
unconditional  0 never executed
        -:  258:
        -:  259:	/* Get modification time after opening the file */
        3:  260:	stat(actions_file, &file_attrib);
        3:  260-block  0
call    0 returned 3
        -:  261:
        -:  262:	/* If modification times differ, the file was modified after being
        -:  263:	 * opened */
        3:  264:	if (mtime_bfr != (time_t)file_attrib.st_mtime) {
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        -:  265:
        -:  266:		/* Reload the array of available actions */
        2:  267:		if (load_actions() != EXIT_SUCCESS)
        2:  267-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:  268:			return EXIT_FAILURE;
    %%%%%:  268-block  0
unconditional  0 never executed
        -:  269:
        -:  270:		/* Reload PATH commands as well to add new action(s) */
        2:  271:		if (bin_commands) {
        2:  271-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -:  272:			size_t i;
     7493:  273:			for (i = 0; bin_commands[i]; i++)
        2:  273-block  0
unconditional  0 taken 2
     7493:  273-block  1
branch  1 taken 7491
branch  2 taken 2 (fallthrough)
     7491:  274:				free(bin_commands[i]);
     7491:  274-block  0
unconditional  0 taken 7491
        -:  275:
        2:  276:			free(bin_commands);
        2:  277:			bin_commands = (char **)NULL;
        2:  277-block  0
unconditional  0 taken 2
        -:  278:		}
        -:  279:
        2:  280:		if (paths) {
        2:  280-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -:  281:			size_t i;
       14:  282:			for (i = 0; i < path_n; i++)
        2:  282-block  0
unconditional  0 taken 2
       14:  282-block  1
branch  1 taken 12
branch  2 taken 2 (fallthrough)
       12:  283:				free(paths[i]);
       12:  283-block  0
unconditional  0 taken 12
        -:  284:		}
        -:  285:
        2:  286:		path_n = (size_t)get_path_env();
        2:  286-block  0
call    0 returned 2
        -:  287:
        2:  288:		get_path_programs();
call    0 returned 2
unconditional  1 taken 2
        -:  289:	}
        -:  290:
        3:  291:	return EXIT_SUCCESS;
        3:  291-block  0
unconditional  0 taken 3
        -:  292:}
