        -:    0:Source:sort.c
        -:    1:/* sort.c -- functions used to sort files */
        -:    2:
        -:    3:/*
        -:    4: * This file is part of CliFM
        -:    5: * 
        -:    6: * Copyright (C) 2016-2021, L. Abramovich <johndoe.arch@outlook.com>
        -:    7: * All rights reserved.
        -:    8:
        -:    9: * CliFM is free software; you can redistribute it and/or modify
        -:   10: * it under the terms of the GNU General Public License as published by
        -:   11: * the Free Software Foundation; either version 2 of the License, or
        -:   12: * (at your option) any later version.
        -:   13: *
        -:   14: * CliFM is distributed in the hope that it will be useful,
        -:   15: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   16: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   17: * GNU General Public License for more details.
        -:   18: *
        -:   19: * You should have received a copy of the GNU General Public License
        -:   20: * along with this program; if not, write to the Free Software
        -:   21: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
        -:   22: * MA 02110-1301, USA.
        -:   23:*/
        -:   24:
        -:   25:#include "helpers.h"
        -:   26:
        -:   27:#include <dirent.h>
        -:   28:#include <fcntl.h>
        -:   29:#include <stdio.h>
        -:   30:#include <string.h>
        -:   31:#include <unistd.h>
        -:   32:
        -:   33:#include "checks.h"
        -:   34:#include "listing.h"
        -:   35:
        -:   36:int
function skip_nonexec called 7342 returned 100% blocks executed 100%
     7342:   37:skip_nonexec(const struct dirent *ent)
        -:   38:{
     7342:   39:	if (access(ent->d_name, R_OK) == -1)
     7342:   39-block  0
call    0 returned 7342
branch  1 taken 8 (fallthrough)
branch  2 taken 7334
        8:   40:		return 0;
        8:   40-block  0
unconditional  0 taken 8
        -:   41:
     7334:   42:	return 1;
     7334:   42-block  0
unconditional  0 taken 7334
        -:   43:}
        -:   44:
        -:   45:int
function skip_files called 0 returned 0% blocks executed 0%
    #####:   46:skip_files(const struct dirent *ent)
        -:   47:{
        -:   48:	/* In case a directory isn't reacheable, like a failed
        -:   49:	 * mountpoint... */
        -:   50:	/*  struct stat file_attrib;
        -:   51:
        -:   52:	if (lstat(entry->d_name, &file_attrib) == -1) {
        -:   53:		fprintf(stderr, _("stat: cannot access '%s': %s\n"),
        -:   54:				entry->d_name, strerror(errno));
        -:   55:		return 0;
        -:   56:	} */
        -:   57:
        -:   58:	/* Skip "." and ".." */
    #####:   59:	if (*ent->d_name == '.' && (!ent->d_name[1] || (ent->d_name[1] == '.' && !ent->d_name[2])))
    %%%%%:   59-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   59-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:   59-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:   59-block  3
branch  6 never executed
branch  7 never executed
    #####:   60:		return 0;
    %%%%%:   60-block  0
unconditional  0 never executed
        -:   61:
        -:   62:	/* Skip files matching FILTER */
    #####:   63:	if (filter && regexec(&regex_exp, ent->d_name, 0, NULL, 0) == EXIT_SUCCESS)
    %%%%%:   63-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   63-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   64:		return 0;
    %%%%%:   64-block  0
unconditional  0 never executed
        -:   65:
        -:   66:	/* If not hidden files */
    #####:   67:	if (!show_hidden && *ent->d_name == '.')
    %%%%%:   67-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   67-block  1
branch  2 never executed
branch  3 never executed
    #####:   68:		return 0;
    %%%%%:   68-block  0
unconditional  0 never executed
        -:   69:
    #####:   70:	return 1;
    %%%%%:   70-block  0
unconditional  0 never executed
        -:   71:}
        -:   72:
        -:   73:int
function namecmp called 5442 returned 100% blocks executed 95%
     5442:   74:namecmp(const char *s1, const char *s2)
        -:   75:{
        -:   76:	/* Do not take initial dot into account */
     5442:   77:	if (*s1 == '.')
     5442:   77-block  0
branch  0 taken 1579 (fallthrough)
branch  1 taken 3863
     1579:   78:		s1++;
     1579:   78-block  0
unconditional  0 taken 1579
        -:   79:
     5442:   80:	if (*s2 == '.')
     5442:   80-block  0
branch  0 taken 1701 (fallthrough)
branch  1 taken 3741
     1701:   81:		s2++;
     1701:   81-block  0
unconditional  0 taken 1701
        -:   82:
     5442:   83:	char ac = *s1, bc = *s2;
        -:   84:
     5442:   85:	if (!case_sensitive) {
     5442:   85-block  0
branch  0 taken 5442 (fallthrough)
branch  1 taken 0
     5442:   86:		ac = TOUPPER(*s1);
     5442:   86-block  0
branch  0 taken 5046 (fallthrough)
branch  1 taken 396
     5046:   86-block  1
branch  2 taken 5046 (fallthrough)
branch  3 taken 0
     5046:   86-block  2
unconditional  4 taken 5046
      396:   86-block  3
unconditional  5 taken 396
     5442:   87:		bc = TOUPPER(*s2);
     5442:   87-block  0
branch  0 taken 5108 (fallthrough)
branch  1 taken 334
     5108:   87-block  1
branch  2 taken 5108 (fallthrough)
branch  3 taken 0
     5108:   87-block  2
unconditional  4 taken 5108
      334:   87-block  3
unconditional  5 taken 334
     5442:   87-block  4
unconditional  6 taken 5442
        -:   88:	}
        -:   89:
     5442:   90:	if (bc > ac)
     5442:   90-block  0
branch  0 taken 1814 (fallthrough)
branch  1 taken 3628
     1814:   91:		return -1;
     1814:   91-block  0
unconditional  0 taken 1814
        -:   92:
     3628:   93:	if (bc < ac)
     3628:   93-block  0
branch  0 taken 1907 (fallthrough)
branch  1 taken 1721
     1907:   94:		return 1;
     1907:   94-block  0
unconditional  0 taken 1907
        -:   95:
     1721:   96:	if (!case_sensitive)
     1721:   96-block  0
branch  0 taken 1721 (fallthrough)
branch  1 taken 0
     1721:   97:		return strcasecmp(s1, s2);
     1721:   97-block  0
unconditional  0 taken 1721
        -:   98:
    #####:   99:	return strcmp(s1, s2);
    %%%%%:   99-block  0
unconditional  0 never executed
        -:  100:}
        -:  101:
        -:  102:int
function entrycmp called 5898 returned 100% blocks executed 21%
     5898:  103:entrycmp(const void *a, const void *b)
        -:  104:{
     5898:  105:	const struct fileinfo *pa = (struct fileinfo *)a;
     5898:  106:	const struct fileinfo *pb = (struct fileinfo *)b;
        -:  107:
     5898:  108:	if (list_folders_first) {
     5898:  108-block  0
branch  0 taken 5898 (fallthrough)
branch  1 taken 0
     5898:  109:		if (pb->dir != pa->dir) {
     5898:  109-block  0
branch  0 taken 456 (fallthrough)
branch  1 taken 5442
      456:  110:			if (pb->dir)
      456:  110-block  0
branch  0 taken 262 (fallthrough)
branch  1 taken 194
      262:  111:				return 1;
      262:  111-block  0
unconditional  0 taken 262
        -:  112:
      194:  113:			return -1;
      194:  113-block  0
unconditional  0 taken 194
        -:  114:		}
        -:  115:	}
        -:  116:
     5442:  117:	int ret = 0, st = sort;
        -:  118:
        -:  119:#ifndef _GNU_SOURCE
        -:  120:	if (st == SVER)
        -:  121:		st = SNAME;
        -:  122:#endif
        -:  123:
    5442*:  124:	if (light_mode && (st == SOWN || st == SGRP))
     5442:  124-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5442
    %%%%%:  124-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  124-block  2
branch  4 never executed
branch  5 never executed
    #####:  125:		st = SNAME;
    %%%%%:  125-block  0
unconditional  0 never executed
        -:  126:
     5442:  127:	switch (st) {
     5442:  127-block  0
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 5442
        -:  128:
    #####:  129:	case SSIZE:
    #####:  130:		if (pa->size > pb->size)
    %%%%%:  130-block  0
branch  0 never executed
branch  1 never executed
    #####:  131:			ret = 1;
    %%%%%:  131-block  0
unconditional  0 never executed
    #####:  132:		else if (pa->size < pb->size)
    %%%%%:  132-block  0
branch  0 never executed
branch  1 never executed
    #####:  133:			ret = -1;
    %%%%%:  133-block  0
unconditional  0 never executed
    #####:  134:		break;
    %%%%%:  134-block  0
unconditional  0 never executed
        -:  135:
    #####:  136:	case SATIME: /* fallthrough */
        -:  137:	case SBTIME: /* fallthrough */
        -:  138:	case SCTIME: /* fallthrough */
        -:  139:	case SMTIME:
    #####:  140:		if (pa->time > pb->time)
    %%%%%:  140-block  0
branch  0 never executed
branch  1 never executed
    #####:  141:			ret = 1;
    %%%%%:  141-block  0
unconditional  0 never executed
    #####:  142:		else if (pa->time < pb->time)
    %%%%%:  142-block  0
branch  0 never executed
branch  1 never executed
    #####:  143:			ret = -1;
    %%%%%:  143-block  0
unconditional  0 never executed
    #####:  144:		break;
    %%%%%:  144-block  0
unconditional  0 never executed
        -:  145:
        -:  146:#ifdef _GNU_SOURCE
    #####:  147:	case SVER:
    #####:  148:		ret = strverscmp(pa->name, pb->name);
    #####:  149:		break;
    %%%%%:  149-block  0
unconditional  0 never executed
        -:  150:#endif
        -:  151:
    #####:  152:	case SEXT: {
    #####:  153:		char *aext = (char *)NULL, *bext = (char *)NULL, *val;
    #####:  154:		val = strrchr(pa->name, '.');
    #####:  155:		if (val && val != pa->name)
    %%%%%:  155-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  155-block  1
branch  2 never executed
branch  3 never executed
    #####:  156:			aext = val + 1;
    %%%%%:  156-block  0
unconditional  0 never executed
        -:  157:
    #####:  158:		val = strrchr(pb->name, '.');
    #####:  159:		if (val && val != pb->name)
    %%%%%:  159-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  159-block  1
branch  2 never executed
branch  3 never executed
    #####:  160:			bext = val + 1;
    %%%%%:  160-block  0
unconditional  0 never executed
        -:  161:
    #####:  162:		if (aext || bext) {
    %%%%%:  162-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  162-block  1
branch  2 never executed
branch  3 never executed
    #####:  163:			if (!aext)
    %%%%%:  163-block  0
branch  0 never executed
branch  1 never executed
    #####:  164:				ret = -1;
    %%%%%:  164-block  0
unconditional  0 never executed
    #####:  165:			else if (!bext)
    %%%%%:  165-block  0
branch  0 never executed
branch  1 never executed
    #####:  166:				ret = 1;
    %%%%%:  166-block  0
unconditional  0 never executed
        -:  167:
        -:  168:			else
    #####:  169:				ret = strcasecmp(aext, bext);
    %%%%%:  169-block  0
unconditional  0 never executed
        -:  170:		}
    #####:  171:	} break;
    %%%%%:  171-block  0
unconditional  0 never executed
        -:  172:
    #####:  173:	case SINO:
    #####:  174:		if (pa->inode > pb->inode)
    %%%%%:  174-block  0
branch  0 never executed
branch  1 never executed
    #####:  175:			ret = 1;
    %%%%%:  175-block  0
unconditional  0 never executed
    #####:  176:		else if (pa->inode < pb->inode)
    %%%%%:  176-block  0
branch  0 never executed
branch  1 never executed
    #####:  177:			ret = -1;
    %%%%%:  177-block  0
unconditional  0 never executed
    #####:  178:		break;
    %%%%%:  178-block  0
unconditional  0 never executed
        -:  179:
    #####:  180:	case SOWN:
    #####:  181:		if (pa->uid > pb->uid)
    %%%%%:  181-block  0
branch  0 never executed
branch  1 never executed
    #####:  182:			ret = 1;
    %%%%%:  182-block  0
unconditional  0 never executed
    #####:  183:		else if (pa->uid < pb->uid)
    %%%%%:  183-block  0
branch  0 never executed
branch  1 never executed
    #####:  184:			ret = -1;
    %%%%%:  184-block  0
unconditional  0 never executed
    #####:  185:		break;
    %%%%%:  185-block  0
unconditional  0 never executed
        -:  186:
    #####:  187:	case SGRP:
    #####:  188:		if (pa->gid > pb->gid)
    %%%%%:  188-block  0
branch  0 never executed
branch  1 never executed
    #####:  189:			ret = 1;
    %%%%%:  189-block  0
unconditional  0 never executed
    #####:  190:		else if (pa->gid < pb->gid)
    %%%%%:  190-block  0
branch  0 never executed
branch  1 never executed
    #####:  191:			ret = -1;
    %%%%%:  191-block  0
unconditional  0 never executed
    #####:  192:		break;
    %%%%%:  192-block  0
unconditional  0 never executed
        -:  193:	}
        -:  194:
     5442:  195:	if (!ret)
     5442:  195-block  0
branch  0 taken 5442 (fallthrough)
branch  1 taken 0
     5442:  196:		ret = namecmp(pa->name, pb->name);
     5442:  196-block  0
call    0 returned 5442
unconditional  1 taken 5442
        -:  197:
     5442:  198:	if (!sort_reverse)
     5442:  198-block  0
branch  0 taken 5442 (fallthrough)
branch  1 taken 0
     5442:  199:		return ret;
     5442:  199-block  0
unconditional  0 taken 5442
        -:  200:
    #####:  201:	return (ret - (ret * 2));
    %%%%%:  201-block  0
unconditional  0 never executed
        -:  202:}
        -:  203:
        -:  204:/* Same as alphasort, but is uses strcmp instead of sctroll, which is
        -:  205: * slower. However, bear in mind that, unlike strcmp(), strcoll() is locale
        -:  206: * aware. Use only with C and english locales */
        -:  207:int
function xalphasort called 76004 returned 100% blocks executed 89%
    76004:  208:xalphasort(const struct dirent **a, const struct dirent **b)
        -:  209:{
    76004:  210:	int ret = 0;
        -:  211:
        -:  212:	/* The if statements prevent strcmp from running in every
        -:  213:	 * call to the function (it will be called only if the first
        -:  214:	 * character of the two strings is the same), which makes the
        -:  215:	 * function faster */
    76004:  216:	if ((*a)->d_name[0] > (*b)->d_name[0])
    76004:  216-block  0
branch  0 taken 16138 (fallthrough)
branch  1 taken 59866
    16138:  217:		ret = 1;
    16138:  217-block  0
unconditional  0 taken 16138
        -:  218:
    59866:  219:	else if ((*a)->d_name[0] < (*b)->d_name[0])
    59866:  219-block  0
branch  0 taken 15126 (fallthrough)
branch  1 taken 44740
    15126:  220:		ret = -1;
    15126:  220-block  0
unconditional  0 taken 15126
        -:  221:
        -:  222:	else
    44740:  223:		ret = strcmp((*a)->d_name, (*b)->d_name);
    44740:  223-block  0
unconditional  0 taken 44740
        -:  224:
    76004:  225:	if (!sort_reverse)
    76004:  225-block  0
branch  0 taken 76004 (fallthrough)
branch  1 taken 0
    76004:  226:		return ret;
    76004:  226-block  0
unconditional  0 taken 76004
        -:  227:
        -:  228:	/* If sort_reverse, return the opposite value */
    #####:  229:	return (ret - (ret * 2));
    %%%%%:  229-block  0
unconditional  0 never executed
        -:  230:}
        -:  231:
        -:  232:int
function sort_function called 0 returned 0% blocks executed 0%
    #####:  233:sort_function(char **arg)
        -:  234:{
    #####:  235:	int exit_status = EXIT_FAILURE;
        -:  236:
        -:  237:	/* No argument: Just print current sorting method */
    #####:  238:	if (!arg[1]) {
    %%%%%:  238-block  0
branch  0 never executed
branch  1 never executed
        -:  239:
    #####:  240:		printf(_("Sorting method: "));
    %%%%%:  240-block  0
call    0 never executed
        -:  241:
    #####:  242:		switch (sort) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  243:		case SNONE:
    #####:  244:			printf(_("none %s\n"), (sort_reverse) ? "[rev]" : "");
    %%%%%:  244-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  244-block  1
unconditional  2 never executed
    %%%%%:  244-block  2
unconditional  3 never executed
    %%%%%:  244-block  3
call    4 never executed
    #####:  245:			break;
unconditional  0 never executed
    #####:  246:		case SNAME:
    #####:  247:			printf(_("name %s\n"), (sort_reverse) ? "[rev]" : "");
    %%%%%:  247-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  247-block  1
unconditional  2 never executed
    %%%%%:  247-block  2
unconditional  3 never executed
    %%%%%:  247-block  3
call    4 never executed
    #####:  248:			break;
unconditional  0 never executed
    #####:  249:		case SSIZE:
    #####:  250:			printf(_("size %s\n"), (sort_reverse) ? "[rev]" : "");
    %%%%%:  250-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  250-block  1
unconditional  2 never executed
    %%%%%:  250-block  2
unconditional  3 never executed
    %%%%%:  250-block  3
call    4 never executed
    #####:  251:			break;
unconditional  0 never executed
    #####:  252:		case SATIME:
    #####:  253:			printf(_("atime %s\n"), (sort_reverse) ? "[rev]" : "");
    %%%%%:  253-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  253-block  1
unconditional  2 never executed
    %%%%%:  253-block  2
unconditional  3 never executed
    %%%%%:  253-block  3
call    4 never executed
    #####:  254:			break;
unconditional  0 never executed
    #####:  255:		case SBTIME:
        -:  256:#if defined(HAVE_ST_BIRTHTIME) || defined(__BSD_VISIBLE) || defined(_STATX)
    #####:  257:			printf(_("btime %s\n"), (sort_reverse) ? "[rev]" : "");
    %%%%%:  257-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  257-block  1
unconditional  2 never executed
    %%%%%:  257-block  2
unconditional  3 never executed
    %%%%%:  257-block  3
call    4 never executed
        -:  258:#else
        -:  259:			printf(_("ctime %s\n"), (sort_reverse) ? "[rev]" : "");
        -:  260:#endif
    #####:  261:			break;
unconditional  0 never executed
    #####:  262:		case SCTIME:
    #####:  263:			printf(_("ctime %s\n"), (sort_reverse) ? "[rev]" : "");
    %%%%%:  263-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  263-block  1
unconditional  2 never executed
    %%%%%:  263-block  2
unconditional  3 never executed
    %%%%%:  263-block  3
call    4 never executed
    #####:  264:			break;
unconditional  0 never executed
    #####:  265:		case SMTIME:
    #####:  266:			printf(_("mtime %s\n"), (sort_reverse) ? "[rev]" : "");
    %%%%%:  266-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  266-block  1
unconditional  2 never executed
    %%%%%:  266-block  2
unconditional  3 never executed
    %%%%%:  266-block  3
call    4 never executed
    #####:  267:			break;
unconditional  0 never executed
    #####:  268:		case SVER:
        -:  269:#if __FreeBSD__ || _BE_POSIX
        -:  270:			printf(_("name %s\n"), (sort_reverse) ? "[rev]" : "");
        -:  271:#else
    #####:  272:			printf(_("version %s\n"), (sort_reverse) ? "[rev]" : "");
    %%%%%:  272-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  272-block  1
unconditional  2 never executed
    %%%%%:  272-block  2
unconditional  3 never executed
    %%%%%:  272-block  3
call    4 never executed
        -:  273:#endif
    #####:  274:			break;
unconditional  0 never executed
    #####:  275:		case SEXT:
    #####:  276:			printf(_("extension %s\n"), (sort_reverse) ? "[rev]" : "");
    %%%%%:  276-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  276-block  1
unconditional  2 never executed
    %%%%%:  276-block  2
unconditional  3 never executed
    %%%%%:  276-block  3
call    4 never executed
    #####:  277:			break;
unconditional  0 never executed
    #####:  278:		case SINO:
    #####:  279:			printf(_("inode %s\n"), (sort_reverse) ? "[rev]" : "");
    %%%%%:  279-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  279-block  1
unconditional  2 never executed
    %%%%%:  279-block  2
unconditional  3 never executed
    %%%%%:  279-block  3
call    4 never executed
    #####:  280:			break;
unconditional  0 never executed
    #####:  281:		case SOWN:
    #####:  282:			printf(_("owner %s\n"), (sort_reverse) ? "[rev]" : "");
    %%%%%:  282-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  282-block  1
unconditional  2 never executed
    %%%%%:  282-block  2
unconditional  3 never executed
    %%%%%:  282-block  3
call    4 never executed
    #####:  283:			break;
unconditional  0 never executed
    #####:  284:		case SGRP:
    #####:  285:			printf(_("group %s\n"), (sort_reverse) ? "[rev]" : "");
    %%%%%:  285-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  285-block  1
unconditional  2 never executed
    %%%%%:  285-block  2
unconditional  3 never executed
    %%%%%:  285-block  3
call    4 never executed
    #####:  286:			break;
unconditional  0 never executed
        -:  287:		}
        -:  288:
    #####:  289:		return EXIT_SUCCESS;
    %%%%%:  289-block  0
unconditional  0 never executed
        -:  290:	}
        -:  291:
        -:  292:	/* Argument is alphanumerical string */
    #####:  293:	if (!is_number(arg[1])) {
    %%%%%:  293-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  294:
        -:  295:		struct sort_t {
        -:  296:			const char *name;
        -:  297:			int num;
        -:  298:		};
        -:  299:
        -:  300:		static struct sort_t sorts[] = {
        -:  301:		    {"none", 0},
        -:  302:		    {"name", 1},
        -:  303:		    {"size", 2},
        -:  304:		    {"atime", 3},
        -:  305:		    {"btime", 4},
        -:  306:		    {"ctime", 5},
        -:  307:		    {"mtime", 6},
        -:  308:		    {"version", 7},
        -:  309:		    {"extension", 8},
        -:  310:		    {"inode", 9},
        -:  311:		    {"owner", 10},
        -:  312:		    {"group", 11},
        -:  313:		};
        -:  314:
        -:  315:		size_t i;
    #####:  316:		for (i = 0; i < sizeof(sorts) / sizeof(struct sort_t); i++) {
    %%%%%:  316-block  0
unconditional  0 never executed
    %%%%%:  316-block  1
unconditional  1 never executed
    %%%%%:  316-block  2
branch  2 never executed
branch  3 never executed
    #####:  317:			if (strcmp(arg[1], sorts[i].name) == 0) {
    %%%%%:  317-block  0
branch  0 never executed
branch  1 never executed
    #####:  318:				sprintf(arg[1], "%d", sorts[i].num);
    #####:  319:				break;
    %%%%%:  319-block  0
unconditional  0 never executed
        -:  320:			}
        -:  321:		}
        -:  322:
    #####:  323:		if (strcmp(arg[1], "rev") == 0) {
    %%%%%:  323-block  0
branch  0 never executed
branch  1 never executed
        -:  324:
    #####:  325:			if (sort_reverse)
    %%%%%:  325-block  0
branch  0 never executed
branch  1 never executed
    #####:  326:				sort_reverse = 0;
    %%%%%:  326-block  0
unconditional  0 never executed
        -:  327:			else
    #####:  328:				sort_reverse = 1;
    %%%%%:  328-block  0
unconditional  0 never executed
        -:  329:
    #####:  330:			if (cd_lists_on_the_fly) {
    %%%%%:  330-block  0
branch  0 never executed
branch  1 never executed
        -:  331:				/* sort_switch just tells list_dir() to print a line
        -:  332:				 * with the current sorting method at the end of the
        -:  333:				 * files list */
    #####:  334:				sort_switch = 1;
    #####:  335:				free_dirlist();
    %%%%%:  335-block  0
call    0 never executed
    #####:  336:				exit_status = list_dir();
call    0 never executed
    #####:  337:				sort_switch = 0;
unconditional  0 never executed
        -:  338:			}
        -:  339:
    #####:  340:			return exit_status;
    %%%%%:  340-block  0
unconditional  0 never executed
        -:  341:		}
        -:  342:
        -:  343:		/* If arg1 is not a number and is not "rev", the fputs()
        -:  344:		 * above is executed */
        -:  345:	}
        -:  346:
        -:  347:	/* Argument is a number */
    #####:  348:	int int_arg = atoi(arg[1]);
        -:  349:
    #####:  350:	if (int_arg >= 0 && int_arg <= SORT_TYPES) {
    %%%%%:  350-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  350-block  1
branch  2 never executed
branch  3 never executed
    #####:  351:		sort = int_arg;
        -:  352:
    #####:  353:		if (arg[2] && strcmp(arg[2], "rev") == 0) {
    %%%%%:  353-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  353-block  1
branch  2 never executed
branch  3 never executed
    #####:  354:			if (sort_reverse)
    %%%%%:  354-block  0
branch  0 never executed
branch  1 never executed
    #####:  355:				sort_reverse = 0;
    %%%%%:  355-block  0
unconditional  0 never executed
        -:  356:			else
    #####:  357:				sort_reverse = 1;
    %%%%%:  357-block  0
unconditional  0 never executed
        -:  358:		}
        -:  359:
    #####:  360:		if (cd_lists_on_the_fly) {
    %%%%%:  360-block  0
branch  0 never executed
branch  1 never executed
    #####:  361:			sort_switch = 1;
    #####:  362:			free_dirlist();
    %%%%%:  362-block  0
call    0 never executed
    #####:  363:			exit_status = list_dir();
call    0 never executed
    #####:  364:			sort_switch = 0;
unconditional  0 never executed
        -:  365:		}
        -:  366:
    #####:  367:		return exit_status;
    %%%%%:  367-block  0
unconditional  0 never executed
        -:  368:	}
        -:  369:
        -:  370:	/* If arg1 is a number but is not in the range 0-SORT_TYPES,
        -:  371:	 * error */
        -:  372:
    #####:  373:	fputs(_("Usage: st [METHOD] [rev]\nMETHOD: 0 = none, "
    %%%%%:  373-block  0
call    0 never executed
        -:  374:		"1 = name, 2 = size, 3 = atime, 4 = btime, "
        -:  375:		"5 = ctime, 6 = mtime, 7 = version, 8 = extension, "
        -:  376:		"9 = inode, 10 = owner, 11 = group\nBoth numbers and names are "
        -:  377:		"allowed\n"), stderr);
        -:  378:
    #####:  379:	return EXIT_FAILURE;
unconditional  0 never executed
        -:  380:}
        -:  381:
        -:  382:/* This is a modification of the alphasort function that makes it case
        -:  383: * insensitive. It also sorts without taking the initial dot of hidden
        -:  384: * files into account. Note that strcasecmp() isn't locale aware. Use
        -:  385: * only with C and english locales */
        -:  386:int
function alphasort_insensitive called 0 returned 0% blocks executed 0%
    #####:  387:alphasort_insensitive(const struct dirent **a, const struct dirent **b)
        -:  388:{
    #####:  389:	int ret = strcasecmp(((*a)->d_name[0] == '.') ? (*a)->d_name + 1
    %%%%%:  389-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  389-block  1
unconditional  2 never executed
    #####:  390:	: (*a)->d_name, ((*b)->d_name[0] == '.') ? (*b)->d_name + 1 : (*b)->d_name);
    %%%%%:  390-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  390-block  1
unconditional  2 never executed
    %%%%%:  390-block  2
unconditional  3 never executed
    %%%%%:  390-block  3
unconditional  4 never executed
        -:  391:
    #####:  392:	if (!sort_reverse)
    %%%%%:  392-block  0
branch  0 never executed
branch  1 never executed
    #####:  393:		return ret;
    %%%%%:  393-block  0
unconditional  0 never executed
        -:  394:
    #####:  395:	return (ret - (ret * 2));
    %%%%%:  395-block  0
unconditional  0 never executed
        -:  396:}
