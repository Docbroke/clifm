        -:    0:Source:archives.c
        -:    1:/* archives.c -- archiving functions */
        -:    2:
        -:    3:/*
        -:    4: * This file is part of CliFM
        -:    5: * 
        -:    6: * Copyright (C) 2016-2021, L. Abramovich <johndoe.arch@outlook.com>
        -:    7: * All rights reserved.
        -:    8:
        -:    9: * CliFM is free software; you can redistribute it and/or modify
        -:   10: * it under the terms of the GNU General Public License as published by
        -:   11: * the Free Software Foundation; either version 2 of the License, or
        -:   12: * (at your option) any later version.
        -:   13: *
        -:   14: * CliFM is distributed in the hope that it will be useful,
        -:   15: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   16: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   17: * GNU General Public License for more details.
        -:   18: *
        -:   19: * You should have received a copy of the GNU General Public License
        -:   20: * along with this program; if not, write to the Free Software
        -:   21: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
        -:   22: * MA 02110-1301, USA.
        -:   23:*/
        -:   24:#ifndef _NO_ARCHIVING
        -:   25:
        -:   26:#include "helpers.h"
        -:   27:
        -:   28:#include <errno.h>
        -:   29:#include <stdio.h>
        -:   30:#include <string.h>
        -:   31:#include <sys/stat.h>
        -:   32:#include <unistd.h>
        -:   33:
        -:   34:#include "aux.h"
        -:   35:#include "exec.h"
        -:   36:#include "history.h"
        -:   37:#include "jump.h"
        -:   38:#include "listing.h"
        -:   39:#include "navigation.h"
        -:   40:#include "readline.h"
        -:   41:#include "checks.h"
        -:   42:
        -:   43:#ifndef _NO_MAGIC
        -:   44:#include "mime.h"
        -:   45:#endif
        -:   46:
        -:   47:static int zstandard(char *in_file, char *out_file, char mode, char op);
        -:   48:
        -:   49:static int
function handle_iso called 2 returned 100% blocks executed 48%
        2:   50:handle_iso(char *file)
        -:   51:{
        2:   52:	int exit_status = EXIT_SUCCESS;
        -:   53:
        -:   54:	/* Use 7z to
        -:   55:	 * list (l)
        -:   56:	 * extract (e)
        -:   57:	 * extrat to dir (x -oDIR FILE)
        -:   58:	 * test (t) */
        -:   59:
        2:   60:	printf(_("%s[e]%sxtract %s[E]%sxtract-to-dir %s[l]%sist "
        2:   60-block  0
call    0 returned 2
call    1 returned 2
        -:   61:		 "%s[t]%stest %s[m]%sount %s[q]%suit\n"), BOLD, df_c, BOLD,
        -:   62:	    df_c, BOLD, df_c, BOLD, df_c, BOLD, df_c, BOLD, df_c);
        -:   63:
        2:   64:	char sel_op = 0;
        2:   65:	char *operation = (char *)NULL;
        2:   66:	while (!operation) {
unconditional  0 taken 2
        2:   66-block  0
branch  1 taken 2
branch  2 taken 0 (fallthrough)
        2:   67:		operation = rl_no_hist(_("Operation: "));
        2:   67-block  0
call    0 returned 2
call    1 returned 2
       2*:   68:		if (!operation)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   69:			continue;
    %%%%%:   69-block  0
unconditional  0 never executed
       2*:   70:		if (!*operation || operation[1] != '\0') {
        2:   70-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   70-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    #####:   71:			free(operation);
    #####:   72:			operation = (char *)NULL;
    #####:   73:			continue;
    %%%%%:   73-block  0
unconditional  0 never executed
        -:   74:		}
        -:   75:
        2:   76:		switch (*operation) {
        2:   76-block  0
branch  0 taken 2
branch  1 taken 0
branch  2 taken 0
        2:   77:		case 'e': /* fallthrough */
        -:   78:		case 'E': /* fallthrough */
        -:   79:		case 'l': /* fallthrough */
        -:   80:		case 'm': /* fallthrough */
        -:   81:		case 't':
        2:   82:			sel_op = *operation;
        2:   83:			free(operation);
        2:   84:			break;
        2:   84-block  0
unconditional  0 taken 2
        -:   85:
    #####:   86:		case 'q':
    #####:   87:			free(operation);
    #####:   88:			return EXIT_SUCCESS;
    %%%%%:   88-block  0
unconditional  0 never executed
        -:   89:
    #####:   90:		default:
    #####:   91:			free(operation);
    #####:   92:			operation = (char *)NULL;
    #####:   93:			break;
    %%%%%:   93-block  0
unconditional  0 never executed
        -:   94:		}
        -:   95:
        2:   96:		if (sel_op)
        2:   96-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   97:			break;
        2:   97-block  0
unconditional  0 taken 2
        -:   98:	}
        -:   99:
        2:  100:	char *ret = strchr(file, '\\');
        2:  101:	if (ret) {
        2:  101-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  102:		char *deq_file = dequote_str(file, 0);
    %%%%%:  102-block  0
call    0 never executed
    #####:  103:		if (deq_file) {
branch  0 never executed
branch  1 never executed
    #####:  104:			strcpy(file, deq_file);
    #####:  105:			free(deq_file);
    %%%%%:  105-block  0
unconditional  0 never executed
        -:  106:		}
    #####:  107:		ret = (char *)NULL;
    %%%%%:  107-block  0
unconditional  0 never executed
        -:  108:	}
        -:  109:
        2:  110:	switch (sel_op) {
        2:  110-block  0
branch  0 taken 0
branch  1 taken 0
branch  2 taken 1
branch  3 taken 1
branch  4 taken 0
branch  5 taken 0
        -:  111:
        -:  112:	/* ########## EXTRACT #######*/
    #####:  113:	case 'e': {
        -:  114:		/* 7z x -oDIR FILE (use FILE as DIR) */
    #####:  115:		char *o_option = (char *)xnmalloc(strlen(file) + 7, sizeof(char));
    %%%%%:  115-block  0
call    0 never executed
    #####:  116:		sprintf(o_option, "-o%s.dir", file);
        -:  117:
        -:  118:		/* Construct and execute cmd */
    #####:  119:		char *cmd[] = {"7z", "x", o_option, file, NULL};
    #####:  120:		if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  121:			exit_status = EXIT_FAILURE;
    %%%%%:  121-block  0
unconditional  0 never executed
        -:  122:
    #####:  123:		free(o_option);
    #####:  124:	} break;
    %%%%%:  124-block  0
unconditional  0 never executed
        -:  125:
        -:  126:	/* ########## EXTRACT TO DIR ####### */
    #####:  127:	case 'E': {
        -:  128:		/* 7z x -oDIR FILE (ask for DIR) */
    #####:  129:		char *ext_path = (char *)NULL;
    #####:  130:		while (!ext_path) {
    %%%%%:  130-block  0
unconditional  0 never executed
    %%%%%:  130-block  1
branch  1 never executed
branch  2 never executed
    #####:  131:			ext_path = rl_no_hist(_("Extraction path: "));
    %%%%%:  131-block  0
call    0 never executed
call    1 never executed
    #####:  132:			if (!ext_path)
branch  0 never executed
branch  1 never executed
    #####:  133:				continue;
    %%%%%:  133-block  0
unconditional  0 never executed
    #####:  134:			if (!*ext_path) {
    %%%%%:  134-block  0
branch  0 never executed
branch  1 never executed
    #####:  135:				free(ext_path);
    #####:  136:				ext_path = (char *)NULL;
    #####:  137:				continue;
    %%%%%:  137-block  0
unconditional  0 never executed
        -:  138:			}
        -:  139:		}
        -:  140:
    #####:  141:		char *o_option = (char *)xnmalloc(strlen(ext_path) + 3,
    %%%%%:  141-block  0
call    0 never executed
        -:  142:		    sizeof(char));
    #####:  143:		sprintf(o_option, "-o%s", ext_path);
        -:  144:
        -:  145:		/* Construct and execute cmd */
    #####:  146:		char *cmd[] = {"7z", "x", o_option, file, NULL};
    #####:  147:		if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  148:			exit_status = EXIT_FAILURE;
    %%%%%:  148-block  0
unconditional  0 never executed
        -:  149:
    #####:  150:		free(ext_path);
    #####:  151:		free(o_option);
    #####:  152:		ext_path = (char *)NULL;
    #####:  153:	} break;
    %%%%%:  153-block  0
unconditional  0 never executed
        -:  154:
        -:  155:	/* ########## LIST ####### */
        1:  156:	case 'l': {
        -:  157:		/* 7z l FILE */
        1:  158:		char *cmd[] = {"7z", "l", file, NULL};
        1:  159:		if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS)
        1:  159-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  160:			exit_status = EXIT_FAILURE;
    %%%%%:  160-block  0
unconditional  0 never executed
        1:  161:	} break;
        1:  161-block  0
unconditional  0 taken 1
        -:  162:
        -:  163:		/* ########## MOUNT ####### */
        -:  164:
        1:  165:	case 'm': {
        -:  166:		/* Create mountpoint */
        1:  167:		char *mountpoint = (char *)NULL;
        -:  168:
        1:  169:		if (xargs.stealth_mode == 1) {
        1:  169-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  170:			mountpoint = (char *)xnmalloc(strlen(file) + 19, sizeof(char));
    %%%%%:  170-block  0
call    0 never executed
    #####:  171:			sprintf(mountpoint, "/tmp/clifm-mounts/%s", file);
unconditional  0 never executed
        -:  172:		} else {
        1:  173:			mountpoint = (char *)xnmalloc(strlen(config_dir) + strlen(file) + 9, sizeof(char));
        1:  173-block  0
call    0 returned 1
        1:  174:			sprintf(mountpoint, "%s/mounts/%s", config_dir, file);
unconditional  0 taken 1
        -:  175:		}
        -:  176:
        1:  177:		char *dir_cmd[] = {"mkdir", "-pm700", mountpoint, NULL};
        1:  178:		if (launch_execve(dir_cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS) {
        1:  178-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  179:			free(mountpoint);
    #####:  180:			return EXIT_FAILURE;
    %%%%%:  180-block  0
unconditional  0 never executed
    %%%%%:  180-block  1
unconditional  1 never executed
        -:  181:		}
        -:  182:
        -:  183:		/* Construct and execute cmd */
        1:  184:		char *sudo = get_sudo_path();
        1:  184-block  0
call    0 returned 1
        1:  185:		if (!sudo) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  186:			free(mountpoint);
    #####:  187:			return EXIT_FAILURE;
    %%%%%:  187-block  0
unconditional  0 never executed
        -:  188:		}
        -:  189:		
        1:  190:		char *cmd[] = {sudo, "mount", "-o", "loop", file,
        -:  191:		    mountpoint, NULL};
        1:  192:		if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS) {
        1:  192-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  193:			free(mountpoint);
    #####:  194:			free(sudo);
    #####:  195:			return EXIT_FAILURE;
    %%%%%:  195-block  0
unconditional  0 never executed
        -:  196:		}
        1:  197:		free(sudo);
        -:  198:
        -:  199:		/* List content of mountpoint */
        1:  200:		if (xchdir(mountpoint, SET_TITLE) == -1) {
        1:  200-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  201:			fprintf(stderr, "archiver: %s: %s\n", mountpoint,
call    0 never executed
    #####:  202:			    strerror(errno));
    %%%%%:  202-block  0
call    0 never executed
    #####:  203:			free(mountpoint);
    #####:  204:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  205:		}
        -:  206:
        1:  207:		free(ws[cur_ws].path);
        1:  208:		ws[cur_ws].path = savestring(mountpoint, strlen(mountpoint));
        1:  208-block  0
call    0 returned 1
        1:  209:		add_to_jumpdb(ws[cur_ws].path);
call    0 returned 1
        -:  210:
        1:  211:		if (cd_lists_on_the_fly) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  212:			free_dirlist();
        1:  212-block  0
call    0 returned 1
        1:  213:			if (list_dir() != EXIT_SUCCESS)
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  214:				exit_status = EXIT_FAILURE;
    %%%%%:  214-block  0
unconditional  0 never executed
        1:  215:			add_to_dirhist(ws[cur_ws].path);
        1:  215-block  0
call    0 returned 1
unconditional  1 taken 1
        -:  216:		} else {
    #####:  217:			printf("%s: Successfully mounted on %s\n", file, mountpoint);
    %%%%%:  217-block  0
call    0 never executed
unconditional  1 never executed
        -:  218:		}
        -:  219:
        1:  220:		free(mountpoint);
        1:  221:	} break;
        1:  221-block  0
unconditional  0 taken 1
        -:  222:
        -:  223:	/* ########## TEST #######*/
    #####:  224:	case 't': {
        -:  225:		/* 7z t FILE */
    #####:  226:		char *cmd[] = {"7z", "t", file, NULL};
    #####:  227:		if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS)
    %%%%%:  227-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  228:			exit_status = EXIT_FAILURE;
    %%%%%:  228-block  0
unconditional  0 never executed
    #####:  229:	} break;
    %%%%%:  229-block  0
unconditional  0 never executed
        -:  230:	}
        -:  231:
        2:  232:	return exit_status;
        2:  232-block  0
unconditional  0 taken 2
        -:  233:}
        -:  234:
        -:  235:static int
function create_iso called 0 returned 0% blocks executed 0%
    #####:  236:create_iso(char *in_file, char *out_file)
        -:  237:{
    #####:  238:	int exit_status = EXIT_SUCCESS;
        -:  239:	struct stat file_attrib;
    #####:  240:	if (lstat(in_file, &file_attrib) == -1) {
    %%%%%:  240-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  241:		fprintf(stderr, "archiver: %s: %s\n", in_file, strerror(errno));
    %%%%%:  241-block  0
call    0 never executed
call    1 never executed
    #####:  242:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  243:	}
        -:  244:
        -:  245:	/* If IN_FILE is a directory */
    #####:  246:	if ((file_attrib.st_mode & S_IFMT) == S_IFDIR) {
    %%%%%:  246-block  0
branch  0 never executed
branch  1 never executed
    #####:  247:		char *cmd[] = {"mkisofs", "-R", "-o", out_file, in_file, NULL};
    #####:  248:		if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS)
    %%%%%:  248-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  249:			exit_status = EXIT_FAILURE;
    %%%%%:  249-block  0
unconditional  0 never executed
        -:  250:	}
        -:  251:
        -:  252:	/* If IN_FILE is a block device */
    #####:  253:	else if ((file_attrib.st_mode & S_IFMT) == S_IFBLK) {
    %%%%%:  253-block  0
branch  0 never executed
branch  1 never executed
    #####:  254:		char *if_option = (char *)xnmalloc(strlen(in_file) + 4, sizeof(char));
    %%%%%:  254-block  0
call    0 never executed
    #####:  255:		sprintf(if_option, "if=%s", in_file);
        -:  256:
    #####:  257:		char *of_option = (char *)xnmalloc(strlen(out_file) + 4, sizeof(char));
call    0 never executed
    #####:  258:		sprintf(of_option, "of=%s", out_file);
        -:  259:
    #####:  260:		char *sudo = get_sudo_path();
call    0 never executed
    #####:  261:		if (!sudo) {
branch  0 never executed
branch  1 never executed
    #####:  262:			free(if_option);
    #####:  263:			free(of_option);
    #####:  264:			return EXIT_FAILURE;
    %%%%%:  264-block  0
unconditional  0 never executed
        -:  265:		}
        -:  266:
    #####:  267:		char *cmd[] = {sudo, "dd", if_option, of_option, "bs=64k",
        -:  268:		    "conv=noerror,sync", "status=progress", NULL};
    #####:  269:		if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS)
    %%%%%:  269-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  270:			exit_status = EXIT_FAILURE;
    %%%%%:  270-block  0
unconditional  0 never executed
        -:  271:
    #####:  272:		free(sudo);
    #####:  273:		free(if_option);
    #####:  274:		free(of_option);
    %%%%%:  274-block  0
unconditional  0 never executed
        -:  275:	}
        -:  276:
        -:  277:	else {
    #####:  278:		fprintf(stderr, "archiver: %s: Invalid file format\nFile "
    %%%%%:  278-block  0
call    0 never executed
        -:  279:				"should be either a directory or a block device\n",
        -:  280:				in_file);
    #####:  281:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  282:	}
        -:  283:
    #####:  284:	return exit_status;
    %%%%%:  284-block  0
unconditional  0 never executed
        -:  285:}
        -:  286:
        -:  287:/* Run the 'file' command on FILE and look for "ISO 9660" and
        -:  288: * string in its output. Returns zero if found, one if not, and -1
        -:  289: * in case of error */
        -:  290:static int
function check_iso called 5 returned 100% blocks executed 62%
        5:  291:check_iso(char *file)
        -:  292:{
        5:  293:	if (!file || !*file) {
        5:  293-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5:  293-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 5
    #####:  294:		fputs(_("Error querying file type\n"), stderr);
    %%%%%:  294-block  0
call    0 never executed
call    1 never executed
    #####:  295:		return -1;
unconditional  0 never executed
        -:  296:	}
        -:  297:
        5:  298:	int is_iso = 0;
        -:  299:
        -:  300:#ifndef _NO_MAGIC
        5:  301:	char *t = xmagic(file, TEXT_DESC);
        5:  301-block  0
call    0 returned 5
        5:  302:	if (!t) {
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:  303:		fputs(_("Error querying file type\n"), stderr);
    %%%%%:  303-block  0
call    0 never executed
call    1 never executed
    #####:  304:		return (-1);
unconditional  0 never executed
        -:  305:	}
        -:  306:
        5:  307:	char *ret = strstr(t, "ISO 9660");
        5:  308:	if (ret)
        5:  308-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 3
        2:  309:		is_iso = 1;
        2:  309-block  0
unconditional  0 taken 2
        -:  310:
        5:  311:	free(t);
        -:  312:#else
        -:  313:	char iso_tmp_file[PATH_MAX] = "";
        -:  314:	char *rand_ext = gen_rand_str(6);
        -:  315:	if (!rand_ext)
        -:  316:		return (-1);
        -:  317:
        -:  318:	if (xargs.stealth_mode == 1)
        -:  319:		sprintf(iso_tmp_file, "/tmp/clifm-archiver.%s", rand_ext);
        -:  320:	else
        -:  321:		sprintf(iso_tmp_file, "%s/archiver.%s", tmp_dir, rand_ext);
        -:  322:	free(rand_ext);
        -:  323:
        -:  324:	int fd;
        -:  325:	FILE *fp = open_fstream_w(iso_tmp_file, &fd);
        -:  326:	if (!fp) {
        -:  327:		fprintf(stderr, "%s: %s: %s\n", PROGRAM_NAME, iso_tmp_file,
        -:  328:				strerror(errno));
        -:  329:		return (-1);
        -:  330:	}
        -:  331:
        -:  332:	FILE *fpp = fopen("/dev/null", "w");
        -:  333:	if (!fpp) {
        -:  334:		fprintf(stderr, "%s: /dev/null: %s\n", PROGRAM_NAME, strerror(errno));
        -:  335:		close_fstream(fp, fd);
        -:  336:		return (-1);
        -:  337:	}
        -:  338:
        -:  339:	int stdout_bk = dup(STDOUT_FILENO); /* Store original stdout */
        -:  340:	int stderr_bk = dup(STDERR_FILENO); /* Store original stderr */
        -:  341:
        -:  342:	/* Redirect stdout to the desired file */
        -:  343:	if (dup2(fileno(fp), STDOUT_FILENO) == -1) {
        -:  344:		fprintf(stderr, "%s: %s\n", PROGRAM_NAME, strerror(errno));
        -:  345:		close_fstream(fp, fd);
        -:  346:		fclose(fpp);
        -:  347:		return (-1);
        -:  348:	}
        -:  349:
        -:  350:	/* Redirect stderr to /dev/null */
        -:  351:	if (dup2(fileno(fpp), STDERR_FILENO) == -1) {
        -:  352:		fprintf(stderr, "%s: %s\n", PROGRAM_NAME, strerror(errno));
        -:  353:		close_fstream(fp, fd);
        -:  354:		fclose(fpp);
        -:  355:		return (-1);
        -:  356:	}
        -:  357:
        -:  358:	close_fstream(fp, fd);
        -:  359:	fclose(fpp);
        -:  360:
        -:  361:	char *cmd[] = {"file", "-b", file, NULL};
        -:  362:	int retval = launch_execve(cmd, FOREGROUND, E_NOFLAG);
        -:  363:
        -:  364:	dup2(stdout_bk, STDOUT_FILENO); /* Restore original stdout */
        -:  365:	dup2(stderr_bk, STDERR_FILENO); /* Restore original stderr */
        -:  366:	close(stdout_bk);
        -:  367:	close(stderr_bk);
        -:  368:
        -:  369:	if (retval != EXIT_SUCCESS)
        -:  370:		return (-1);
        -:  371:
        -:  372:	if (access(iso_tmp_file, F_OK) == 0) {
        -:  373:		fp = open_fstream_r(iso_tmp_file, &fd);
        -:  374:		if (fp) {
        -:  375:			char line[255] = "";
        -:  376:			if (fgets(line, (int)sizeof(line), fp) == NULL) {
        -:  377:				close_fstream(fp, fd);
        -:  378:				unlink(iso_tmp_file);
        -:  379:				return EXIT_FAILURE;
        -:  380:			}
        -:  381:			char *ret = strstr(line, "ISO 9660");
        -:  382:			if (ret)
        -:  383:				is_iso = 1;
        -:  384:			close_fstream(fp, fd);
        -:  385:		}
        -:  386:		unlink(iso_tmp_file);
        -:  387:	}
        -:  388:#endif /* !_NO_MAGIC */
        -:  389:
        5:  390:	if (is_iso)
        5:  390-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 3
        2:  391:		return EXIT_SUCCESS;
        2:  391-block  0
unconditional  0 taken 2
        -:  392:
        3:  393:	return EXIT_FAILURE;
        3:  393-block  0
unconditional  0 taken 3
        -:  394:}
        -:  395:
        -:  396:/* Run the 'file' command on FILE and look for "archive" and
        -:  397: * "compressed" strings in its output. Returns zero if compressed,
        -:  398: * one if not, and -1 in case of error.
        -:  399: * test_iso is used to determine if ISO files should be checked as
        -:  400: * well: this is the case when called from open_function() or
        -:  401: * mime_open(), since both need to check compressed and ISOs as
        -:  402: * well (and there is no need to run two functions (is_compressed and
        -:  403: * check_iso), when we can run just one) */
        -:  404:int
function is_compressed called 18 returned 100% blocks executed 67%
       18:  405:is_compressed(char *file, int test_iso)
        -:  406:{
       18:  407:	if (!file || !*file) {
       18:  407-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18:  407-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 18
    #####:  408:		fputs(_("Error querying file type\n"), stderr);
    %%%%%:  408-block  0
call    0 never executed
call    1 never executed
    #####:  409:		return (-1);
unconditional  0 never executed
        -:  410:	}
        -:  411:
       18:  412:	int compressed = 0;
        -:  413:
        -:  414:#ifndef _NO_MAGIC
       18:  415:	char *t = xmagic(file, TEXT_DESC);
       18:  415-block  0
call    0 returned 18
       18:  416:	if (!t) {
branch  0 taken 0 (fallthrough)
branch  1 taken 18
    #####:  417:		fputs(_("Error querying file type\n"), stderr);
    %%%%%:  417-block  0
call    0 never executed
call    1 never executed
    #####:  418:		return (-1);
unconditional  0 never executed
        -:  419:	}
        -:  420:
       18:  421:	char *ret = strstr(t, "archive");
       18:  422:	if (ret) {
       18:  422-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 18
    #####:  423:		compressed = 1;
    %%%%%:  423-block  0
unconditional  0 never executed
        -:  424:	} else {
       18:  425:		ret = strstr(t, "compressed");
       18:  426:		if (ret) {
       18:  426-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 13
        5:  427:			compressed = 1;
        5:  427-block  0
unconditional  0 taken 5
       13:  428:		} else if (test_iso) {
       13:  428-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 0
       13:  429:			ret = strstr(t, "ISO 9660");
       13:  430:			if (ret)
       13:  430-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 9
        4:  431:				compressed = 1;
        4:  431-block  0
unconditional  0 taken 4
        -:  432:		}
        -:  433:	}
        -:  434:
       18:  435:	free(t);
        -:  436:#else
        -:  437:	char *rand_ext = gen_rand_str(6);
        -:  438:	if (!rand_ext)
        -:  439:		return (-1);
        -:  440:
        -:  441:	char archiver_tmp_file[PATH_MAX];
        -:  442:	if (xargs.stealth_mode == 1)
        -:  443:		sprintf(archiver_tmp_file, "/tmp/clifm-archiver.%s", rand_ext);
        -:  444:	else
        -:  445:		sprintf(archiver_tmp_file, "%s/archiver.%s", tmp_dir, rand_ext);
        -:  446:	free(rand_ext);
        -:  447:
        -:  448:	int fd;
        -:  449:	FILE *fp = open_fstream_w(archiver_tmp_file, &fd);
        -:  450:	if (!fp) {
        -:  451:		fprintf(stderr, "%s: %s: %s\n", PROGRAM_NAME,
        -:  452:		    archiver_tmp_file, strerror(errno));
        -:  453:		return (-1);
        -:  454:	}
        -:  455:
        -:  456:/*	if (access(archiver_tmp_file, F_OK) == 0)
        -:  457:		unlinkat(fd, archiver_tmp_file, 0); */
        -:  458:
        -:  459:	FILE *fpp = fopen("/dev/null", "w");
        -:  460:	if (!fpp) {
        -:  461:		fprintf(stderr, "%s: /dev/null: %s\n", PROGRAM_NAME, strerror(errno));
        -:  462:		close_fstream(fp, fd);
        -:  463:		return -1;
        -:  464:	}
        -:  465:
        -:  466:	int stdout_bk = dup(STDOUT_FILENO); /* Store original stdout */
        -:  467:	int stderr_bk = dup(STDERR_FILENO); /* Store original stderr */
        -:  468:
        -:  469:	/* Redirect stdout to the desired file */
        -:  470:	if (dup2(fileno(fp), STDOUT_FILENO) == -1) {
        -:  471:		fprintf(stderr, "%s: %s\n", PROGRAM_NAME, strerror(errno));
        -:  472:		close_fstream(fp, fd);
        -:  473:		fclose(fpp);
        -:  474:		return (-1);
        -:  475:	}
        -:  476:
        -:  477:	/* Redirect stderr to /dev/null */
        -:  478:	if (dup2(fileno(fpp), STDERR_FILENO) == -1) {
        -:  479:		fprintf(stderr, "%s: %s\n", PROGRAM_NAME, strerror(errno));
        -:  480:		close_fstream(fp, fd);
        -:  481:		fclose(fpp);
        -:  482:		return -1;
        -:  483:	}
        -:  484:
        -:  485:	close_fstream(fp, fd);
        -:  486:	fclose(fpp);
        -:  487:
        -:  488:	char *cmd[] = {"file", "-b", file, NULL};
        -:  489:	int retval = launch_execve(cmd, FOREGROUND, E_NOFLAG);
        -:  490:
        -:  491:	dup2(stdout_bk, STDOUT_FILENO); /* Restore original stdout */
        -:  492:	dup2(stderr_bk, STDERR_FILENO); /* Restore original stderr */
        -:  493:	close(stdout_bk);
        -:  494:	close(stderr_bk);
        -:  495:
        -:  496:	if (retval != EXIT_SUCCESS)
        -:  497:		return (-1);
        -:  498:
        -:  499:	if (access(archiver_tmp_file, F_OK) == 0) {
        -:  500:		fp = open_fstream_r(archiver_tmp_file, &fd);
        -:  501:		if (fp) {
        -:  502:			char line[255];
        -:  503:			if (fgets(line, (int)sizeof(line), fp) == NULL) {
        -:  504:				close_fstream(fp, fd);
        -:  505:				unlink(archiver_tmp_file);
        -:  506:				return EXIT_FAILURE;
        -:  507:			}
        -:  508:			char *ret = strstr(line, "archive");
        -:  509:
        -:  510:			if (ret) {
        -:  511:				compressed = 1;
        -:  512:			} else {
        -:  513:				ret = strstr(line, "compressed");
        -:  514:				if (ret) {
        -:  515:					compressed = 1;
        -:  516:				} else if (test_iso) {
        -:  517:					ret = strstr(line, "ISO 9660");
        -:  518:					if (ret)
        -:  519:						compressed = 1;
        -:  520:				}
        -:  521:			}
        -:  522:
        -:  523:			close_fstream(fp, fd);
        -:  524:		}
        -:  525:
        -:  526:		unlink(archiver_tmp_file);
        -:  527:	}
        -:  528:#endif /* !_NO_MAGIC */
        -:  529:
       18:  530:	if (compressed)
       18:  530-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 9
        9:  531:		return EXIT_SUCCESS;
        9:  531-block  0
unconditional  0 taken 9
        -:  532:
        9:  533:	return EXIT_FAILURE;
        9:  533-block  0
unconditional  0 taken 9
        -:  534:}
        -:  535:
        -:  536:/* Handle archives and/or compressed files (ARGS) according to MODE:
        -:  537: * 'c' for archiving/compression, and 'd' for dearchiving/decompression
        -:  538: * (including listing, extracting, repacking, and mounting). Returns
        -:  539: * zero on success and one on error. Depends on 'zstd' for Zdtandard
        -:  540: * files 'atool' and 'archivemount' for the remaining types. */
        -:  541:int
function archiver called 7 returned 100% blocks executed 40%
        7:  542:archiver(char **args, char mode)
        -:  543:{
        -:  544:	size_t i;
        7:  545:	int exit_status = EXIT_SUCCESS;
        -:  546:
        7:  547:	if (!args[1])
        7:  547-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    #####:  548:		return EXIT_FAILURE;
    %%%%%:  548-block  0
unconditional  0 never executed
        -:  549:
        7:  550:	if (mode == 'c') {
        7:  550-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 5
        -:  551:
        -:  552:			/* ##################################
        -:  553:			 * #        1 - COMPRESSION         #
        -:  554:			 * ##################################*/
        -:  555:
        -:  556:		/* Get archive name/type */
        -:  557:
        2:  558:		puts(_("Use extension to specify archive/compression type "
        2:  558-block  0
call    0 returned 2
call    1 returned 2
        -:  559:		       "(defaults to .tar.gz)\nExample: myarchive.xz"));
        2:  560:		char *name = (char *)NULL;
        4:  561:		while (!name) {
unconditional  0 taken 2
        4:  561-block  0
branch  1 taken 2
branch  2 taken 2 (fallthrough)
        2:  562:			name = rl_no_hist(_("File name ('q' to quit): "));
        2:  562-block  0
call    0 returned 2
call    1 returned 2
       2*:  563:			if (!name)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  564:				continue;
    %%%%%:  564-block  0
unconditional  0 never executed
       2*:  565:			if (!*name) {
        2:  565-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  566:				free(name);
    #####:  567:				name = (char *)NULL;
    #####:  568:				continue;
    %%%%%:  568-block  0
unconditional  0 never executed
        -:  569:			}
        -:  570:
       2*:  571:			if (*name == 'q' && name[1] == '\0') {
        2:  571-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:  571-block  1
branch  2 never executed
branch  3 never executed
    #####:  572:				free(name);
    #####:  573:				return EXIT_SUCCESS;
    %%%%%:  573-block  0
unconditional  0 never executed
        -:  574:			}
        -:  575:
        2:  576:			char *dot = strrchr(name, '.');
        -:  577:			/* If no extension, add the default */
        2:  578:			if (!dot) {
        2:  578-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  579:				size_t name_len = strlen(name);
        2:  580:				char *t = (char *)xnmalloc(name_len + 1, sizeof(char));
        2:  580-block  0
call    0 returned 2
        2:  581:				strcpy(t, name);
        2:  582:				name = (char *)xrealloc(name, (name_len + 8) * sizeof(char));
call    0 returned 2
        2:  583:				sprintf(name, "%s.tar.gz", t);
        2:  584:				free(t);
unconditional  0 taken 2
    #####:  585:			} else if (dot == name) { /* Dot is first char */
    %%%%%:  585-block  0
branch  0 never executed
branch  1 never executed
    #####:  586:				fprintf(stderr, _("Invalid file name\n"));
    %%%%%:  586-block  0
call    0 never executed
call    1 never executed
    #####:  587:				free(name);
    #####:  588:				name = (char *)NULL;
unconditional  0 never executed
        -:  589:			}
        -:  590:		}
        -:  591:
        -:  592:				/* ##########################
        -:  593:				 * #        ZSTANDARD       #
        -:  594:				 * ########################## */
        -:  595:
        2:  596:		char *ret = strrchr(name, '.');
        2:  597:		if (strcmp(ret, ".zst") == 0) {
        2:  597-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:  598:			/* Multiple files */
    #####:  599:			if (args[2]) {
    %%%%%:  599-block  0
branch  0 never executed
branch  1 never executed
    #####:  600:				printf(_("\n%sNOTE%s: Zstandard does not support "
    %%%%%:  600-block  0
call    0 never executed
call    1 never executed
        -:  601:					 "compression of multiple files into one single "
        -:  602:					 "compressed file. Files will be compressed rather "
        -:  603:					 "into multiple compressed files using original "
        -:  604:					 "file names\n"), BOLD, df_c);
        -:  605:
    #####:  606:				for (i = 1; args[i]; i++) {
unconditional  0 never executed
    %%%%%:  606-block  0
unconditional  1 never executed
    %%%%%:  606-block  1
branch  2 never executed
branch  3 never executed
    #####:  607:					if (zstandard(args[i], NULL, 'c', 0) != EXIT_SUCCESS)
    %%%%%:  607-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  608:						exit_status = EXIT_FAILURE;
    %%%%%:  608-block  0
unconditional  0 never executed
        -:  609:				}
        -:  610:			}
        -:  611:
        -:  612:			/* Only one file */
        -:  613:			else
    #####:  614:				exit_status = zstandard(args[1], name, 'c', 0);
    %%%%%:  614-block  0
call    0 never executed
unconditional  1 never executed
    #####:  615:			free(name);
    #####:  616:			return exit_status;
    %%%%%:  616-block  0
unconditional  0 never executed
        -:  617:		}
        -:  618:
        -:  619:				/* ##########################
        -:  620:				 * #        ISO 9660        #
        -:  621:				 * ########################## */
        -:  622:
        2:  623:		if (strcmp(ret, ".iso") == 0) {
        2:  623-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  624:			exit_status = create_iso(args[1], name);
    %%%%%:  624-block  0
call    0 never executed
    #####:  625:			free(name);
    #####:  626:			return exit_status;
unconditional  0 never executed
        -:  627:		}
        -:  628:
        -:  629:				/* ##########################
        -:  630:				 * #          OTHERS        #
        -:  631:				 * ########################## */
        -:  632:
        -:  633:		/* Escape the string, if needed */
        2:  634:		char *esc_name = escape_str(name);
        2:  634-block  0
call    0 returned 2
        2:  635:		if (!esc_name) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  636:			fprintf(stderr, _("archiver: %s: Error escaping string\n"),
    %%%%%:  636-block  0
call    0 never executed
call    1 never executed
        -:  637:					name);
    #####:  638:			free(name);
    #####:  639:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  640:		}
        -:  641:
        2:  642:		free(name);
        -:  643:
        -:  644:		/* Construct the command */
        2:  645:		char *cmd = (char *)NULL;
        2:  646:		char *ext_ok = strrchr(esc_name, '.');
       2*:  647:		size_t cmd_len = strlen(esc_name) + 10 + (!ext_ok ? 8 : 0);
        2:  647-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:  647-block  1
unconditional  2 never executed
        2:  647-block  2
unconditional  3 taken 2
        2:  648:		cmd = (char *)xnmalloc(cmd_len, sizeof(char));
        2:  648-block  0
call    0 returned 2
        -:  649:		/* If name has no extension, add the default */
       2*:  650:		sprintf(cmd, "atool -a %s%s", esc_name, !ext_ok ? ".tar.gz" : "");
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:  650-block  0
unconditional  2 never executed
        2:  650-block  1
unconditional  3 taken 2
        -:  651:
        7:  652:		for (i = 1; args[i]; i++) {
        2:  652-block  0
unconditional  0 taken 2
        5:  652-block  1
unconditional  1 taken 5
        7:  652-block  2
branch  2 taken 5
branch  3 taken 2 (fallthrough)
        5:  653:			char *_name = (char *)NULL;
        5:  654:			if (!strchr(args[i], '\\')) {
        5:  654-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5:  655:				_name = escape_str(args[i]);
        5:  655-block  0
call    0 returned 5
       5*:  656:				if (!_name) {
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:  657:					fprintf(stderr, _("%s: Error escaping file name\n"), args[i]);
    %%%%%:  657-block  0
call    0 never executed
call    1 never executed
    #####:  658:					continue;
unconditional  0 never executed
        -:  659:				}
        -:  660:			}
       5*:  661:			cmd_len += strlen(_name ? _name : args[i]) + 1;
        5:  661-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    %%%%%:  661-block  1
unconditional  2 never executed
        5:  661-block  2
unconditional  3 taken 5
        5:  662:			cmd = (char *)xrealloc(cmd, (cmd_len + 1) * sizeof(char));
        5:  662-block  0
call    0 returned 5
        5:  663:			strcat(cmd, " ");
       5*:  664:			strcat(cmd, _name ? _name : args[i]);
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    %%%%%:  664-block  0
unconditional  2 never executed
        5:  664-block  1
unconditional  3 taken 5
        5:  665:			free(_name);
        5:  665-block  0
unconditional  0 taken 5
        -:  666:		}
        -:  667:
        2:  668:		if (launch_execle(cmd) != EXIT_SUCCESS)
        2:  668-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:  669:			exit_status = EXIT_FAILURE;
    %%%%%:  669-block  0
unconditional  0 never executed
        -:  670:
        2:  671:		free(cmd);
        2:  672:		free(esc_name);
        2:  673:		return exit_status;
        2:  673-block  0
unconditional  0 taken 2
        -:  674:	}
        -:  675:
        -:  676:	/* mode == 'd' */
        -:  677:
        -:  678:			/* ##################################
        -:  679:			 * #      2 - DECOMPRESSION         #
        -:  680:			 * ##################################*/
        -:  681:
        -:  682:	/* Exit if at least one non-compressed file is found */
       10:  683:	for (i = 1; args[i]; i++) {
        5:  683-block  0
unconditional  0 taken 5
        5:  683-block  1
unconditional  1 taken 5
       10:  683-block  2
branch  2 taken 5
branch  3 taken 5 (fallthrough)
        5:  684:		char *deq = (char *)NULL;
        5:  685:		if (strchr(args[i], '\\')) {
        5:  685-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:  686:			deq = dequote_str(args[i], 0);
    %%%%%:  686-block  0
call    0 never executed
    #####:  687:			strcpy(args[i], deq);
    #####:  688:			free(deq);
unconditional  0 never executed
        -:  689:		}
        -:  690:
        5:  691:		if (is_compressed(args[i], 1) != 0) {
        5:  691-block  0
call    0 returned 5
branch  1 taken 0 (fallthrough)
branch  2 taken 5
    #####:  692:			fprintf(stderr, _("archiver: %s: Not an archive/compressed file\n"),
call    0 never executed
    #####:  693:					args[i]);
    %%%%%:  693-block  0
call    0 never executed
    #####:  694:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  695:		}
        -:  696:	}
        -:  697:
        -:  698:				/* ##########################
        -:  699:				 * #        ISO 9660        #
        -:  700:				 * ########################## */
        -:  701:
        5:  702:	char *ret = strrchr(args[1], '.');
        5:  703:	if ((ret && strcmp(ret, ".iso") == 0) || check_iso(args[1]) == 0)
        5:  703-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5:  703-block  1
branch  2 taken 5 (fallthrough)
branch  3 taken 0
        5:  703-block  2
call    4 returned 5
branch  5 taken 2 (fallthrough)
branch  6 taken 3
        2:  704:		return handle_iso(args[1]);
        2:  704-block  0
call    0 returned 2
unconditional  1 taken 2
        -:  705:
        -:  706:				/* ##########################
        -:  707:				 * #        ZSTANDARD       #
        -:  708:				 * ########################## */
        -:  709:
        -:  710:	/* Check if we have at least one Zstandard file */
        -:  711:
        3:  712:	int zst_index = -1;
        3:  713:	size_t files_num = 0;
        -:  714:
        6:  715:	for (i = 1; args[i]; i++) {
        3:  715-block  0
unconditional  0 taken 3
        3:  715-block  1
unconditional  1 taken 3
        6:  715-block  2
branch  2 taken 3
branch  3 taken 3 (fallthrough)
        3:  716:		files_num++;
        3:  717:		if (args[i][strlen(args[i]) - 1] == 't') {
        3:  717-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  718:			char *retval = strrchr(args[i], '.');
    #####:  719:			if (retval) {
    %%%%%:  719-block  0
branch  0 never executed
branch  1 never executed
    #####:  720:				if (strcmp(retval, ".zst") == 0)
    %%%%%:  720-block  0
branch  0 never executed
branch  1 never executed
    #####:  721:					zst_index = (int)i;
    %%%%%:  721-block  0
unconditional  0 never executed
        -:  722:			}
        -:  723:		}
        -:  724:	}
        -:  725:
        3:  726:	if (zst_index != -1) {
        3:  726-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  727:		/* Multiple files */
    #####:  728:		if (files_num > 1) {
    %%%%%:  728-block  0
branch  0 never executed
branch  1 never executed
    #####:  729:			printf(_("%sNOTE%s: Using Zstandard\n"), BOLD, df_c);
    %%%%%:  729-block  0
call    0 never executed
call    1 never executed
    #####:  730:			printf(_("%s[e]%sxtract %s[t]%sest %s[i]%snfo %s[q]%suit\n"),
call    0 never executed
call    1 never executed
        -:  731:			    BOLD, df_c, BOLD, df_c, BOLD, df_c, BOLD, df_c);
        -:  732:
    #####:  733:			char *operation = (char *)NULL;
    #####:  734:			char sel_op = 0;
    #####:  735:			while (!operation) {
unconditional  0 never executed
    %%%%%:  735-block  0
branch  1 never executed
branch  2 never executed
    #####:  736:				operation = rl_no_hist(_("Operation: "));
    %%%%%:  736-block  0
call    0 never executed
call    1 never executed
    #####:  737:				if (!operation)
branch  0 never executed
branch  1 never executed
    #####:  738:					continue;
    %%%%%:  738-block  0
unconditional  0 never executed
    #####:  739:				if (!*operation || operation[1] != '\0') {
    %%%%%:  739-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  739-block  1
branch  2 never executed
branch  3 never executed
    #####:  740:					free(operation);
    #####:  741:					operation = (char *)NULL;
    #####:  742:					continue;
    %%%%%:  742-block  0
unconditional  0 never executed
        -:  743:				}
        -:  744:
    #####:  745:				switch (*operation) {
    %%%%%:  745-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
    #####:  746:				case 'e': /* fallthrough */
        -:  747:				case 't': /* fallthrough */
        -:  748:				case 'i':
    #####:  749:					sel_op = *operation;
    #####:  750:					break;
    %%%%%:  750-block  0
unconditional  0 never executed
        -:  751:
    #####:  752:				case 'q':
    #####:  753:					free(operation);
    #####:  754:					return EXIT_SUCCESS;
    %%%%%:  754-block  0
unconditional  0 never executed
        -:  755:
    #####:  756:				default:
    #####:  757:					free(operation);
    #####:  758:					operation = (char *)NULL;
    #####:  759:					break;
    %%%%%:  759-block  0
unconditional  0 never executed
        -:  760:				}
        -:  761:			}
        -:  762:
    #####:  763:			for (i = 1; args[i]; i++) {
    %%%%%:  763-block  0
unconditional  0 never executed
    %%%%%:  763-block  1
unconditional  1 never executed
    %%%%%:  763-block  2
branch  2 never executed
branch  3 never executed
    #####:  764:				if (zstandard(args[i], NULL, 'd', sel_op) != EXIT_SUCCESS)
    %%%%%:  764-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  765:					exit_status = EXIT_FAILURE;
    %%%%%:  765-block  0
unconditional  0 never executed
        -:  766:			}
        -:  767:
    #####:  768:			free(operation);
    #####:  769:			return exit_status;
    %%%%%:  769-block  0
unconditional  0 never executed
        -:  770:		}
        -:  771:
        -:  772:		/* Just one file */
        -:  773:		else {
    #####:  774:			if (zstandard(args[zst_index], NULL, 'd', 0) != EXIT_SUCCESS)
    %%%%%:  774-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  775:				exit_status = EXIT_FAILURE;
    %%%%%:  775-block  0
unconditional  0 never executed
    #####:  776:			return exit_status;
    %%%%%:  776-block  0
unconditional  0 never executed
        -:  777:		}
        -:  778:	}
        -:  779:
        -:  780:				/* ##########################
        -:  781:				 * #          OTHERS        #
        -:  782:				 * ########################## */
        -:  783:
        -:  784:	/* 1) Get operation to be performed
        -:  785:	 * ################################ */
        -:  786:
        3:  787:	printf(_("%s[e]%sxtract %s[E]%sxtract-to-dir %s[l]%sist "
        3:  787-block  0
call    0 returned 3
call    1 returned 3
        -:  788:		 "%s[m]%sount %s[r]%sepack %s[q]%suit\n"), BOLD, df_c, BOLD,
        -:  789:	    df_c, BOLD, df_c, BOLD, df_c, BOLD, df_c, BOLD, df_c);
        -:  790:
        3:  791:	char *operation = (char *)NULL;
        3:  792:	char sel_op = 0;
        -:  793:
        3:  794:	while (!operation) {
unconditional  0 taken 3
        3:  794-block  0
branch  1 taken 3
branch  2 taken 0 (fallthrough)
        3:  795:		operation = rl_no_hist(_("Operation: "));
        3:  795-block  0
call    0 returned 3
call    1 returned 3
       3*:  796:		if (!operation)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  797:			continue;
    %%%%%:  797-block  0
unconditional  0 never executed
       3*:  798:		if (!*operation || operation[1] != '\0') {
        3:  798-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  798-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 3
    #####:  799:			free(operation);
    #####:  800:			operation = (char *)NULL;
    #####:  801:			continue;
    %%%%%:  801-block  0
unconditional  0 never executed
        -:  802:		}
        -:  803:
        3:  804:		switch (*operation) {
        3:  804-block  0
branch  0 taken 2
branch  1 taken 1
branch  2 taken 0
        2:  805:		case 'e': /* fallthrough */
        -:  806:		case 'E': /* fallthrough */
        -:  807:		case 'l': /* fallthrough */
        -:  808:		case 'm': /* fallthrough */
        -:  809:		case 'r':
        2:  810:			sel_op = *operation;
        2:  811:			free(operation);
        2:  812:			break;
        2:  812-block  0
unconditional  0 taken 2
        -:  813:
        1:  814:		case 'q':
        1:  815:			free(operation);
        1:  816:			return EXIT_SUCCESS;
        1:  816-block  0
unconditional  0 taken 1
        -:  817:
    #####:  818:		default:
    #####:  819:			free(operation);
    #####:  820:			operation = (char *)NULL;
    #####:  821:			break;
    %%%%%:  821-block  0
unconditional  0 never executed
        -:  822:		}
        -:  823:
        2:  824:		if (sel_op)
        2:  824-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  825:			break;
        2:  825-block  0
unconditional  0 taken 2
        -:  826:	}
        -:  827:
        -:  828:	/* 2) Prepare files based on operation
        -:  829:	 * #################################### */
        -:  830:
        2:  831:	char *dec_files = (char *)NULL;
        -:  832:
        2:  833:	switch (sel_op) {
        2:  833-block  0
branch  0 taken 1
branch  1 taken 1
branch  2 taken 0
        1:  834:	case 'e': /* fallthrough */
        -:  835:	case 'r': {
        -:  836:		/* Store all file names into one single variable */
        1:  837:		size_t len = 1;
        1:  838:		dec_files = (char *)xnmalloc(len, sizeof(char));
        1:  838-block  0
call    0 returned 1
        1:  839:		*dec_files = '\0';
        -:  840:
        2:  841:		for (i = 1; args[i]; i++) {
unconditional  0 taken 1
        1:  841-block  0
unconditional  1 taken 1
        2:  841-block  1
branch  2 taken 1
branch  3 taken 1 (fallthrough)
        -:  842:			/* Escape the string, if needed */
        1:  843:			char *esc_name = escape_str(args[i]);
        1:  843-block  0
call    0 returned 1
       1*:  844:			if (!esc_name)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  845:				continue;
    %%%%%:  845-block  0
unconditional  0 never executed
        -:  846:
        1:  847:			len += strlen(esc_name) + 1;
        1:  848:			dec_files = (char *)xrealloc(dec_files, (len + 1) * sizeof(char));
        1:  848-block  0
call    0 returned 1
        1:  849:			strcat(dec_files, " ");
        1:  850:			strcat(dec_files, esc_name);
        1:  851:			free(esc_name);
unconditional  0 taken 1
        -:  852:		}
        1:  853:	} break;
        1:  853-block  0
unconditional  0 taken 1
        -:  854:
        1:  855:	case 'E': /* fallthtough */
        -:  856:	case 'l': /* fallthtough */
        -:  857:	case 'm': {
        -:  858:		/* These operation won't be executed via the system shell,
        -:  859:			 * so that we need to deescape files if necessary */
        2:  860:		for (i = 1; args[i]; i++) {
        1:  860-block  0
unconditional  0 taken 1
        1:  860-block  1
unconditional  1 taken 1
        2:  860-block  2
branch  2 taken 1
branch  3 taken 1 (fallthrough)
        1:  861:			if (strchr(args[i], '\\')) {
        1:  861-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  862:				char *deq_name = dequote_str(args[i], 0);
    %%%%%:  862-block  0
call    0 never executed
    #####:  863:				if (!deq_name) {
branch  0 never executed
branch  1 never executed
    #####:  864:					fprintf(stderr, _("archiver: %s: Error "
call    0 never executed
    #####:  865:							"dequoting file name\n"), args[i]);
    %%%%%:  865-block  0
call    0 never executed
    #####:  866:					return EXIT_FAILURE;
unconditional  0 never executed
        -:  867:				}
        -:  868:
    #####:  869:				strcpy(args[i], deq_name);
    #####:  870:				free(deq_name);
    #####:  871:				deq_name = (char *)NULL;
    %%%%%:  871-block  0
unconditional  0 never executed
        -:  872:			}
        -:  873:		}
        1:  874:	} break;
        1:  874-block  0
unconditional  0 taken 1
        -:  875:	}
        -:  876:
        -:  877:	/* 3) Construct and run the corresponding commands
        -:  878:	 * ############################################### */
        -:  879:
        2:  880:	switch (sel_op) {
        2:  880-block  0
branch  0 taken 1
branch  1 taken 0
branch  2 taken 1
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
        1:  881:	case 'e': { /* ########## EXTRACT ############## */
        1:  882:		char *cmd = (char *)NULL;
        1:  883:		cmd = (char *)xnmalloc(strlen(dec_files) + 13, sizeof(char));
        1:  883-block  0
call    0 returned 1
        1:  884:		sprintf(cmd, "atool -x -e %s", dec_files);
        1:  885:		if (launch_execle(cmd) != EXIT_SUCCESS)
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  886:			exit_status = EXIT_FAILURE;
    %%%%%:  886-block  0
unconditional  0 never executed
        -:  887:
        1:  888:		free(cmd);
        1:  889:		free(dec_files);
        1:  890:	} break;
        1:  890-block  0
unconditional  0 taken 1
        -:  891:
    #####:  892:	case 'E': /* ########## EXTRACT TO DIR ############## */
    #####:  893:		for (i = 1; args[i]; i++) {
    %%%%%:  893-block  0
unconditional  0 never executed
    %%%%%:  893-block  1
branch  1 never executed
branch  2 never executed
        -:  894:			/* Ask for extraction path */
    #####:  895:			printf(_("%sFile%s: %s\n"), BOLD, df_c, args[i]);
    %%%%%:  895-block  0
call    0 never executed
call    1 never executed
        -:  896:
    #####:  897:			char *ext_path = (char *)NULL;
    #####:  898:			while (!ext_path) {
unconditional  0 never executed
    %%%%%:  898-block  0
branch  1 never executed
branch  2 never executed
    #####:  899:				ext_path = rl_no_hist(_("Extraction path: "));
    %%%%%:  899-block  0
call    0 never executed
call    1 never executed
    #####:  900:				if (!ext_path)
branch  0 never executed
branch  1 never executed
    #####:  901:					continue;
    %%%%%:  901-block  0
unconditional  0 never executed
    #####:  902:				if (!*ext_path) {
    %%%%%:  902-block  0
branch  0 never executed
branch  1 never executed
    #####:  903:					free(ext_path);
    #####:  904:					ext_path = (char *)NULL;
    #####:  905:					continue;
    %%%%%:  905-block  0
unconditional  0 never executed
        -:  906:				}
        -:  907:			}
        -:  908:
        -:  909:			/* Construct and execute cmd */
    #####:  910:			char *cmd[] = {"atool", "-X", ext_path, args[i], NULL};
    #####:  911:			if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS)
    %%%%%:  911-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  912:				exit_status = EXIT_FAILURE;
    %%%%%:  912-block  0
unconditional  0 never executed
        -:  913:
    #####:  914:			free(ext_path);
    #####:  915:			ext_path = (char *)NULL;
    %%%%%:  915-block  0
unconditional  0 never executed
        -:  916:		}
    #####:  917:		break;
    %%%%%:  917-block  0
unconditional  0 never executed
        -:  918:
        -:  919:		/* ########## LIST ############## */
        -:  920:
        1:  921:	case 'l':
        2:  922:		for (i = 1; args[i]; i++) {
        1:  922-block  0
unconditional  0 taken 1
        1:  922-block  1
unconditional  1 taken 1
        2:  922-block  2
branch  2 taken 1
branch  3 taken 1 (fallthrough)
       1*:  923:			printf(_("%s%sFile%s: %s\n"), (i > 1) ? "\n" : "",
    %%%%%:  923-block  0
unconditional  0 never executed
        1:  923-block  1
unconditional  1 taken 1
        1:  923-block  2
call    2 returned 1
call    3 returned 1
        1:  924:			    BOLD, df_c, args[i]);
        1:  924-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  925:
        1:  926:			char *cmd[] = {"atool", "-l", args[i], NULL};
        1:  927:			if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS)
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  928:				exit_status = EXIT_FAILURE;
    %%%%%:  928-block  0
unconditional  0 never executed
        -:  929:		}
        1:  930:		break;
        1:  930-block  0
unconditional  0 taken 1
        -:  931:
        -:  932:		/* ########## MOUNT ############## */
        -:  933:
    #####:  934:	case 'm':
    #####:  935:		for (i = 1; args[i]; i++) {
    %%%%%:  935-block  0
unconditional  0 never executed
    %%%%%:  935-block  1
unconditional  1 never executed
    %%%%%:  935-block  2
branch  2 never executed
branch  3 never executed
        -:  936:			/* Create mountpoint */
    #####:  937:			char *mountpoint = (char *)NULL;
    #####:  938:			if (xargs.stealth_mode == 1) {
    %%%%%:  938-block  0
branch  0 never executed
branch  1 never executed
    #####:  939:				mountpoint = (char *)xnmalloc(strlen(args[i]) + 19,
    %%%%%:  939-block  0
call    0 never executed
        -:  940:				    sizeof(char));
    #####:  941:				sprintf(mountpoint, "/tmp/clifm-mounts/%s",
    #####:  942:				    args[i]);
unconditional  0 never executed
        -:  943:			} else {
    #####:  944:				mountpoint = (char *)xnmalloc(strlen(config_dir) + strlen(args[i]) + 9, sizeof(char));
    %%%%%:  944-block  0
call    0 never executed
    #####:  945:				sprintf(mountpoint, "%s/mounts/%s", config_dir, args[i]);
unconditional  0 never executed
        -:  946:			}
        -:  947:
    #####:  948:			char *dir_cmd[] = {"mkdir", "-pm700", mountpoint, NULL};
    #####:  949:			if (launch_execve(dir_cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS) {
    %%%%%:  949-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  950:				free(mountpoint);
    #####:  951:				return EXIT_FAILURE;
    %%%%%:  951-block  0
unconditional  0 never executed
    %%%%%:  951-block  1
unconditional  1 never executed
        -:  952:			}
        -:  953:
        -:  954:			/* Construct and execute cmd */
    #####:  955:			char *cmd[] = {"archivemount", args[i], mountpoint, NULL};
    #####:  956:			if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS) {
    %%%%%:  956-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  957:				free(mountpoint);
    #####:  958:				continue;
    %%%%%:  958-block  0
unconditional  0 never executed
    %%%%%:  958-block  1
unconditional  1 never executed
        -:  959:			}
        -:  960:
        -:  961:			/* List content of mountpoint if there is only
        -:  962:				 * one archive */
    #####:  963:			if (files_num > 1) {
    %%%%%:  963-block  0
branch  0 never executed
branch  1 never executed
    #####:  964:				printf(_("%s%s%s: Succesfully mounted on %s\n"),
call    0 never executed
    #####:  965:						BOLD, args[i], df_c, mountpoint);
    %%%%%:  965-block  0
call    0 never executed
    #####:  966:				free(mountpoint);
    #####:  967:				continue;
unconditional  0 never executed
        -:  968:			}
        -:  969:
    #####:  970:			if (xchdir(mountpoint, SET_TITLE) == -1) {
    %%%%%:  970-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  971:				fprintf(stderr, "archiver: %s: %s\n", mountpoint, strerror(errno));
    %%%%%:  971-block  0
call    0 never executed
call    1 never executed
    #####:  972:				free(mountpoint);
    #####:  973:				return EXIT_FAILURE;
unconditional  0 never executed
        -:  974:			}
        -:  975:
    #####:  976:			free(ws[cur_ws].path);
    #####:  977:			ws[cur_ws].path = (char *)xcalloc(strlen(mountpoint) + 1,
    %%%%%:  977-block  0
call    0 never executed
        -:  978:			    sizeof(char));
    #####:  979:			strcpy(ws[cur_ws].path, mountpoint);
    #####:  980:			free(mountpoint);
        -:  981:
    #####:  982:			add_to_jumpdb(ws[cur_ws].path);
call    0 never executed
        -:  983:
    #####:  984:			if (cd_lists_on_the_fly) {
branch  0 never executed
branch  1 never executed
    #####:  985:				free_dirlist();
    %%%%%:  985-block  0
call    0 never executed
    #####:  986:				if (list_dir() != EXIT_SUCCESS)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  987:					exit_status = EXIT_FAILURE;
    %%%%%:  987-block  0
unconditional  0 never executed
    #####:  988:				add_to_dirhist(ws[cur_ws].path);
    %%%%%:  988-block  0
call    0 never executed
unconditional  1 never executed
        -:  989:			}
        -:  990:		}
    #####:  991:		break;
    %%%%%:  991-block  0
unconditional  0 never executed
        -:  992:
        -:  993:		/* ########## REPACK ############## */
        -:  994:
    #####:  995:	case 'r': {
        -:  996:		/* Ask for new archive/compression format */
    #####:  997:		puts(_("Enter 'q' to quit"));
    %%%%%:  997-block  0
call    0 never executed
call    1 never executed
        -:  998:
    #####:  999:		char *format = (char *)NULL;
    #####: 1000:		while (!format) {
unconditional  0 never executed
    %%%%%: 1000-block  0
branch  1 never executed
branch  2 never executed
    #####: 1001:			format = rl_no_hist(_("New format (Ex: .tar.xz): "));
    %%%%%: 1001-block  0
call    0 never executed
call    1 never executed
    #####: 1002:			if (!format)
branch  0 never executed
branch  1 never executed
    #####: 1003:				continue;
    %%%%%: 1003-block  0
unconditional  0 never executed
    #####: 1004:			if (!*format || (*format != '.' && *format != 'q')) {
    %%%%%: 1004-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1004-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1004-block  2
branch  4 never executed
branch  5 never executed
    #####: 1005:				free(format);
    #####: 1006:				format = (char *)NULL;
    #####: 1007:				continue;
    %%%%%: 1007-block  0
unconditional  0 never executed
        -: 1008:			}
    #####: 1009:			if (*format == 'q' && format[1] == '\0') {
    %%%%%: 1009-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1009-block  1
branch  2 never executed
branch  3 never executed
    #####: 1010:				free(format);
    #####: 1011:				free(dec_files);
    #####: 1012:				return EXIT_SUCCESS;
    %%%%%: 1012-block  0
unconditional  0 never executed
        -: 1013:			}
        -: 1014:		}
        -: 1015:
        -: 1016:		/* Construct and execute cmd */
    #####: 1017:		char *cmd = (char *)NULL;
    #####: 1018:		cmd = (char *)xnmalloc(strlen(format) + strlen(dec_files) + 16, sizeof(char));
    %%%%%: 1018-block  0
call    0 never executed
    #####: 1019:		sprintf(cmd, "arepack -F %s -e %s", format, dec_files);
        -: 1020:
    #####: 1021:		if (launch_execle(cmd) != EXIT_SUCCESS)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1022:			exit_status = EXIT_FAILURE;
    %%%%%: 1022-block  0
unconditional  0 never executed
        -: 1023:
    #####: 1024:		free(format);
    #####: 1025:		free(dec_files);
    #####: 1026:		free(cmd);
    #####: 1027:	} break;
    %%%%%: 1027-block  0
unconditional  0 never executed
        -: 1028:	}
        -: 1029:
        2: 1030:	return exit_status;
        2: 1030-block  0
unconditional  0 taken 2
        -: 1031:}
        -: 1032:
        -: 1033:/* If MODE is 'c', compress IN_FILE producing a zstandard compressed
        -: 1034: * file named OUT_FILE. If MODE is 'd', extract, test or get
        -: 1035: * information about IN_FILE. OP is used only for the 'd' mode: it
        -: 1036: * tells if we have one or multiple file. Returns zero on success and
        -: 1037: * one on error */
        -: 1038:int
function zstandard called 0 returned 0% blocks executed 0%
    #####: 1039:zstandard(char *in_file, char *out_file, char mode, char op)
        -: 1040:{
    #####: 1041:	int exit_status = EXIT_SUCCESS;
    #####: 1042:	char *deq_file = dequote_str(in_file, 0);
    %%%%%: 1042-block  0
call    0 never executed
    #####: 1043:	if (!deq_file) {
branch  0 never executed
branch  1 never executed
    #####: 1044:		fprintf(stderr, _("archiver: %s: Error dequoting file name\n"), in_file);
    %%%%%: 1044-block  0
call    0 never executed
call    1 never executed
    #####: 1045:		return EXIT_FAILURE;
unconditional  0 never executed
        -: 1046:	}
        -: 1047:
    #####: 1048:	if (mode == 'c') {
    %%%%%: 1048-block  0
branch  0 never executed
branch  1 never executed
    #####: 1049:		if (out_file) {
    %%%%%: 1049-block  0
branch  0 never executed
branch  1 never executed
    #####: 1050:			char *cmd[] = {"zstd", "-zo", out_file, deq_file, NULL};
    #####: 1051:			if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS)
    %%%%%: 1051-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1052:				exit_status = EXIT_FAILURE;
    %%%%%: 1052-block  0
unconditional  0 never executed
        -: 1053:		} else {
    #####: 1054:			char *cmd[] = {"zstd", "-z", deq_file, NULL};
        -: 1055:
    #####: 1056:			if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS)
    %%%%%: 1056-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1057:				exit_status = EXIT_FAILURE;
    %%%%%: 1057-block  0
unconditional  0 never executed
        -: 1058:		}
        -: 1059:
    #####: 1060:		free(deq_file);
    #####: 1061:		return exit_status;
    %%%%%: 1061-block  0
unconditional  0 never executed
        -: 1062:	}
        -: 1063:
        -: 1064:	/* mode == 'd' */
        -: 1065:
        -: 1066:	/* op is non-zero when multiple files, including at least one
        -: 1067:	 * zst file, are passed to the archiver function */
    #####: 1068:	if (op != 0) {
    %%%%%: 1068-block  0
branch  0 never executed
branch  1 never executed
    #####: 1069:		char option[3] = "";
        -: 1070:
    #####: 1071:		switch (op) {
    %%%%%: 1071-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1072:		case 'e': strcpy(option, "-d"); break;
    %%%%%: 1072-block  0
unconditional  0 never executed
    #####: 1073:		case 't': strcpy(option, "-t"); break;
    %%%%%: 1073-block  0
unconditional  0 never executed
    #####: 1074:		case 'i': strcpy(option, "-l"); break;
    %%%%%: 1074-block  0
unconditional  0 never executed
        -: 1075:		}
        -: 1076:
    #####: 1077:		char *cmd[] = {"zstd", option, deq_file, NULL};
    #####: 1078:		exit_status = launch_execve(cmd, FOREGROUND, E_NOFLAG);
    %%%%%: 1078-block  0
call    0 never executed
    #####: 1079:		free(deq_file);
        -: 1080:
    #####: 1081:		if (exit_status != EXIT_SUCCESS)
branch  0 never executed
branch  1 never executed
    #####: 1082:			return EXIT_FAILURE;
    %%%%%: 1082-block  0
unconditional  0 never executed
        -: 1083:
    #####: 1084:		return EXIT_SUCCESS;
    %%%%%: 1084-block  0
unconditional  0 never executed
        -: 1085:	}
        -: 1086:
    #####: 1087:	printf(_("%s[e]%sxtract %s[t]%sest %s[i]%snfo %s[q]%suit\n"),
    %%%%%: 1087-block  0
call    0 never executed
call    1 never executed
        -: 1088:	    BOLD, df_c, BOLD, df_c, BOLD, df_c, BOLD, df_c);
        -: 1089:
    #####: 1090:	char *operation = (char *)NULL;
    #####: 1091:	while (!operation) {
unconditional  0 never executed
    %%%%%: 1091-block  0
branch  1 never executed
branch  2 never executed
    #####: 1092:		operation = rl_no_hist(_("Operation: "));
    %%%%%: 1092-block  0
call    0 never executed
call    1 never executed
    #####: 1093:		if (!operation)
branch  0 never executed
branch  1 never executed
    #####: 1094:			continue;
    %%%%%: 1094-block  0
unconditional  0 never executed
    #####: 1095:		if (!*operation || operation[1] != '\0') {
    %%%%%: 1095-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1095-block  1
branch  2 never executed
branch  3 never executed
    #####: 1096:			free(operation);
    #####: 1097:			operation = (char *)NULL;
    #####: 1098:			continue;
    %%%%%: 1098-block  0
unconditional  0 never executed
        -: 1099:		}
        -: 1100:
    #####: 1101:		switch (*operation) {
    %%%%%: 1101-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1102:		case 'e': {
    #####: 1103:			char *cmd[] = {"zstd", "-d", deq_file, NULL};
    #####: 1104:			if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS)
    %%%%%: 1104-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1105:				exit_status = EXIT_FAILURE;
    %%%%%: 1105-block  0
unconditional  0 never executed
    #####: 1106:		} break;
    %%%%%: 1106-block  0
unconditional  0 never executed
        -: 1107:
    #####: 1108:		case 't': {
    #####: 1109:			char *cmd[] = {"zstd", "-t", deq_file, NULL};
    #####: 1110:			if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS)
    %%%%%: 1110-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1111:				exit_status = EXIT_FAILURE;
    %%%%%: 1111-block  0
unconditional  0 never executed
    #####: 1112:		} break;
    %%%%%: 1112-block  0
unconditional  0 never executed
        -: 1113:
    #####: 1114:		case 'i': {
    #####: 1115:			char *cmd[] = {"zstd", "-l", deq_file, NULL};
    #####: 1116:			if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS)
    %%%%%: 1116-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1117:				exit_status = EXIT_FAILURE;
    %%%%%: 1117-block  0
unconditional  0 never executed
    #####: 1118:		} break;
    %%%%%: 1118-block  0
unconditional  0 never executed
        -: 1119:
    #####: 1120:		case 'q':
    #####: 1121:			free(operation);
    #####: 1122:			free(deq_file);
    #####: 1123:			return EXIT_SUCCESS;
    %%%%%: 1123-block  0
unconditional  0 never executed
        -: 1124:
    #####: 1125:		default:
    #####: 1126:			free(operation);
    #####: 1127:			operation = (char *)NULL;
    #####: 1128:			break;
    %%%%%: 1128-block  0
unconditional  0 never executed
        -: 1129:		}
        -: 1130:	}
        -: 1131:
    #####: 1132:	free(operation);
    #####: 1133:	free(deq_file);
    #####: 1134:	return exit_status;
    %%%%%: 1134-block  0
unconditional  0 never executed
        -: 1135:}
        -: 1136:#endif /* !_NO_ARCHIVING */
        -: 1137:
