        -:    0:Source:trash.c
        -:    1:/* trash.c -- functions controlling the trash system */
        -:    2:
        -:    3:/*
        -:    4: * This file is part of CliFM
        -:    5: * 
        -:    6: * Copyright (C) 2016-2021, L. Abramovich <johndoe.arch@outlook.com>
        -:    7: * All rights reserved.
        -:    8:
        -:    9: * CliFM is free software; you can redistribute it and/or modify
        -:   10: * it under the terms of the GNU General Public License as published by
        -:   11: * the Free Software Foundation; either version 2 of the License, or
        -:   12: * (at your option) any later version.
        -:   13: *
        -:   14: * CliFM is distributed in the hope that it will be useful,
        -:   15: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   16: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   17: * GNU General Public License for more details.
        -:   18: *
        -:   19: * You should have received a copy of the GNU General Public License
        -:   20: * along with this program; if not, write to the Free Software
        -:   21: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
        -:   22: * MA 02110-1301, USA.
        -:   23:*/
        -:   24:
        -:   25:#include "helpers.h"
        -:   26:
        -:   27:#include <dirent.h>
        -:   28:#include <errno.h>
        -:   29:#include <fcntl.h>
        -:   30:#include <stdio.h>
        -:   31:#include <string.h>
        -:   32:#include <sys/stat.h>
        -:   33:#include <time.h>
        -:   34:#include <unistd.h>
        -:   35:
        -:   36:#include "aux.h"
        -:   37:#include "checks.h"
        -:   38:#include "colors.h"
        -:   39:#include "exec.h"
        -:   40:#include "misc.h"
        -:   41:#include "navigation.h"
        -:   42:#include "readline.h"
        -:   43:#include "sort.h"
        -:   44:#include "trash.h"
        -:   45:
        -:   46:int
function trash_clear called 0 returned 0% blocks executed 0%
    #####:   47:trash_clear(void)
        -:   48:{
    #####:   49:	struct dirent **trash_files = (struct dirent **)NULL;
    #####:   50:	int files_n = -1, exit_status = EXIT_SUCCESS;
        -:   51:
    #####:   52:	if (xchdir(TRASH_FILES_DIR, NO_TITLE) == -1) {
    %%%%%:   52-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   53:		_err(0, NOPRINT_PROMPT, "%s: trash: '%s': %s\n", PROGRAM_NAME,
call    0 never executed
    #####:   54:		    TRASH_FILES_DIR, strerror(errno));
    %%%%%:   54-block  0
call    0 never executed
    #####:   55:		return EXIT_FAILURE;
unconditional  0 never executed
        -:   56:	}
        -:   57:
    #####:   58:	files_n = scandir(TRASH_FILES_DIR, &trash_files, skip_files, xalphasort);
    %%%%%:   58-block  0
call    0 never executed
        -:   59:
    #####:   60:	if (!files_n) {
branch  0 never executed
branch  1 never executed
    #####:   61:		puts(_("trash: There are no trashed files"));
    %%%%%:   61-block  0
call    0 never executed
    #####:   62:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:   63:	}
        -:   64:
        -:   65:	size_t i;
        -:   66:
    #####:   67:	for (i = 0; i < (size_t)files_n; i++) {
    %%%%%:   67-block  0
unconditional  0 never executed
    %%%%%:   67-block  1
branch  1 never executed
branch  2 never executed
    #####:   68:		size_t info_file_len = strlen(trash_files[i]->d_name) + 11;
    #####:   69:		char *info_file = (char *)xnmalloc(info_file_len, sizeof(char));
    %%%%%:   69-block  0
call    0 never executed
    #####:   70:		sprintf(info_file, "%s.trashinfo", trash_files[i]->d_name);
        -:   71:
    #####:   72:		char *file1 = (char *)NULL;
    #####:   73:		file1 = (char *)xnmalloc(strlen(TRASH_FILES_DIR) +
    #####:   74:					     strlen(trash_files[i]->d_name) + 2,
call    0 never executed
        -:   75:		    sizeof(char));
        -:   76:
    #####:   77:		sprintf(file1, "%s/%s", TRASH_FILES_DIR, trash_files[i]->d_name);
        -:   78:
    #####:   79:		char *file2 = (char *)NULL;
    #####:   80:		file2 = (char *)xnmalloc(strlen(TRASH_INFO_DIR) +
    #####:   81:					     strlen(info_file) + 2,
call    0 never executed
        -:   82:		    sizeof(char));
    #####:   83:		sprintf(file2, "%s/%s", TRASH_INFO_DIR, info_file);
        -:   84:
    #####:   85:		char *tmp_cmd[] = {"rm", "-r", file1, file2, NULL};
        -:   86:
    #####:   87:		int ret = launch_execve(tmp_cmd, FOREGROUND, E_NOFLAG);
call    0 never executed
        -:   88:
    #####:   89:		free(file1);
    #####:   90:		free(file2);
        -:   91:
    #####:   92:		if (ret != EXIT_SUCCESS) {
branch  0 never executed
branch  1 never executed
    #####:   93:			fprintf(stderr, _("%s: trash: %s: Error removing "
    #####:   94:				"trashed file\n"), PROGRAM_NAME, trash_files[i]->d_name);
    %%%%%:   94-block  0
call    0 never executed
    #####:   95:			exit_status = EXIT_FAILURE;
unconditional  0 never executed
        -:   96:			/* If there is at least one error, return error */
        -:   97:		}
        -:   98:
    #####:   99:		free(info_file);
    #####:  100:		free(trash_files[i]);
    %%%%%:  100-block  0
unconditional  0 never executed
        -:  101:	}
        -:  102:
    #####:  103:	free(trash_files);
        -:  104:
    #####:  105:	if (xchdir(ws[cur_ws].path, NO_TITLE) == -1) {
    %%%%%:  105-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  106:		_err(0, NOPRINT_PROMPT, "%s: trash: '%s': %s\n", PROGRAM_NAME,
    #####:  107:		    ws[cur_ws].path, strerror(errno));
    %%%%%:  107-block  0
call    0 never executed
call    1 never executed
    #####:  108:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  109:	}
        -:  110:
    #####:  111:	return exit_status;
    %%%%%:  111-block  0
unconditional  0 never executed
        -:  112:}
        -:  113:
        -:  114:int
function trash_function called 0 returned 0% blocks executed 0%
    #####:  115:trash_function(char **comm)
        -:  116:{
    #####:  117:	if (xargs.stealth_mode == 1) {
    %%%%%:  117-block  0
branch  0 never executed
branch  1 never executed
    #####:  118:		printf("%s: The trash function is disabled in "
    %%%%%:  118-block  0
call    0 never executed
        -:  119:			"stealth mode\n", PROGRAM_NAME);
    #####:  120:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  121:	}
        -:  122:
        -:  123:	/* Create trash dirs, if necessary */
        -:  124:	/*  struct stat file_attrib;
        -:  125:	if (stat (TRASH_DIR, &file_attrib) == -1) {
        -:  126:		char *trash_files = NULL;
        -:  127:		trash_files = xcalloc(strlen(TRASH_DIR) + 7, sizeof(char));
        -:  128:		sprintf(trash_files, "%s/files", TRASH_DIR);
        -:  129:		char *trash_info=NULL;
        -:  130:		trash_info = xcalloc(strlen(TRASH_DIR) + 6, sizeof(char));
        -:  131:		sprintf(trash_info, "%s/info", TRASH_DIR);
        -:  132:		char *cmd[] = { "mkdir", "-p", trash_files, trash_info, NULL };
        -:  133:		int ret = launch_execve (cmd, FOREGROUND, E_NOFLAG);
        -:  134:		free(trash_files);
        -:  135:		free(trash_info);
        -:  136:		if (ret != EXIT_SUCCESS) {
        -:  137:			_err(0, NOPRINT_PROMPT, _("%s: mkdir: '%s': Error creating "
        -:  138:				 "trash directory\n"), PROGRAM_NAME, TRASH_DIR);
        -:  139:			return;
        -:  140:		}
        -:  141:	} */
        -:  142:
    #####:  143:	if (!comm)
    %%%%%:  143-block  0
branch  0 never executed
branch  1 never executed
    #####:  144:		return EXIT_FAILURE;
    %%%%%:  144-block  0
unconditional  0 never executed
        -:  145:
    #####:  146:	if (!trash_ok || !config_ok) {
    %%%%%:  146-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  146-block  1
branch  2 never executed
branch  3 never executed
    #####:  147:		fprintf(stderr, _("%s: Trash function disabled\n"), PROGRAM_NAME);
    %%%%%:  147-block  0
call    0 never executed
    #####:  148:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  149:	}
        -:  150:
        -:  151:	/* List trashed files ('tr' or 'tr ls') */
    #####:  152:	if (!comm[1] || strcmp(comm[1], "ls") == 0 || strcmp(comm[1], "list") == 0) {
    %%%%%:  152-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  152-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  152-block  2
branch  4 never executed
branch  5 never executed
        -:  153:		/* List files in the Trash/files dir */
        -:  154:
    #####:  155:		if (xchdir(TRASH_FILES_DIR, NO_TITLE) == -1) {
    %%%%%:  155-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  156:			_err(0, NOPRINT_PROMPT, "%s: trash: %s: %s\n",
call    0 never executed
    #####:  157:			    PROGRAM_NAME, TRASH_FILES_DIR, strerror(errno));
    %%%%%:  157-block  0
call    0 never executed
    #####:  158:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  159:		}
        -:  160:
    #####:  161:		struct dirent **trash_files = (struct dirent **)NULL;
    #####:  162:		int files_n = scandir(TRASH_FILES_DIR, &trash_files,
    %%%%%:  162-block  0
unconditional  0 never executed
    %%%%%:  162-block  1
unconditional  1 never executed
    %%%%%:  162-block  2
unconditional  2 never executed
    %%%%%:  162-block  3
unconditional  3 never executed
    %%%%%:  162-block  4
call    4 never executed
    #####:  163:						skip_files, (unicode) ? alphasort : (case_sensitive)
    %%%%%:  163-block  0
branch  0 never executed
branch  1 never executed
    #####:  164:						? xalphasort : alphasort_insensitive);
    %%%%%:  164-block  0
branch  0 never executed
branch  1 never executed
    #####:  165:		if (files_n) {
branch  0 never executed
branch  1 never executed
        -:  166:			size_t i;
        -:  167:
    #####:  168:			for (i = 0; i < (size_t)files_n; i++) {
    %%%%%:  168-block  0
unconditional  0 never executed
    %%%%%:  168-block  1
branch  1 never executed
branch  2 never executed
    #####:  169:				colors_list(trash_files[i]->d_name, (int)i + 1, NO_PAD,
    %%%%%:  169-block  0
call    0 never executed
        -:  170:							PRINT_NEWLINE);
    #####:  171:				free(trash_files[i]);
unconditional  0 never executed
        -:  172:			}
        -:  173:
    #####:  174:			free(trash_files);
    %%%%%:  174-block  0
unconditional  0 never executed
        -:  175:		}
        -:  176:
        -:  177:		else
    #####:  178:			puts(_("trash: There are no trashed files"));
    %%%%%:  178-block  0
call    0 never executed
unconditional  1 never executed
        -:  179:
    #####:  180:		if (xchdir(ws[cur_ws].path, NO_TITLE) == -1) {
    %%%%%:  180-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  181:			_err(0, NOPRINT_PROMPT, "%s: trash: '%s': %s\n",
    #####:  182:			    PROGRAM_NAME, ws[cur_ws].path, strerror(errno));
    %%%%%:  182-block  0
call    0 never executed
call    1 never executed
    #####:  183:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  184:		}
        -:  185:
        -:  186:		else
    #####:  187:			return EXIT_SUCCESS;
    %%%%%:  187-block  0
unconditional  0 never executed
        -:  188:	}
        -:  189:
        -:  190:	else {
        -:  191:
        -:  192:		/* Create suffix from current date and time to create unique
        -:  193:		 * filenames for trashed files */
    #####:  194:		int exit_status = EXIT_SUCCESS;
    #####:  195:		time_t rawtime = time(NULL);
    %%%%%:  195-block  0
call    0 never executed
    #####:  196:		struct tm *tm = localtime(&rawtime);
call    0 never executed
    #####:  197:		char date[64] = "";
        -:  198:
    #####:  199:		strftime(date, sizeof(date), "%b %d %H:%M:%S %Y", tm);
        -:  200:
    #####:  201:		char suffix[68] = "";
        -:  202:
    #####:  203:		snprintf(suffix, 67, "%d%d%d%d%d%d", tm->tm_year + 1900,
    #####:  204:		    tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min,
        -:  205:		    tm->tm_sec);
        -:  206:
        -:  207:		/* Remove file(s) from Trash */
    #####:  208:		if (strcmp(comm[1], "del") == 0 || strcmp(comm[1], "rm") == 0)
branch  0 never executed
branch  1 never executed
    %%%%%:  208-block  0
branch  2 never executed
branch  3 never executed
    #####:  209:			exit_status = remove_from_trash();
    %%%%%:  209-block  0
call    0 never executed
unconditional  1 never executed
        -:  210:
    #####:  211:		else if (strcmp(comm[1], "clear") == 0)
    %%%%%:  211-block  0
branch  0 never executed
branch  1 never executed
    #####:  212:			trash_clear();
    %%%%%:  212-block  0
call    0 never executed
unconditional  1 never executed
        -:  213:
        -:  214:		else {
        -:  215:			/* Trash files passed as arguments */
        -:  216:			size_t i;
        -:  217:
    #####:  218:			for (i = 1; comm[i]; i++) {
    %%%%%:  218-block  0
unconditional  0 never executed
    %%%%%:  218-block  1
unconditional  1 never executed
    %%%%%:  218-block  2
branch  2 never executed
branch  3 never executed
    #####:  219:				char *deq_file = dequote_str(comm[i], 0);
    %%%%%:  219-block  0
call    0 never executed
    #####:  220:				char tmp_comm[PATH_MAX] = "";
        -:  221:
    #####:  222:				if (deq_file[0] == '/') /* If absolute path */
branch  0 never executed
branch  1 never executed
    #####:  223:					strcpy(tmp_comm, deq_file);
    %%%%%:  223-block  0
unconditional  0 never executed
        -:  224:
        -:  225:				else { /* If relative path, add path to check against
        -:  226:					TRASH_DIR */
    #####:  227:					snprintf(tmp_comm, PATH_MAX, "%s/%s", ws[cur_ws].path,
    %%%%%:  227-block  0
unconditional  0 never executed
        -:  228:					    deq_file);
        -:  229:				}
        -:  230:
        -:  231:				/* Some filters: you cannot trash wathever you want */
        -:  232:				/* Do not trash any of the parent directories of TRASH_DIR,
        -:  233:				 * that is, /, /home, ~/, ~/.local, ~/.local/share */
    #####:  234:				if (strncmp(tmp_comm, TRASH_DIR, strlen(tmp_comm)) == 0) {
    %%%%%:  234-block  0
branch  0 never executed
branch  1 never executed
    #####:  235:					fprintf(stderr, _("trash: Cannot trash '%s'\n"), tmp_comm);
    %%%%%:  235-block  0
call    0 never executed
    #####:  236:					exit_status = EXIT_FAILURE;
    #####:  237:					free(deq_file);
    #####:  238:					continue;
unconditional  0 never executed
    %%%%%:  238-block  0
unconditional  1 never executed
        -:  239:				}
        -:  240:
        -:  241:				/* Do no trash TRASH_DIR itself nor anything inside it,
        -:  242:				 * that is, already trashed files */
    #####:  243:				else if (strncmp(tmp_comm, TRASH_DIR,
    %%%%%:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:					     strlen(TRASH_DIR)) == 0) {
    #####:  245:					puts(_("trash: Use 'trash del' to remove trashed files"));
    %%%%%:  245-block  0
call    0 never executed
    #####:  246:					exit_status = EXIT_FAILURE;
    #####:  247:					free(deq_file);
    #####:  248:					continue;
unconditional  0 never executed
        -:  249:				}
        -:  250:
        -:  251:				struct stat file_attrib;
        -:  252:
    #####:  253:				if (lstat(deq_file, &file_attrib) == -1) {
    %%%%%:  253-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  254:					fprintf(stderr, _("trash: %s: %s\n"), deq_file,
call    0 never executed
    #####:  255:					    strerror(errno));
    %%%%%:  255-block  0
call    0 never executed
    #####:  256:					exit_status = EXIT_FAILURE;
    #####:  257:					free(deq_file);
    #####:  258:					continue;
unconditional  0 never executed
        -:  259:				}
        -:  260:
        -:  261:				/* Do not trash block or character devices */
        -:  262:				else {
    #####:  263:					if ((file_attrib.st_mode & S_IFMT) == S_IFBLK) {
    %%%%%:  263-block  0
branch  0 never executed
branch  1 never executed
    #####:  264:						fprintf(stderr, _("trash: %s: Cannot trash a "
    %%%%%:  264-block  0
call    0 never executed
        -:  265:								  "block device\n"),
        -:  266:						    deq_file);
    #####:  267:						exit_status = EXIT_FAILURE;
    #####:  268:						free(deq_file);
    #####:  269:						continue;
unconditional  0 never executed
        -:  270:					}
        -:  271:
    #####:  272:					else if ((file_attrib.st_mode & S_IFMT) == S_IFCHR) {
    %%%%%:  272-block  0
branch  0 never executed
branch  1 never executed
    #####:  273:						fprintf(stderr, _("trash: %s: Cannot trash a "
    %%%%%:  273-block  0
call    0 never executed
        -:  274:								  "character device\n"),
        -:  275:						    deq_file);
    #####:  276:						exit_status = EXIT_FAILURE;
    #####:  277:						free(deq_file);
    #####:  278:						continue;
unconditional  0 never executed
        -:  279:					}
        -:  280:				}
        -:  281:
        -:  282:				/* Once here, everything is fine: trash the file */
    #####:  283:				exit_status = trash_element(suffix, tm, deq_file);
    %%%%%:  283-block  0
call    0 never executed
        -:  284:				/* The trash_element() function will take care of
        -:  285:				 * printing error messages, if any */
    #####:  286:				free(deq_file);
unconditional  0 never executed
        -:  287:			}
        -:  288:		}
        -:  289:
    #####:  290:		return exit_status;
    %%%%%:  290-block  0
unconditional  0 never executed
        -:  291:	}
        -:  292:}
        -:  293:
        -:  294:int
function trash_element called 0 returned 0% blocks executed 0%
    #####:  295:trash_element(const char *suffix, struct tm *tm, char *file)
        -:  296:{
        -:  297:	/* Check file's existence */
        -:  298:	struct stat file_attrib;
        -:  299:
    #####:  300:	if (lstat(file, &file_attrib) == -1) {
    %%%%%:  300-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  301:		fprintf(stderr, "%s: trash: %s: %s\n", PROGRAM_NAME, file,
call    0 never executed
    #####:  302:		    strerror(errno));
    %%%%%:  302-block  0
call    0 never executed
    #####:  303:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  304:	}
        -:  305:
        -:  306:	/* Check whether the user has enough permissions to remove file */
        -:  307:	/* If relative path */
    #####:  308:	char full_path[PATH_MAX] = "";
        -:  309:
    #####:  310:	if (*file != '/') {
    %%%%%:  310-block  0
branch  0 never executed
branch  1 never executed
        -:  311:		/* Construct absolute path for file */
    #####:  312:		snprintf(full_path, PATH_MAX, "%s/%s", ws[cur_ws].path, file);
    #####:  313:		if (wx_parent_check(full_path) != 0)
    %%%%%:  313-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  314:			return EXIT_FAILURE;
    %%%%%:  314-block  0
unconditional  0 never executed
        -:  315:	}
        -:  316:
        -:  317:	/* If absolute path */
    #####:  318:	else if (wx_parent_check(file) != 0)
    %%%%%:  318-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  319:		return EXIT_FAILURE;
    %%%%%:  319-block  0
unconditional  0 never executed
        -:  320:
    #####:  321:	int ret = -1;
        -:  322:
        -:  323:	/* Create the trashed file name: orig_filename.suffix, where SUFFIX is
        -:  324:	 * current date and time */
    #####:  325:	char *filename = (char *)NULL;
        -:  326:
    #####:  327:	if (*file != '/') /* If relative path */
    %%%%%:  327-block  0
branch  0 never executed
branch  1 never executed
    #####:  328:		filename = straftlst(full_path, '/');
    %%%%%:  328-block  0
call    0 never executed
unconditional  1 never executed
        -:  329:	else /* If absolute path */
    #####:  330:		filename = straftlst(file, '/');
    %%%%%:  330-block  0
call    0 never executed
unconditional  1 never executed
        -:  331:
    #####:  332:	if (!filename) {
    %%%%%:  332-block  0
branch  0 never executed
branch  1 never executed
    #####:  333:		fprintf(stderr, _("%s: trash: %s: Error getting filename\n"),
    %%%%%:  333-block  0
call    0 never executed
        -:  334:		    PROGRAM_NAME, file);
    #####:  335:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  336:	}
        -:  337:	/* If the length of the trashed file name (orig_filename.suffix) is
        -:  338:	 * longer than NAME_MAX (255), trim the original filename, so that
        -:  339:	 * (original_filename_len + 1 (dot) + suffix_len) won't be longer
        -:  340:	 * than NAME_MAX */
    #####:  341:	size_t filename_len = strlen(filename), suffix_len = strlen(suffix);
    #####:  342:	int size = (int)(filename_len + suffix_len + 1) - NAME_MAX;
        -:  343:
    #####:  344:	if (size > 0) {
    %%%%%:  344-block  0
branch  0 never executed
branch  1 never executed
        -:  345:		/* If SIZE is a positive value, that is, the trashed file name
        -:  346:		 * exceeds NAME_MAX by SIZE bytes, reduce the original file name
        -:  347:		 * SIZE bytes. Terminate the original file name (FILENAME) with
        -:  348:		 * a tilde (~), to let the user know it is trimmed */
    #####:  349:		filename[filename_len - (size_t)size - 1] = '~';
    #####:  350:		filename[filename_len - (size_t)size] = '\0';
    %%%%%:  350-block  0
unconditional  0 never executed
        -:  351:	}
        -:  352:
        -:  353:	/* 2 = dot + null byte */
    #####:  354:	size_t file_suffix_len = filename_len + suffix_len + 2;
    #####:  355:	char *file_suffix = (char *)xnmalloc(file_suffix_len, sizeof(char));
    %%%%%:  355-block  0
call    0 never executed
        -:  356:	/* No need for memset. sprintf adds the terminating null byte by
        -:  357:	 * itself */
    #####:  358:	sprintf(file_suffix, "%s.%s", filename, suffix);
        -:  359:
        -:  360:	/* Copy the original file into the trash files directory */
    #####:  361:	char *dest = (char *)NULL;
    #####:  362:	dest = (char *)xnmalloc(strlen(TRASH_FILES_DIR) + strlen(file_suffix) + 2,
call    0 never executed
        -:  363:							sizeof(char));
    #####:  364:	sprintf(dest, "%s/%s", TRASH_FILES_DIR, file_suffix);
        -:  365:
    #####:  366:	char *tmp_cmd[] = {"cp", "-a", file, dest, NULL};
        -:  367:
    #####:  368:	free(filename);
        -:  369:
    #####:  370:	ret = launch_execve(tmp_cmd, FOREGROUND, E_NOFLAG);
call    0 never executed
    #####:  371:	free(dest);
    #####:  372:	dest = (char *)NULL;
        -:  373:
    #####:  374:	if (ret != EXIT_SUCCESS) {
branch  0 never executed
branch  1 never executed
    #####:  375:		fprintf(stderr, _("%s: trash: %s: Failed copying file to "
    %%%%%:  375-block  0
call    0 never executed
        -:  376:			"Trash\n"), PROGRAM_NAME, file);
    #####:  377:		free(file_suffix);
    #####:  378:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  379:	}
        -:  380:
        -:  381:	/* Generate the info file */
    #####:  382:	size_t info_file_len = strlen(TRASH_INFO_DIR) + strlen(file_suffix) + 12;
        -:  383:
    #####:  384:	char *info_file = (char *)xnmalloc(info_file_len, sizeof(char));
    %%%%%:  384-block  0
call    0 never executed
    #####:  385:	sprintf(info_file, "%s/%s.trashinfo", TRASH_INFO_DIR, file_suffix);
        -:  386:
    #####:  387:	FILE *info_fp = fopen(info_file, "w");
call    0 never executed
        -:  388:
    #####:  389:	if (!info_fp) { /* If error creating the info file */
branch  0 never executed
branch  1 never executed
    #####:  390:		fprintf(stderr, "%s: %s: %s\n", PROGRAM_NAME, info_file,
call    0 never executed
    #####:  391:		    strerror(errno));
    %%%%%:  391-block  0
call    0 never executed
        -:  392:		/* Remove the trash file */
    #####:  393:		char *trash_file = (char *)NULL;
    #####:  394:		trash_file = (char *)xnmalloc(strlen(TRASH_FILES_DIR)
    #####:  395:						+ strlen(file_suffix) + 2, sizeof(char));
call    0 never executed
    #####:  396:		sprintf(trash_file, "%s/%s", TRASH_FILES_DIR, file_suffix);
        -:  397:
    #####:  398:		char *tmp_cmd2[] = {"rm", "-r", trash_file, NULL};
        -:  399:
    #####:  400:		ret = launch_execve(tmp_cmd2, FOREGROUND, E_NOFLAG);
call    0 never executed
        -:  401:
    #####:  402:		free(trash_file);
        -:  403:
    #####:  404:		if (ret != EXIT_SUCCESS)
branch  0 never executed
branch  1 never executed
    #####:  405:			fprintf(stderr, _("%s: trash: %s/%s: Failed removing trash "
    %%%%%:  405-block  0
call    0 never executed
unconditional  1 never executed
        -:  406:				"file\nTry removing it manually\n"), PROGRAM_NAME,
        -:  407:			    TRASH_FILES_DIR, file_suffix);
        -:  408:
    #####:  409:		free(file_suffix);
    #####:  410:		free(info_file);
        -:  411:
    #####:  412:		return EXIT_FAILURE;
    %%%%%:  412-block  0
unconditional  0 never executed
        -:  413:	}
        -:  414:
        -:  415:	else { /* If info file was generated successfully */
        -:  416:		/* Encode path to URL format (RF 2396) */
    #####:  417:		char *url_str = (char *)NULL;
        -:  418:
    #####:  419:		if (*file != '/')
    %%%%%:  419-block  0
branch  0 never executed
branch  1 never executed
    #####:  420:			url_str = url_encode(full_path);
    %%%%%:  420-block  0
call    0 never executed
unconditional  1 never executed
        -:  421:		else
    #####:  422:			url_str = url_encode(file);
    %%%%%:  422-block  0
call    0 never executed
unconditional  1 never executed
        -:  423:
    #####:  424:		if (!url_str) {
    %%%%%:  424-block  0
branch  0 never executed
branch  1 never executed
    #####:  425:			fprintf(stderr, _("%s: trash: %s: Failed encoding path\n"),
    %%%%%:  425-block  0
call    0 never executed
        -:  426:			    PROGRAM_NAME, file);
    #####:  427:			fclose(info_fp);
call    0 never executed
        -:  428:
    #####:  429:			free(info_file);
    #####:  430:			free(file_suffix);
    #####:  431:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  432:		}
        -:  433:
        -:  434:		/* Write trashed file information into the info file */
    #####:  435:		fprintf(info_fp,
        -:  436:		    "[Trash Info]\nPath=%s\nDeletionDate=%d%d%dT%d:%d:%d\n",
    #####:  437:		    url_str, tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,
    %%%%%:  437-block  0
call    0 never executed
        -:  438:		    tm->tm_hour, tm->tm_min, tm->tm_sec);
    #####:  439:		fclose(info_fp);
call    0 never executed
    #####:  440:		free(url_str);
    #####:  441:		url_str = (char *)NULL;
        -:  442:	}
        -:  443:
        -:  444:	/* Remove the file to be trashed */
    #####:  445:	char *tmp_cmd3[] = {"rm", "-r", file, NULL};
    #####:  446:	ret = launch_execve(tmp_cmd3, FOREGROUND, E_NOFLAG);
call    0 never executed
        -:  447:
        -:  448:	/* If remove fails, remove trash and info files */
    #####:  449:	if (ret != EXIT_SUCCESS) {
branch  0 never executed
branch  1 never executed
    #####:  450:		fprintf(stderr, _("%s: trash: %s: Failed removing file\n"),
    %%%%%:  450-block  0
call    0 never executed
        -:  451:		    PROGRAM_NAME, file);
    #####:  452:		char *trash_file = (char *)NULL;
    #####:  453:		trash_file = (char *)xnmalloc(strlen(TRASH_FILES_DIR)
    #####:  454:						+ strlen(file_suffix) + 2, sizeof(char));
call    0 never executed
    #####:  455:		sprintf(trash_file, "%s/%s", TRASH_FILES_DIR, file_suffix);
        -:  456:
    #####:  457:		char *tmp_cmd4[] = {"rm", "-r", trash_file, info_file, NULL};
    #####:  458:		ret = launch_execve(tmp_cmd4, FOREGROUND, E_NOFLAG);
call    0 never executed
    #####:  459:		free(trash_file);
        -:  460:
    #####:  461:		if (ret != EXIT_SUCCESS) {
branch  0 never executed
branch  1 never executed
    #####:  462:			fprintf(stderr, _("%s: trash: Failed removing temporary "
    %%%%%:  462-block  0
call    0 never executed
        -:  463:					"files from Trash.\nTry removing them manually\n"),
        -:  464:					PROGRAM_NAME);
    #####:  465:			free(file_suffix);
    #####:  466:			free(info_file);
    #####:  467:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  468:		}
        -:  469:	}
        -:  470:
    #####:  471:	free(info_file);
    #####:  472:	free(file_suffix);
    #####:  473:	return EXIT_SUCCESS;
    %%%%%:  473-block  0
unconditional  0 never executed
        -:  474:}
        -:  475:
        -:  476:int
function remove_from_trash called 0 returned 0% blocks executed 0%
    #####:  477:remove_from_trash(void)
        -:  478:{
        -:  479:	/* List trashed files */
        -:  480:	/* Change CWD to the trash directory. Otherwise, scandir() will fail */
    #####:  481:	if (xchdir(TRASH_FILES_DIR, NO_TITLE) == -1) {
    %%%%%:  481-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  482:		_err(0, NOPRINT_PROMPT, "%s: trash: '%s': %s\n", PROGRAM_NAME,
call    0 never executed
    #####:  483:		    TRASH_FILES_DIR, strerror(errno));
    %%%%%:  483-block  0
call    0 never executed
    #####:  484:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  485:	}
        -:  486:
    #####:  487:	size_t i = 0;
    #####:  488:	struct dirent **trash_files = (struct dirent **)NULL;
    #####:  489:	int files_n = scandir(TRASH_FILES_DIR, &trash_files,
    %%%%%:  489-block  0
unconditional  0 never executed
    %%%%%:  489-block  1
unconditional  1 never executed
    %%%%%:  489-block  2
unconditional  2 never executed
    %%%%%:  489-block  3
unconditional  3 never executed
    %%%%%:  489-block  4
call    4 never executed
    #####:  490:					skip_files, (unicode) ? alphasort : (case_sensitive)
    %%%%%:  490-block  0
branch  0 never executed
branch  1 never executed
    #####:  491:					? xalphasort : alphasort_insensitive);
    %%%%%:  491-block  0
branch  0 never executed
branch  1 never executed
        -:  492:
    #####:  493:	if (files_n) {
branch  0 never executed
branch  1 never executed
    #####:  494:		printf(_("%sTrashed files%s\n\n"), bold, df_c);
    %%%%%:  494-block  0
call    0 never executed
        -:  495:
    #####:  496:		for (i = 0; i < (size_t)files_n; i++)
unconditional  0 never executed
unconditional  1 never executed
    %%%%%:  496-block  0
branch  2 never executed
branch  3 never executed
    #####:  497:			colors_list(trash_files[i]->d_name, (int)i + 1, NO_PAD,
    %%%%%:  497-block  0
call    0 never executed
        -:  498:			    PRINT_NEWLINE);
        -:  499:	}
        -:  500:
        -:  501:	else {
    #####:  502:		puts(_("trash: There are no trashed files"));
    %%%%%:  502-block  0
call    0 never executed
        -:  503:
        -:  504:		/* Restore CWD and return */
    #####:  505:		if (xchdir(ws[cur_ws].path, NO_TITLE) == -1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  506:			_err(0, NOPRINT_PROMPT, "%s: trash: '%s': %s\n",
    #####:  507:			    PROGRAM_NAME, ws[cur_ws].path, strerror(errno));
    %%%%%:  507-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  508:		}
        -:  509:
    #####:  510:		return EXIT_SUCCESS;
    %%%%%:  510-block  0
unconditional  0 never executed
        -:  511:	}
        -:  512:
        -:  513:	/* Restore CWD and continue */
    #####:  514:	if (xchdir(ws[cur_ws].path, NO_TITLE) == -1) {
    %%%%%:  514-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  515:		_err(0, NOPRINT_PROMPT, "%s: trash: '%s': %s\n", PROGRAM_NAME,
    #####:  516:		    ws[cur_ws].path, strerror(errno));
    %%%%%:  516-block  0
call    0 never executed
call    1 never executed
    #####:  517:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  518:	}
        -:  519:
        -:  520:	/* Get user input */
    #####:  521:	printf(_("\n%sEnter 'q' to quit.\n"), df_c);
    %%%%%:  521-block  0
call    0 never executed
    #####:  522:	char *line = (char *)NULL, **rm_elements = (char **)NULL;
        -:  523:
    #####:  524:	while (!line)
unconditional  0 never executed
    %%%%%:  524-block  0
branch  1 never executed
branch  2 never executed
    #####:  525:		line = rl_no_hist(_("File(s) to be removed (ex: 1 2-6, or *): "));
    %%%%%:  525-block  0
call    0 never executed
unconditional  1 never executed
        -:  526:
    #####:  527:	rm_elements = get_substr(line, ' ');
    %%%%%:  527-block  0
call    0 never executed
    #####:  528:	free(line);
        -:  529:
    #####:  530:	if (!rm_elements)
branch  0 never executed
branch  1 never executed
    #####:  531:		return EXIT_FAILURE;
    %%%%%:  531-block  0
unconditional  0 never executed
        -:  532:
        -:  533:	/* Remove files */
    #####:  534:	char rm_file[PATH_MAX] = "", rm_info[PATH_MAX] = "";
    #####:  535:	int ret = -1, exit_status = EXIT_SUCCESS;
        -:  536:
        -:  537:	/* First check for exit, wildcard, and non-number args */
    #####:  538:	for (i = 0; rm_elements[i]; i++) {
    %%%%%:  538-block  0
unconditional  0 never executed
    %%%%%:  538-block  1
unconditional  1 never executed
    %%%%%:  538-block  2
branch  2 never executed
branch  3 never executed
        -:  539:
        -:  540:		/* Quit */
    #####:  541:		if (strcmp(rm_elements[i], "q") == 0) {
    %%%%%:  541-block  0
branch  0 never executed
branch  1 never executed
        -:  542:			size_t j;
        -:  543:
    #####:  544:			for (j = 0; rm_elements[j]; j++)
    %%%%%:  544-block  0
unconditional  0 never executed
    %%%%%:  544-block  1
branch  1 never executed
branch  2 never executed
    #####:  545:				free(rm_elements[j]);
    %%%%%:  545-block  0
unconditional  0 never executed
        -:  546:
    #####:  547:			free(rm_elements);
        -:  548:
    #####:  549:			for (j = 0; j < (size_t)files_n; j++)
    %%%%%:  549-block  0
unconditional  0 never executed
    %%%%%:  549-block  1
branch  1 never executed
branch  2 never executed
    #####:  550:				free(trash_files[j]);
    %%%%%:  550-block  0
unconditional  0 never executed
        -:  551:
    #####:  552:			free(trash_files);
        -:  553:
    #####:  554:			return exit_status;
    %%%%%:  554-block  0
unconditional  0 never executed
        -:  555:		}
        -:  556:
        -:  557:		/* Asterisk */
    #####:  558:		else if (strcmp(rm_elements[i], "*") == 0) {
    %%%%%:  558-block  0
branch  0 never executed
branch  1 never executed
        -:  559:			size_t j;
    #####:  560:			for (j = 0; j < (size_t)files_n; j++) {
    %%%%%:  560-block  0
unconditional  0 never executed
    %%%%%:  560-block  1
branch  1 never executed
branch  2 never executed
        -:  561:
    #####:  562:				snprintf(rm_file, PATH_MAX, "%s/%s", TRASH_FILES_DIR,
    #####:  563:				    trash_files[j]->d_name);
    #####:  564:				snprintf(rm_info, PATH_MAX, "%s/%s.trashinfo",
    #####:  565:				    TRASH_INFO_DIR, trash_files[j]->d_name);
        -:  566:
    #####:  567:				char *tmp_cmd[] = {"rm", "-r", rm_file, rm_info, NULL};
        -:  568:
    #####:  569:				ret = launch_execve(tmp_cmd, FOREGROUND, E_NOFLAG);
    %%%%%:  569-block  0
call    0 never executed
        -:  570:
    #####:  571:				if (ret != EXIT_SUCCESS) {
branch  0 never executed
branch  1 never executed
    #####:  572:					fprintf(stderr, _("%s: trash: Error trashing %s\n"),
    #####:  573:					    PROGRAM_NAME, trash_files[j]->d_name);
    %%%%%:  573-block  0
call    0 never executed
    #####:  574:					exit_status = EXIT_FAILURE;
unconditional  0 never executed
        -:  575:				}
        -:  576:
    #####:  577:				free(trash_files[j]);
    %%%%%:  577-block  0
unconditional  0 never executed
        -:  578:			}
        -:  579:
    #####:  580:			free(trash_files);
        -:  581:
    #####:  582:			for (j = 0; rm_elements[j]; j++)
    %%%%%:  582-block  0
unconditional  0 never executed
    %%%%%:  582-block  1
branch  1 never executed
branch  2 never executed
    #####:  583:				free(rm_elements[j]);
    %%%%%:  583-block  0
unconditional  0 never executed
        -:  584:
    #####:  585:			free(rm_elements);
        -:  586:
    #####:  587:			return exit_status;
    %%%%%:  587-block  0
unconditional  0 never executed
        -:  588:		}
        -:  589:
    #####:  590:		else if (!is_number(rm_elements[i])) {
    %%%%%:  590-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  591:
    #####:  592:			fprintf(stderr, _("%s: trash: %s: Invalid ELN\n"),
    #####:  593:			    PROGRAM_NAME, rm_elements[i]);
    %%%%%:  593-block  0
call    0 never executed
    #####:  594:			exit_status = EXIT_FAILURE;
        -:  595:
        -:  596:			size_t j;
        -:  597:
    #####:  598:			for (j = 0; rm_elements[j]; j++)
unconditional  0 never executed
    %%%%%:  598-block  0
branch  1 never executed
branch  2 never executed
    #####:  599:				free(rm_elements[j]);
    %%%%%:  599-block  0
unconditional  0 never executed
        -:  600:
    #####:  601:			free(rm_elements);
        -:  602:
    #####:  603:			for (j = 0; j < (size_t)files_n; j++)
    %%%%%:  603-block  0
unconditional  0 never executed
    %%%%%:  603-block  1
branch  1 never executed
branch  2 never executed
    #####:  604:				free(trash_files[j]);
    %%%%%:  604-block  0
unconditional  0 never executed
        -:  605:
    #####:  606:			free(trash_files);
        -:  607:
    #####:  608:			return exit_status;
    %%%%%:  608-block  0
unconditional  0 never executed
        -:  609:		}
        -:  610:	}
        -:  611:
        -:  612:	/* If all args are numbers, and neither 'q' nor wildcard */
        -:  613:	int rm_num;
    #####:  614:	for (i = 0; rm_elements[i]; i++) {
    %%%%%:  614-block  0
unconditional  0 never executed
    %%%%%:  614-block  1
unconditional  1 never executed
    %%%%%:  614-block  2
branch  2 never executed
branch  3 never executed
        -:  615:
    #####:  616:		rm_num = atoi(rm_elements[i]);
        -:  617:
    #####:  618:		if (rm_num <= 0 || rm_num > files_n) {
    %%%%%:  618-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  618-block  1
branch  2 never executed
branch  3 never executed
    #####:  619:			fprintf(stderr, _("%s: trash: %d: Invalid ELN\n"),
    %%%%%:  619-block  0
call    0 never executed
        -:  620:			    PROGRAM_NAME, rm_num);
    #####:  621:			free(rm_elements[i]);
    #####:  622:			exit_status = EXIT_FAILURE;
    #####:  623:			continue;
unconditional  0 never executed
        -:  624:		}
        -:  625:
    #####:  626:		snprintf(rm_file, PATH_MAX, "%s/%s", TRASH_FILES_DIR,
    #####:  627:		    trash_files[rm_num - 1]->d_name);
    #####:  628:		snprintf(rm_info, PATH_MAX, "%s/%s.trashinfo", TRASH_INFO_DIR,
    #####:  629:		    trash_files[rm_num - 1]->d_name);
        -:  630:
    #####:  631:		char *tmp_cmd2[] = {"rm", "-r", rm_file, rm_info, NULL};
        -:  632:
    #####:  633:		ret = launch_execve(tmp_cmd2, FOREGROUND, E_NOFLAG);
    %%%%%:  633-block  0
call    0 never executed
        -:  634:
    #####:  635:		if (ret != EXIT_SUCCESS) {
branch  0 never executed
branch  1 never executed
    #####:  636:			fprintf(stderr, _("%s: trash: Error trashing %s\n"),
    #####:  637:			    PROGRAM_NAME, trash_files[rm_num - 1]->d_name);
    %%%%%:  637-block  0
call    0 never executed
    #####:  638:			exit_status = EXIT_FAILURE;
unconditional  0 never executed
        -:  639:		}
        -:  640:
    #####:  641:		free(rm_elements[i]);
    %%%%%:  641-block  0
unconditional  0 never executed
        -:  642:	}
        -:  643:
    #####:  644:	free(rm_elements);
        -:  645:
    #####:  646:	for (i = 0; i < (size_t)files_n; i++)
    %%%%%:  646-block  0
unconditional  0 never executed
    %%%%%:  646-block  1
branch  1 never executed
branch  2 never executed
    #####:  647:		free(trash_files[i]);
    %%%%%:  647-block  0
unconditional  0 never executed
        -:  648:
    #####:  649:	free(trash_files);
        -:  650:
    #####:  651:	return exit_status;
    %%%%%:  651-block  0
unconditional  0 never executed
        -:  652:}
        -:  653:
        -:  654:int
function untrash_element called 0 returned 0% blocks executed 0%
    #####:  655:untrash_element(char *file)
        -:  656:{
    #####:  657:	if (!file)
    %%%%%:  657-block  0
branch  0 never executed
branch  1 never executed
    #####:  658:		return EXIT_FAILURE;
    %%%%%:  658-block  0
unconditional  0 never executed
        -:  659:
    #####:  660:	char undel_file[PATH_MAX] = "", undel_info[PATH_MAX] = "";
    #####:  661:	snprintf(undel_file, PATH_MAX, "%s/%s", TRASH_FILES_DIR, file);
    #####:  662:	snprintf(undel_info, PATH_MAX, "%s/%s.trashinfo", TRASH_INFO_DIR,
        -:  663:	    file);
        -:  664:
        -:  665:	FILE *info_fp;
    #####:  666:	info_fp = fopen(undel_info, "r");
    %%%%%:  666-block  0
call    0 never executed
        -:  667:
    #####:  668:	if (info_fp) {
branch  0 never executed
branch  1 never executed
        -:  669:
    #####:  670:		char *orig_path = (char *)NULL;
        -:  671:		/* The max length for line is Path=(5) + PATH_MAX + \n(1) */
        -:  672:		char line[PATH_MAX + 6];
        -:  673:
    #####:  674:		memset(line, '\0', PATH_MAX + 6);
        -:  675:
    #####:  676:		while (fgets(line, (int)sizeof(line), info_fp)) {
    %%%%%:  676-block  0
unconditional  0 never executed
    %%%%%:  676-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  677:			if (strncmp(line, "Path=", 5) == 0)
    %%%%%:  677-block  0
branch  0 never executed
branch  1 never executed
    #####:  678:				orig_path = straft(line, '=');
    %%%%%:  678-block  0
call    0 never executed
unconditional  1 never executed
        -:  679:		}
        -:  680:
    #####:  681:		fclose(info_fp);
    %%%%%:  681-block  0
call    0 never executed
        -:  682:
        -:  683:		/* If original path is NULL or empty, return error */
    #####:  684:		if (!orig_path)
branch  0 never executed
branch  1 never executed
    #####:  685:			return EXIT_FAILURE;
    %%%%%:  685-block  0
unconditional  0 never executed
        -:  686:
        -:  687:		/*      if (strcmp(orig_path, "") == 0) { */
    #####:  688:		if (*orig_path == '\0') {
    %%%%%:  688-block  0
branch  0 never executed
branch  1 never executed
    #####:  689:			free(orig_path);
    #####:  690:			return EXIT_FAILURE;
    %%%%%:  690-block  0
unconditional  0 never executed
        -:  691:		}
        -:  692:
        -:  693:		/* Remove new line char from original path, if any */
    #####:  694:		size_t orig_path_len = strlen(orig_path);
    #####:  695:		if (orig_path[orig_path_len - 1] == '\n')
    %%%%%:  695-block  0
branch  0 never executed
branch  1 never executed
    #####:  696:			orig_path[orig_path_len - 1] = '\0';
    %%%%%:  696-block  0
unconditional  0 never executed
        -:  697:
        -:  698:		/* Decode original path's URL format */
    #####:  699:		char *url_decoded = url_decode(orig_path);
    %%%%%:  699-block  0
call    0 never executed
        -:  700:
    #####:  701:		if (!url_decoded) {
branch  0 never executed
branch  1 never executed
    #####:  702:			fprintf(stderr, _("%s: undel: %s: Failed decoding path\n"),
    %%%%%:  702-block  0
call    0 never executed
        -:  703:			    PROGRAM_NAME, orig_path);
    #####:  704:			free(orig_path);
    #####:  705:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  706:		}
        -:  707:
    #####:  708:		free(orig_path);
    #####:  709:		orig_path = (char *)NULL;
        -:  710:
        -:  711:		/* Check existence and permissions of parent directory */
    #####:  712:		char *parent = (char *)NULL;
    #####:  713:		parent = strbfrlst(url_decoded, '/');
    %%%%%:  713-block  0
call    0 never executed
        -:  714:
    #####:  715:		if (!parent) {
branch  0 never executed
branch  1 never executed
        -:  716:			/* strbfrlst() returns NULL is file's parent is root (simply
        -:  717:			 * because there's nothing before last slash in this case).
        -:  718:			 * So, check if file's parent is root. Else returns */
        -:  719:
    #####:  720:			if (url_decoded[0] == '/' && strcntchr(url_decoded + 1, '/') == -1) {
    %%%%%:  720-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  720-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  721:				parent = (char *)xnmalloc(2, sizeof(char));
    %%%%%:  721-block  0
call    0 never executed
    #####:  722:				parent[0] = '/';
    #####:  723:				parent[1] = '\0';
unconditional  0 never executed
        -:  724:			}
        -:  725:
        -:  726:			else {
    #####:  727:				free(url_decoded);
    #####:  728:				return EXIT_FAILURE;
    %%%%%:  728-block  0
unconditional  0 never executed
        -:  729:			}
        -:  730:		}
        -:  731:
    #####:  732:		if (access(parent, F_OK) != 0) {
    %%%%%:  732-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  733:			fprintf(stderr, _("%s: undel: %s: No such file or "
    %%%%%:  733-block  0
call    0 never executed
        -:  734:					  "directory\n"),
        -:  735:			    PROGRAM_NAME, parent);
    #####:  736:			free(parent);
    #####:  737:			free(url_decoded);
    #####:  738:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  739:		}
        -:  740:
    #####:  741:		if (access(parent, X_OK | W_OK) != 0) {
    %%%%%:  741-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  742:			fprintf(stderr, _("%s: undel: %s: Permission denied\n"),
    %%%%%:  742-block  0
call    0 never executed
        -:  743:			    PROGRAM_NAME, parent);
    #####:  744:			free(parent);
    #####:  745:			free(url_decoded);
    #####:  746:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  747:		}
        -:  748:
    #####:  749:		free(parent);
        -:  750:
    #####:  751:		char *tmp_cmd[] = {"cp", "-a", undel_file, url_decoded, NULL};
        -:  752:
    #####:  753:		int ret = -1;
    #####:  754:		ret = launch_execve(tmp_cmd, FOREGROUND, E_NOFLAG);
    %%%%%:  754-block  0
call    0 never executed
    #####:  755:		free(url_decoded);
        -:  756:
    #####:  757:		if (ret == EXIT_SUCCESS) {
branch  0 never executed
branch  1 never executed
    #####:  758:			char *tmp_cmd2[] = {"rm", "-r", undel_file, undel_info, NULL};
    #####:  759:			ret = launch_execve(tmp_cmd2, FOREGROUND, E_NOFLAG);
    %%%%%:  759-block  0
call    0 never executed
        -:  760:
    #####:  761:			if (ret != EXIT_SUCCESS) {
branch  0 never executed
branch  1 never executed
    #####:  762:				fprintf(stderr, _("%s: undel: %s: Failed removing "
    %%%%%:  762-block  0
call    0 never executed
        -:  763:						  "info file\n"),
        -:  764:				    PROGRAM_NAME, undel_info);
    #####:  765:				return EXIT_FAILURE;
unconditional  0 never executed
        -:  766:			}
        -:  767:
        -:  768:			else
    #####:  769:				return EXIT_SUCCESS;
    %%%%%:  769-block  0
unconditional  0 never executed
        -:  770:		}
        -:  771:
        -:  772:		else {
    #####:  773:			fprintf(stderr, _("%s: undel: %s: Failed restoring trashed "
    %%%%%:  773-block  0
call    0 never executed
        -:  774:					  "file\n"),
        -:  775:			    PROGRAM_NAME, undel_file);
    #####:  776:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  777:		}
        -:  778:	}
        -:  779:
        -:  780:	else { /* !info_fp */
    #####:  781:		fprintf(stderr, _("%s: undel: Info file for '%s' not found. "
    %%%%%:  781-block  0
call    0 never executed
        -:  782:				  "Try restoring the file manually\n"),
        -:  783:		    PROGRAM_NAME, file);
    #####:  784:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  785:	}
        -:  786:
        -:  787:	return EXIT_FAILURE; /* Never reached */
        -:  788:}
        -:  789:
        -:  790:int
function untrash_function called 0 returned 0% blocks executed 0%
    #####:  791:untrash_function(char **comm)
        -:  792:{
    #####:  793:	if (xargs.stealth_mode == 1) {
    %%%%%:  793-block  0
branch  0 never executed
branch  1 never executed
    #####:  794:		printf("%s: The trash function is disabled in stealth mode\n",
    %%%%%:  794-block  0
call    0 never executed
        -:  795:		    PROGRAM_NAME);
    #####:  796:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  797:	}
        -:  798:
    #####:  799:	if (!comm)
    %%%%%:  799-block  0
branch  0 never executed
branch  1 never executed
    #####:  800:		return EXIT_FAILURE;
    %%%%%:  800-block  0
unconditional  0 never executed
        -:  801:
    #####:  802:	if (!trash_ok) {
    %%%%%:  802-block  0
branch  0 never executed
branch  1 never executed
    #####:  803:		fprintf(stderr, _("%s: Trash function disabled\n"), PROGRAM_NAME);
    %%%%%:  803-block  0
call    0 never executed
    #####:  804:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  805:	}
        -:  806:
        -:  807:	/* Change CWD to the trash directory to make scandir() work */
    #####:  808:	if (xchdir(TRASH_FILES_DIR, NO_TITLE) == -1) {
    %%%%%:  808-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  809:		_err(0, NOPRINT_PROMPT, "%s: undel: '%s': %s\n", PROGRAM_NAME,
call    0 never executed
    #####:  810:		    TRASH_FILES_DIR, strerror(errno));
    %%%%%:  810-block  0
call    0 never executed
    #####:  811:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  812:	}
        -:  813:
        -:  814:	/* Get trashed files */
    #####:  815:	struct dirent **trash_files = (struct dirent **)NULL;
    #####:  816:	int trash_files_n = scandir(TRASH_FILES_DIR, &trash_files,
    %%%%%:  816-block  0
unconditional  0 never executed
    %%%%%:  816-block  1
unconditional  1 never executed
    %%%%%:  816-block  2
unconditional  2 never executed
    %%%%%:  816-block  3
unconditional  3 never executed
    %%%%%:  816-block  4
call    4 never executed
    #####:  817:	    skip_files, (unicode) ? alphasort : (case_sensitive) ? xalphasort
    %%%%%:  817-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  817-block  1
branch  2 never executed
branch  3 never executed
        -:  818:								 : alphasort_insensitive);
    #####:  819:	if (trash_files_n <= 0) {
branch  0 never executed
branch  1 never executed
        -:  820:
    #####:  821:		puts(_("trash: There are no trashed files"));
    %%%%%:  821-block  0
call    0 never executed
        -:  822:
    #####:  823:		if (xchdir(ws[cur_ws].path, NO_TITLE) == -1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  824:			_err(0, NOPRINT_PROMPT, "%s: undel: '%s': %s\n",
    #####:  825:			    PROGRAM_NAME, ws[cur_ws].path, strerror(errno));
    %%%%%:  825-block  0
call    0 never executed
call    1 never executed
    #####:  826:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  827:		}
        -:  828:
    #####:  829:		return EXIT_SUCCESS;
    %%%%%:  829-block  0
unconditional  0 never executed
        -:  830:	}
        -:  831:
    #####:  832:	int exit_status = EXIT_SUCCESS;
        -:  833:	/* if "undel all" (or "u a" or "u *") */
    #####:  834:	if (comm[1] && (strcmp(comm[1], "*") == 0 || strcmp(comm[1], "a") == 0 || strcmp(comm[1], "all") == 0)) {
    %%%%%:  834-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  834-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  834-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:  834-block  3
branch  6 never executed
branch  7 never executed
        -:  835:		size_t j;
        -:  836:
    #####:  837:		for (j = 0; j < (size_t)trash_files_n; j++) {
    %%%%%:  837-block  0
unconditional  0 never executed
    %%%%%:  837-block  1
branch  1 never executed
branch  2 never executed
        -:  838:
    #####:  839:			if (untrash_element(trash_files[j]->d_name) != 0)
    %%%%%:  839-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  840:				exit_status = EXIT_FAILURE;
    %%%%%:  840-block  0
unconditional  0 never executed
        -:  841:
    #####:  842:			free(trash_files[j]);
    %%%%%:  842-block  0
unconditional  0 never executed
        -:  843:		}
        -:  844:
    #####:  845:		free(trash_files);
        -:  846:
    #####:  847:		if (xchdir(ws[cur_ws].path, NO_TITLE) == -1) {
    %%%%%:  847-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  848:			_err(0, NOPRINT_PROMPT, "%s: undel: '%s': %s\n",
    #####:  849:			    PROGRAM_NAME, ws[cur_ws].path, strerror(errno));
    %%%%%:  849-block  0
call    0 never executed
call    1 never executed
    #####:  850:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  851:		}
        -:  852:
    #####:  853:		return exit_status;
    %%%%%:  853-block  0
unconditional  0 never executed
        -:  854:	}
        -:  855:
        -:  856:	/* List trashed files */
    #####:  857:	printf(_("%sTrashed files%s\n\n"), bold, df_c);
    %%%%%:  857-block  0
call    0 never executed
        -:  858:	size_t i;
        -:  859:
    #####:  860:	for (i = 0; i < (size_t)trash_files_n; i++)
unconditional  0 never executed
unconditional  1 never executed
    %%%%%:  860-block  0
branch  2 never executed
branch  3 never executed
    #####:  861:		colors_list(trash_files[i]->d_name, (int)i + 1, NO_PAD,
    %%%%%:  861-block  0
call    0 never executed
        -:  862:		    PRINT_NEWLINE);
        -:  863:
        -:  864:	/* Go back to previous path */
    #####:  865:	if (xchdir(ws[cur_ws].path, NO_TITLE) == -1) {
    %%%%%:  865-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  866:		_err(0, NOPRINT_PROMPT, "%s: undel: '%s': %s\n", PROGRAM_NAME,
    #####:  867:		    ws[cur_ws].path, strerror(errno));
    %%%%%:  867-block  0
call    0 never executed
call    1 never executed
    #####:  868:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  869:	}
        -:  870:
        -:  871:	/* Get user input */
    #####:  872:	printf(_("\n%sEnter 'q' to quit.\n"), df_c);
    %%%%%:  872-block  0
call    0 never executed
    #####:  873:	int undel_n = 0;
    #####:  874:	char *line = (char *)NULL, **undel_elements = (char **)NULL;
    #####:  875:	while (!line)
unconditional  0 never executed
    %%%%%:  875-block  0
branch  1 never executed
branch  2 never executed
    #####:  876:		line = rl_no_hist(_("File(s) to be undeleted (ex: 1 2-6, or *): "));
    %%%%%:  876-block  0
call    0 never executed
unconditional  1 never executed
        -:  877:
    #####:  878:	undel_elements = get_substr(line, ' ');
    %%%%%:  878-block  0
call    0 never executed
    #####:  879:	free(line);
    #####:  880:	line = (char *)NULL;
    #####:  881:	if (undel_elements) {
branch  0 never executed
branch  1 never executed
        -:  882:
    #####:  883:		for (i = 0; undel_elements[i]; i++)
    %%%%%:  883-block  0
unconditional  0 never executed
    %%%%%:  883-block  1
branch  1 never executed
branch  2 never executed
    #####:  884:			undel_n++;
    %%%%%:  884-block  0
unconditional  0 never executed
        -:  885:	}
        -:  886:
        -:  887:	else
    #####:  888:		return EXIT_FAILURE;
    %%%%%:  888-block  0
unconditional  0 never executed
        -:  889:
        -:  890:	/* First check for quit, *, and non-number args */
    #####:  891:	int free_and_return = 0;
        -:  892:
    #####:  893:	for (i = 0; i < (size_t)undel_n; i++) {
    %%%%%:  893-block  0
unconditional  0 never executed
    %%%%%:  893-block  1
unconditional  1 never executed
    %%%%%:  893-block  2
branch  2 never executed
branch  3 never executed
        -:  894:
    #####:  895:		if (strcmp(undel_elements[i], "q") == 0)
    %%%%%:  895-block  0
branch  0 never executed
branch  1 never executed
    #####:  896:			free_and_return = 1;
    %%%%%:  896-block  0
unconditional  0 never executed
        -:  897:
    #####:  898:		else if (strcmp(undel_elements[i], "*") == 0) {
    %%%%%:  898-block  0
branch  0 never executed
branch  1 never executed
        -:  899:			size_t j;
        -:  900:
    #####:  901:			for (j = 0; j < (size_t)trash_files_n; j++)
    %%%%%:  901-block  0
unconditional  0 never executed
    %%%%%:  901-block  1
unconditional  1 never executed
    %%%%%:  901-block  2
branch  2 never executed
branch  3 never executed
        -:  902:
    #####:  903:				if (untrash_element(trash_files[j]->d_name) != 0)
    %%%%%:  903-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  904:					exit_status = EXIT_FAILURE;
    %%%%%:  904-block  0
unconditional  0 never executed
        -:  905:
    #####:  906:			free_and_return = 1;
    %%%%%:  906-block  0
unconditional  0 never executed
        -:  907:		}
        -:  908:
    #####:  909:		else if (!is_number(undel_elements[i])) {
    %%%%%:  909-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  910:			fprintf(stderr, _("undel: %s: Invalid ELN\n"), undel_elements[i]);
    %%%%%:  910-block  0
call    0 never executed
    #####:  911:			exit_status = EXIT_FAILURE;
    #####:  912:			free_and_return = 1;
unconditional  0 never executed
        -:  913:		}
        -:  914:	}
        -:  915:
        -:  916:	/* Free and return if any of the above conditions is true */
    #####:  917:	if (free_and_return) {
    %%%%%:  917-block  0
branch  0 never executed
branch  1 never executed
    #####:  918:		size_t j = 0;
        -:  919:
    #####:  920:		for (j = 0; j < (size_t)undel_n; j++)
    %%%%%:  920-block  0
unconditional  0 never executed
    %%%%%:  920-block  1
branch  1 never executed
branch  2 never executed
    #####:  921:			free(undel_elements[j]);
    %%%%%:  921-block  0
unconditional  0 never executed
        -:  922:
    #####:  923:		free(undel_elements);
        -:  924:
    #####:  925:		for (j = 0; j < (size_t)trash_files_n; j++)
    %%%%%:  925-block  0
unconditional  0 never executed
    %%%%%:  925-block  1
branch  1 never executed
branch  2 never executed
    #####:  926:			free(trash_files[j]);
    %%%%%:  926-block  0
unconditional  0 never executed
        -:  927:
    #####:  928:		free(trash_files);
        -:  929:
    #####:  930:		return exit_status;
    %%%%%:  930-block  0
unconditional  0 never executed
        -:  931:	}
        -:  932:
        -:  933:	/* Undelete trashed files */
        -:  934:	int undel_num;
    #####:  935:	for (i = 0; i < (size_t)undel_n; i++) {
    %%%%%:  935-block  0
unconditional  0 never executed
    %%%%%:  935-block  1
unconditional  1 never executed
    %%%%%:  935-block  2
branch  2 never executed
branch  3 never executed
    #####:  936:		undel_num = atoi(undel_elements[i]);
        -:  937:
    #####:  938:		if (undel_num <= 0 || undel_num > trash_files_n) {
    %%%%%:  938-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  938-block  1
branch  2 never executed
branch  3 never executed
    #####:  939:			fprintf(stderr, _("%s: undel: %d: Invalid ELN\n"),
    %%%%%:  939-block  0
call    0 never executed
        -:  940:			    PROGRAM_NAME, undel_num);
    #####:  941:			free(undel_elements[i]);
    #####:  942:			continue;
unconditional  0 never executed
        -:  943:		}
        -:  944:
        -:  945:		/* If valid ELN */
    #####:  946:		if (untrash_element(trash_files[undel_num - 1]->d_name) != 0)
    %%%%%:  946-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  947:			exit_status = EXIT_FAILURE;
    %%%%%:  947-block  0
unconditional  0 never executed
        -:  948:
    #####:  949:		free(undel_elements[i]);
    %%%%%:  949-block  0
unconditional  0 never executed
        -:  950:	}
        -:  951:
    #####:  952:	free(undel_elements);
        -:  953:
        -:  954:	/* Free trashed files list */
    #####:  955:	for (i = 0; i < (size_t)trash_files_n; i++)
    %%%%%:  955-block  0
unconditional  0 never executed
    %%%%%:  955-block  1
branch  1 never executed
branch  2 never executed
    #####:  956:		free(trash_files[i]);
    %%%%%:  956-block  0
unconditional  0 never executed
        -:  957:
    #####:  958:	free(trash_files);
        -:  959:
        -:  960:	/* If some trashed file still remains, reload the undel screen */
    #####:  961:	trash_n = count_dir(TRASH_FILES_DIR);
    %%%%%:  961-block  0
call    0 never executed
        -:  962:
    #####:  963:	if (trash_n <= 2)
branch  0 never executed
branch  1 never executed
    #####:  964:		trash_n = 0;
    %%%%%:  964-block  0
unconditional  0 never executed
        -:  965:
    #####:  966:	if (trash_n)
    %%%%%:  966-block  0
branch  0 never executed
branch  1 never executed
    #####:  967:		untrash_function(comm);
    %%%%%:  967-block  0
call    0 never executed
unconditional  1 never executed
        -:  968:
    #####:  969:	return exit_status;
    %%%%%:  969-block  0
unconditional  0 never executed
        -:  970:}
        -:  971:
        -:  972:/* Check whether the current user has enough permissions (write, execute)
        -:  973: * to modify the contents of the parent directory of 'file'. 'file' needs
        -:  974: * to be an absolute path. Returns zero if yes and one if no. Useful to
        -:  975: * know if a file can be removed from or copied into the parent. In case
        -:  976: * FILE is a directory, the function checks all its subdirectories for
        -:  977: * appropriate permissions, including the immutable bit */
        -:  978:int
function wx_parent_check called 0 returned 0% blocks executed 0%
    #####:  979:wx_parent_check(char *file)
        -:  980:{
        -:  981:	struct stat file_attrib;
    #####:  982:	int exit_status = -1, ret = -1;
    #####:  983:	size_t file_len = strlen(file);
        -:  984:
    #####:  985:	if (file[file_len - 1] == '/')
    %%%%%:  985-block  0
branch  0 never executed
branch  1 never executed
    #####:  986:		file[file_len - 1] = '\0';
    %%%%%:  986-block  0
unconditional  0 never executed
        -:  987:
    #####:  988:	if (lstat(file, &file_attrib) == -1) {
    %%%%%:  988-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  989:		fprintf(stderr, _("%s: No such file or directory\n"), file);
    %%%%%:  989-block  0
call    0 never executed
    #####:  990:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  991:	}
        -:  992:
    #####:  993:	char *parent = strbfrlst(file, '/');
    %%%%%:  993-block  0
call    0 never executed
    #####:  994:	if (!parent) {
branch  0 never executed
branch  1 never executed
        -:  995:		/* strbfrlst() will return NULL if file's parent is root (/),
        -:  996:		 * simply because in this case there's nothing before the last
        -:  997:		 * slash. So, check if file's parent dir is root */
    #####:  998:		if (file[0] == '/' && strcntchr(file + 1, '/') == -1) {
    %%%%%:  998-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  998-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  999:			parent = (char *)xnmalloc(2, sizeof(char));
    %%%%%:  999-block  0
call    0 never executed
    #####: 1000:			parent[0] = '/';
    #####: 1001:			parent[1] = '\0';
unconditional  0 never executed
        -: 1002:		}
        -: 1003:
        -: 1004:		else {
    #####: 1005:			fprintf(stderr, _("%s: %s: Error getting parent directory\n"),
    %%%%%: 1005-block  0
call    0 never executed
        -: 1006:					PROGRAM_NAME, file);
    #####: 1007:			return EXIT_FAILURE;
unconditional  0 never executed
        -: 1008:		}
        -: 1009:	}
        -: 1010:
    #####: 1011:	switch (file_attrib.st_mode & S_IFMT) {
    %%%%%: 1011-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1012:
        -: 1013:	/* DIRECTORY */
    #####: 1014:	case S_IFDIR:
    #####: 1015:		ret = check_immutable_bit(file);
    %%%%%: 1015-block  0
call    0 never executed
        -: 1016:
    #####: 1017:		if (ret == -1) {
branch  0 never executed
branch  1 never executed
        -: 1018:			/* Error message is printed by check_immutable_bit() itself */
    #####: 1019:			exit_status = EXIT_FAILURE;
    %%%%%: 1019-block  0
unconditional  0 never executed
        -: 1020:		}
        -: 1021:
    #####: 1022:		else if (ret == 1) {
    %%%%%: 1022-block  0
branch  0 never executed
branch  1 never executed
    #####: 1023:			fprintf(stderr, _("%s: Directory is immutable\n"), file);
    %%%%%: 1023-block  0
call    0 never executed
    #####: 1024:			exit_status = EXIT_FAILURE;
unconditional  0 never executed
        -: 1025:		}
        -: 1026:
        -: 1027:		/* Check the parent for appropriate permissions */
    #####: 1028:		else if (access(parent, W_OK | X_OK) == 0) {
    %%%%%: 1028-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1029:			int files_n = count_dir(parent);
    %%%%%: 1029-block  0
call    0 never executed
        -: 1030:
    #####: 1031:			if (files_n > 2) {
branch  0 never executed
branch  1 never executed
        -: 1032:				/* I manually check here subdir because recur_perm_check()
        -: 1033:				 * will only check the contents of subdir, but not subdir
        -: 1034:				 * itself */
        -: 1035:				/* If the parent is ok and not empty, check subdir */
    #####: 1036:				if (access(file, W_OK | X_OK) == 0) {
    %%%%%: 1036-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1037:					/* If subdir is ok and not empty, recusivelly check
        -: 1038:					 * subdir */
    #####: 1039:					files_n = count_dir(file);
    %%%%%: 1039-block  0
call    0 never executed
        -: 1040:
    #####: 1041:					if (files_n > 2) {
branch  0 never executed
branch  1 never executed
        -: 1042:						/* Reset the recur_perm_check() error flag. See
        -: 1043:						 * the note in the function block. */
    #####: 1044:						recur_perm_error_flag = 0;
        -: 1045:
    #####: 1046:						if (recur_perm_check(file) == 0) {
    %%%%%: 1046-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1047:							exit_status = EXIT_SUCCESS;
    %%%%%: 1047-block  0
unconditional  0 never executed
        -: 1048:						}
        -: 1049:
        -: 1050:						else
        -: 1051:							/* recur_perm_check itself will print the
        -: 1052:							 * error messages */
    #####: 1053:							exit_status = EXIT_FAILURE;
    %%%%%: 1053-block  0
unconditional  0 never executed
        -: 1054:					}
        -: 1055:
        -: 1056:					else /* Subdir is ok and empty */
    #####: 1057:						exit_status = EXIT_SUCCESS;
    %%%%%: 1057-block  0
unconditional  0 never executed
        -: 1058:				}
        -: 1059:
        -: 1060:				else { /* No permission for subdir */
    #####: 1061:					fprintf(stderr, _("%s: Permission denied\n"),
    %%%%%: 1061-block  0
call    0 never executed
        -: 1062:					    file);
    #####: 1063:					exit_status = EXIT_FAILURE;
unconditional  0 never executed
        -: 1064:				}
        -: 1065:			}
        -: 1066:
        -: 1067:			else
    #####: 1068:				exit_status = EXIT_SUCCESS;
    %%%%%: 1068-block  0
unconditional  0 never executed
        -: 1069:		}
        -: 1070:
        -: 1071:		else { /* No permission for parent */
    #####: 1072:			fprintf(stderr, _("%s: Permission denied\n"), parent);
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:			exit_status = EXIT_FAILURE;
unconditional  0 never executed
        -: 1074:		}
    #####: 1075:		break;
    %%%%%: 1075-block  0
unconditional  0 never executed
        -: 1076:
        -: 1077:	/* REGULAR FILE */
    #####: 1078:	case S_IFREG:
    #####: 1079:		ret = check_immutable_bit(file);
    %%%%%: 1079-block  0
call    0 never executed
        -: 1080:
    #####: 1081:		if (ret == -1) {
branch  0 never executed
branch  1 never executed
        -: 1082:			/* Error message is printed by check_immutable_bit()
        -: 1083:			 * itself */
    #####: 1084:			exit_status = EXIT_FAILURE;
    %%%%%: 1084-block  0
unconditional  0 never executed
        -: 1085:		}
        -: 1086:
    #####: 1087:		else if (ret == 1) {
    %%%%%: 1087-block  0
branch  0 never executed
branch  1 never executed
    #####: 1088:			fprintf(stderr, _("%s: File is immutable\n"), file);
    %%%%%: 1088-block  0
call    0 never executed
    #####: 1089:			exit_status = EXIT_FAILURE;
unconditional  0 never executed
        -: 1090:		}
        -: 1091:
    #####: 1092:		else if (parent) {
    %%%%%: 1092-block  0
branch  0 never executed
branch  1 never executed
        -: 1093:
    #####: 1094:			if (access(parent, W_OK | X_OK) == 0)
    %%%%%: 1094-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1095:				exit_status = EXIT_SUCCESS;
    %%%%%: 1095-block  0
unconditional  0 never executed
        -: 1096:
        -: 1097:			else {
    #####: 1098:				fprintf(stderr, _("%s: Permission denied\n"), parent);
    %%%%%: 1098-block  0
call    0 never executed
    #####: 1099:				exit_status = EXIT_FAILURE;
unconditional  0 never executed
        -: 1100:			}
        -: 1101:		}
        -: 1102:
    #####: 1103:		break;
    %%%%%: 1103-block  0
unconditional  0 never executed
        -: 1104:
        -: 1105:	/* SYMLINK, SOCKET, AND FIFO PIPE */
    #####: 1106:	case S_IFSOCK:
        -: 1107:	case S_IFIFO:
        -: 1108:	case S_IFLNK:
        -: 1109:		/* Symlinks, sockets and pipes do not support immutable bit */
    #####: 1110:		if (parent) {
    %%%%%: 1110-block  0
branch  0 never executed
branch  1 never executed
        -: 1111:
    #####: 1112:			if (access(parent, W_OK | X_OK) == 0)
    %%%%%: 1112-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1113:				exit_status = EXIT_SUCCESS;
    %%%%%: 1113-block  0
unconditional  0 never executed
        -: 1114:
        -: 1115:			else {
    #####: 1116:				fprintf(stderr, _("%s: Permission denied\n"), parent);
    %%%%%: 1116-block  0
call    0 never executed
    #####: 1117:				exit_status = EXIT_FAILURE;
unconditional  0 never executed
        -: 1118:			}
        -: 1119:		}
    #####: 1120:		break;
    %%%%%: 1120-block  0
unconditional  0 never executed
        -: 1121:
        -: 1122:	/* DO NOT TRASH BLOCK AND CHAR DEVICES */
    #####: 1123:	default:
    #####: 1124:		fprintf(stderr, _("%s: trash: %s (%s): Unsupported file type\n"),
    %%%%%: 1124-block  0
unconditional  0 never executed
    %%%%%: 1124-block  1
unconditional  1 never executed
    %%%%%: 1124-block  2
call    2 never executed
    #####: 1125:		    PROGRAM_NAME, file, ((file_attrib.st_mode & S_IFMT) == S_IFBLK)
    %%%%%: 1125-block  0
branch  0 never executed
branch  1 never executed
    #####: 1126:		    ? "Block device" : ((file_attrib.st_mode & S_IFMT) == S_IFCHR)
    #####: 1127:		    ? "Character device" : "Unknown filetype");
    %%%%%: 1127-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1127-block  1
unconditional  2 never executed
    %%%%%: 1127-block  2
unconditional  3 never executed
    #####: 1128:		exit_status = EXIT_FAILURE;
    #####: 1129:		break;
unconditional  0 never executed
        -: 1130:	}
        -: 1131:
    #####: 1132:	if (parent)
    %%%%%: 1132-block  0
branch  0 never executed
branch  1 never executed
    #####: 1133:		free(parent);
    %%%%%: 1133-block  0
unconditional  0 never executed
        -: 1134:
    #####: 1135:	return exit_status;
    %%%%%: 1135-block  0
unconditional  0 never executed
        -: 1136:}
        -: 1137:
        -: 1138:/* Recursively check directory permissions (write and execute). Returns
        -: 1139: * zero if OK, and one if at least one subdirectory does not have
        -: 1140: * write/execute permissions */
        -: 1141:int
function recur_perm_check called 0 returned 0% blocks executed 0%
    #####: 1142:recur_perm_check(const char *dirname)
        -: 1143:{
        -: 1144:	DIR *dir;
        -: 1145:	struct dirent *ent;
        -: 1146:
    #####: 1147:	if (!(dir = opendir(dirname)))
    %%%%%: 1147-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1148:		return EXIT_FAILURE;
    %%%%%: 1148-block  0
unconditional  0 never executed
        -: 1149:
    #####: 1150:	while ((ent = readdir(dir)) != NULL) {
    %%%%%: 1150-block  0
unconditional  0 never executed
    %%%%%: 1150-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1151:
    #####: 1152:		if (ent->d_type == DT_DIR) {
    %%%%%: 1152-block  0
branch  0 never executed
branch  1 never executed
    #####: 1153:			char dirpath[PATH_MAX] = "";
        -: 1154:
    #####: 1155:			if (*ent->d_name == '.' && (!ent->d_name[1]
    %%%%%: 1155-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1155-block  1
branch  2 never executed
branch  3 never executed
    #####: 1156:			|| (ent->d_name[1] == '.' && !ent->d_name[2])))
    %%%%%: 1156-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1156-block  1
branch  2 never executed
branch  3 never executed
    #####: 1157:				continue;
    %%%%%: 1157-block  0
unconditional  0 never executed
        -: 1158:
    #####: 1159:			snprintf(dirpath, PATH_MAX, "%s/%s", dirname, ent->d_name);
        -: 1160:
    #####: 1161:			if (access(dirpath, W_OK | X_OK) != 0) {
    %%%%%: 1161-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1162:				/* recur_perm_error_flag needs to be a global variable.
        -: 1163:				  * Otherwise, since this function calls itself
        -: 1164:				  * recursivelly, the flag would be reset upon every
        -: 1165:				  * new call, without preserving the error code, which
        -: 1166:				  * is what the flag is aimed to do. On the other side,
        -: 1167:				  * if I use a local static variable for this flag, it
        -: 1168:				  * will never drop the error value, and all subsequent
        -: 1169:				  * calls to the function will allways return error
        -: 1170:				  * (even if there's no actual error) */
    #####: 1171:				recur_perm_error_flag = 1;
    #####: 1172:				fprintf(stderr, _("%s: Permission denied\n"), dirpath);
    %%%%%: 1172-block  0
call    0 never executed
unconditional  1 never executed
        -: 1173:			}
        -: 1174:
    #####: 1175:			recur_perm_check(dirpath);
    %%%%%: 1175-block  0
call    0 never executed
        -: 1176:		}
        -: 1177:	}
        -: 1178:
    #####: 1179:	closedir(dir);
    %%%%%: 1179-block  0
call    0 never executed
        -: 1180:
    #####: 1181:	if (recur_perm_error_flag)
branch  0 never executed
branch  1 never executed
    #####: 1182:		return EXIT_FAILURE;
    %%%%%: 1182-block  0
unconditional  0 never executed
        -: 1183:
    #####: 1184:	return EXIT_SUCCESS;
    %%%%%: 1184-block  0
unconditional  0 never executed
        -: 1185:}
