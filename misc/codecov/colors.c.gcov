        -:    0:Source:colors.c
        -:    1:/* colors.c -- functions to control interface color */
        -:    2:
        -:    3:/*
        -:    4: * This file is part of CliFM
        -:    5: * 
        -:    6: * Copyright (C) 2016-2021, L. Abramovich <johndoe.arch@outlook.com>
        -:    7: * All rights reserved.
        -:    8:
        -:    9: * CliFM is free software; you can redistribute it and/or modify
        -:   10: * it under the terms of the GNU General Public License as published by
        -:   11: * the Free Software Foundation; either version 2 of the License, or
        -:   12: * (at your option) any later version.
        -:   13: *
        -:   14: * CliFM is distributed in the hope that it will be useful,
        -:   15: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   16: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   17: * GNU General Public License for more details.
        -:   18: *
        -:   19: * You should have received a copy of the GNU General Public License
        -:   20: * along with this program; if not, write to the Free Software
        -:   21: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
        -:   22: * MA 02110-1301, USA.
        -:   23:*/
        -:   24:
        -:   25:#include "helpers.h"
        -:   26:
        -:   27:#include <stdio.h>
        -:   28:#include <sys/stat.h>
        -:   29:#include <sys/types.h>
        -:   30:#ifdef __linux__
        -:   31:#include <sys/capability.h>
        -:   32:#endif
        -:   33:#include <dirent.h>
        -:   34:#include <errno.h>
        -:   35:#include <string.h>
        -:   36:#include <unistd.h>
        -:   37:
        -:   38:#include "aux.h"
        -:   39:#include "colors.h"
        -:   40:#include "listing.h"
        -:   41:#include "mime.h"
        -:   42:#include "misc.h"
        -:   43:#include "messages.h"
        -:   44:#include "file_operations.h"
        -:   45:
        -:   46:/* Returns a pointer to the corresponding color code for EXT, if some
        -:   47: * color was defined */
        -:   48:char *
function get_ext_color called 3826 returned 100% blocks executed 95%
     3826:   49:get_ext_color(const char *ext)
        -:   50:{
     3826:   51:	if (!ext || !ext_colors_n)
     3826:   51-block  0
branch  0 taken 3826 (fallthrough)
branch  1 taken 0
     3826:   51-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 3826
    #####:   52:		return (char *)NULL;
    %%%%%:   52-block  0
unconditional  0 never executed
        -:   53:
     3826:   54:	ext++;
        -:   55:
     3826:   56:	int i = (int)ext_colors_n;
   246690:   57:	while (--i >= 0) {
     3826:   57-block  0
unconditional  0 taken 3826
   246690:   57-block  1
branch  1 taken 243356
branch  2 taken 3334 (fallthrough)
   243356:   58:		if (!ext_colors[i] || !*ext_colors[i] || !ext_colors[i][2])
   243356:   58-block  0
branch  0 taken 243356 (fallthrough)
branch  1 taken 0
   243356:   58-block  1
branch  2 taken 239530 (fallthrough)
branch  3 taken 3826
   239530:   58-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 239530
     3826:   59:			continue;
     3826:   59-block  0
unconditional  0 taken 3826
        -:   60:
   239530:   61:		char *p = (char *)ext,
   239530:   62:			 *q = ext_colors[i];
        -:   63:		/* +2 because stored extensions have this form: *.ext */
   239530:   64:		q += 2;
        -:   65:
   239530:   66:		size_t match = 1;
   247233:   67:		while (*p) {
   239530:   67-block  0
unconditional  0 taken 239530
   247233:   67-block  1
branch  1 taken 245871
branch  2 taken 1362 (fallthrough)
   245871:   68:			if (*p++ != *q++) {
   245871:   68-block  0
branch  0 taken 238168 (fallthrough)
branch  1 taken 7703
   238168:   69:				match = 0;
   238168:   70:				break;
   238168:   70-block  0
unconditional  0 taken 238168
        -:   71:			}
        -:   72:		}
        -:   73:
   239530:   74:		if (!match || *q != '=')
   239530:   74-block  0
branch  0 taken 1362 (fallthrough)
branch  1 taken 238168
     1362:   74-block  1
branch  2 taken 870 (fallthrough)
branch  3 taken 492
   239038:   75:			continue;
   239038:   75-block  0
unconditional  0 taken 239038
      492:   76:		return ++q;
      492:   76-block  0
unconditional  0 taken 492
        -:   77:	}
        -:   78:
     3334:   79:	return (char *)NULL;
     3334:   79-block  0
unconditional  0 taken 3334
        -:   80:}
        -:   81:
        -:   82:/* Check if STR has the format of a color code string (a number or a
        -:   83: * semicolon list (max 12 fields) of numbers of at most 3 digits each).
        -:   84: * Returns 1 if true and 0 if false. */
        -:   85:static int
function is_color_code called 3028 returned 100% blocks executed 76%
     3028:   86:is_color_code(const char *str)
        -:   87:{
     3028:   88:	if (!str || !*str)
     3028:   88-block  0
branch  0 taken 3028 (fallthrough)
branch  1 taken 0
     3028:   88-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 3028
    #####:   89:		return 0;
    %%%%%:   89-block  0
unconditional  0 never executed
        -:   90:
     3028:   91:	size_t digits = 0, semicolon = 0;
        -:   92:
    20761:   93:	while (*str) {
     3028:   93-block  0
unconditional  0 taken 3028
    20761:   93-block  1
branch  1 taken 17733
branch  2 taken 3028 (fallthrough)
    17733:   94:		if (*str >= '0' && *str <= '9') {
    17733:   94-block  0
branch  0 taken 17733 (fallthrough)
branch  1 taken 0
    17733:   94-block  1
branch  2 taken 13879 (fallthrough)
branch  3 taken 3854
    13879:   95:			digits++;
    13879:   95-block  0
unconditional  0 taken 13879
     3854:   96:		} else if (*str == ';') {
     3854:   96-block  0
branch  0 taken 3854 (fallthrough)
branch  1 taken 0
     3854:   97:			if (*(str + 1) == ';') /* Consecutive semicolons */
     3854:   97-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3854
    #####:   98:				return 0;
    %%%%%:   98-block  0
unconditional  0 never executed
     3854:   99:			digits = 0;
     3854:  100:			semicolon++;
     3854:  100-block  0
unconditional  0 taken 3854
    #####:  101:		} else if (*str != '\n') {
    %%%%%:  101-block  0
branch  0 never executed
branch  1 never executed
        -:  102:		/* Neither digit nor semicolon */
    #####:  103:			return 0;
    %%%%%:  103-block  0
unconditional  0 never executed
        -:  104:		}
    17733:  105:		str++;
    17733:  105-block  0
unconditional  0 taken 17733
        -:  106:	}
        -:  107:
        -:  108:	/* No digits at all, ending semicolon, more than eleven fields, or
        -:  109:	 * more than three consecutive digits */
     3028:  110:	if (!digits || digits > 3 || semicolon > 11)
     3028:  110-block  0
branch  0 taken 3028 (fallthrough)
branch  1 taken 0
     3028:  110-block  1
branch  2 taken 3028 (fallthrough)
branch  3 taken 0
     3028:  110-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 3028
    #####:  111:		return 0;
    %%%%%:  111-block  0
unconditional  0 never executed
        -:  112:
        -:  113:	/* At this point, we have a semicolon separated string of digits (3
        -:  114:	 * consecutive max) with at most 12 fields. The only thing not
        -:  115:	 * validated here are numbers themselves */
     3028:  116:	return 1;
     3028:  116-block  0
unconditional  0 taken 3028
        -:  117:}
        -:  118:
        -:  119:/* Strip color lines from the config file (FiletypeColors, if mode is
        -:  120: * 't', and ExtColors, if mode is 'x') returning the same string
        -:  121: * containing only allowed characters */
        -:  122:static char *
function strip_color_line called 78 returned 100% blocks executed 92%
       78:  123:strip_color_line(const char *str, char mode)
        -:  124:{
       78:  125:	if (!str || !*str)
       78:  125-block  0
branch  0 taken 78 (fallthrough)
branch  1 taken 0
       78:  125-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 78
    #####:  126:		return (char *)NULL;
    %%%%%:  126-block  0
unconditional  0 never executed
        -:  127:
       78:  128:	char *buf = (char *)xnmalloc(strlen(str) + 1, sizeof(char));
       78:  128-block  0
call    0 returned 78
       78:  129:	size_t len = 0;
        -:  130:
       78:  131:	switch (mode) {
branch  0 taken 52
branch  1 taken 26
branch  2 taken 0
       52:  132:	case 't': /* di=01;31: */
    12689:  133:		while (*str) {
       52:  133-block  0
unconditional  0 taken 52
    12689:  133-block  1
branch  1 taken 12637
branch  2 taken 52 (fallthrough)
    12637:  134:			if ((*str >= '0' && *str <= '9') || (*str >= 'a' && *str <= 'z')
    12637:  134-block  0
branch  0 taken 12481 (fallthrough)
branch  1 taken 156
    12481:  134-block  1
branch  2 taken 6694 (fallthrough)
branch  3 taken 5787
     6850:  134-block  2
branch  4 taken 2532 (fallthrough)
branch  5 taken 4318
     2532:  134-block  3
branch  6 taken 0 (fallthrough)
branch  7 taken 2532
     4318:  135:			|| *str == '=' || *str == ';' || *str == ':')
     4318:  135-block  0
branch  0 taken 3052 (fallthrough)
branch  1 taken 1266
     3052:  135-block  1
branch  2 taken 1422 (fallthrough)
branch  3 taken 1630
     1422:  135-block  2
branch  4 taken 1266 (fallthrough)
branch  5 taken 156
    12481:  136:				buf[len++] = *str;
    12481:  136-block  0
unconditional  0 taken 12481
    12637:  137:			str++;
    12637:  137-block  0
unconditional  0 taken 12637
        -:  138:		}
       52:  139:		break;
       52:  139-block  0
unconditional  0 taken 52
        -:  140:
       26:  141:	case 'x': /* *.tar=01;31: */
    22832:  142:		while (*str) {
       26:  142-block  0
unconditional  0 taken 26
    22832:  142-block  1
branch  1 taken 22806
branch  2 taken 26 (fallthrough)
    22806:  143:			if ((*str >= '0' && *str <= '9') || (*str >= 'a' && *str <= 'z')
    22806:  143-block  0
branch  0 taken 19204 (fallthrough)
branch  1 taken 3602
    19204:  143-block  1
branch  2 taken 10826 (fallthrough)
branch  3 taken 8378
    14428:  143-block  2
branch  4 taken 5078 (fallthrough)
branch  5 taken 9350
     5078:  143-block  3
branch  6 taken 0 (fallthrough)
branch  7 taken 5078
    9350*:  144:			|| (*str >= 'A' && *str <= 'Z') || *str == '*' || *str == '.'
     9350:  144-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 9350
    %%%%%:  144-block  1
branch  2 never executed
branch  3 never executed
     9350:  144-block  2
branch  4 taken 7588 (fallthrough)
branch  5 taken 1762
     7588:  144-block  3
branch  6 taken 5826 (fallthrough)
branch  7 taken 1762
     5826:  145:			|| *str == '=' || *str == ';' || *str == ':')
     5826:  145-block  0
branch  0 taken 4064 (fallthrough)
branch  1 taken 1762
     4064:  145-block  1
branch  2 taken 1840 (fallthrough)
branch  3 taken 2224
     1840:  145-block  2
branch  4 taken 1762 (fallthrough)
branch  5 taken 78
    22728:  146:				buf[len++] = *str;
    22728:  146-block  0
unconditional  0 taken 22728
    22806:  147:			str++;
    22806:  147-block  0
unconditional  0 taken 22806
        -:  148:		}
       26:  149:		break;
       26:  149-block  0
unconditional  0 taken 26
        -:  150:	}
        -:  151:
       78:  152:	if (!len || !*buf) {
       78:  152-block  0
branch  0 taken 78 (fallthrough)
branch  1 taken 0
       78:  152-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 78
    #####:  153:		free(buf);
    #####:  154:		return (char *)NULL;
    %%%%%:  154-block  0
unconditional  0 never executed
        -:  155:	}
        -:  156:
       78:  157:	buf[len] = '\0';
       78:  158:	return buf;
       78:  158-block  0
unconditional  0 taken 78
        -:  159:}
        -:  160:
        -:  161:static void
function free_colors called 3 returned 100% blocks executed 100%
        3:  162:free_colors(void)
        -:  163:{
        -:  164:	/* Reset whatever value was loaded */
        3:  165:	*sh_c = '\0';
        3:  166:	*sf_c = '\0';
        3:  167:	*sc_c = '\0';
        3:  168:	*sx_c = '\0';
        3:  169:	*bm_c = '\0';
        3:  170:	*dl_c = '\0';
        3:  171:	*el_c = '\0';
        3:  172:	*mi_c = '\0';
        3:  173:	*tx_c = '\0';
        3:  174:	*df_c = '\0';
        3:  175:	*dc_c = '\0';
        3:  176:	*wc_c = '\0';
        3:  177:	*dh_c = '\0';
        3:  178:	*li_c = '\0';
        3:  179:	*ti_c = '\0';
        3:  180:	*em_c = '\0';
        3:  181:	*wm_c = '\0';
        3:  182:	*nm_c = '\0';
        3:  183:	*si_c = '\0';
        3:  184:	*nd_c = '\0';
        3:  185:	*nf_c = '\0';
        3:  186:	*di_c = '\0';
        3:  187:	*ed_c = '\0';
        3:  188:	*ne_c = '\0';
        3:  189:	*ex_c = '\0';
        3:  190:	*ee_c = '\0';
        3:  191:	*bd_c = '\0';
        3:  192:	*ln_c = '\0';
        3:  193:	*mh_c = '\0';
        3:  194:	*or_c = '\0';
        3:  195:	*so_c = '\0';
        3:  196:	*pi_c = '\0';
        3:  197:	*cd_c = '\0';
        3:  198:	*fi_c = '\0';
        3:  199:	*ef_c = '\0';
        3:  200:	*su_c = '\0';
        3:  201:	*sg_c = '\0';
        3:  202:	*ca_c = '\0';
        3:  203:	*st_c = '\0';
        3:  204:	*tw_c = '\0';
        3:  205:	*ow_c = '\0';
        3:  206:	*no_c = '\0';
        3:  207:	*uf_c = '\0';
        3:  208:	return;
        3:  208-block  0
unconditional  0 taken 3
        -:  209:}
        -:  210:
        -:  211:int
function cschemes_function called 5 returned 100% blocks executed 57%
        5:  212:cschemes_function(char **args)
        -:  213:{
        5:  214:	if (xargs.stealth_mode == 1) {
        5:  214-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:  215:		fprintf(stderr, _("%s: The color schemes function is "
    %%%%%:  215-block  0
call    0 never executed
call    1 never executed
        -:  216:				  "disabled in stealth mode\nTIP: To change the current "
        -:  217:				  "color scheme use the following environment "
        -:  218:				  "variables: CLIFM_FILE_COLORS, CLIFM_IFACE_COLORS, "
        -:  219:				  "and CLIFM_EXT_COLORS\n"), PROGRAM_NAME);
    #####:  220:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  221:	}
        -:  222:
        5:  223:	if (!args)
        5:  223-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:  224:		return EXIT_FAILURE;
    %%%%%:  224-block  0
unconditional  0 never executed
        -:  225:
        5:  226:	if (!args[1]) {
        5:  226-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1:  227:		if (!cschemes_n) {
        1:  227-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  228:			printf(_("%s: No color schemes found\n"), PROGRAM_NAME);
    %%%%%:  228-block  0
call    0 never executed
call    1 never executed
    #####:  229:			return EXIT_SUCCESS;
unconditional  0 never executed
        -:  230:		}
        -:  231:		size_t i;
       21:  232:		for (i = 0; color_schemes[i]; i++) {
        1:  232-block  0
unconditional  0 taken 1
       20:  232-block  1
unconditional  1 taken 20
       21:  232-block  2
branch  2 taken 20
branch  3 taken 1 (fallthrough)
       20:  233:			if (cur_cscheme == color_schemes[i])
       20:  233-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 19
        1:  234:				printf("%s%s%s\n", mi_c, color_schemes[i], df_c);
        1:  234-block  0
call    0 returned 1
unconditional  1 taken 1
        -:  235:			else
       19:  236:				printf("%s\n", color_schemes[i]);
       19:  236-block  0
call    0 returned 19
unconditional  1 taken 19
        -:  237:		}
        -:  238:
        1:  239:		return EXIT_SUCCESS;
        1:  239-block  0
unconditional  0 taken 1
        -:  240:	}
        -:  241:
       4*:  242:	if (*args[1] == '-' && strcmp(args[1], "--help") == 0) {
        4:  242-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%:  242-block  1
branch  2 never executed
branch  3 never executed
    #####:  243:		puts(_(CS_USAGE));
    %%%%%:  243-block  0
call    0 never executed
call    1 never executed
    #####:  244:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  245:	}
        -:  246:
        4:  247:	if (*args[1] == 'e' && (!args[1][1] || strcmp(args[1], "edit") == 0)) {
        4:  247-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3:  247-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 1
        2:  247-block  2
branch  4 taken 2 (fallthrough)
branch  5 taken 0
        -:  248:		char file[PATH_MAX];
        3:  249:		snprintf(file, PATH_MAX - 1, "%s/%s.cfm", colors_dir, cur_cscheme);
        -:  250:		struct stat attr;
        3:  251:		if (stat(file, &attr) == -1) {
        3:  251-block  0
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
    #####:  252:			if (data_dir) {
    %%%%%:  252-block  0
branch  0 never executed
branch  1 never executed
    #####:  253:				snprintf(file, PATH_MAX - 1, "%s/%s/colors/%s.cfm",
        -:  254:						data_dir, PNL, cur_cscheme);
    #####:  255:				if (access(file, W_OK) == -1) {
    %%%%%:  255-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  256:					fprintf(stderr, "%s: %s: %s\n", PROGRAM_NAME,
call    0 never executed
    #####:  257:							file, strerror(errno));
    %%%%%:  257-block  0
call    0 never executed
    #####:  258:					return EXIT_FAILURE;
unconditional  0 never executed
        -:  259:				}
        -:  260:			} else {
    #####:  261:				fprintf(stderr, "%s: %s: %s\n", PROGRAM_NAME,
call    0 never executed
    #####:  262:						file, strerror(errno));
    %%%%%:  262-block  0
call    0 never executed
    #####:  263:				return EXIT_FAILURE;
unconditional  0 never executed
        -:  264:			}
        -:  265:		}
        -:  266:
        3:  267:		stat(file, &attr);
        3:  267-block  0
call    0 returned 3
        3:  268:		time_t mtime_bfr = (time_t)attr.st_mtime;
        -:  269:
        3:  270:		int ret = open_file(file);
call    0 returned 3
        3:  271:		if (ret != EXIT_FAILURE) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  272:			stat(file, &attr);
        3:  272-block  0
call    0 returned 3
        3:  273:			if (mtime_bfr != (time_t)attr.st_mtime
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  274:			&& set_colors(cur_cscheme, 0) == EXIT_SUCCESS
        2:  274-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2:  275:			&& cd_lists_on_the_fly) {
        2:  275-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  276:				free_dirlist();
        2:  276-block  0
call    0 returned 2
        2:  277:				list_dir();
call    0 returned 2
unconditional  1 taken 2
        -:  278:			}
        -:  279:		}
        -:  280:
        3:  281:		return ret;
        3:  281-block  0
unconditional  0 taken 3
        -:  282:	}
        -:  283:
       1*:  284:	if (*args[1] == 'n' && (!args[1][1] || strcmp(args[1], "name") == 0)) {
        1:  284-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  284-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  284-block  2
branch  4 never executed
branch  5 never executed
    #####:  285:		printf(_("%s: current color scheme: %s\n"), PROGRAM_NAME,
    %%%%%:  285-block  0
unconditional  0 never executed
    %%%%%:  285-block  1
unconditional  1 never executed
    %%%%%:  285-block  2
call    2 never executed
call    3 never executed
    #####:  286:		    cur_cscheme ? cur_cscheme : "?");
    %%%%%:  286-block  0
branch  0 never executed
branch  1 never executed
    #####:  287:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  288:	}
        -:  289:
        1:  290:	size_t i, cs_found = 0;
        2:  291:	for (i = 0; color_schemes[i]; i++) {
        1:  291-block  0
unconditional  0 taken 1
        1:  291-block  1
unconditional  1 taken 1
        2:  291-block  2
branch  2 taken 2
branch  3 taken 0 (fallthrough)
        2:  292:		if (*args[1] == *color_schemes[i]
        2:  292-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  293:		&& strcmp(args[1], color_schemes[i]) == 0) {
        1:  293-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  294:			cs_found = 1;
        1:  295:			if (set_colors(args[1], 0) == EXIT_SUCCESS) {
        1:  295-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  296:				cur_cscheme = color_schemes[i];
        1:  297:				switch_cscheme = 1;
        -:  298:
        1:  299:				if (cd_lists_on_the_fly) {
        1:  299-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  300:					free_dirlist();
        1:  300-block  0
call    0 returned 1
        1:  301:					list_dir();
call    0 returned 1
unconditional  1 taken 1
        -:  302:				}
        -:  303:
        1:  304:				switch_cscheme = 0;
        1:  305:				return EXIT_SUCCESS;
        1:  305-block  0
unconditional  0 taken 1
        -:  306:			}
        -:  307:		}
        -:  308:	}
        -:  309:
    #####:  310:	if (!cs_found)
    %%%%%:  310-block  0
branch  0 never executed
branch  1 never executed
    #####:  311:		fprintf(stderr, _("%s: No such color scheme\n"), PROGRAM_NAME);
    %%%%%:  311-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  312:
    #####:  313:	return EXIT_FAILURE;
    %%%%%:  313-block  0
unconditional  0 never executed
        -:  314:}
        -:  315:
        -:  316:/* Open the config file, get values for file type and extension colors
        -:  317: * and copy these values into the corresponding variable. If some value
        -:  318: * is not found, or if it's a wrong value, the default is set. */
        -:  319:int
function set_colors called 27 returned 100% blocks executed 86%
       27:  320:set_colors(const char *colorscheme, int env)
        -:  321:{
       27:  322:	char *filecolors = (char *)NULL,
       27:  323:		 *extcolors = (char *)NULL,
       27:  324:	     *ifacecolors = (char *)NULL;
        -:  325:
        -:  326:#ifndef _NO_ICONS
       27:  327:	*dir_ico_c = '\0';
        -:  328:#endif
        -:  329:
        -:  330:	/* Set a pointer to the current color scheme */
       27:  331:	if (colorscheme && *colorscheme && color_schemes) {
       27:  331-block  0
branch  0 taken 27 (fallthrough)
branch  1 taken 0
       27:  331-block  1
branch  2 taken 27 (fallthrough)
branch  3 taken 0
       27:  331-block  2
branch  4 taken 27 (fallthrough)
branch  5 taken 0
       27:  332:		char *def_cscheme = (char *)NULL;
        -:  333:		size_t i;
      100:  334:		for (i = 0; color_schemes[i]; i++) {
       27:  334-block  0
unconditional  0 taken 27
       73:  334-block  1
unconditional  1 taken 73
      100:  334-block  2
branch  2 taken 99
branch  3 taken 1 (fallthrough)
       99:  335:			if (*colorscheme == *color_schemes[i]
       99:  335-block  0
branch  0 taken 34 (fallthrough)
branch  1 taken 65
       34:  336:			&& strcmp(colorscheme, color_schemes[i]) == 0) {
       34:  336-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 8
       26:  337:				cur_cscheme = color_schemes[i];
       26:  338:				break;
       26:  338-block  0
unconditional  0 taken 26
        -:  339:			}
        -:  340:
       73:  341:			if (*color_schemes[i] == 'd'
       73:  341-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 63
       10:  342:			&& strcmp(color_schemes[i], "default") == 0)
       10:  342-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 5
        5:  343:				def_cscheme = color_schemes[i];
        5:  343-block  0
unconditional  0 taken 5
        -:  344:		}
        -:  345:
       27:  346:		if (!cur_cscheme) {
       27:  346-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 27
    #####:  347:			_err('w', PRINT_PROMPT, _("%s: %s: No such color scheme. "
    %%%%%:  347-block  0
call    0 never executed
call    1 never executed
        -:  348:				"Falling back to the default one\n"),
        -:  349:				PROGRAM_NAME, colorscheme);
        -:  350:
    #####:  351:			if (def_cscheme)
branch  0 never executed
branch  1 never executed
    #####:  352:				cur_cscheme = def_cscheme;
    %%%%%:  352-block  0
unconditional  0 never executed
        -:  353:		}
        -:  354:	}
        -:  355:
        -:  356:	/* env is true only when the function is called from main() */
       27:  357:	if (env) {
       27:  357-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 3
        -:  358:		/* Try to get colors from environment variables */
       24:  359:		char *env_filecolors = getenv("CLIFM_FILE_COLORS");
       24:  359-block  0
call    0 returned 24
       24:  360:		char *env_extcolors = getenv("CLIFM_EXT_COLORS");
call    0 returned 24
       24:  361:		char *env_ifacecolors = getenv("CLIFM_IFACE_COLORS");
call    0 returned 24
        -:  362:
       24:  363:		if (env_filecolors)
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####:  364:			filecolors = savestring(env_filecolors, strlen(env_filecolors));
    %%%%%:  364-block  0
call    0 never executed
unconditional  1 never executed
        -:  365:
       24:  366:		env_filecolors = (char *)NULL;
       24:  367:		if (env_extcolors)
       24:  367-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####:  368:			extcolors = savestring(env_extcolors, strlen(env_extcolors));
    %%%%%:  368-block  0
call    0 never executed
unconditional  1 never executed
        -:  369:
       24:  370:		env_extcolors = (char *)NULL;
       24:  371:		if (env_ifacecolors)
       24:  371-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####:  372:			ifacecolors = savestring(env_ifacecolors, strlen(env_ifacecolors));
    %%%%%:  372-block  0
call    0 never executed
unconditional  1 never executed
        -:  373:
       24:  374:		env_ifacecolors = (char *)NULL;
       24:  374-block  0
unconditional  0 taken 24
        -:  375:	}
        -:  376:
      27*:  377:	if (xargs.stealth_mode != 1 && (!filecolors || !extcolors || !ifacecolors)) {
       27:  377-block  0
branch  0 taken 27 (fallthrough)
branch  1 taken 0
       27:  377-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 27
    %%%%%:  377-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:  377-block  3
branch  6 never executed
branch  7 never executed
        -:  378:		/* Get color lines, for both file types and extensions, from
        -:  379:	 * COLORSCHEME file */
        -:  380:		char colorscheme_file[PATH_MAX];
       27:  381:		*colorscheme_file = '\0';
       27:  382:		if (config_ok) {
       27:  382-block  0
branch  0 taken 27 (fallthrough)
branch  1 taken 0
      27*:  383:			snprintf(colorscheme_file, PATH_MAX - 1, "%s/%s.cfm", colors_dir,
       27:  383-block  0
branch  0 taken 27 (fallthrough)
branch  1 taken 0
       27:  383-block  1
unconditional  2 taken 27
    %%%%%:  383-block  2
unconditional  3 never executed
       27:  383-block  3
unconditional  4 taken 27
        -:  384:				colorscheme ? colorscheme : "default");
        -:  385:		}
        -:  386:
        -:  387:		/* If not in local dir, check system data dir as well */
        -:  388:		struct stat attr;
       27:  389:		if (data_dir && (!*colorscheme_file || stat(colorscheme_file, &attr) == -1)) {
       27:  389-block  0
branch  0 taken 27 (fallthrough)
branch  1 taken 0
       27:  389-block  1
branch  2 taken 27 (fallthrough)
branch  3 taken 0
       27:  389-block  2
call    4 returned 27
branch  5 taken 1 (fallthrough)
branch  6 taken 26
       1*:  390:			snprintf(colorscheme_file, PATH_MAX- 1, "%s/%s/colors/%s.cfm",
        1:  390-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  390-block  1
unconditional  2 taken 1
    %%%%%:  390-block  2
unconditional  3 never executed
        1:  390-block  3
unconditional  4 taken 1
        -:  391:				data_dir, PNL, colorscheme ? colorscheme : "default");
        -:  392:		}
        -:  393:
       27:  394:		FILE *fp_colors = fopen(colorscheme_file, "r");
       27:  394-block  0
call    0 returned 27
       27:  395:		if (fp_colors) {
branch  0 taken 26 (fallthrough)
branch  1 taken 1
        -:  396:
        -:  397:			/* If called from the color scheme function, reset all
        -:  398:			 * color values before proceeding */
       26:  399:			if (!env)
       26:  399-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 23
        3:  400:				free_colors();
        3:  400-block  0
call    0 returned 3
unconditional  1 taken 3
        -:  401:
       26:  402:			char *line = (char *)NULL;
       26:  403:			size_t line_size = 0;
       26:  404:			ssize_t line_len = 0;
       26:  405:			int file_type_found = 0,
       26:  406:				ext_type_found = 0,
        -:  407:#ifndef _NO_ICONS
       26:  408:			    iface_found = 0,
       26:  409:			    dir_icon_found = 0;
        -:  410:#else
        -:  411:			    iface_found = 0;
        -:  412:#endif
        -:  413:
      388:  414:			while ((line_len = getline(&line, &line_size, fp_colors)) > 0) {
       26:  414-block  0
unconditional  0 taken 26
      388:  414-block  1
call    1 returned 388
branch  2 taken 387
branch  3 taken 1 (fallthrough)
        -:  415:				/* Interface colors */
      387:  416:				if (!ifacecolors && *line == 'I'
      387:  416-block  0
branch  0 taken 281 (fallthrough)
branch  1 taken 106
      281:  416-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 255
       26:  417:				&& strncmp(line, "InterfaceColors=", 16) == 0) {
       26:  417-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 0
       26:  418:					iface_found = 1;
       26:  419:					char *opt_str = strchr(line, '=');
      26*:  420:					if (!opt_str)
       26:  420-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 26
    #####:  421:						continue;
    %%%%%:  421-block  0
unconditional  0 never executed
        -:  422:
       26:  423:					opt_str++;
       26:  424:					char *color_line = strip_color_line(opt_str, 't');
       26:  424-block  0
call    0 returned 26
      26*:  425:					if (!color_line)
branch  0 taken 0 (fallthrough)
branch  1 taken 26
    #####:  426:						continue;
    %%%%%:  426-block  0
unconditional  0 never executed
        -:  427:
       26:  428:					ifacecolors = savestring(color_line, strlen(color_line));
       26:  428-block  0
call    0 returned 26
       26:  429:					free(color_line);
unconditional  0 taken 26
        -:  430:				}
        -:  431:
        -:  432:				/* Filetype Colors */
      387:  433:				if (!filecolors && *line == 'F'
      387:  433-block  0
branch  0 taken 229 (fallthrough)
branch  1 taken 158
      229:  433-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 203
       26:  434:				&& strncmp(line, "FiletypeColors=", 15) == 0) {
       26:  434-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 0
       26:  435:					file_type_found = 1;
       26:  436:					char *opt_str = strchr(line, '=');
      26*:  437:					if (!opt_str)
       26:  437-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 26
    #####:  438:						continue;
    %%%%%:  438-block  0
unconditional  0 never executed
        -:  439:
       26:  440:					opt_str++;
        -:  441:
       26:  442:					char *color_line = strip_color_line(opt_str, 't');
       26:  442-block  0
call    0 returned 26
      26*:  443:					if (!color_line)
branch  0 taken 0 (fallthrough)
branch  1 taken 26
    #####:  444:						continue;
    %%%%%:  444-block  0
unconditional  0 never executed
        -:  445:
       26:  446:					filecolors = savestring(color_line, strlen(color_line));
       26:  446-block  0
call    0 returned 26
       26:  447:					free(color_line);
unconditional  0 taken 26
        -:  448:				}
        -:  449:
        -:  450:				/* File extension colors */
      387:  451:				if (!extcolors && *line == 'E' && strncmp(line, "ExtColors=", 10) == 0) {
      387:  451-block  0
branch  0 taken 335 (fallthrough)
branch  1 taken 52
      335:  451-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 309
       26:  451-block  2
branch  4 taken 26 (fallthrough)
branch  5 taken 0
       26:  452:					ext_type_found = 1;
       26:  453:					char *opt_str = strchr(line, '=');
      26*:  454:					if (!opt_str)
       26:  454-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 26
    #####:  455:						continue;
    %%%%%:  455-block  0
unconditional  0 never executed
        -:  456:
       26:  457:					opt_str++;
       26:  458:					char *color_line = strip_color_line(opt_str, 'x');
       26:  458-block  0
call    0 returned 26
      26*:  459:					if (!color_line)
branch  0 taken 0 (fallthrough)
branch  1 taken 26
    #####:  460:						continue;
    %%%%%:  460-block  0
unconditional  0 never executed
        -:  461:
       26:  462:					extcolors = savestring(color_line, strlen(color_line));
       26:  462-block  0
call    0 returned 26
       26:  463:					free(color_line);
unconditional  0 taken 26
        -:  464:				}
        -:  465:
        -:  466:#ifndef _NO_ICONS
        -:  467:				/* Dir icons Color */
      387:  468:				if (*line == 'D' && strncmp(line, "DirIconsColor=", 14) == 0) {
      387:  468-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 361
       26:  468-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26:  469:					dir_icon_found = 1;
       26:  470:					char *opt_str = strchr(line, '=');
      26*:  471:					if (!opt_str)
       26:  471-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 26
    #####:  472:						continue;
    %%%%%:  472-block  0
unconditional  0 never executed
       26:  473:					if (!*(++opt_str))
       26:  473-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 25
        1:  474:						continue;
        1:  474-block  0
unconditional  0 taken 1
        -:  475:
       25:  476:					if (*opt_str == '\'' || *opt_str == '"')
       25:  476-block  0
branch  0 taken 25 (fallthrough)
branch  1 taken 0
       25:  476-block  1
branch  2 taken 22 (fallthrough)
branch  3 taken 3
       22:  477:						opt_str++;
       22:  477-block  0
unconditional  0 taken 22
      25*:  478:					if (!*opt_str)
       25:  478-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 25
    #####:  479:						continue;
    %%%%%:  479-block  0
unconditional  0 never executed
        -:  480:
       25:  481:					int nl_removed = 0;
       25:  482:					if (line[line_len - 1] == '\n') {
       25:  482-block  0
branch  0 taken 22 (fallthrough)
branch  1 taken 3
       22:  483:						line[line_len - 1] = '\0';
       22:  484:						nl_removed = 1;
       22:  484-block  0
unconditional  0 taken 22
        -:  485:					}
        -:  486:
       25:  487:					int end_char = (int)line_len - 1;
        -:  488:
       25:  489:					if (nl_removed)
       25:  489-block  0
branch  0 taken 22 (fallthrough)
branch  1 taken 3
       22:  490:						end_char--;
       22:  490-block  0
unconditional  0 taken 22
        -:  491:
       25:  492:					if (line[end_char] == '\'' || line[end_char] == '"')
       25:  492-block  0
branch  0 taken 25 (fallthrough)
branch  1 taken 0
       25:  492-block  1
branch  2 taken 22 (fallthrough)
branch  3 taken 3
       22:  493:						line[end_char] = '\0';
       22:  493-block  0
unconditional  0 taken 22
        -:  494:
       25:  495:					sprintf(dir_ico_c, "\x1b[%sm", opt_str);
       25:  495-block  0
unconditional  0 taken 25
        -:  496:				}
        -:  497:#endif /* !_NO_ICONS */
        -:  498:
      386:  499:				if (file_type_found && ext_type_found
      386:  499-block  0
branch  0 taken 183 (fallthrough)
branch  1 taken 203
      183:  499-block  1
branch  2 taken 77 (fallthrough)
branch  3 taken 106
        -:  500:#ifndef _NO_ICONS
       77:  501:				&& iface_found && dir_icon_found)
       77:  501-block  0
branch  0 taken 77 (fallthrough)
branch  1 taken 0
       77:  501-block  1
branch  2 taken 25 (fallthrough)
branch  3 taken 52
        -:  502:#else
        -:  503:				&& iface_found)
        -:  504:#endif
       25:  505:					break;
       25:  505-block  0
unconditional  0 taken 25
        -:  506:			}
        -:  507:
       26:  508:			free(line);
       26:  509:			line = (char *)NULL;
       26:  510:			fclose(fp_colors);
       26:  510-block  0
call    0 returned 26
        -:  511:		}
        -:  512:
        -:  513:		/* If fopen failed */
        -:  514:		else {
        1:  515:			if (!env) {
        1:  515-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  516:				fprintf(stderr, "%s: %s: %s\n", PROGRAM_NAME,
call    0 never executed
    #####:  517:				    colorscheme_file, strerror(errno));
    %%%%%:  517-block  0
call    0 never executed
    #####:  518:				return EXIT_FAILURE;
unconditional  0 never executed
        -:  519:			} else {
        1:  520:				_err('w', PRINT_PROMPT, _("%s: %s: No such color scheme. "
        1:  520-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        -:  521:					"Falling back to the default one\n"), PROGRAM_NAME,
        -:  522:					colorscheme);
        -:  523:			}
        -:  524:		}
        -:  525:	}
        -:  526:
        -:  527:			/* ##############################
        -:  528:			 * #    FILE EXTENSION COLORS   #
        -:  529:			 * ############################## */
        -:  530:
        -:  531:	/* Split the colors line into substrings (one per color) */
        -:  532:
       27:  533:	if (!extcolors) {
       27:  533-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        -:  534:		/* Unload current extension colors */
        1:  535:		if (ext_colors_n) {
        1:  535-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  536:			int i = (int)ext_colors_n;
       68:  537:			while (--i >= 0)
        1:  537-block  0
unconditional  0 taken 1
       68:  537-block  1
branch  1 taken 67
branch  2 taken 1 (fallthrough)
       67:  538:				free(ext_colors[i]);
       67:  538-block  0
unconditional  0 taken 67
        1:  539:			free(ext_colors);
        1:  540:			ext_colors = (char **)NULL;
        1:  541:			free(ext_colors_len);
        1:  542:			ext_colors_n = 0;
        1:  542-block  0
unconditional  0 taken 1
        -:  543:		}
        -:  544:	} else {
       26:  545:		char *p = extcolors, *buf = (char *)NULL;
       26:  546:		size_t len = 0;
       26:  547:		int eol = 0;
        -:  548:
       26:  549:		if (ext_colors_n) {
       26:  549-block  0
branch  0 taken 21 (fallthrough)
branch  1 taken 5
       21:  550:			int i = (int)ext_colors_n;
     1428:  551:			while (--i >= 0)
       21:  551-block  0
unconditional  0 taken 21
     1428:  551-block  1
branch  1 taken 1407
branch  2 taken 21 (fallthrough)
     1407:  552:				free(ext_colors[i]);
     1407:  552-block  0
unconditional  0 taken 1407
       21:  553:			free(ext_colors);
       21:  554:			ext_colors = (char **)NULL;
       21:  555:			free(ext_colors_len);
       21:  556:			ext_colors_n = 0;
       21:  556-block  0
unconditional  0 taken 21
        -:  557:		}
        -:  558:
    22780:  559:		while (!eol) {
       26:  559-block  0
unconditional  0 taken 26
    22780:  559-block  1
branch  1 taken 22754
branch  2 taken 26 (fallthrough)
    22754:  560:			switch (*p) {
    22754:  560-block  0
branch  0 taken 1788
branch  1 taken 20966
        -:  561:
     1788:  562:			case '\0': /* fallthrough */
        -:  563:			case '\n': /* fallthrough */
        -:  564:			case ':':
     1788:  565:				if (!buf)
     1788:  565-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1788
    #####:  566:					break;
    %%%%%:  566-block  0
unconditional  0 never executed
     1788:  567:				buf[len] = '\0';
     3576:  568:				ext_colors = (char **)xrealloc(ext_colors,
     1788:  569:				    (ext_colors_n + 1) * sizeof(char *));
     1788:  569-block  0
call    0 returned 1788
     1788:  570:				ext_colors[ext_colors_n++] = savestring(buf, len);
call    0 returned 1788
     1788:  571:				*buf = '\0';
        -:  572:
     1788:  573:				if (!*p)
branch  0 taken 26 (fallthrough)
branch  1 taken 1762
       26:  574:					eol = 1;
       26:  574-block  0
unconditional  0 taken 26
        -:  575:
     1788:  576:				len = 0;
     1788:  577:				p++;
     1788:  578:				break;
     1788:  578-block  0
unconditional  0 taken 1788
        -:  579:
    20966:  580:			default:
    20966:  581:				buf = (char *)xrealloc(buf, (len + 2) * sizeof(char));
    20966:  581-block  0
call    0 returned 20966
    20966:  582:				buf[len++] = *(p++);
    20966:  583:				break;
unconditional  0 taken 20966
        -:  584:			}
        -:  585:		}
        -:  586:
       26:  587:		p = (char *)NULL;
       26:  588:		free(extcolors);
       26:  589:		extcolors = (char *)NULL;
        -:  590:
       26:  591:		if (buf) {
       26:  591-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 0
       26:  592:			free(buf);
       26:  593:			buf = (char *)NULL;
       26:  593-block  0
unconditional  0 taken 26
        -:  594:		}
        -:  595:
       26:  596:		if (ext_colors) {
       26:  596-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 0
       26:  597:			ext_colors = (char **)xrealloc(ext_colors, (ext_colors_n + 1) * sizeof(char *));
       26:  597-block  0
call    0 returned 26
       26:  598:			ext_colors[ext_colors_n] = (char *)NULL;
unconditional  0 taken 26
        -:  599:		}
        -:  600:
        -:  601:		/* Make sure we have valid color codes and store the length
        -:  602:		 * of each stored extension: this length will be used later
        -:  603:		 * when listing files */
       26:  604:		ext_colors_len = (size_t *)xnmalloc(ext_colors_n, sizeof(size_t));
       26:  604-block  0
call    0 returned 26
        -:  605:
       26:  606:		int i = (int)ext_colors_n;
     1814:  607:		while (--i >= 0) {
unconditional  0 taken 26
     1814:  607-block  0
branch  1 taken 1788
branch  2 taken 26 (fallthrough)
     1788:  608:			char *ret = strrchr(ext_colors[i], '=');
     1788:  609:			if (!ret || !is_color_code(ret + 1)) {
     1788:  609-block  0
branch  0 taken 1762 (fallthrough)
branch  1 taken 26
     1762:  609-block  1
call    2 returned 1762
branch  3 taken 0 (fallthrough)
branch  4 taken 1762
       26:  610:				*ext_colors[i] = '\0';
       26:  611:				ext_colors_len[i] = 0;
       26:  612:				continue;
       26:  612-block  0
unconditional  0 taken 26
        -:  613:			}
        -:  614:
     1762:  615:			size_t j, ext_len = 0;
     7126:  616:			for (j = 2; ext_colors[i][j] && ext_colors[i][j] != '='; j++)
     1762:  616-block  0
unconditional  0 taken 1762
     7126:  616-block  1
branch  1 taken 7126 (fallthrough)
branch  2 taken 0
     7126:  616-block  2
branch  3 taken 5364
branch  4 taken 1762 (fallthrough)
     5364:  617:				ext_len++;
     5364:  617-block  0
unconditional  0 taken 5364
        -:  618:
     1762:  619:			ext_colors_len[i] = ext_len;
     1762:  619-block  0
unconditional  0 taken 1762
        -:  620:		}
        -:  621:	}
        -:  622:
        -:  623:			/* ##############################
        -:  624:			 * #      INTERFACE COLORS      #
        -:  625:			 * ############################## */
        -:  626:
       27:  627:	if (!ifacecolors) {
       27:  627-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        -:  628:		/* Free and reset whatever value was loaded */
        1:  629:		*hb_c = '\0';
        1:  630:		*hc_c = '\0';
        1:  631:		*he_c = '\0';
        1:  632:		*hn_c = '\0';
        1:  633:		*hp_c = '\0';
        1:  634:		*hq_c = '\0';
        1:  635:		*hr_c = '\0';
        1:  636:		*hs_c = '\0';
        1:  637:		*hv_c = '\0';
        1:  638:		*sh_c = '\0';
        1:  639:		*sf_c = '\0';
        1:  640:		*sc_c = '\0';
        1:  641:		*sx_c = '\0';
        1:  642:		*bm_c = '\0';
        1:  643:		*dl_c = '\0';
        1:  644:		*el_c = '\0';
        1:  645:		*mi_c = '\0';
        1:  646:		*tx_c = '\0';
        1:  647:		*df_c = '\0';
        1:  648:		*dc_c = '\0';
        1:  649:		*wc_c = '\0';
        1:  650:		*dh_c = '\0';
        1:  651:		*li_c = '\0';
        1:  652:		*ti_c = '\0';
        1:  653:		*em_c = '\0';
        1:  654:		*wm_c = '\0';
        1:  655:		*nm_c = '\0';
        1:  656:		*si_c = '\0';
        1:  656-block  0
unconditional  0 taken 1
        -:  657:	} else {
       26:  658:		char *p = ifacecolors, *buf = (char *)NULL,
       26:  659:		     **colors = (char **)NULL;
       26:  660:		size_t len = 0, words = 0;
       26:  661:		int eol = 0;
        -:  662:
     6092:  663:		while (!eol) {
       26:  663-block  0
unconditional  0 taken 26
     6092:  663-block  1
branch  1 taken 6066
branch  2 taken 26 (fallthrough)
     6066:  664:			switch (*p) {
     6066:  664-block  0
branch  0 taken 668
branch  1 taken 5398
        -:  665:
      668:  666:			case '\0': /* fallthrough */
        -:  667:			case '\n': /* fallthrough */
        -:  668:			case ':':
      668:  669:				if (!buf)
      668:  669-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 668
    #####:  670:					break;
    %%%%%:  670-block  0
unconditional  0 never executed
      668:  671:				buf[len] = '\0';
      668:  672:				colors = (char **)xrealloc(colors, (words + 1) * sizeof(char *));
      668:  672-block  0
call    0 returned 668
      668:  673:				colors[words++] = savestring(buf, len);
call    0 returned 668
      668:  674:				*buf = '\0';
        -:  675:
      668:  676:				if (!*p)
branch  0 taken 26 (fallthrough)
branch  1 taken 642
       26:  677:					eol = 1;
       26:  677-block  0
unconditional  0 taken 26
        -:  678:
      668:  679:				len = 0;
      668:  680:				p++;
      668:  681:				break;
      668:  681-block  0
unconditional  0 taken 668
        -:  682:
     5398:  683:			default:
     5398:  684:				buf = (char *)xrealloc(buf, (len + 2) * sizeof(char));
     5398:  684-block  0
call    0 returned 5398
     5398:  685:				buf[len++] = *(p++);
     5398:  686:				break;
unconditional  0 taken 5398
        -:  687:			}
        -:  688:		}
        -:  689:
       26:  690:		p = (char *)NULL;
       26:  691:		free(ifacecolors);
       26:  692:		ifacecolors = (char *)NULL;
        -:  693:
       26:  694:		if (buf) {
       26:  694-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 0
       26:  695:			free(buf);
       26:  696:			buf = (char *)NULL;
       26:  696-block  0
unconditional  0 taken 26
        -:  697:		}
        -:  698:
       26:  699:		if (colors) {
       26:  699-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 0
       26:  700:			colors = (char **)xrealloc(colors, (words + 1) * sizeof(char *));
       26:  700-block  0
call    0 returned 26
       26:  701:			colors[words] = (char *)NULL;
unconditional  0 taken 26
        -:  702:		}
        -:  703:
       26:  704:		int i = (int)words;
        -:  705:		/* Set the color variables */
      694:  706:		while (--i >= 0) {
       26:  706-block  0
unconditional  0 taken 26
      694:  706-block  1
branch  1 taken 668
branch  2 taken 26 (fallthrough)
      668:  707:			if (*colors[i] == 't' && strncmp(colors[i], "tx=", 3) == 0) {
      668:  707-block  0
branch  0 taken 52 (fallthrough)
branch  1 taken 616
       52:  707-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 26
       26:  708:				if (!is_color_code(colors[i] + 3)) {
       26:  708-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
        -:  709:					/* zero the corresponding variable as a flag for
        -:  710:					 * the check after this for loop to prepare the
        -:  711:					 * variable to hold the default color */
    #####:  712:					*tx_c = '\0';
    %%%%%:  712-block  0
unconditional  0 never executed
        -:  713:				} else {
       26:  714:					snprintf(tx_c, MAX_COLOR + 2, "\001\x1b[%sm\002",
       26:  715:					    colors[i] + 3);
       26:  715-block  0
unconditional  0 taken 26
        -:  716:				}
        -:  717:			}
        -:  718:
      642:  719:			else if (*colors[i] == 'h' && strncmp(colors[i], "hb=", 3) == 0) {
      642:  719-block  0
branch  0 taken 189 (fallthrough)
branch  1 taken 453
      189:  719-block  1
branch  2 taken 21 (fallthrough)
branch  3 taken 168
       21:  720:				if (!is_color_code(colors[i] + 3))
       21:  720-block  0
call    0 returned 21
branch  1 taken 0 (fallthrough)
branch  2 taken 21
    #####:  721:					*hb_c = '\0';
    %%%%%:  721-block  0
unconditional  0 never executed
        -:  722:				else
       21:  723:					snprintf(hb_c, MAX_COLOR - 1, "\x1b[%sm",
       21:  724:							colors[i] + 3);
       21:  724-block  0
unconditional  0 taken 21
        -:  725:			}
        -:  726:
      621:  727:			else if (*colors[i] == 'h' && strncmp(colors[i], "hc=", 3) == 0) {
      621:  727-block  0
branch  0 taken 168 (fallthrough)
branch  1 taken 453
      168:  727-block  1
branch  2 taken 21 (fallthrough)
branch  3 taken 147
       21:  728:				if (!is_color_code(colors[i] + 3))
       21:  728-block  0
call    0 returned 21
branch  1 taken 0 (fallthrough)
branch  2 taken 21
    #####:  729:					*hc_c = '\0';
    %%%%%:  729-block  0
unconditional  0 never executed
        -:  730:				else
       21:  731:					snprintf(hc_c, MAX_COLOR - 1, "\x1b[%sm",
       21:  732:							colors[i] + 3);
       21:  732-block  0
unconditional  0 taken 21
        -:  733:			}
        -:  734:
      600:  735:			else if (*colors[i] == 'h' && strncmp(colors[i], "he=", 3) == 0) {
      600:  735-block  0
branch  0 taken 147 (fallthrough)
branch  1 taken 453
      147:  735-block  1
branch  2 taken 21 (fallthrough)
branch  3 taken 126
       21:  736:				if (!is_color_code(colors[i] + 3))
       21:  736-block  0
call    0 returned 21
branch  1 taken 0 (fallthrough)
branch  2 taken 21
    #####:  737:					*he_c = '\0';
    %%%%%:  737-block  0
unconditional  0 never executed
        -:  738:				else
       21:  739:					snprintf(he_c, MAX_COLOR - 1, "\x1b[%sm",
       21:  740:							colors[i] + 3);
       21:  740-block  0
unconditional  0 taken 21
        -:  741:			}
        -:  742:
      579:  743:			else if (*colors[i] == 'h' && strncmp(colors[i], "hn=", 3) == 0) {
      579:  743-block  0
branch  0 taken 126 (fallthrough)
branch  1 taken 453
      126:  743-block  1
branch  2 taken 21 (fallthrough)
branch  3 taken 105
       21:  744:				if (!is_color_code(colors[i] + 3))
       21:  744-block  0
call    0 returned 21
branch  1 taken 0 (fallthrough)
branch  2 taken 21
    #####:  745:					*hn_c = '\0';
    %%%%%:  745-block  0
unconditional  0 never executed
        -:  746:				else
       21:  747:					snprintf(hn_c, MAX_COLOR - 1, "\x1b[%sm",
       21:  748:							colors[i] + 3);
       21:  748-block  0
unconditional  0 taken 21
        -:  749:			}
        -:  750:
      558:  751:			else if (*colors[i] == 'h' && strncmp(colors[i], "hp=", 3) == 0) {
      558:  751-block  0
branch  0 taken 105 (fallthrough)
branch  1 taken 453
      105:  751-block  1
branch  2 taken 21 (fallthrough)
branch  3 taken 84
       21:  752:				if (!is_color_code(colors[i] + 3))
       21:  752-block  0
call    0 returned 21
branch  1 taken 0 (fallthrough)
branch  2 taken 21
    #####:  753:					*hp_c = '\0';
    %%%%%:  753-block  0
unconditional  0 never executed
        -:  754:				else
       21:  755:					snprintf(hp_c, MAX_COLOR - 1, "\x1b[%sm",
       21:  756:							colors[i] + 3);
       21:  756-block  0
unconditional  0 taken 21
        -:  757:			}
        -:  758:
      537:  759:			else if (*colors[i] == 'h' && strncmp(colors[i], "hq=", 3) == 0) {
      537:  759-block  0
branch  0 taken 84 (fallthrough)
branch  1 taken 453
       84:  759-block  1
branch  2 taken 21 (fallthrough)
branch  3 taken 63
       21:  760:				if (!is_color_code(colors[i] + 3))
       21:  760-block  0
call    0 returned 21
branch  1 taken 0 (fallthrough)
branch  2 taken 21
    #####:  761:					*hq_c = '\0';
    %%%%%:  761-block  0
unconditional  0 never executed
        -:  762:				else
       21:  763:					snprintf(hq_c, MAX_COLOR - 1, "\x1b[%sm",
       21:  764:							colors[i] + 3);
       21:  764-block  0
unconditional  0 taken 21
        -:  765:			}
        -:  766:
      516:  767:			else if (*colors[i] == 'h' && strncmp(colors[i], "hr=", 3) == 0) {
      516:  767-block  0
branch  0 taken 63 (fallthrough)
branch  1 taken 453
       63:  767-block  1
branch  2 taken 21 (fallthrough)
branch  3 taken 42
       21:  768:				if (!is_color_code(colors[i] + 3))
       21:  768-block  0
call    0 returned 21
branch  1 taken 0 (fallthrough)
branch  2 taken 21
    #####:  769:					*hr_c = '\0';
    %%%%%:  769-block  0
unconditional  0 never executed
        -:  770:				else
       21:  771:					snprintf(hr_c, MAX_COLOR - 1, "\x1b[%sm",
       21:  772:							colors[i] + 3);
       21:  772-block  0
unconditional  0 taken 21
        -:  773:			}
        -:  774:
      495:  775:			else if (*colors[i] == 'h' && strncmp(colors[i], "hs=", 3) == 0) {
      495:  775-block  0
branch  0 taken 42 (fallthrough)
branch  1 taken 453
       42:  775-block  1
branch  2 taken 21 (fallthrough)
branch  3 taken 21
       21:  776:				if (!is_color_code(colors[i] + 3))
       21:  776-block  0
call    0 returned 21
branch  1 taken 0 (fallthrough)
branch  2 taken 21
    #####:  777:					*hs_c = '\0';
    %%%%%:  777-block  0
unconditional  0 never executed
        -:  778:				else
       21:  779:					snprintf(hs_c, MAX_COLOR - 1, "\x1b[%sm",
       21:  780:							colors[i] + 3);
       21:  780-block  0
unconditional  0 taken 21
        -:  781:			}
        -:  782:
      474:  783:			else if (*colors[i] == 'h' && strncmp(colors[i], "hv=", 3) == 0) {
      474:  783-block  0
branch  0 taken 21 (fallthrough)
branch  1 taken 453
       21:  783-block  1
branch  2 taken 21 (fallthrough)
branch  3 taken 0
       21:  784:				if (!is_color_code(colors[i] + 3))
       21:  784-block  0
call    0 returned 21
branch  1 taken 0 (fallthrough)
branch  2 taken 21
    #####:  785:					*hv_c = '\0';
    %%%%%:  785-block  0
unconditional  0 never executed
        -:  786:				else
       21:  787:					snprintf(hv_c, MAX_COLOR - 1, "\x1b[%sm",
       21:  788:							colors[i] + 3);
       21:  788-block  0
unconditional  0 taken 21
        -:  789:			}
        -:  790:
      453:  791:			else if (*colors[i] == 's' && strncmp(colors[i], "sh=", 3) == 0) {
      453:  791-block  0
branch  0 taken 89 (fallthrough)
branch  1 taken 364
       89:  791-block  1
branch  2 taken 21 (fallthrough)
branch  3 taken 68
       21:  792:				if (!is_color_code(colors[i] + 3))
       21:  792-block  0
call    0 returned 21
branch  1 taken 0 (fallthrough)
branch  2 taken 21
    #####:  793:					*sh_c = '\0';
    %%%%%:  793-block  0
unconditional  0 never executed
        -:  794:				else
       21:  795:					snprintf(sh_c, MAX_COLOR - 1, "\x1b[%sm",
       21:  796:							colors[i] + 3);
       21:  796-block  0
unconditional  0 taken 21
        -:  797:			}
        -:  798:
      432:  799:			else if (*colors[i] == 's' && strncmp(colors[i], "sf=", 3) == 0) {
      432:  799-block  0
branch  0 taken 68 (fallthrough)
branch  1 taken 364
       68:  799-block  1
branch  2 taken 21 (fallthrough)
branch  3 taken 47
       21:  800:				if (!is_color_code(colors[i] + 3))
       21:  800-block  0
call    0 returned 21
branch  1 taken 0 (fallthrough)
branch  2 taken 21
    #####:  801:					*sf_c = '\0';
    %%%%%:  801-block  0
unconditional  0 never executed
        -:  802:				else
       21:  803:					snprintf(sf_c, MAX_COLOR - 1, "\x1b[%sm",
       21:  804:							colors[i] + 3);
       21:  804-block  0
unconditional  0 taken 21
        -:  805:			}
        -:  806:
      411:  807:			else if (*colors[i] == 's' && strncmp(colors[i], "sc=", 3) == 0) {
      411:  807-block  0
branch  0 taken 47 (fallthrough)
branch  1 taken 364
       47:  807-block  1
branch  2 taken 21 (fallthrough)
branch  3 taken 26
       21:  808:				if (!is_color_code(colors[i] + 3))
       21:  808-block  0
call    0 returned 21
branch  1 taken 0 (fallthrough)
branch  2 taken 21
    #####:  809:					*sc_c = '\0';
    %%%%%:  809-block  0
unconditional  0 never executed
        -:  810:				else
       21:  811:					snprintf(sc_c, MAX_COLOR - 1, "\x1b[%sm",
       21:  812:							colors[i] + 3);
       21:  812-block  0
unconditional  0 taken 21
        -:  813:			}
        -:  814:
      390:  815:			else if (*colors[i] == 's' && strncmp(colors[i], "sx=", 3) == 0) {
      390:  815-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 364
       26:  815-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 26
    #####:  816:				if (!is_color_code(colors[i] + 3))
    %%%%%:  816-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  817:					*sx_c = '\0';
    %%%%%:  817-block  0
unconditional  0 never executed
        -:  818:				else
    #####:  819:					snprintf(sx_c, MAX_COLOR - 1, "\x1b[%sm",
    #####:  820:							colors[i] + 3);
    %%%%%:  820-block  0
unconditional  0 never executed
        -:  821:			}
        -:  822:
      390:  823:			else if (*colors[i] == 'b' && strncmp(colors[i], "bm=", 3) == 0) {
      390:  823-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 364
       26:  823-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26:  824:				if (!is_color_code(colors[i] + 3))
       26:  824-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####:  825:					*bm_c = '\0';
    %%%%%:  825-block  0
unconditional  0 never executed
        -:  826:				else
       26:  827:					snprintf(bm_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26:  827-block  0
unconditional  0 taken 26
        -:  828:			}
        -:  829:
      364:  830:			else if (*colors[i] == 'l' && strncmp(colors[i], "li=", 3) == 0) {
      364:  830-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 338
       26:  830-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26:  831:				if (!is_color_code(colors[i] + 3))
       26:  831-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####:  832:					*li_c = '\0';
    %%%%%:  832-block  0
unconditional  0 never executed
        -:  833:				else
       26:  834:					snprintf(li_c, MAX_COLOR + 2, "\001\x1b[%sm\002",
       26:  835:					    colors[i] + 3);
       26:  835-block  0
unconditional  0 taken 26
        -:  836:			}
        -:  837:
      338:  838:			else if (*colors[i] == 't' && strncmp(colors[i], "ti=", 3) == 0) {
      338:  838-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 312
       26:  838-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26:  839:				if (!is_color_code(colors[i] + 3))
       26:  839-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####:  840:					*ti_c = '\0';
    %%%%%:  840-block  0
unconditional  0 never executed
        -:  841:				else
       26:  842:					snprintf(ti_c, MAX_COLOR + 2, "\001\x1b[%sm\002",
       26:  843:					    colors[i] + 3);
       26:  843-block  0
unconditional  0 taken 26
        -:  844:			}
        -:  845:
      312:  846:			else if (*colors[i] == 'e' && strncmp(colors[i], "em=", 3) == 0) {
      312:  846-block  0
branch  0 taken 52 (fallthrough)
branch  1 taken 260
       52:  846-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 26
       26:  847:				if (!is_color_code(colors[i] + 3))
       26:  847-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####:  848:					*em_c = '\0';
    %%%%%:  848-block  0
unconditional  0 never executed
        -:  849:				else
       26:  850:					snprintf(em_c, MAX_COLOR + 2, "\001\x1b[%sm\002",
       26:  851:					    colors[i] + 3);
       26:  851-block  0
unconditional  0 taken 26
        -:  852:			}
        -:  853:
      286:  854:			else if (*colors[i] == 'w' && strncmp(colors[i], "wm=", 3) == 0) {
      286:  854-block  0
branch  0 taken 52 (fallthrough)
branch  1 taken 234
       52:  854-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 26
       26:  855:				if (!is_color_code(colors[i] + 3))
       26:  855-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####:  856:					*wm_c = '\0';
    %%%%%:  856-block  0
unconditional  0 never executed
        -:  857:				else
       26:  858:					snprintf(wm_c, MAX_COLOR + 2, "\001\x1b[%sm\002",
       26:  859:					    colors[i] + 3);
       26:  859-block  0
unconditional  0 taken 26
        -:  860:			}
        -:  861:
      260:  862:			else if (*colors[i] == 'n' && strncmp(colors[i], "nm=", 3) == 0) {
      260:  862-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 234
       26:  862-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26:  863:				if (!is_color_code(colors[i] + 3))
       26:  863-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####:  864:					*nm_c = '\0';
    %%%%%:  864-block  0
unconditional  0 never executed
        -:  865:				else
       26:  866:					snprintf(nm_c, MAX_COLOR + 2, "\001\x1b[%sm\002",
       26:  867:					    colors[i] + 3);
       26:  867-block  0
unconditional  0 taken 26
        -:  868:			}
        -:  869:
      234:  870:			else if (*colors[i] == 's' && strncmp(colors[i], "si=", 3) == 0) {
      234:  870-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 208
       26:  870-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26:  871:				if (!is_color_code(colors[i] + 3))
       26:  871-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####:  872:					*si_c = '\0';
    %%%%%:  872-block  0
unconditional  0 never executed
        -:  873:				else
       26:  874:					snprintf(si_c, MAX_COLOR + 2, "\001\x1b[%sm\002",
       26:  875:					    colors[i] + 3);
       26:  875-block  0
unconditional  0 taken 26
        -:  876:			}
        -:  877:
      208:  878:			else if (*colors[i] == 'e' && strncmp(colors[i], "el=", 3) == 0) {
      208:  878-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 182
       26:  878-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26:  879:				if (!is_color_code(colors[i] + 3))
       26:  879-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####:  880:					*el_c = '\0';
    %%%%%:  880-block  0
unconditional  0 never executed
        -:  881:				else
       26:  882:					snprintf(el_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26:  882-block  0
unconditional  0 taken 26
        -:  883:			}
        -:  884:
      182:  885:			else if (*colors[i] == 'm' && strncmp(colors[i], "mi=", 3) == 0) {
      182:  885-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 156
       26:  885-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26:  886:				if (!is_color_code(colors[i] + 3))
       26:  886-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####:  887:					*mi_c = '\0';
    %%%%%:  887-block  0
unconditional  0 never executed
        -:  888:				else
       26:  889:					snprintf(mi_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26:  889-block  0
unconditional  0 taken 26
        -:  890:			}
        -:  891:
      156:  892:			else if (*colors[i] == 'd' && strncmp(colors[i], "dl=", 3) == 0) {
      156:  892-block  0
branch  0 taken 104 (fallthrough)
branch  1 taken 52
      104:  892-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 78
       26:  893:				if (!is_color_code(colors[i] + 3))
       26:  893-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####:  894:					*dl_c = '\0';
    %%%%%:  894-block  0
unconditional  0 never executed
        -:  895:				else
       26:  896:					snprintf(dl_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26:  896-block  0
unconditional  0 taken 26
        -:  897:			}
        -:  898:
      130:  899:			else if (*colors[i] == 'd' && strncmp(colors[i], "df=", 3) == 0) {
      130:  899-block  0
branch  0 taken 78 (fallthrough)
branch  1 taken 52
       78:  899-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 52
       26:  900:				if (!is_color_code(colors[i] + 3))
       26:  900-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####:  901:					*df_c = '\0';
    %%%%%:  901-block  0
unconditional  0 never executed
        -:  902:				else
       26:  903:					snprintf(df_c, MAX_COLOR - 1, "\x1b[%s;49m",
       26:  904:							colors[i] + 3);
       26:  904-block  0
unconditional  0 taken 26
        -:  905:			}
        -:  906:
      104:  907:			else if (*colors[i] == 'd' && strncmp(colors[i], "dc=", 3) == 0) {
      104:  907-block  0
branch  0 taken 52 (fallthrough)
branch  1 taken 52
       52:  907-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 26
       26:  908:				if (!is_color_code(colors[i] + 3))
       26:  908-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####:  909:					*dc_c = '\0';
    %%%%%:  909-block  0
unconditional  0 never executed
        -:  910:				else
       26:  911:					snprintf(dc_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26:  911-block  0
unconditional  0 taken 26
        -:  912:			}
        -:  913:
       78:  914:			else if (*colors[i] == 'w' && strncmp(colors[i], "wc=", 3) == 0) {
       78:  914-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 52
       26:  914-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26:  915:				if (!is_color_code(colors[i] + 3))
       26:  915-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####:  916:					*wc_c = '\0';
    %%%%%:  916-block  0
unconditional  0 never executed
        -:  917:				else
       26:  918:					snprintf(wc_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26:  918-block  0
unconditional  0 taken 26
        -:  919:			}
        -:  920:
       52:  921:			else if (*colors[i] == 'd' && strncmp(colors[i], "dh=", 3) == 0) {
       52:  921-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 26
       26:  921-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26:  922:				if (!is_color_code(colors[i] + 3))
       26:  922-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####:  923:					*dh_c = '\0';
    %%%%%:  923-block  0
unconditional  0 never executed
        -:  924:				else
       26:  925:					snprintf(dh_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26:  925-block  0
unconditional  0 taken 26
        -:  926:			}
        -:  927:
      668:  928:			free(colors[i]);
      668:  928-block  0
unconditional  0 taken 668
        -:  929:		}
        -:  930:
       26:  931:		free(colors);
       26:  932:		colors = (char **)NULL;
       26:  932-block  0
unconditional  0 taken 26
        -:  933:	}
        -:  934:
       27:  935:	if (!filecolors) {
       27:  935-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1:  936:		*nd_c = '\0';
        1:  937:		*nf_c = '\0';
        1:  938:		*di_c = '\0';
        1:  939:		*ed_c = '\0';
        1:  940:		*ne_c = '\0';
        1:  941:		*ex_c = '\0';
        1:  942:		*ee_c = '\0';
        1:  943:		*bd_c = '\0';
        1:  944:		*ln_c = '\0';
        1:  945:		*mh_c = '\0';
        1:  946:		*or_c = '\0';
        1:  947:		*so_c = '\0';
        1:  948:		*pi_c = '\0';
        1:  949:		*cd_c = '\0';
        1:  950:		*fi_c = '\0';
        1:  951:		*ef_c = '\0';
        1:  952:		*su_c = '\0';
        1:  953:		*sg_c = '\0';
        1:  954:		*ca_c = '\0';
        1:  955:		*st_c = '\0';
        1:  956:		*tw_c = '\0';
        1:  957:		*ow_c = '\0';
        1:  958:		*no_c = '\0';
        1:  959:		*uf_c = '\0';
        -:  960:
        -:  961:		/* Set the LS_COLORS environment variable with default values */
        1:  962:		char lsc[] = DEF_LS_COLORS;
        -:  963:
        1:  964:		if (setenv("LS_COLORS", lsc, 1) == -1)
        1:  964-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  965:			fprintf(stderr, _("%s: Error registering environment colors\n"),
    %%%%%:  965-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  966:					PROGRAM_NAME);
        -:  967:	} else {
        -:  968:		/* Set the LS_COLORS environment variable to use CliFM own
        -:  969:		 * colors. In this way, files listed for TAB completion will
        -:  970:		 * use CliFM colors instead of system colors */
        -:  971:
        -:  972:		/* Strip CLiFM custom file types (nd, ne, nf, ed, ef, ee, uf,
        -:  973:		 * bm, el, mi, dl, tx, df, dc, wc, dh, li, ti, em, wm, nm, si,
        -:  974:		 * and ca), from filecolors to construct a valid value for
        -:  975:		 * LS_COLORS */
       26:  976:		size_t buflen = 0, linec_len = strlen(filecolors);
       26:  977:		char *ls_buf = (char *)NULL;
       26:  978:		int i = 0;
        -:  979:
       26:  980:		ls_buf = (char *)xnmalloc(linec_len + 1, sizeof(char));
       26:  980-block  0
call    0 returned 26
        -:  981:
     4575:  982:		while (filecolors[i]) {
unconditional  0 taken 26
     4575:  982-block  0
branch  1 taken 4549
branch  2 taken 26 (fallthrough)
     4549:  983:			int rem = 0;
        -:  984:
     4549:  985:			if ((int)i < (int)(linec_len - 3) && ((filecolors[i] == 'n'
     4549:  985-block  0
branch  0 taken 4549 (fallthrough)
branch  1 taken 0
     4549:  985-block  1
branch  2 taken 130 (fallthrough)
branch  3 taken 4419
      130:  986:			&& (filecolors[i + 1] == 'd' || filecolors[i + 1] == 'e'
      130:  986-block  0
branch  0 taken 104 (fallthrough)
branch  1 taken 26
      104:  986-block  1
branch  2 taken 78 (fallthrough)
branch  3 taken 26
     4497:  987:			|| filecolors[i + 1] == 'f')) || (filecolors[i] == 'e'
       78:  987-block  0
branch  0 taken 52 (fallthrough)
branch  1 taken 26
     4471:  987-block  1
branch  2 taken 104 (fallthrough)
branch  3 taken 4367
      104:  988:			&& (filecolors[i + 1] == 'd' || filecolors[i + 1] == 'f'
      104:  988-block  0
branch  0 taken 78 (fallthrough)
branch  1 taken 26
       78:  988-block  1
branch  2 taken 52 (fallthrough)
branch  3 taken 26
     4419:  989:			|| filecolors[i + 1] == 'e')) || (filecolors[i] == 'u'
       52:  989-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 26
     4393:  989-block  1
branch  2 taken 52 (fallthrough)
branch  3 taken 4341
     4393:  990:			&& filecolors[i + 1] == 'f') || (filecolors[i] == 'c'
       52:  990-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 26
     4367:  990-block  1
branch  2 taken 52 (fallthrough)
branch  3 taken 4315
     4367:  991:			&& filecolors[i + 1] == 'a') || (filecolors[i] == 's'
       52:  991-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 26
     4341:  991-block  1
branch  2 taken 104 (fallthrough)
branch  3 taken 4237
     4341:  992:			&& filecolors[i + 1] == 'h') || (filecolors[i] == 's'
      104:  992-block  0
branch  0 taken 104 (fallthrough)
branch  1 taken 0
     4341:  992-block  1
branch  2 taken 104 (fallthrough)
branch  3 taken 4237
     4341:  993:			&& filecolors[i + 1] == 'f') || (filecolors[i] == 's'
      104:  993-block  0
branch  0 taken 104 (fallthrough)
branch  1 taken 0
     4341:  993-block  1
branch  2 taken 104 (fallthrough)
branch  3 taken 4237
     4341:  994:			&& filecolors[i + 1] == 'c') || (filecolors[i] == 's'
      104:  994-block  0
branch  0 taken 104 (fallthrough)
branch  1 taken 0
     4341:  994-block  1
branch  2 taken 104 (fallthrough)
branch  3 taken 4237
     4341:  995:			&& filecolors[i + 1] == 'x') || (filecolors[i] == 'h'
      104:  995-block  0
branch  0 taken 104 (fallthrough)
branch  1 taken 0
     4341:  995-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 4315
     4341:  996:			&& filecolors[i + 1] == 'b') || (filecolors[i] == 'h'
       26:  996-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 0
     4341:  996-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 4315
     4341:  997:			&& filecolors[i + 1] == 'c') || (filecolors[i] == 'h'
       26:  997-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 0
     4341:  997-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 4315
     4341:  998:			&& filecolors[i + 1] == 'e') || (filecolors[i] == 'h'
       26:  998-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 0
     4341:  998-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 4315
     4341:  999:			&& filecolors[i + 1] == 'n') || (filecolors[i] == 'h'
       26:  999-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 0
     4341:  999-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 4315
     4341: 1000:			&& filecolors[i + 1] == 'p') || (filecolors[i] == 'h'
       26: 1000-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 0
     4341: 1000-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 4315
     4341: 1001:			&& filecolors[i + 1] == 'q') || (filecolors[i] == 'h'
       26: 1001-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 0
     4341: 1001-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 4315
     4341: 1002:			&& filecolors[i + 1] == 'r') || (filecolors[i] == 'h'
       26: 1002-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 0
     4341: 1002-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 4315
     4341: 1003:			&& filecolors[i + 1] == 's') || (filecolors[i] == 'h'
       26: 1003-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 0
     4341: 1003-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 4315
      234: 1004:			&& filecolors[i + 1] == 'v')) && filecolors[i + 2] == '=') {
       26: 1004-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 26
      208: 1004-block  1
branch  2 taken 208 (fallthrough)
branch  3 taken 0
        -: 1005:
        -: 1006:				/* If one of the above is found, move to the next
        -: 1007:				 * color code */
      208: 1008:				rem = 1;
     1476: 1009:				for (i += 3; filecolors[i] && filecolors[i] != ':'; i++);
      208: 1009-block  0
unconditional  0 taken 208
     1268: 1009-block  1
unconditional  1 taken 1268
     1476: 1009-block  2
branch  2 taken 1476 (fallthrough)
branch  3 taken 0
     1476: 1009-block  3
branch  4 taken 1268
branch  5 taken 208 (fallthrough)
        -: 1010:			}
        -: 1011:
     4549: 1012:			if (filecolors[i]) {
     4549: 1012-block  0
branch  0 taken 4549 (fallthrough)
branch  1 taken 0
     4549: 1013:				if (!rem)
     4549: 1013-block  0
branch  0 taken 4341 (fallthrough)
branch  1 taken 208
     4341: 1014:					ls_buf[buflen++] = filecolors[i];
     4341: 1014-block  0
unconditional  0 taken 4341
        -: 1015:			} else {
    #####: 1016:				break;
    %%%%%: 1016-block  0
unconditional  0 never executed
        -: 1017:			}
        -: 1018:
     4549: 1019:			i++;
     4549: 1019-block  0
unconditional  0 taken 4549
        -: 1020:		}
        -: 1021:
       26: 1022:		if (buflen) {
       26: 1022-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 0
       26: 1023:			ls_buf[buflen] = '\0';
        -: 1024:
       26: 1025:			if (setenv("LS_COLORS", ls_buf, 1) == -1)
       26: 1025-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1026:				fprintf(stderr, _("%s: Error registering environment "
    %%%%%: 1026-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1027:						"colors\n"), PROGRAM_NAME);
       26: 1028:			free(ls_buf);
       26: 1029:			ls_buf = (char *)NULL;
       26: 1029-block  0
unconditional  0 taken 26
        -: 1030:		}
        -: 1031:
        -: 1032:		/* Split the colors line into substrings (one per color) */
       26: 1033:		char *p = filecolors, *buf = (char *)NULL, **colors = (char **)NULL;
       26: 1034:		size_t len = 0, words = 0;
       26: 1035:		int eol = 0;
        -: 1036:
     6493: 1037:		while (!eol) {
       26: 1037-block  0
unconditional  0 taken 26
     6493: 1037-block  1
branch  1 taken 6467
branch  2 taken 26 (fallthrough)
     6467: 1038:			switch (*p) {
     6467: 1038-block  0
branch  0 taken 650
branch  1 taken 5817
        -: 1039:
      650: 1040:			case '\0': /* fallthrough */
        -: 1041:			case '\n': /* fallthrough */
        -: 1042:			case ':':
      650: 1043:				if (!buf)
      650: 1043-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 650
    #####: 1044:					break;
    %%%%%: 1044-block  0
unconditional  0 never executed
      650: 1045:				buf[len] = '\0';
      650: 1046:				colors = (char **)xrealloc(colors, (words + 1) * sizeof(char *));
      650: 1046-block  0
call    0 returned 650
      650: 1047:				colors[words++] = savestring(buf, len);
call    0 returned 650
      650: 1048:				*buf = '\0';
        -: 1049:
      650: 1050:				if (!*p)
branch  0 taken 26 (fallthrough)
branch  1 taken 624
       26: 1051:					eol = 1;
       26: 1051-block  0
unconditional  0 taken 26
        -: 1052:
      650: 1053:				len = 0;
      650: 1054:				p++;
      650: 1055:				break;
      650: 1055-block  0
unconditional  0 taken 650
        -: 1056:
     5817: 1057:			default:
     5817: 1058:				buf = (char *)xrealloc(buf, (len + 2) * sizeof(char));
     5817: 1058-block  0
call    0 returned 5817
     5817: 1059:				buf[len++] = *(p++);
     5817: 1060:				break;
unconditional  0 taken 5817
        -: 1061:			}
        -: 1062:		}
        -: 1063:
       26: 1064:		p = (char *)NULL;
       26: 1065:		free(filecolors);
       26: 1066:		filecolors = (char *)NULL;
        -: 1067:
       26: 1068:		if (buf) {
       26: 1068-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 0
       26: 1069:			free(buf);
       26: 1070:			buf = (char *)NULL;
       26: 1070-block  0
unconditional  0 taken 26
        -: 1071:		}
        -: 1072:
       26: 1073:		if (colors) {
       26: 1073-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 0
       26: 1074:			colors = (char **)xrealloc(colors, (words + 1) * sizeof(char *));
       26: 1074-block  0
call    0 returned 26
       26: 1075:			colors[words] = (char *)NULL;
unconditional  0 taken 26
        -: 1076:		}
        -: 1077:
        -: 1078:		/* Set the color variables */
       26: 1079:		i = (int)words;
      676: 1080:		while (--i >= 0) {
       26: 1080-block  0
unconditional  0 taken 26
      676: 1080-block  1
branch  1 taken 650
branch  2 taken 26 (fallthrough)
      650: 1081:			if (*colors[i] == 'd' && strncmp(colors[i], "di=", 3) == 0) {
      650: 1081-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 624
       26: 1081-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26: 1082:				if (!is_color_code(colors[i] + 3))
       26: 1082-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1083:					*di_c = '\0';
    %%%%%: 1083-block  0
unconditional  0 never executed
        -: 1084:				else
       26: 1085:					snprintf(di_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1085-block  0
unconditional  0 taken 26
        -: 1086:
     624*: 1087:			} else if (*colors[i] == 'd' && strncmp(colors[i], "df=", 3) == 0) {
      624: 1087-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 624
    %%%%%: 1087-block  1
branch  2 never executed
branch  3 never executed
    #####: 1088:				if (!is_color_code(colors[i] + 3))
    %%%%%: 1088-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1089:					*df_c = '\0';
    %%%%%: 1089-block  0
unconditional  0 never executed
        -: 1090:				else
    #####: 1091:					snprintf(df_c, MAX_COLOR - 1, "\x1b[%s;49m",
    #####: 1092:							colors[i] + 3);
    %%%%%: 1092-block  0
unconditional  0 never executed
        -: 1093:
     624*: 1094:			} else if (*colors[i] == 'd' && strncmp(colors[i], "dc=", 3) == 0) {
      624: 1094-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 624
    %%%%%: 1094-block  1
branch  2 never executed
branch  3 never executed
    #####: 1095:				if (!is_color_code(colors[i] + 3))
    %%%%%: 1095-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1096:					*dc_c = '\0';
    %%%%%: 1096-block  0
unconditional  0 never executed
        -: 1097:				else
    #####: 1098:					snprintf(dc_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
    %%%%%: 1098-block  0
unconditional  0 never executed
        -: 1099:
        -: 1100:/*			} else if (*colors[i] == 'w' && strncmp(colors[i], "wc=", 3) == 0) {
        -: 1101:				if (!is_color_code(colors[i] + 3))
        -: 1102:					*wc_c = '\0';
        -: 1103:				else
        -: 1104:					snprintf(wc_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        -: 1105:
        -: 1106:			} else if (*colors[i] == 's' && strncmp(colors[i], "sh=", 3) == 0) {
        -: 1107:				if (!is_color_code(colors[i] + 3))
        -: 1108:					*sh_c = '\0';
        -: 1109:				else
        -: 1110:					snprintf(sh_c, MAX_COLOR - 1, "\x1b[%sm",
        -: 1111:							colors[i] + 3);
        -: 1112:
        -: 1113:			} else if (*colors[i] == 's' && strncmp(colors[i], "sf=", 3) == 0) {
        -: 1114:				if (!is_color_code(colors[i] + 3))
        -: 1115:					*sf_c = '\0';
        -: 1116:				else
        -: 1117:					snprintf(sf_c, MAX_COLOR - 1, "\x1b[%sm",
        -: 1118:							colors[i] + 3);
        -: 1119:
        -: 1120:			} else if (*colors[i] == 's' && strncmp(colors[i], "sc=", 3) == 0) {
        -: 1121:				if (!is_color_code(colors[i] + 3))
        -: 1122:					*sc_c = '\0';
        -: 1123:				else
        -: 1124:					snprintf(sc_c, MAX_COLOR - 1, "\x1b[%sm",
        -: 1125:							colors[i] + 3);
        -: 1126:
        -: 1127:			} else if (*colors[i] == 's' && strncmp(colors[i], "sx=", 3) == 0) {
        -: 1128:				if (!is_color_code(colors[i] + 3))
        -: 1129:					*sx_c = '\0';
        -: 1130:				else
        -: 1131:					snprintf(sx_c, MAX_COLOR - 1, "\x1b[%sm",
        -: 1132:							colors[i] + 3); */
        -: 1133:
     624*: 1134:			} else if (*colors[i] == 'd' && strncmp(colors[i], "dh=", 3) == 0) {
      624: 1134-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 624
    %%%%%: 1134-block  1
branch  2 never executed
branch  3 never executed
    #####: 1135:				if (!is_color_code(colors[i] + 3))
    %%%%%: 1135-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1136:					*dh_c = '\0';
    %%%%%: 1136-block  0
unconditional  0 never executed
        -: 1137:				else
    #####: 1138:					snprintf(dh_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
    %%%%%: 1138-block  0
unconditional  0 never executed
      624: 1139:			} else if (*colors[i] == 'n' && strncmp(colors[i], "nd=", 3) == 0) {
      624: 1139-block  0
branch  0 taken 104 (fallthrough)
branch  1 taken 520
      104: 1139-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 78
       26: 1140:				if (!is_color_code(colors[i] + 3))
       26: 1140-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1141:					*nd_c = '\0';
    %%%%%: 1141-block  0
unconditional  0 never executed
        -: 1142:				else
       26: 1143:					snprintf(nd_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1143-block  0
unconditional  0 taken 26
        -: 1144:
      598: 1145:			} else if (*colors[i] == 'e' && strncmp(colors[i], "ed=", 3) == 0) {
      598: 1145-block  0
branch  0 taken 104 (fallthrough)
branch  1 taken 494
      104: 1145-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 78
       26: 1146:				if (!is_color_code(colors[i] + 3))
       26: 1146-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1147:					*ed_c = '\0';
    %%%%%: 1147-block  0
unconditional  0 never executed
        -: 1148:				else
       26: 1149:					snprintf(ed_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1149-block  0
unconditional  0 taken 26
        -: 1150:
      572: 1151:			} else if (*colors[i] == 'n' && strncmp(colors[i], "ne=", 3) == 0) {
      572: 1151-block  0
branch  0 taken 78 (fallthrough)
branch  1 taken 494
       78: 1151-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 52
       26: 1152:				if (!is_color_code(colors[i] + 3))
       26: 1152-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1153:					*ne_c = '\0';
    %%%%%: 1153-block  0
unconditional  0 never executed
        -: 1154:				else
       26: 1155:					snprintf(ne_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1155-block  0
unconditional  0 taken 26
        -: 1156:
      546: 1157:			} else if (*colors[i] == 'f' && strncmp(colors[i], "fi=", 3) == 0) {
      546: 1157-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 520
       26: 1157-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26: 1158:				if (!is_color_code(colors[i] + 3))
       26: 1158-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1159:					*fi_c = '\0';
    %%%%%: 1159-block  0
unconditional  0 never executed
        -: 1160:				else
       26: 1161:					snprintf(fi_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1161-block  0
unconditional  0 taken 26
        -: 1162:
      520: 1163:			} else if (*colors[i] == 'e' && strncmp(colors[i], "ef=", 3) == 0) {
      520: 1163-block  0
branch  0 taken 78 (fallthrough)
branch  1 taken 442
       78: 1163-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 52
       26: 1164:				if (!is_color_code(colors[i] + 3))
       26: 1164-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1165:					*ef_c = '\0';
    %%%%%: 1165-block  0
unconditional  0 never executed
        -: 1166:				else
       26: 1167:					snprintf(ef_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1167-block  0
unconditional  0 taken 26
        -: 1168:
      494: 1169:			} else if (*colors[i] == 'n' && strncmp(colors[i], "nf=", 3) == 0) {
      494: 1169-block  0
branch  0 taken 52 (fallthrough)
branch  1 taken 442
       52: 1169-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 26
       26: 1170:				if (!is_color_code(colors[i] + 3))
       26: 1170-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1171:					*nf_c = '\0';
    %%%%%: 1171-block  0
unconditional  0 never executed
        -: 1172:				else
       26: 1173:					snprintf(nf_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1173-block  0
unconditional  0 taken 26
        -: 1174:
      468: 1175:			} else if (*colors[i] == 'l' && strncmp(colors[i], "ln=", 3) == 0) {
      468: 1175-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 442
       26: 1175-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26: 1176:				if (!is_color_code(colors[i] + 3))
       26: 1176-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1177:					*ln_c = '\0';
    %%%%%: 1177-block  0
unconditional  0 never executed
        -: 1178:				else
       26: 1179:					snprintf(ln_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1179-block  0
unconditional  0 taken 26
        -: 1180:
      442: 1181:			} else if (*colors[i] == 'o' && strncmp(colors[i], "or=", 3) == 0) {
      442: 1181-block  0
branch  0 taken 52 (fallthrough)
branch  1 taken 390
       52: 1181-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 26
       26: 1182:				if (!is_color_code(colors[i] + 3))
       26: 1182-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1183:					*or_c = '\0';
    %%%%%: 1183-block  0
unconditional  0 never executed
        -: 1184:				else
       26: 1185:					snprintf(or_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1185-block  0
unconditional  0 taken 26
        -: 1186:
      416: 1187:			} else if (*colors[i] == 'e' && strncmp(colors[i], "ex=", 3) == 0) {
      416: 1187-block  0
branch  0 taken 52 (fallthrough)
branch  1 taken 364
       52: 1187-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 26
       26: 1188:				if (!is_color_code(colors[i] + 3))
       26: 1188-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1189:					*ex_c = '\0';
    %%%%%: 1189-block  0
unconditional  0 never executed
        -: 1190:				else
       26: 1191:					snprintf(ex_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1191-block  0
unconditional  0 taken 26
        -: 1192:
      390: 1193:			} else if (*colors[i] == 'e' && strncmp(colors[i], "ee=", 3) == 0) {
      390: 1193-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 364
       26: 1193-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26: 1194:				if (!is_color_code(colors[i] + 3))
       26: 1194-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1195:					*ee_c = '\0';
    %%%%%: 1195-block  0
unconditional  0 never executed
        -: 1196:				else
       26: 1197:					snprintf(ee_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1197-block  0
unconditional  0 taken 26
        -: 1198:
      364: 1199:			} else if (*colors[i] == 'b' && strncmp(colors[i], "bd=", 3) == 0) {
      364: 1199-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 338
       26: 1199-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26: 1200:				if (!is_color_code(colors[i] + 3))
       26: 1200-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1201:					*bd_c = '\0';
    %%%%%: 1201-block  0
unconditional  0 never executed
        -: 1202:				else
       26: 1203:					snprintf(bd_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1203-block  0
unconditional  0 taken 26
        -: 1204:
      338: 1205:			} else if (*colors[i] == 'c' && strncmp(colors[i], "cd=", 3) == 0) {
      338: 1205-block  0
branch  0 taken 52 (fallthrough)
branch  1 taken 286
       52: 1205-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 26
       26: 1206:				if (!is_color_code(colors[i] + 3))
       26: 1206-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1207:					*cd_c = '\0';
    %%%%%: 1207-block  0
unconditional  0 never executed
        -: 1208:				else
       26: 1209:					snprintf(cd_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1209-block  0
unconditional  0 taken 26
        -: 1210:
      312: 1211:			} else if (*colors[i] == 'p' && strncmp(colors[i], "pi=", 3) == 0) {
      312: 1211-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 286
       26: 1211-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26: 1212:				if (!is_color_code(colors[i] + 3))
       26: 1212-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1213:					*pi_c = '\0';
    %%%%%: 1213-block  0
unconditional  0 never executed
        -: 1214:				else
       26: 1215:					snprintf(pi_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1215-block  0
unconditional  0 taken 26
        -: 1216:
      286: 1217:			} else if (*colors[i] == 's' && strncmp(colors[i], "so=", 3) == 0) {
      286: 1217-block  0
branch  0 taken 104 (fallthrough)
branch  1 taken 182
      104: 1217-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 78
       26: 1218:				if (!is_color_code(colors[i] + 3))
       26: 1218-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1219:					*so_c = '\0';
    %%%%%: 1219-block  0
unconditional  0 never executed
        -: 1220:				else
       26: 1221:					snprintf(so_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1221-block  0
unconditional  0 taken 26
        -: 1222:
      260: 1223:			} else if (*colors[i] == 's' && strncmp(colors[i], "su=", 3) == 0) {
      260: 1223-block  0
branch  0 taken 78 (fallthrough)
branch  1 taken 182
       78: 1223-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 52
       26: 1224:				if (!is_color_code(colors[i] + 3))
       26: 1224-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1225:					*su_c = '\0';
    %%%%%: 1225-block  0
unconditional  0 never executed
        -: 1226:				else
       26: 1227:					snprintf(su_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1227-block  0
unconditional  0 taken 26
        -: 1228:
      234: 1229:			} else if (*colors[i] == 's' && strncmp(colors[i], "sg=", 3) == 0) {
      234: 1229-block  0
branch  0 taken 52 (fallthrough)
branch  1 taken 182
       52: 1229-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 26
       26: 1230:				if (!is_color_code(colors[i] + 3))
       26: 1230-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1231:					*sg_c = '\0';
    %%%%%: 1231-block  0
unconditional  0 never executed
        -: 1232:				else
       26: 1233:					snprintf(sg_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1233-block  0
unconditional  0 taken 26
        -: 1234:
      208: 1235:			} else if (*colors[i] == 't' && strncmp(colors[i], "tw=", 3) == 0) {
      208: 1235-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 182
       26: 1235-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26: 1236:				if (!is_color_code(colors[i] + 3))
       26: 1236-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1237:					*tw_c = '\0';
    %%%%%: 1237-block  0
unconditional  0 never executed
        -: 1238:				else
       26: 1239:					snprintf(tw_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1239-block  0
unconditional  0 taken 26
        -: 1240:
      182: 1241:			} else if (*colors[i] == 's' && strncmp(colors[i], "st=", 3) == 0) {
      182: 1241-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 156
       26: 1241-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26: 1242:				if (!is_color_code(colors[i] + 3))
       26: 1242-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1243:					*st_c = '\0';
    %%%%%: 1243-block  0
unconditional  0 never executed
        -: 1244:				else
       26: 1245:					snprintf(st_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1245-block  0
unconditional  0 taken 26
        -: 1246:
      156: 1247:			} else if (*colors[i] == 'o' && strncmp(colors[i], "ow=", 3) == 0) {
      156: 1247-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 130
       26: 1247-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26: 1248:				if (!is_color_code(colors[i] + 3))
       26: 1248-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1249:					*ow_c = '\0';
    %%%%%: 1249-block  0
unconditional  0 never executed
        -: 1250:				else
       26: 1251:					snprintf(ow_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1251-block  0
unconditional  0 taken 26
        -: 1252:
      130: 1253:			} else if (*colors[i] == 'c' && strncmp(colors[i], "ca=", 3) == 0) {
      130: 1253-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 104
       26: 1253-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26: 1254:				if (!is_color_code(colors[i] + 3))
       26: 1254-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1255:					*ca_c = '\0';
    %%%%%: 1255-block  0
unconditional  0 never executed
        -: 1256:				else
       26: 1257:					snprintf(ca_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1257-block  0
unconditional  0 taken 26
        -: 1258:
      104: 1259:			} else if (*colors[i] == 'n' && strncmp(colors[i], "no=", 3) == 0) {
      104: 1259-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 78
       26: 1259-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26: 1260:				if (!is_color_code(colors[i] + 3))
       26: 1260-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1261:					*no_c = '\0';
    %%%%%: 1261-block  0
unconditional  0 never executed
        -: 1262:				else
       26: 1263:					snprintf(no_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1263-block  0
unconditional  0 taken 26
        -: 1264:
       78: 1265:			} else if (*colors[i] == 'm' && strncmp(colors[i], "mh=", 3) == 0) {
       78: 1265-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 52
       26: 1265-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26: 1266:				if (!is_color_code(colors[i] + 3))
       26: 1266-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1267:					*mh_c = '\0';
    %%%%%: 1267-block  0
unconditional  0 never executed
        -: 1268:				else
       26: 1269:					snprintf(mh_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1269-block  0
unconditional  0 taken 26
        -: 1270:
       52: 1271:			} else if (*colors[i] == 'u' && strncmp(colors[i], "uf=", 3) == 0) {
       52: 1271-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 26
       26: 1271-block  1
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26: 1272:				if (!is_color_code(colors[i] + 3))
       26: 1272-block  0
call    0 returned 26
branch  1 taken 0 (fallthrough)
branch  2 taken 26
    #####: 1273:					*uf_c = '\0';
    %%%%%: 1273-block  0
unconditional  0 never executed
        -: 1274:				else
       26: 1275:					snprintf(uf_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
       26: 1275-block  0
unconditional  0 taken 26
        -: 1276:			}
        -: 1277:
      650: 1278:			free(colors[i]);
      650: 1278-block  0
unconditional  0 taken 650
        -: 1279:		}
        -: 1280:
       26: 1281:		free(colors);
       26: 1282:		colors = (char **)NULL;
       26: 1282-block  0
unconditional  0 taken 26
        -: 1283:	}
        -: 1284:
        -: 1285:	/* If some color was not set or it was a wrong color code, set the
        -: 1286:	 * default */
       27: 1287:	if (!*hb_c)
       27: 1287-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 25
        2: 1288:		strcpy(hb_c, DEF_HB_C);
        2: 1288-block  0
unconditional  0 taken 2
       27: 1289:	if (!*hc_c)
       27: 1289-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 25
        2: 1290:		strcpy(hc_c, DEF_HC_C);
        2: 1290-block  0
unconditional  0 taken 2
       27: 1291:	if (!*he_c)
       27: 1291-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 25
        2: 1292:		strcpy(he_c, DEF_HE_C);
        2: 1292-block  0
unconditional  0 taken 2
       27: 1293:	if (!*hn_c)
       27: 1293-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 25
        2: 1294:		strcpy(hn_c, DEF_HN_C);
        2: 1294-block  0
unconditional  0 taken 2
       27: 1295:	if (!*hp_c)
       27: 1295-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 25
        2: 1296:		strcpy(hp_c, DEF_HP_C);
        2: 1296-block  0
unconditional  0 taken 2
       27: 1297:	if (!*hq_c)
       27: 1297-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 25
        2: 1298:		strcpy(hq_c, DEF_HQ_C);
        2: 1298-block  0
unconditional  0 taken 2
       27: 1299:	if (!*hr_c)
       27: 1299-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 25
        2: 1300:		strcpy(hr_c, DEF_HR_C);
        2: 1300-block  0
unconditional  0 taken 2
       27: 1301:	if (!*hs_c)
       27: 1301-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 25
        2: 1302:		strcpy(hs_c, DEF_HS_C);
        2: 1302-block  0
unconditional  0 taken 2
       27: 1303:	if (!*hv_c)
       27: 1303-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 25
        2: 1304:		strcpy(hv_c, DEF_HV_C);
        2: 1304-block  0
unconditional  0 taken 2
        -: 1305:
       27: 1306:	if (!*sh_c)
       27: 1306-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 25
        2: 1307:		strcpy(sh_c, DEF_SH_C);
        2: 1307-block  0
unconditional  0 taken 2
       27: 1308:	if (!*sf_c)
       27: 1308-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 25
        2: 1309:		strcpy(sf_c, DEF_SF_C);
        2: 1309-block  0
unconditional  0 taken 2
       27: 1310:	if (!*sc_c)
       27: 1310-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 25
        2: 1311:		strcpy(sc_c, DEF_SC_C);
        2: 1311-block  0
unconditional  0 taken 2
       27: 1312:	if (!*sx_c)
       27: 1312-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 19
        8: 1313:		strcpy(sx_c, DEF_SX_C);
        8: 1313-block  0
unconditional  0 taken 8
        -: 1314:
       27: 1315:	if (!*el_c)
       27: 1315-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1316:		strcpy(el_c, DEF_EL_C);
        1: 1316-block  0
unconditional  0 taken 1
       27: 1317:	if (!*mi_c)
       27: 1317-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1318:		strcpy(mi_c, DEF_MI_C);
        1: 1318-block  0
unconditional  0 taken 1
       27: 1319:	if (!*dl_c)
       27: 1319-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1320:		strcpy(dl_c, DEF_DL_C);
        1: 1320-block  0
unconditional  0 taken 1
       27: 1321:	if (!*df_c)
       27: 1321-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1322:		strcpy(df_c, DEF_DF_C);
        1: 1322-block  0
unconditional  0 taken 1
       27: 1323:	if (!*dc_c)
       27: 1323-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1324:		strcpy(dc_c, DEF_DC_C);
        1: 1324-block  0
unconditional  0 taken 1
       27: 1325:	if (!*wc_c)
       27: 1325-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1326:		strcpy(wc_c, DEF_WC_C);
        1: 1326-block  0
unconditional  0 taken 1
       27: 1327:	if (!*dh_c)
       27: 1327-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1328:		strcpy(dh_c, DEF_DH_C);
        1: 1328-block  0
unconditional  0 taken 1
       27: 1329:	if (!*tx_c)
       27: 1329-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1330:		strcpy(tx_c, DEF_TX_C);
        1: 1330-block  0
unconditional  0 taken 1
       27: 1331:	if (!*li_c)
       27: 1331-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1332:		strcpy(li_c, DEF_LI_C);
        1: 1332-block  0
unconditional  0 taken 1
       27: 1333:	if (!*ti_c)
       27: 1333-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1334:		strcpy(ti_c, DEF_TI_C);
        1: 1334-block  0
unconditional  0 taken 1
       27: 1335:	if (!*em_c)
       27: 1335-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1336:		strcpy(em_c, DEF_EM_C);
        1: 1336-block  0
unconditional  0 taken 1
       27: 1337:	if (!*wm_c)
       27: 1337-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1338:		strcpy(wm_c, DEF_WM_C);
        1: 1338-block  0
unconditional  0 taken 1
       27: 1339:	if (!*nm_c)
       27: 1339-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1340:		strcpy(nm_c, DEF_NM_C);
        1: 1340-block  0
unconditional  0 taken 1
       27: 1341:	if (!*si_c)
       27: 1341-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1342:		strcpy(si_c, DEF_SI_C);
        1: 1342-block  0
unconditional  0 taken 1
       27: 1343:	if (!*bm_c)
       27: 1343-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1344:		strcpy(bm_c, DEF_BM_C);
        1: 1344-block  0
unconditional  0 taken 1
        -: 1345:
       27: 1346:	if (!*di_c)
       27: 1346-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1347:		strcpy(di_c, DEF_DI_C);
        1: 1347-block  0
unconditional  0 taken 1
       27: 1348:	if (!*nd_c)
       27: 1348-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1349:		strcpy(nd_c, DEF_ND_C);
        1: 1349-block  0
unconditional  0 taken 1
       27: 1350:	if (!*ed_c)
       27: 1350-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1351:		strcpy(ed_c, DEF_ED_C);
        1: 1351-block  0
unconditional  0 taken 1
       27: 1352:	if (!*ne_c)
       27: 1352-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1353:		strcpy(ne_c, DEF_NE_C);
        1: 1353-block  0
unconditional  0 taken 1
       27: 1354:	if (!*fi_c)
       27: 1354-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1355:		strcpy(fi_c, DEF_FI_C);
        1: 1355-block  0
unconditional  0 taken 1
       27: 1356:	if (!*ef_c)
       27: 1356-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1357:		strcpy(ef_c, DEF_EF_C);
        1: 1357-block  0
unconditional  0 taken 1
       27: 1358:	if (!*nf_c)
       27: 1358-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1359:		strcpy(nf_c, DEF_NF_C);
        1: 1359-block  0
unconditional  0 taken 1
       27: 1360:	if (!*ln_c)
       27: 1360-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1361:		strcpy(ln_c, DEF_LN_C);
        1: 1361-block  0
unconditional  0 taken 1
       27: 1362:	if (!*or_c)
       27: 1362-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1363:		strcpy(or_c, DEF_OR_C);
        1: 1363-block  0
unconditional  0 taken 1
       27: 1364:	if (!*pi_c)
       27: 1364-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1365:		strcpy(pi_c, DEF_PI_C);
        1: 1365-block  0
unconditional  0 taken 1
       27: 1366:	if (!*so_c)
       27: 1366-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1367:		strcpy(so_c, DEF_SO_C);
        1: 1367-block  0
unconditional  0 taken 1
       27: 1368:	if (!*bd_c)
       27: 1368-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1369:		strcpy(bd_c, DEF_BD_C);
        1: 1369-block  0
unconditional  0 taken 1
       27: 1370:	if (!*cd_c)
       27: 1370-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1371:		strcpy(cd_c, DEF_CD_C);
        1: 1371-block  0
unconditional  0 taken 1
       27: 1372:	if (!*su_c)
       27: 1372-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1373:		strcpy(su_c, DEF_SU_C);
        1: 1373-block  0
unconditional  0 taken 1
       27: 1374:	if (!*sg_c)
       27: 1374-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1375:		strcpy(sg_c, DEF_SG_C);
        1: 1375-block  0
unconditional  0 taken 1
       27: 1376:	if (!*st_c)
       27: 1376-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1377:		strcpy(st_c, DEF_ST_C);
        1: 1377-block  0
unconditional  0 taken 1
       27: 1378:	if (!*tw_c)
       27: 1378-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1379:		strcpy(tw_c, DEF_TW_C);
        1: 1379-block  0
unconditional  0 taken 1
       27: 1380:	if (!*ow_c)
       27: 1380-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1381:		strcpy(ow_c, DEF_OW_C);
        1: 1381-block  0
unconditional  0 taken 1
       27: 1382:	if (!*ex_c)
       27: 1382-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1383:		strcpy(ex_c, DEF_EX_C);
        1: 1383-block  0
unconditional  0 taken 1
       27: 1384:	if (!*ee_c)
       27: 1384-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1385:		strcpy(ee_c, DEF_EE_C);
        1: 1385-block  0
unconditional  0 taken 1
       27: 1386:	if (!*ca_c)
       27: 1386-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1387:		strcpy(ca_c, DEF_CA_C);
        1: 1387-block  0
unconditional  0 taken 1
       27: 1388:	if (!*no_c)
       27: 1388-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1389:		strcpy(no_c, DEF_NO_C);
        1: 1389-block  0
unconditional  0 taken 1
       27: 1390:	if (!*uf_c)
       27: 1390-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1391:		strcpy(uf_c, DEF_UF_C);
        1: 1391-block  0
unconditional  0 taken 1
       27: 1392:	if (!*mh_c)
       27: 1392-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1: 1393:		strcpy(mh_c, DEF_MH_C);
        1: 1393-block  0
unconditional  0 taken 1
        -: 1394:#ifndef _NO_ICONS
       27: 1395:	if (!*dir_ico_c)
       27: 1395-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 25
        2: 1396:		strcpy(dir_ico_c, DEF_DIR_ICO_C);
        2: 1396-block  0
unconditional  0 taken 2
        -: 1397:#endif
        -: 1398:
       27: 1399:	return EXIT_SUCCESS;
       27: 1399-block  0
unconditional  0 taken 27
        -: 1400:}
        -: 1401:
        -: 1402:/* Print ENTRY using color codes and I as ELN, right padding PAD
        -: 1403: * chars and terminating ENTRY with or without a new line char (NEW_LINE
        -: 1404: * 1 or 0 respectivelly) */
        -: 1405:void
function colors_list called 79 returned 100% blocks executed 54%
       79: 1406:colors_list(const char *ent, const int i, const int pad, const int new_line)
        -: 1407:{
      79*: 1408:	size_t i_digits = (size_t)DIGINUM(i);
       79: 1408-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 79
    %%%%%: 1408-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1408-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 1408-block  3
branch  6 never executed
branch  7 never executed
    %%%%%: 1408-block  4
branch  8 never executed
branch  9 never executed
    %%%%%: 1408-block  5
branch 10 never executed
branch 11 never executed
    %%%%%: 1408-block  6
branch 12 never executed
branch 13 never executed
    %%%%%: 1408-block  7
branch 14 never executed
branch 15 never executed
    %%%%%: 1408-block  8
branch 16 never executed
branch 17 never executed
    %%%%%: 1408-block  9
unconditional 18 never executed
    %%%%%: 1408-block 10
unconditional 19 never executed
    %%%%%: 1408-block 11
unconditional 20 never executed
    %%%%%: 1408-block 12
unconditional 21 never executed
    %%%%%: 1408-block 13
unconditional 22 never executed
    %%%%%: 1408-block 14
unconditional 23 never executed
    %%%%%: 1408-block 15
unconditional 24 never executed
    %%%%%: 1408-block 16
unconditional 25 never executed
    %%%%%: 1408-block 17
unconditional 26 never executed
    %%%%%: 1408-block 18
unconditional 27 never executed
    %%%%%: 1408-block 19
unconditional 28 never executed
    %%%%%: 1408-block 20
unconditional 29 never executed
    %%%%%: 1408-block 21
unconditional 30 never executed
    %%%%%: 1408-block 22
unconditional 31 never executed
    %%%%%: 1408-block 23
unconditional 32 never executed
    %%%%%: 1408-block 24
unconditional 33 never executed
    %%%%%: 1408-block 25
unconditional 34 never executed
       79: 1408-block 26
unconditional 35 taken 79
        -: 1409:
        -: 1410:	/* Num (i) + space + null byte */
       79: 1411:	char *index = (char *)xnmalloc(i_digits + 2, sizeof(char));
       79: 1411-block  0
call    0 returned 79
        -: 1412:
       79: 1413:	if (i > 0) /* When listing files in CWD */
branch  0 taken 73 (fallthrough)
branch  1 taken 6
       73: 1414:		sprintf(index, "%d ", i);
       73: 1414-block  0
unconditional  0 taken 73
        6: 1415:	else if (i == -1) /* ELN for entry could not be found */
        6: 1415-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####: 1416:		sprintf(index, "? ");
    %%%%%: 1416-block  0
unconditional  0 never executed
        -: 1417:	else
        -: 1418:	/* When listing files NOT in CWD (called from search function and
        -: 1419:	 * first argument is a path: "/search_str /path") 'i' is zero. In
        -: 1420:	 * this case, no index should be printed at all */
        6: 1421:		index[0] = '\0';
        6: 1421-block  0
unconditional  0 taken 6
        -: 1422:
        -: 1423:	struct stat file_attrib;
       79: 1424:	if (lstat(ent, &file_attrib) == -1) {
       79: 1424-block  0
call    0 returned 79
branch  1 taken 1 (fallthrough)
branch  2 taken 78
       1*: 1425:		fprintf(stderr, "%s%s%s%s%-*s%s%s", el_c, index, df_c,
        1: 1425-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1425-block  1
unconditional  2 taken 1
    %%%%%: 1425-block  2
unconditional  3 never executed
        1: 1425-block  3
call    4 returned 1
        -: 1426:		    uf_c, pad, ent, df_c, new_line ? "\n" : "");
        1: 1427:		free(index);
        1: 1428:		return;
unconditional  0 taken 1
        -: 1429:	}
        -: 1430:
       78: 1431:	char *linkname = (char *)NULL;
       78: 1432:	char ext_color[MAX_COLOR] = "";
       78: 1433:	char *color = fi_c;
        -: 1434:
        -: 1435:#ifdef _LINUX_CAP
        -: 1436:	cap_t cap;
        -: 1437:#endif
        -: 1438:
       78: 1439:	switch (file_attrib.st_mode & S_IFMT) {
       78: 1439-block  0
branch  0 taken 57
branch  1 taken 16
branch  2 taken 5
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
        -: 1440:
       57: 1441:	case S_IFREG:
       57: 1442:		if (access(ent, R_OK) == -1) {
       57: 1442-block  0
call    0 returned 57
branch  1 taken 0 (fallthrough)
branch  2 taken 57
    #####: 1443:			color = nf_c;
    %%%%%: 1443-block  0
unconditional  0 never executed
       57: 1444:		} else if (file_attrib.st_mode & S_ISUID) { /* set uid file */
       57: 1444-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 57
    #####: 1445:			color = su_c;
    %%%%%: 1445-block  0
unconditional  0 never executed
       57: 1446:		} else if (file_attrib.st_mode & S_ISGID) { /* set gid file */
       57: 1446-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 57
    #####: 1447:			color = sg_c;
    %%%%%: 1447-block  0
unconditional  0 never executed
        -: 1448:		} else {
        -: 1449:#ifdef _LINUX_CAP
       57: 1450:			cap = cap_get_file(ent);
       57: 1450-block  0
call    0 returned 57
       57: 1451:			if (cap) {
branch  0 taken 0 (fallthrough)
branch  1 taken 57
    #####: 1452:				color = ca_c;
    #####: 1453:				cap_free(cap);
    %%%%%: 1453-block  0
call    0 never executed
unconditional  1 never executed
       57: 1454:			} else if (file_attrib.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)) {
       57: 1454-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 57
        -: 1455:#else
        -: 1456:			if (file_attrib.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)) {
        -: 1457:#endif
    #####: 1458:				if (file_attrib.st_size == 0)
    %%%%%: 1458-block  0
branch  0 never executed
branch  1 never executed
    #####: 1459:					color = ee_c;
    %%%%%: 1459-block  0
unconditional  0 never executed
        -: 1460:				else
    #####: 1461:					color = ex_c;
    %%%%%: 1461-block  0
unconditional  0 never executed
       57: 1462:			} else if (file_attrib.st_size == 0) {
       57: 1462-block  0
branch  0 taken 47 (fallthrough)
branch  1 taken 10
       47: 1463:				color = ef_c;
       47: 1463-block  0
unconditional  0 taken 47
       10: 1464:			} else if (file_attrib.st_nlink > 1) {
       10: 1464-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    #####: 1465:				color = mh_c;
    %%%%%: 1465-block  0
unconditional  0 never executed
        -: 1466:			} else {
       10: 1467:				char *ext = (strrchr(ent, '.'));
       10: 1468:				if (ext) {
       10: 1468-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 2
        8: 1469:					char *extcolor = get_ext_color(ext);
        8: 1469-block  0
call    0 returned 8
        8: 1470:					if (extcolor) {
branch  0 taken 6 (fallthrough)
branch  1 taken 2
        6: 1471:						snprintf(ext_color, MAX_COLOR, "\x1b[%sm",
        -: 1472:						    extcolor);
        6: 1473:						color = ext_color;
        6: 1474:						extcolor = (char *)NULL;
        6: 1474-block  0
unconditional  0 taken 6
        -: 1475:					}
        8: 1476:					ext = (char *)NULL;
        8: 1476-block  0
unconditional  0 taken 8
        -: 1477:				}
        -: 1478:			}
        -: 1479:		}
        -: 1480:
       57: 1481:		break;
       57: 1481-block  0
unconditional  0 taken 57
        -: 1482:
       16: 1483:	case S_IFDIR:
       16: 1484:		if (access(ent, R_OK | X_OK) != 0) {
       16: 1484-block  0
call    0 returned 16
branch  1 taken 0 (fallthrough)
branch  2 taken 16
    #####: 1485:			color = nd_c;
    %%%%%: 1485-block  0
unconditional  0 never executed
        -: 1486:		} else {
       16: 1487:			int is_oth_w = 0;
        -: 1488:
       16: 1489:			if (file_attrib.st_mode & S_IWOTH)
       16: 1489-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 16
    #####: 1490:				is_oth_w = 1;
    %%%%%: 1490-block  0
unconditional  0 never executed
        -: 1491:
       16: 1492:			int files_dir = count_dir(ent, NO_CPOP);
       16: 1492-block  0
call    0 returned 16
        -: 1493:
       16: 1494:			color = (file_attrib.st_mode & S_ISVTX) ? (is_oth_w
       16: 1494-block  0
unconditional  0 taken 16
      32*: 1495:					? tw_c : st_c) : (is_oth_w ? ow_c :
branch  0 taken 0 (fallthrough)
branch  1 taken 16
    %%%%%: 1495-block  0
branch  2 never executed
branch  3 never executed
    %%%%%: 1495-block  1
unconditional  4 never executed
    %%%%%: 1495-block  2
unconditional  5 never executed
    %%%%%: 1495-block  3
unconditional  6 never executed
       16: 1495-block  4
branch  7 taken 16 (fallthrough)
branch  8 taken 0
       16: 1495-block  5
unconditional  9 taken 16
    %%%%%: 1495-block  6
unconditional 10 never executed
       16: 1495-block  7
unconditional 11 taken 16
        -: 1496:					/* If folder is empty, it contains only "."
        -: 1497:					 * and ".." (2 elements). If not mounted (ex:
        -: 1498:					 * /media/usb) the result will be zero. */
       16: 1499:					(files_dir == 2 || files_dir == 0) ? ed_c : di_c);
       16: 1499-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 5
       11: 1499-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 11
        5: 1499-block  2
unconditional  4 taken 5
       11: 1499-block  3
unconditional  5 taken 11
        -: 1500:		}
       16: 1501:		break;
       16: 1501-block  0
unconditional  0 taken 16
        -: 1502:
        5: 1503:	case S_IFLNK:
        5: 1504:		linkname = realpath(ent, (char *)NULL);
        5: 1504-block  0
call    0 returned 5
        5: 1505:		if (linkname) {
branch  0 taken 2 (fallthrough)
branch  1 taken 3
        2: 1506:			color = ln_c;
        2: 1507:			free(linkname);
        2: 1507-block  0
unconditional  0 taken 2
        -: 1508:		} else {
        3: 1509:			color = or_c;
        3: 1509-block  0
unconditional  0 taken 3
        -: 1510:		}
        5: 1511:		break;
        5: 1511-block  0
unconditional  0 taken 5
        -: 1512:
    #####: 1513:	case S_IFIFO: color = pi_c; break;
    %%%%%: 1513-block  0
unconditional  0 never executed
    #####: 1514:	case S_IFBLK: color = bd_c; break;
    %%%%%: 1514-block  0
unconditional  0 never executed
    #####: 1515:	case S_IFCHR: color = cd_c; break;
    %%%%%: 1515-block  0
unconditional  0 never executed
    #####: 1516:	case S_IFSOCK: color = so_c; break;
    %%%%%: 1516-block  0
unconditional  0 never executed
        -: 1517:	/* In case all the above conditions are false... */
    #####: 1518:	default: color = no_c; break;
    %%%%%: 1518-block  0
unconditional  0 never executed
        -: 1519:	}
        -: 1520:
       78: 1521:	printf("%s%s%s%s%s%s%s%-*s", el_c, index, df_c, color,
       78: 1521-block  0
branch  0 taken 69 (fallthrough)
branch  1 taken 9
       69: 1521-block  1
unconditional  2 taken 69
        9: 1521-block  2
unconditional  3 taken 9
       78: 1521-block  3
call    4 returned 78
        -: 1522:	    ent, df_c, new_line ? "\n" : "", pad, "");
       78: 1523:	free(index);
unconditional  0 taken 78
        -: 1524:}
        -: 1525:
        -: 1526:size_t
function get_colorschemes called 4 returned 100% blocks executed 88%
        4: 1527:get_colorschemes(void)
        -: 1528:{
        -: 1529:	struct stat attr;
        4: 1530:	int schemes_total = 0;
        -: 1531:	struct dirent *ent;
        -: 1532:	DIR *dir_p;
        4: 1533:	size_t i = 0;
        -: 1534:
        4: 1535:	if (colors_dir && stat(colors_dir, &attr) == EXIT_SUCCESS) {
        4: 1535-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 1535-block  1
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0
        4: 1536:		schemes_total = count_dir(colors_dir, NO_CPOP) - 2;
        4: 1536-block  0
call    0 returned 4
        4: 1537:		if (schemes_total) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        8: 1538:			color_schemes = (char **)xrealloc(color_schemes,
        4: 1539:							((size_t)schemes_total + 2) * sizeof(char *));
        4: 1539-block  0
call    0 returned 4
        -: 1540:
        -: 1541:			/* count_dir already opened and read this directory succesfully,
        -: 1542:			 * so that we don't need to check opendir for errors */
        4: 1543:			dir_p = opendir(colors_dir);
call    0 returned 4
       73: 1544:			while ((ent = readdir(dir_p)) != NULL) {
unconditional  0 taken 4
       73: 1544-block  0
call    1 returned 73
branch  2 taken 69
branch  3 taken 4 (fallthrough)
        -: 1545:				/* Skipp . and .. */
       69: 1546:				char *name = ent->d_name;
       69: 1547:				if (*name == '.' && (!name[1] || (name[1] == '.' && !name[2])))
       69: 1547-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 61
        8: 1547-block  1
branch  2 taken 4 (fallthrough)
branch  3 taken 4
        4: 1547-block  2
branch  4 taken 4 (fallthrough)
branch  5 taken 0
        4: 1547-block  3
branch  6 taken 4 (fallthrough)
branch  7 taken 0
        8: 1548:					continue;
        8: 1548-block  0
unconditional  0 taken 8
        -: 1549:
       61: 1550:				char *ret = strchr(name, '.');
        -: 1551:				/* If the file contains not dot, or if its extension is not
        -: 1552:				 * .cfm, or if it's just a hidden file named ".cfm", skip it */
      61*: 1553:				if (!ret || strcmp(ret, ".cfm") != 0 || ret == name)
       61: 1553-block  0
branch  0 taken 61 (fallthrough)
branch  1 taken 0
       61: 1553-block  1
branch  2 taken 61 (fallthrough)
branch  3 taken 0
       61: 1553-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 61
    #####: 1554:					continue;
    %%%%%: 1554-block  0
unconditional  0 never executed
        -: 1555:
       61: 1556:				*ret = '\0';
       61: 1557:				color_schemes[i++] = savestring(name, strlen(name));
       61: 1557-block  0
call    0 returned 61
unconditional  1 taken 61
        -: 1558:			}
        -: 1559:
        4: 1560:			closedir(dir_p);
        4: 1560-block  0
call    0 returned 4
        4: 1561:			color_schemes[i] = (char *)NULL;
unconditional  0 taken 4
        -: 1562:		}
        -: 1563:	}
        -: 1564:
        4: 1565:	if (!data_dir)
        4: 1565-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####: 1566:		return i;
    %%%%%: 1566-block  0
unconditional  0 never executed
        -: 1567:
        -: 1568:	char sys_colors_dir[PATH_MAX];
        4: 1569:	snprintf(sys_colors_dir, PATH_MAX - 1, "%s/%s/colors", data_dir, PNL);
        -: 1570:
        4: 1571:	if (stat(sys_colors_dir, &attr) == -1)
        4: 1571-block  0
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
    #####: 1572:		return i;
    %%%%%: 1572-block  0
unconditional  0 never executed
        -: 1573:
        4: 1574:	int total_tmp = schemes_total;
        4: 1575:	schemes_total += (count_dir(sys_colors_dir, NO_CPOP) - 2);
        4: 1575-block  0
call    0 returned 4
        -: 1576:
        4: 1577:	if (schemes_total <= total_tmp)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####: 1578:		return i;
    %%%%%: 1578-block  0
unconditional  0 never executed
        -: 1579:
        8: 1580:	color_schemes = (char **)xrealloc(color_schemes,
        4: 1581:					((size_t)schemes_total + 2) * sizeof(char *));
        4: 1581-block  0
call    0 returned 4
        -: 1582:
        4: 1583:	size_t i_tmp = i;
        -: 1584:
        4: 1585:	dir_p = opendir(sys_colors_dir);
call    0 returned 4
       16: 1586:	while ((ent = readdir(dir_p)) != NULL) {
unconditional  0 taken 4
       16: 1586-block  0
call    1 returned 16
branch  2 taken 12
branch  3 taken 4 (fallthrough)
        -: 1587:		/* Skipp . and .. */
       12: 1588:		char *name = ent->d_name;
       12: 1589:		if (*name == '.' && (!name[1] || (name[1] == '.' && !name[2])))
       12: 1589-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 4
        8: 1589-block  1
branch  2 taken 4 (fallthrough)
branch  3 taken 4
        4: 1589-block  2
branch  4 taken 4 (fallthrough)
branch  5 taken 0
        4: 1589-block  3
branch  6 taken 4 (fallthrough)
branch  7 taken 0
        8: 1590:			continue;
        8: 1590-block  0
unconditional  0 taken 8
        -: 1591:
        4: 1592:		char *ret = strchr(name, '.');
        -: 1593:		/* If the file contains not dot, or if its extension is not
        -: 1594:		 * .cfm, or if it's just a hidden file named ".cfm", skip it */
       4*: 1595:		if (!ret || ret == name || strcmp(ret, ".cfm") != 0)
        4: 1595-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 1595-block  1
branch  2 taken 4 (fallthrough)
branch  3 taken 0
        4: 1595-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 4
    #####: 1596:			continue;
    %%%%%: 1596-block  0
unconditional  0 never executed
        -: 1597:
        4: 1598:		*ret = '\0';
        -: 1599:
        -: 1600:		size_t j;
        4: 1601:		int dup = 0;
        7: 1602:		for (j = 0; j < i_tmp; j++) {
        4: 1602-block  0
unconditional  0 taken 4
        3: 1602-block  1
unconditional  1 taken 3
        7: 1602-block  2
branch  2 taken 7
branch  3 taken 0 (fallthrough)
        7: 1603:			if (*color_schemes[j] == *name && strcmp(name, color_schemes[j]) == 0) {
        7: 1603-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 3
        4: 1603-block  1
branch  2 taken 4 (fallthrough)
branch  3 taken 0
        4: 1604:				dup = 1;
        4: 1605:				break;
        4: 1605-block  0
unconditional  0 taken 4
        -: 1606:			}
        -: 1607:		}
        -: 1608:
        4: 1609:		if (dup)
        4: 1609-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 1610:			continue;
        4: 1610-block  0
unconditional  0 taken 4
        -: 1611:
    #####: 1612:		color_schemes[i++] = savestring(name, strlen(name));
    %%%%%: 1612-block  0
call    0 never executed
unconditional  1 never executed
        -: 1613:	}
        -: 1614:
        4: 1615:	closedir(dir_p);
        4: 1615-block  0
call    0 returned 4
        4: 1616:	color_schemes[i] = (char *)NULL;
        4: 1617:	return i;
unconditional  0 taken 4
        -: 1618:}
        -: 1619:
        -: 1620:/* List color codes for file types used by the program */
        -: 1621:void
function color_codes called 2 returned 100% blocks executed 96%
        2: 1622:color_codes(void)
        -: 1623:{
        2: 1624:	if (!colorize) {
        2: 1624-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 1625:		printf(_("%s: Currently running without colors\n"),
    %%%%%: 1625-block  0
call    0 never executed
call    1 never executed
        -: 1626:		    PROGRAM_NAME);
    #####: 1627:		return;
unconditional  0 never executed
        -: 1628:	}
        -: 1629:
        2: 1630:	if (ext_colors_n)
        2: 1630-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1631:		printf(_("%sFile type colors%s\n\n"), BOLD, df_c);
        2: 1631-block  0
call    0 returned 2
call    1 returned 2
unconditional  2 taken 2
        2: 1632:	printf(_(" %sfile name%s: Directory with no read permission (nd)\n"),
        2: 1632-block  0
call    0 returned 2
call    1 returned 2
        -: 1633:	    nd_c, df_c);
        2: 1634:	printf(_(" %sfile name%s: File with no read permission (nf)\n"),
call    0 returned 2
call    1 returned 2
        -: 1635:	    nf_c, df_c);
        2: 1636:	printf(_(" %sfile name%s: Directory* (di)\n"), di_c, df_c);
call    0 returned 2
call    1 returned 2
        2: 1637:	printf(_(" %sfile name%s: EMPTY directory (ed)\n"), ed_c, df_c);
call    0 returned 2
call    1 returned 2
        2: 1638:	printf(_(" %sfile name%s: EMPTY directory with no read "
call    0 returned 2
call    1 returned 2
        -: 1639:		 "permission (ne)\n"),
        -: 1640:	    ne_c, df_c);
        2: 1641:	printf(_(" %sfile name%s: Executable file (ex)\n"), ex_c, df_c);
call    0 returned 2
call    1 returned 2
        2: 1642:	printf(_(" %sfile name%s: Empty executable file (ee)\n"), ee_c, df_c);
call    0 returned 2
call    1 returned 2
        2: 1643:	printf(_(" %sfile name%s: Block special file (bd)\n"), bd_c, df_c);
call    0 returned 2
call    1 returned 2
        2: 1644:	printf(_(" %sfile name%s: Symbolic link* (ln)\n"), ln_c, df_c);
call    0 returned 2
call    1 returned 2
        2: 1645:	printf(_(" %sfile name%s: Broken symbolic link (or)\n"), or_c, df_c);
call    0 returned 2
call    1 returned 2
        2: 1646:	printf(_(" %sfile name%s: Multi-hardlink (mh)\n"), mh_c, df_c);
call    0 returned 2
call    1 returned 2
        2: 1647:	printf(_(" %sfile name%s: Socket file (so)\n"), so_c, df_c);
call    0 returned 2
call    1 returned 2
        2: 1648:	printf(_(" %sfile name%s: Pipe or FIFO special file (pi)\n"), pi_c, df_c);
call    0 returned 2
call    1 returned 2
        2: 1649:	printf(_(" %sfile name%s: Character special file (cd)\n"), cd_c, df_c);
call    0 returned 2
call    1 returned 2
        2: 1650:	printf(_(" %sfile name%s: Regular file (fi)\n"), fi_c, df_c);
call    0 returned 2
call    1 returned 2
        2: 1651:	printf(_(" %sfile name%s: Empty (zero-lenght) file (ef)\n"), ef_c, df_c);
call    0 returned 2
call    1 returned 2
        2: 1652:	printf(_(" %sfile name%s: SUID file (su)\n"), su_c, df_c);
call    0 returned 2
call    1 returned 2
        2: 1653:	printf(_(" %sfile name%s: SGID file (sg)\n"), sg_c, df_c);
call    0 returned 2
call    1 returned 2
        2: 1654:	printf(_(" %sfile name%s: File with capabilities (ca)\n"), ca_c, df_c);
call    0 returned 2
call    1 returned 2
        2: 1655:	printf(_(" %sfile name%s: Sticky and NOT other-writable "
call    0 returned 2
call    1 returned 2
        -: 1656:		 "directory* (st)\n"),
        -: 1657:	    st_c, df_c);
        2: 1658:	printf(_(" %sfile name%s: Sticky and other-writable "
call    0 returned 2
call    1 returned 2
        -: 1659:		 "directory* (tw)\n"),
        -: 1660:	    tw_c, df_c);
        2: 1661:	printf(_(" %sfile name%s: Other-writable and NOT sticky "
call    0 returned 2
call    1 returned 2
        -: 1662:		 "directory* (ow)\n"),
        -: 1663:	    ow_c, df_c);
        2: 1664:	printf(_(" %sfile name%s: Unknown file type (no)\n"), no_c, df_c);
call    0 returned 2
call    1 returned 2
        2: 1665:	printf(_(" %sfile name%s: Unaccessible (non-stat'able) file "
call    0 returned 2
call    1 returned 2
        -: 1666:		 "(uf)\n"),
        -: 1667:	    uf_c, df_c);
        -: 1668:
        2: 1669:	printf(_("\n*The slash followed by a number (/xx) after directories "
call    0 returned 2
call    1 returned 2
        -: 1670:		 "or symbolic links to directories indicates the amount of "
        -: 1671:		 "files contained by the corresponding directory, excluding "
        -: 1672:		 "self (.) and parent (..) directories.\n"));
        2: 1673:	printf(_("\nThe value in parentheses is the code that is to be used "
call    0 returned 2
call    1 returned 2
        -: 1674:		 "to modify the color of the corresponding file type in the "
        -: 1675:		 "color scheme file (in the \"FiletypeColors\" line), "
        -: 1676:		 "using the same ANSI style color format used by dircolors. "
        -: 1677:		 "By default, %s uses only 8 colors, but you can use 256 "
        -: 1678:		 "and RGB colors as well.\n\n"), PROGRAM_NAME);
        -: 1679:
        2: 1680:	if (ext_colors_n) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -: 1681:		size_t i, j;
        2: 1682:		printf(_("%sExtension colors%s\n\n"), BOLD, df_c);
        2: 1682-block  0
call    0 returned 2
call    1 returned 2
      136: 1683:		for (i = 0; i < ext_colors_n; i++) {
unconditional  0 taken 2
      134: 1683-block  0
unconditional  1 taken 134
      136: 1683-block  1
branch  2 taken 134
branch  3 taken 2 (fallthrough)
      134: 1684:			char *ret = strrchr(ext_colors[i], '=');
      134: 1685:			if (!ret)
      134: 1685-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 132
        2: 1686:				continue;
        2: 1686-block  0
unconditional  0 taken 2
      132: 1687:			printf(" \x1b[%sm", ret + 1);
      132: 1687-block  0
call    0 returned 132
      798: 1688:			for (j = 0; ext_colors[i][j] != '='; j++)
unconditional  0 taken 132
unconditional  1 taken 666
      798: 1688-block  0
branch  2 taken 666
branch  3 taken 132 (fallthrough)
      666: 1689:				putchar(ext_colors[i][j]);
      666: 1689-block  0
call    0 returned 666
      132: 1690:			puts("\x1b[0m");
      132: 1690-block  0
call    0 returned 132
unconditional  1 taken 132
        -: 1691:		}
        2: 1692:		putchar('\n');
        2: 1692-block  0
call    0 returned 2
unconditional  1 taken 2
        -: 1693:	}
        -: 1694:}
