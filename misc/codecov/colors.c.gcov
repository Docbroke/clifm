        -:    0:Source:colors.c
        -:    1:/* colors.c -- functions to control interface color */
        -:    2:
        -:    3:/*
        -:    4: * This file is part of CliFM
        -:    5: * 
        -:    6: * Copyright (C) 2016-2021, L. Abramovich <johndoe.arch@outlook.com>
        -:    7: * All rights reserved.
        -:    8:
        -:    9: * CliFM is free software; you can redistribute it and/or modify
        -:   10: * it under the terms of the GNU General Public License as published by
        -:   11: * the Free Software Foundation; either version 2 of the License, or
        -:   12: * (at your option) any later version.
        -:   13: *
        -:   14: * CliFM is distributed in the hope that it will be useful,
        -:   15: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   16: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   17: * GNU General Public License for more details.
        -:   18: *
        -:   19: * You should have received a copy of the GNU General Public License
        -:   20: * along with this program; if not, write to the Free Software
        -:   21: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
        -:   22: * MA 02110-1301, USA.
        -:   23:*/
        -:   24:
        -:   25:#include "helpers.h"
        -:   26:
        -:   27:#include <stdio.h>
        -:   28:#include <sys/stat.h>
        -:   29:#include <sys/types.h>
        -:   30:#ifdef __linux__
        -:   31:#include <sys/capability.h>
        -:   32:#endif
        -:   33:#include <dirent.h>
        -:   34:#include <errno.h>
        -:   35:#include <string.h>
        -:   36:#include <unistd.h>
        -:   37:
        -:   38:#include "aux.h"
        -:   39:#include "colors.h"
        -:   40:#include "listing.h"
        -:   41:#include "mime.h"
        -:   42:#include "misc.h"
        -:   43:
        -:   44:/* Returns a pointer to the corresponding color code for EXT, if some
        -:   45: * color was defined */
        -:   46:char *
function get_ext_color called 176 returned 100% blocks executed 95%
      176:   47:get_ext_color(const char *ext)
        -:   48:{
      176:   49:	if (!ext || !ext_colors_n)
      176:   49-block  0
branch  0 taken 176 (fallthrough)
branch  1 taken 0
      176:   49-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 176
    #####:   50:		return (char *)NULL;
    %%%%%:   50-block  0
unconditional  0 never executed
        -:   51:
      176:   52:	ext++;
        -:   53:
      176:   54:	int i = (int)ext_colors_n;
    11926:   55:	while (--i >= 0) {
      176:   55-block  0
unconditional  0 taken 176
    11926:   55-block  1
branch  1 taken 11751
branch  2 taken 175 (fallthrough)
        -:   56:
    11751:   57:		if (!ext_colors[i] || !*ext_colors[i] || !ext_colors[i][2])
    11751:   57-block  0
branch  0 taken 11751 (fallthrough)
branch  1 taken 0
    11751:   57-block  1
branch  2 taken 11575 (fallthrough)
branch  3 taken 176
    11575:   57-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 11575
      176:   58:			continue;
      176:   58-block  0
unconditional  0 taken 176
        -:   59:
    11575:   60:		char *p = (char *)ext, *q = ext_colors[i];
        -:   61:
        -:   62:		/* +2 because stored extensions have this form: *.ext */
    11575:   63:		q += 2;
        -:   64:
    11575:   65:		size_t match = 1;
    11829:   66:		while (*p) {
    11575:   66-block  0
unconditional  0 taken 11575
    11829:   66-block  1
branch  1 taken 11708
branch  2 taken 121 (fallthrough)
    11708:   67:			if (*p++ != *q++) {
    11708:   67-block  0
branch  0 taken 11454 (fallthrough)
branch  1 taken 254
    11454:   68:				match = 0;
    11454:   69:				break;
    11454:   69-block  0
unconditional  0 taken 11454
        -:   70:			}
        -:   71:		}
        -:   72:
    11575:   73:		if (!match || *q != '=')
    11575:   73-block  0
branch  0 taken 121 (fallthrough)
branch  1 taken 11454
      121:   73-block  1
branch  2 taken 120 (fallthrough)
branch  3 taken 1
    11574:   74:			continue;
    11574:   74-block  0
unconditional  0 taken 11574
        -:   75:
        1:   76:		return ++q;
        1:   76-block  0
unconditional  0 taken 1
        -:   77:	}
        -:   78:
      175:   79:	return (char *)NULL;
      175:   79-block  0
unconditional  0 taken 175
        -:   80:}
        -:   81:
        -:   82:/* Check if STR has the format of a color code string (a number or a
        -:   83: * semicolon list (max 12 fields) of numbers of at most 3 digits each).
        -:   84: * Returns 1 if true and 0 if false. */
        -:   85:int
function is_color_code called 105 returned 100% blocks executed 76%
      105:   86:is_color_code(const char *str)
        -:   87:{
      105:   88:	if (!str || !*str)
      105:   88-block  0
branch  0 taken 105 (fallthrough)
branch  1 taken 0
      105:   88-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 105
    #####:   89:		return 0;
    %%%%%:   89-block  0
unconditional  0 never executed
        -:   90:
      105:   91:	size_t digits = 0, semicolon = 0;
        -:   92:
      614:   93:	while (*str) {
      105:   93-block  0
unconditional  0 taken 105
      614:   93-block  1
branch  1 taken 509
branch  2 taken 105 (fallthrough)
        -:   94:
      509:   95:		if (*str >= '0' && *str <= '9')
      509:   95-block  0
branch  0 taken 509 (fallthrough)
branch  1 taken 0
      509:   95-block  1
branch  2 taken 408 (fallthrough)
branch  3 taken 101
      408:   96:			digits++;
      408:   96-block  0
unconditional  0 taken 408
        -:   97:
      101:   98:		else if (*str == ';') {
      101:   98-block  0
branch  0 taken 101 (fallthrough)
branch  1 taken 0
        -:   99:
      101:  100:			if (*(str + 1) == ';') /* Consecutive semicolons */
      101:  100-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 101
    #####:  101:				return 0;
    %%%%%:  101-block  0
unconditional  0 never executed
        -:  102:
      101:  103:			digits = 0;
      101:  104:			semicolon++;
      101:  104-block  0
unconditional  0 taken 101
        -:  105:		}
        -:  106:
        -:  107:		/* Neither digit nor semicolon */
    #####:  108:		else if (*str != '\n')
    %%%%%:  108-block  0
branch  0 never executed
branch  1 never executed
    #####:  109:			return 0;
    %%%%%:  109-block  0
unconditional  0 never executed
        -:  110:
      509:  111:		str++;
      509:  111-block  0
unconditional  0 taken 509
        -:  112:	}
        -:  113:
        -:  114:	/* No digits at all, ending semicolon, more than eleven fields, or
        -:  115:	 * more than three consecutive digits */
      105:  116:	if (!digits || digits > 3 || semicolon > 11)
      105:  116-block  0
branch  0 taken 105 (fallthrough)
branch  1 taken 0
      105:  116-block  1
branch  2 taken 105 (fallthrough)
branch  3 taken 0
      105:  116-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 105
    #####:  117:		return 0;
    %%%%%:  117-block  0
unconditional  0 never executed
        -:  118:
        -:  119:	/* At this point, we have a semicolon separated string of digits (3
        -:  120:	 * consecutive max) with at most 12 fields. The only thing not
        -:  121:	 * validated here are numbers themselves */
        -:  122:
      105:  123:	return 1;
      105:  123-block  0
unconditional  0 taken 105
        -:  124:}
        -:  125:
        -:  126:/* Strip color lines from the config file (FiletypeColors, if mode is
        -:  127: * 't', and ExtColors, if mode is 'x') returning the same string
        -:  128: * containing only allowed characters */
        -:  129:char *
function strip_color_line called 3 returned 100% blocks executed 92%
        3:  130:strip_color_line(const char *str, char mode)
        -:  131:{
        3:  132:	if (!str || !*str)
        3:  132-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  132-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 3
    #####:  133:		return (char *)NULL;
    %%%%%:  133-block  0
unconditional  0 never executed
        -:  134:
        3:  135:	char *buf = (char *)xnmalloc(strlen(str) + 1, sizeof(char));
        3:  135-block  0
call    0 returned 3
        3:  136:	size_t len = 0;
        -:  137:
        3:  138:	switch (mode) {
branch  0 taken 2
branch  1 taken 1
branch  2 taken 0
        -:  139:
        2:  140:	case 't': /* di=01;31: */
      454:  141:		while (*str) {
        2:  141-block  0
unconditional  0 taken 2
      454:  141-block  1
branch  1 taken 452
branch  2 taken 2 (fallthrough)
      452:  142:			if ((*str >= '0' && *str <= '9') || (*str >= 'a' && *str <= 'z')
      452:  142-block  0
branch  0 taken 446 (fallthrough)
branch  1 taken 6
      446:  142-block  1
branch  2 taken 252 (fallthrough)
branch  3 taken 194
      258:  142-block  2
branch  4 taken 102 (fallthrough)
branch  5 taken 156
      102:  142-block  3
branch  6 taken 0 (fallthrough)
branch  7 taken 102
      156:  143:			|| *str == '=' || *str == ';' || *str == ':')
      156:  143-block  0
branch  0 taken 105 (fallthrough)
branch  1 taken 51
      105:  143-block  1
branch  2 taken 57 (fallthrough)
branch  3 taken 48
       57:  143-block  2
branch  4 taken 51 (fallthrough)
branch  5 taken 6
      446:  144:				buf[len++] = *str;
      446:  144-block  0
unconditional  0 taken 446
      452:  145:			str++;
      452:  145-block  0
unconditional  0 taken 452
        -:  146:		}
        2:  147:		break;
        2:  147-block  0
unconditional  0 taken 2
        -:  148:
        1:  149:	case 'x': /* *.tar=01;31: */
      799:  150:		while (*str) {
        1:  150-block  0
unconditional  0 taken 1
      799:  150-block  1
branch  1 taken 798
branch  2 taken 1 (fallthrough)
      798:  151:			if ((*str >= '0' && *str <= '9') || (*str >= 'a' && *str <= 'z')
      798:  151-block  0
branch  0 taken 663 (fallthrough)
branch  1 taken 135
      663:  151-block  1
branch  2 taken 388 (fallthrough)
branch  3 taken 275
      523:  151-block  2
branch  4 taken 190 (fallthrough)
branch  5 taken 333
      190:  151-block  3
branch  6 taken 0 (fallthrough)
branch  7 taken 190
     333*:  152:			|| (*str >= 'A' && *str <= 'Z') || *str == '*' || *str == '.'
      333:  152-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 333
    %%%%%:  152-block  1
branch  2 never executed
branch  3 never executed
      333:  152-block  2
branch  4 taken 267 (fallthrough)
branch  5 taken 66
      267:  152-block  3
branch  6 taken 201 (fallthrough)
branch  7 taken 66
      201:  153:			|| *str == '=' || *str == ';' || *str == ':')
      201:  153-block  0
branch  0 taken 135 (fallthrough)
branch  1 taken 66
      135:  153-block  1
branch  2 taken 69 (fallthrough)
branch  3 taken 66
       69:  153-block  2
branch  4 taken 66 (fallthrough)
branch  5 taken 3
      795:  154:				buf[len++] = *str;
      795:  154-block  0
unconditional  0 taken 795
      798:  155:			str++;
      798:  155-block  0
unconditional  0 taken 798
        -:  156:		}
        1:  157:		break;
        1:  157-block  0
unconditional  0 taken 1
        -:  158:	}
        -:  159:
        3:  160:	if (!len || !*buf) {
        3:  160-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  160-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 3
    #####:  161:		free(buf);
    #####:  162:		return (char *)NULL;
    %%%%%:  162-block  0
unconditional  0 never executed
        -:  163:	}
        -:  164:
        3:  165:	buf[len] = '\0';
        -:  166:
        3:  167:	return buf;
        3:  167-block  0
unconditional  0 taken 3
        -:  168:}
        -:  169:
        -:  170:void
function free_colors called 0 returned 0% blocks executed 0%
    #####:  171:free_colors(void)
        -:  172:{
        -:  173:	/* Reset whatever value was loaded */
    #####:  174:	*bm_c = '\0';
    #####:  175:	*dl_c = '\0';
    #####:  176:	*el_c = '\0';
    #####:  177:	*mi_c = '\0';
    #####:  178:	*tx_c = '\0';
    #####:  179:	*df_c = '\0';
    #####:  180:	*dc_c = '\0';
    #####:  181:	*wc_c = '\0';
    #####:  182:	*dh_c = '\0';
    #####:  183:	*li_c = '\0';
    #####:  184:	*ti_c = '\0';
    #####:  185:	*em_c = '\0';
    #####:  186:	*wm_c = '\0';
    #####:  187:	*nm_c = '\0';
    #####:  188:	*si_c = '\0';
    #####:  189:	*nd_c = '\0';
    #####:  190:	*nf_c = '\0';
    #####:  191:	*di_c = '\0';
    #####:  192:	*ed_c = '\0';
    #####:  193:	*ne_c = '\0';
    #####:  194:	*ex_c = '\0';
    #####:  195:	*ee_c = '\0';
    #####:  196:	*bd_c = '\0';
    #####:  197:	*ln_c = '\0';
    #####:  198:	*mh_c = '\0';
    #####:  199:	*or_c = '\0';
    #####:  200:	*so_c = '\0';
    #####:  201:	*pi_c = '\0';
    #####:  202:	*cd_c = '\0';
    #####:  203:	*fi_c = '\0';
    #####:  204:	*ef_c = '\0';
    #####:  205:	*su_c = '\0';
    #####:  206:	*sg_c = '\0';
    #####:  207:	*ca_c = '\0';
    #####:  208:	*st_c = '\0';
    #####:  209:	*tw_c = '\0';
    #####:  210:	*ow_c = '\0';
    #####:  211:	*no_c = '\0';
    #####:  212:	*uf_c = '\0';
    #####:  213:	return;
    %%%%%:  213-block  0
unconditional  0 never executed
        -:  214:}
        -:  215:
        -:  216:int
function cschemes_function called 0 returned 0% blocks executed 0%
    #####:  217:cschemes_function(char **args)
        -:  218:{
    #####:  219:	if (xargs.stealth_mode == 1) {
    %%%%%:  219-block  0
branch  0 never executed
branch  1 never executed
    #####:  220:		fprintf(stderr, _("%s: The color schemes function is "
    %%%%%:  220-block  0
call    0 never executed
        -:  221:				  "disabled in stealth mode\nTIP: To change the current "
        -:  222:				  "color scheme use the following environment "
        -:  223:				  "variables: CLIFM_FILE_COLORS, CLIFM_IFACE_COLORS, "
        -:  224:				  "and CLIFM_EXT_COLORS\n"), PROGRAM_NAME);
    #####:  225:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  226:	}
        -:  227:
    #####:  228:	if (!args)
    %%%%%:  228-block  0
branch  0 never executed
branch  1 never executed
    #####:  229:		return EXIT_FAILURE;
    %%%%%:  229-block  0
unconditional  0 never executed
        -:  230:
    #####:  231:	if (!args[1]) {
    %%%%%:  231-block  0
branch  0 never executed
branch  1 never executed
        -:  232:
    #####:  233:		if (!cschemes_n) {
    %%%%%:  233-block  0
branch  0 never executed
branch  1 never executed
    #####:  234:			printf(_("%s: No color schemes found\n"), PROGRAM_NAME);
    %%%%%:  234-block  0
call    0 never executed
    #####:  235:			return EXIT_SUCCESS;
unconditional  0 never executed
        -:  236:		}
        -:  237:
        -:  238:		size_t i;
        -:  239:
    #####:  240:		for (i = 0; color_schemes[i]; i++) {
    %%%%%:  240-block  0
unconditional  0 never executed
    %%%%%:  240-block  1
unconditional  1 never executed
    %%%%%:  240-block  2
branch  2 never executed
branch  3 never executed
        -:  241:
    #####:  242:			if (cur_cscheme == color_schemes[i])
    %%%%%:  242-block  0
branch  0 never executed
branch  1 never executed
    #####:  243:				printf("%s%s%s\n", mi_c, color_schemes[i], df_c);
    %%%%%:  243-block  0
call    0 never executed
unconditional  1 never executed
        -:  244:
        -:  245:			else
    #####:  246:				printf("%s\n", color_schemes[i]);
    %%%%%:  246-block  0
call    0 never executed
unconditional  1 never executed
        -:  247:		}
        -:  248:
    #####:  249:		return EXIT_SUCCESS;
    %%%%%:  249-block  0
unconditional  0 never executed
        -:  250:	}
        -:  251:
    #####:  252:	if (*args[1] == '-' && strcmp(args[1], "--help") == 0) {
    %%%%%:  252-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  252-block  1
branch  2 never executed
branch  3 never executed
    #####:  253:		puts(_("Usage: cs, colorschemes [edit] [COLORSCHEME]"));
    %%%%%:  253-block  0
call    0 never executed
    #####:  254:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  255:	}
        -:  256:
    #####:  257:	if (*args[1] == 'e' && (!args[1][1] || strcmp(args[1], "edit") == 0)) {
    %%%%%:  257-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  257-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  257-block  2
branch  4 never executed
branch  5 never executed
    #####:  258:		char file[PATH_MAX] = "";
    #####:  259:		sprintf(file, "%s/%s.cfm", COLORS_DIR, cur_cscheme);
        -:  260:
        -:  261:		struct stat attr;
    #####:  262:		stat(file, &attr);
    %%%%%:  262-block  0
call    0 never executed
    #####:  263:		time_t mtime_bfr = (time_t)attr.st_mtime;
        -:  264:
    #####:  265:		char *cmd[] = {"mm", file, NULL};
    #####:  266:		int ret = mime_open(cmd);
call    0 never executed
        -:  267:
    #####:  268:		if (ret != EXIT_FAILURE) {
branch  0 never executed
branch  1 never executed
        -:  269:
    #####:  270:			stat(file, &attr);
    %%%%%:  270-block  0
call    0 never executed
        -:  271:
    #####:  272:			if (mtime_bfr != (time_t)attr.st_mtime
branch  0 never executed
branch  1 never executed
    #####:  273:			&& set_colors(cur_cscheme, 0) == EXIT_SUCCESS
    %%%%%:  273-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  274:			&& cd_lists_on_the_fly) {
    %%%%%:  274-block  0
branch  0 never executed
branch  1 never executed
        -:  275:
    #####:  276:				free_dirlist();
    %%%%%:  276-block  0
call    0 never executed
    #####:  277:				list_dir();
call    0 never executed
unconditional  1 never executed
        -:  278:			}
        -:  279:		}
        -:  280:
    #####:  281:		return ret;
    %%%%%:  281-block  0
unconditional  0 never executed
        -:  282:	}
        -:  283:
    #####:  284:	if (*args[1] == 'n' && (!args[1][1] || strcmp(args[1], "name") == 0)) {
    %%%%%:  284-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  284-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  284-block  2
branch  4 never executed
branch  5 never executed
    #####:  285:		printf(_("%s: current color scheme: %s\n"), PROGRAM_NAME,
    %%%%%:  285-block  0
unconditional  0 never executed
    %%%%%:  285-block  1
unconditional  1 never executed
    %%%%%:  285-block  2
call    2 never executed
    #####:  286:		    cur_cscheme ? cur_cscheme : "?");
    %%%%%:  286-block  0
branch  0 never executed
branch  1 never executed
    #####:  287:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  288:	}
        -:  289:
    #####:  290:	size_t i, cs_found = 0;
        -:  291:
    #####:  292:	for (i = 0; color_schemes[i]; i++) {
    %%%%%:  292-block  0
unconditional  0 never executed
    %%%%%:  292-block  1
unconditional  1 never executed
    %%%%%:  292-block  2
branch  2 never executed
branch  3 never executed
    #####:  293:		if (*args[1] == *color_schemes[i]
    %%%%%:  293-block  0
branch  0 never executed
branch  1 never executed
    #####:  294:		&& strcmp(args[1], color_schemes[i]) == 0) {
    %%%%%:  294-block  0
branch  0 never executed
branch  1 never executed
        -:  295:
    #####:  296:			cs_found = 1;
        -:  297:
    #####:  298:			if (set_colors(args[1], 0) == EXIT_SUCCESS) {
    %%%%%:  298-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  299:
    #####:  300:				cur_cscheme = color_schemes[i];
        -:  301:
    #####:  302:				switch_cscheme = 1;
        -:  303:
    #####:  304:				if (cd_lists_on_the_fly) {
    %%%%%:  304-block  0
branch  0 never executed
branch  1 never executed
    #####:  305:					free_dirlist();
    %%%%%:  305-block  0
call    0 never executed
    #####:  306:					list_dir();
call    0 never executed
unconditional  1 never executed
        -:  307:				}
        -:  308:
    #####:  309:				switch_cscheme = 0;
        -:  310:
    #####:  311:				return EXIT_SUCCESS;
    %%%%%:  311-block  0
unconditional  0 never executed
        -:  312:			}
        -:  313:		}
        -:  314:	}
        -:  315:
    #####:  316:	if (!cs_found)
    %%%%%:  316-block  0
branch  0 never executed
branch  1 never executed
    #####:  317:		fprintf(stderr, _("%s: No such color scheme\n"), PROGRAM_NAME);
    %%%%%:  317-block  0
call    0 never executed
unconditional  1 never executed
        -:  318:
    #####:  319:	return EXIT_FAILURE;
    %%%%%:  319-block  0
unconditional  0 never executed
        -:  320:}
        -:  321:
        -:  322:/* Open the config file, get values for filetype and extension colors
        -:  323: * and copy these values into the corresponding variable. If some value
        -:  324: * is not found, or if it's a wrong value, the default is set. */
        -:  325:int
function set_colors called 1 returned 100% blocks executed 75%
        1:  326:set_colors(const char *colorscheme, int env)
        -:  327:{
        1:  328:	char *filecolors = (char *)NULL, *extcolors = (char *)NULL,
        1:  329:	     *ifacecolors = (char *)NULL;
        -:  330:
        1:  331:	*dir_ico_c = '\0';
        -:  332:
        -:  333:	/* Set a pointer to the current color scheme */
        1:  334:	if (colorscheme && *colorscheme && color_schemes) {
        1:  334-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  334-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  334-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        -:  335:
        1:  336:		char *def_cscheme = (char *)NULL;
        -:  337:
        -:  338:		size_t i;
        -:  339:
        2:  340:		for (i = 0; color_schemes[i]; i++) {
        1:  340-block  0
unconditional  0 taken 1
        1:  340-block  1
unconditional  1 taken 1
        2:  340-block  2
branch  2 taken 2
branch  3 taken 0 (fallthrough)
        -:  341:
        2:  342:			if (*colorscheme == *color_schemes[i]
        2:  342-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  343:			&& strcmp(colorscheme, color_schemes[i]) == 0) {
        1:  343-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  344:				cur_cscheme = color_schemes[i];
        1:  345:				break;
        1:  345-block  0
unconditional  0 taken 1
        -:  346:			}
        -:  347:
        1:  348:			if (*color_schemes[i] == 'd'
        1:  348-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  349:			&& strcmp(color_schemes[i], "default") == 0)
    %%%%%:  349-block  0
branch  0 never executed
branch  1 never executed
    #####:  350:				def_cscheme = color_schemes[i];
    %%%%%:  350-block  0
unconditional  0 never executed
        -:  351:		}
        -:  352:
        1:  353:		if (!cur_cscheme) {
        1:  353-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  354:			_err('w', PRINT_PROMPT, _("%s: %s: No such color scheme. "
    %%%%%:  354-block  0
call    0 never executed
        -:  355:				"Falling back to the default one\n"), PROGRAM_NAME, colorscheme);
        -:  356:
    #####:  357:			if (def_cscheme)
branch  0 never executed
branch  1 never executed
    #####:  358:				cur_cscheme = def_cscheme;
    %%%%%:  358-block  0
unconditional  0 never executed
        -:  359:		}
        -:  360:	}
        -:  361:
        -:  362:	/* env is true only when the function is called from main() */
        1:  363:	if (env) {
        1:  363-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  364:		/* Try to get colors from environment variables */
        1:  365:		char *env_filecolors = getenv("CLIFM_FILE_COLORS");
        1:  365-block  0
call    0 returned 1
        1:  366:		char *env_extcolors = getenv("CLIFM_EXT_COLORS");
call    0 returned 1
        1:  367:		char *env_ifacecolors = getenv("CLIFM_IFACE_COLORS");
call    0 returned 1
        -:  368:
       1*:  369:		if (env_filecolors && !filecolors)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  369-block  0
branch  2 never executed
branch  3 never executed
    #####:  370:			filecolors = savestring(env_filecolors, strlen(env_filecolors));
    %%%%%:  370-block  0
call    0 never executed
unconditional  1 never executed
        -:  371:
        1:  372:		env_filecolors = (char *)NULL;
        -:  373:
       1*:  374:		if (env_extcolors && !extcolors)
        1:  374-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  374-block  1
branch  2 never executed
branch  3 never executed
    #####:  375:			extcolors = savestring(env_extcolors, strlen(env_extcolors));
    %%%%%:  375-block  0
call    0 never executed
unconditional  1 never executed
        -:  376:
        1:  377:		env_extcolors = (char *)NULL;
        -:  378:
       1*:  379:		if (env_ifacecolors && !ifacecolors)
        1:  379-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  379-block  1
branch  2 never executed
branch  3 never executed
    #####:  380:			ifacecolors = savestring(env_ifacecolors, strlen(env_ifacecolors));
    %%%%%:  380-block  0
call    0 never executed
unconditional  1 never executed
        -:  381:
        1:  382:		env_ifacecolors = (char *)NULL;
        1:  382-block  0
unconditional  0 taken 1
        -:  383:	}
        -:  384:
       1*:  385:	if (config_ok && (!filecolors || !extcolors || !ifacecolors)) {
        1:  385-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  385-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  385-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:  385-block  3
branch  6 never executed
branch  7 never executed
        -:  386:		/* Get color lines, for both file types and extensions, from
        -:  387:	 * COLORSCHEME file */
        -:  388:
        1:  389:		char *colorscheme_file = (char *)xnmalloc(strlen(COLORS_DIR)
        1:  390:							+ strlen(colorscheme) + 6, sizeof(char));
        1:  390-block  0
call    0 returned 1
       1*:  391:		sprintf(colorscheme_file, "%s/%s.cfm", COLORS_DIR,
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  391-block  0
unconditional  2 taken 1
    %%%%%:  391-block  1
unconditional  3 never executed
        -:  392:		    colorscheme ? colorscheme : "default");
        -:  393:
        1:  394:		FILE *fp_colors = fopen(colorscheme_file, "r");
        1:  394-block  0
call    0 returned 1
        -:  395:
        1:  396:		if (fp_colors) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  397:
        -:  398:			/* If called from the color scheme function, reset all
        -:  399:			 * color values before proceeding */
        1:  400:			if (!env)
        1:  400-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  401:				free_colors();
    %%%%%:  401-block  0
call    0 never executed
unconditional  1 never executed
        -:  402:
        1:  403:			char *line = (char *)NULL;
        1:  404:			ssize_t line_len = 0;
        1:  405:			size_t line_size = 0;
        1:  406:			int file_type_found = 0, ext_type_found = 0,
        1:  407:			    iface_found = 0, dir_icon_found = 0;
        -:  408:
       16:  409:			while ((line_len = getline(&line, &line_size,
        1:  409-block  0
unconditional  0 taken 1
       16:  409-block  1
call    1 returned 16
       16:  410:				    fp_colors)) > 0) {
branch  0 taken 16
branch  1 taken 0 (fallthrough)
        -:  411:
        -:  412:				/* Interface colors */
       16:  413:				if (!ifacecolors && *line == 'I'
       16:  413-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 4
       12:  413-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 11
        1:  414:				&& strncmp(line, "InterfaceColors=", 16) == 0) {
        1:  414-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  415:					iface_found = 1;
        1:  416:					char *opt_str = strchr(line, '=');
        -:  417:
       1*:  418:					if (!opt_str)
        1:  418-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  419:						continue;
    %%%%%:  419-block  0
unconditional  0 never executed
        -:  420:
        1:  421:					opt_str++;
        -:  422:
        1:  423:					char *color_line = strip_color_line(opt_str, 't');
        1:  423-block  0
call    0 returned 1
        -:  424:
       1*:  425:					if (!color_line)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  426:						continue;
    %%%%%:  426-block  0
unconditional  0 never executed
        -:  427:
        1:  428:					ifacecolors = savestring(color_line, strlen(color_line));
        1:  428-block  0
call    0 returned 1
        1:  429:					free(color_line);
unconditional  0 taken 1
        -:  430:				}
        -:  431:
        -:  432:				/* Filetype Colors */
       16:  433:				if (!filecolors && *line == 'F'
       16:  433-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 6
       10:  433-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 9
        1:  434:				&& strncmp(line, "FiletypeColors=", 15) == 0) {
        1:  434-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  435:					file_type_found = 1;
        1:  436:					char *opt_str = strchr(line, '=');
        -:  437:
       1*:  438:					if (!opt_str)
        1:  438-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  439:						continue;
    %%%%%:  439-block  0
unconditional  0 never executed
        -:  440:
        1:  441:					opt_str++;
        -:  442:
        1:  443:					char *color_line = strip_color_line(opt_str, 't');
        1:  443-block  0
call    0 returned 1
        -:  444:
       1*:  445:					if (!color_line)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  446:						continue;
    %%%%%:  446-block  0
unconditional  0 never executed
        -:  447:
        1:  448:					filecolors = savestring(color_line, strlen(color_line));
        1:  448-block  0
call    0 returned 1
        1:  449:					free(color_line);
unconditional  0 taken 1
        -:  450:				}
        -:  451:
        -:  452:				/* File extension colors */
       16:  453:				if (!extcolors && *line == 'E' && strncmp(line, "ExtColors=", 10) == 0) {
       16:  453-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 2
       14:  453-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 13
        1:  453-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:  454:					ext_type_found = 1;
        1:  455:					char *opt_str = strchr(line, '=');
        -:  456:
       1*:  457:					if (!opt_str)
        1:  457-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  458:						continue;
    %%%%%:  458-block  0
unconditional  0 never executed
        -:  459:
        1:  460:					opt_str++;
        -:  461:
        1:  462:					char *color_line = strip_color_line(opt_str, 'x');
        1:  462-block  0
call    0 returned 1
        -:  463:
       1*:  464:					if (!color_line)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  465:						continue;
    %%%%%:  465-block  0
unconditional  0 never executed
        -:  466:
        1:  467:					extcolors = savestring(color_line, strlen(color_line));
        1:  467-block  0
call    0 returned 1
        1:  468:					free(color_line);
unconditional  0 taken 1
        -:  469:				}
        -:  470:
        -:  471:				/* Dir icons Color */
       16:  472:				if (*line == 'D' && strncmp(line, "DirIconsColor=", 14) == 0) {
       16:  472-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 15
        1:  472-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  473:					dir_icon_found = 1;
        1:  474:					char *opt_str = strchr(line, '=');
        -:  475:
       1*:  476:					if (!opt_str)
        1:  476-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  477:						continue;
    %%%%%:  477-block  0
unconditional  0 never executed
        -:  478:
       1*:  479:					if (!*(++opt_str))
        1:  479-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  480:						continue;
    %%%%%:  480-block  0
unconditional  0 never executed
        -:  481:
        1:  482:					if (*opt_str == '\'' || *opt_str == '"')
        1:  482-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  482-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  483:						opt_str++;
        1:  483-block  0
unconditional  0 taken 1
        -:  484:
       1*:  485:					if (!*opt_str)
        1:  485-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  486:						continue;
    %%%%%:  486-block  0
unconditional  0 never executed
        -:  487:
        1:  488:					int nl_removed = 0;
        1:  489:					if (line[line_len - 1] == '\n') {
        1:  489-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  490:						line[line_len - 1] = '\0';
        1:  491:						nl_removed = 1;
        1:  491-block  0
unconditional  0 taken 1
        -:  492:					}
        -:  493:
        1:  494:					int end_char = (int)line_len - 1;
        -:  495:
        1:  496:					if (nl_removed)
        1:  496-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  497:						end_char--;
        1:  497-block  0
unconditional  0 taken 1
        -:  498:
        1:  499:					if (line[end_char] == '\'' || line[end_char] == '"')
        1:  499-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  499-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  500:						line[end_char] = '\0';
        1:  500-block  0
unconditional  0 taken 1
        -:  501:
        1:  502:					sprintf(dir_ico_c, "\x1b[%sm", opt_str);
        1:  502-block  0
unconditional  0 taken 1
        -:  503:				}
        -:  504:
       16:  505:				if (file_type_found && ext_type_found
       16:  505-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 9
        7:  505-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 4
        3:  506:				&& iface_found && dir_icon_found)
        3:  506-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  506-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 2
        1:  507:					break;
        1:  507-block  0
unconditional  0 taken 1
        -:  508:			}
        -:  509:
        1:  510:			free(line);
        1:  511:			line = (char *)NULL;
        -:  512:
        1:  513:			fclose(fp_colors);
        1:  513-block  0
call    0 returned 1
        -:  514:		}
        -:  515:
        -:  516:		/* If fopen failed */
        -:  517:		else {
    #####:  518:			if (!env) {
    %%%%%:  518-block  0
branch  0 never executed
branch  1 never executed
    #####:  519:				fprintf(stderr, "%s: %s: %s\n", PROGRAM_NAME,
call    0 never executed
    #####:  520:				    colorscheme_file, strerror(errno));
    %%%%%:  520-block  0
call    0 never executed
    #####:  521:				free(colorscheme_file);
    #####:  522:				return EXIT_FAILURE;
unconditional  0 never executed
        -:  523:			}
        -:  524:
        -:  525:			else {
    #####:  526:				_err('w', PRINT_PROMPT, _("%s: %s: No such color scheme. "
    %%%%%:  526-block  0
call    0 never executed
unconditional  1 never executed
        -:  527:					"Falling back to the default one\n"), PROGRAM_NAME,
        -:  528:					colorscheme);
        -:  529:			}
        -:  530:		}
        -:  531:
        1:  532:		free(colorscheme_file);
        1:  533:		colorscheme_file = (char *)NULL;
        1:  533-block  0
unconditional  0 taken 1
        -:  534:	}
        -:  535:
        -:  536:			/* ##############################
        -:  537:			 * #    FILE EXTENSION COLORS   #
        -:  538:			 * ############################## */
        -:  539:
        -:  540:	/* Split the colors line into substrings (one per color) */
        -:  541:
        1:  542:	if (!extcolors) {
        1:  542-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  543:
        -:  544:		/* Unload current extension colors */
    #####:  545:		if (ext_colors_n) {
    %%%%%:  545-block  0
branch  0 never executed
branch  1 never executed
    #####:  546:			int i = (int)ext_colors_n;
        -:  547:
    #####:  548:			while (--i >= 0)
    %%%%%:  548-block  0
unconditional  0 never executed
    %%%%%:  548-block  1
branch  1 never executed
branch  2 never executed
    #####:  549:				free(ext_colors[i]);
    %%%%%:  549-block  0
unconditional  0 never executed
        -:  550:
    #####:  551:			free(ext_colors);
    #####:  552:			ext_colors = (char **)NULL;
    #####:  553:			free(ext_colors_len);
    #####:  554:			ext_colors_n = 0;
    %%%%%:  554-block  0
unconditional  0 never executed
        -:  555:		}
        -:  556:	}
        -:  557:
        -:  558:	else {
        -:  559:
        1:  560:		char *p = extcolors, *buf = (char *)NULL;
        1:  561:		size_t len = 0;
        1:  562:		int eol = 0;
        -:  563:
        1:  564:		if (ext_colors_n) {
        1:  564-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  565:			int i = (int)ext_colors_n;
        -:  566:
    #####:  567:			while (--i >= 0)
    %%%%%:  567-block  0
unconditional  0 never executed
    %%%%%:  567-block  1
branch  1 never executed
branch  2 never executed
    #####:  568:				free(ext_colors[i]);
    %%%%%:  568-block  0
unconditional  0 never executed
        -:  569:
    #####:  570:			free(ext_colors);
    #####:  571:			ext_colors = (char **)NULL;
    #####:  572:			free(ext_colors_len);
    #####:  573:			ext_colors_n = 0;
    %%%%%:  573-block  0
unconditional  0 never executed
        -:  574:		}
        -:  575:
      797:  576:		while (!eol) {
        1:  576-block  0
unconditional  0 taken 1
      797:  576-block  1
branch  1 taken 796
branch  2 taken 1 (fallthrough)
      796:  577:			switch (*p) {
      796:  577-block  0
branch  0 taken 67
branch  1 taken 729
        -:  578:
       67:  579:			case '\0': /* fallthrough */
        -:  580:			case '\n': /* fallthrough */
        -:  581:			case ':':
       67:  582:				buf[len] = '\0';
      134:  583:				ext_colors = (char **)xrealloc(ext_colors,
       67:  584:				    (ext_colors_n + 1) * sizeof(char *));
       67:  584-block  0
call    0 returned 67
       67:  585:				ext_colors[ext_colors_n++] = savestring(buf, len);
call    0 returned 67
       67:  586:				*buf = '\0';
        -:  587:
       67:  588:				if (!*p)
branch  0 taken 1 (fallthrough)
branch  1 taken 66
        1:  589:					eol = 1;
        1:  589-block  0
unconditional  0 taken 1
        -:  590:
       67:  591:				len = 0;
       67:  592:				p++;
       67:  593:				break;
       67:  593-block  0
unconditional  0 taken 67
        -:  594:
      729:  595:			default:
      729:  596:				buf = (char *)xrealloc(buf, (len + 2) * sizeof(char));
      729:  596-block  0
call    0 returned 729
      729:  597:				buf[len++] = *(p++);
      729:  598:				break;
unconditional  0 taken 729
        -:  599:			}
        -:  600:		}
        -:  601:
        1:  602:		p = (char *)NULL;
        1:  603:		free(extcolors);
        1:  604:		extcolors = (char *)NULL;
        -:  605:
        1:  606:		if (buf) {
        1:  606-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  607:			free(buf);
        1:  608:			buf = (char *)NULL;
        1:  608-block  0
unconditional  0 taken 1
        -:  609:		}
        -:  610:
        1:  611:		if (ext_colors) {
        1:  611-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  612:			ext_colors = (char **)xrealloc(ext_colors, (ext_colors_n + 1) * sizeof(char *));
        1:  612-block  0
call    0 returned 1
        1:  613:			ext_colors[ext_colors_n] = (char *)NULL;
unconditional  0 taken 1
        -:  614:		}
        -:  615:
        -:  616:		/* Make sure we have valid color codes and store the length
        -:  617:		 * of each stored extension: this length will be used later
        -:  618:		 * when listing files */
        1:  619:		ext_colors_len = (size_t *)xnmalloc(ext_colors_n, sizeof(size_t));
        1:  619-block  0
call    0 returned 1
        -:  620:
        1:  621:		int i = (int)ext_colors_n;
       68:  622:		while (--i >= 0) {
unconditional  0 taken 1
       68:  622-block  0
branch  1 taken 67
branch  2 taken 1 (fallthrough)
       67:  623:			char *ret = strrchr(ext_colors[i], '=');
        -:  624:
       67:  625:			if (!ret || !is_color_code(ret + 1)) {
       67:  625-block  0
branch  0 taken 66 (fallthrough)
branch  1 taken 1
       66:  625-block  1
call    2 returned 66
branch  3 taken 0 (fallthrough)
branch  4 taken 66
        1:  626:				*ext_colors[i] = '\0';
        1:  627:				ext_colors_len[i] = 0;
        1:  628:				continue;
        1:  628-block  0
unconditional  0 taken 1
        -:  629:			}
        -:  630:
       66:  631:			size_t j, ext_len = 0;
        -:  632:
      267:  633:			for (j = 2; ext_colors[i][j] && ext_colors[i][j] != '='; j++)
       66:  633-block  0
unconditional  0 taken 66
      267:  633-block  1
branch  1 taken 267 (fallthrough)
branch  2 taken 0
      267:  633-block  2
branch  3 taken 201
branch  4 taken 66 (fallthrough)
      201:  634:				ext_len++;
      201:  634-block  0
unconditional  0 taken 201
        -:  635:
       66:  636:			ext_colors_len[i] = ext_len;
       66:  636-block  0
unconditional  0 taken 66
        -:  637:		}
        -:  638:	}
        -:  639:
        -:  640:			/* ##############################
        -:  641:			 * #      INTERFACE COLORS      #
        -:  642:			 * ############################## */
        -:  643:
        1:  644:	if (!ifacecolors) {
        1:  644-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  645:
        -:  646:		/* Free and reset whatever value was loaded */
    #####:  647:		*bm_c = '\0';
    #####:  648:		*dl_c = '\0';
    #####:  649:		*el_c = '\0';
    #####:  650:		*mi_c = '\0';
    #####:  651:		*tx_c = '\0';
    #####:  652:		*df_c = '\0';
    #####:  653:		*dc_c = '\0';
    #####:  654:		*wc_c = '\0';
    #####:  655:		*dh_c = '\0';
    #####:  656:		*li_c = '\0';
    #####:  657:		*ti_c = '\0';
    #####:  658:		*em_c = '\0';
    #####:  659:		*wm_c = '\0';
    #####:  660:		*nm_c = '\0';
    #####:  661:		*si_c = '\0';
    %%%%%:  661-block  0
unconditional  0 never executed
        -:  662:	}
        -:  663:
        -:  664:	else {
        -:  665:
        1:  666:		char *p = ifacecolors, *buf = (char *)NULL,
        1:  667:		     **colors = (char **)NULL;
        1:  668:		size_t len = 0, words = 0;
        1:  669:		int eol = 0;
        -:  670:
      236:  671:		while (!eol) {
        1:  671-block  0
unconditional  0 taken 1
      236:  671-block  1
branch  1 taken 235
branch  2 taken 1 (fallthrough)
      235:  672:			switch (*p) {
      235:  672-block  0
branch  0 taken 28
branch  1 taken 207
        -:  673:
       28:  674:			case '\0': /* fallthrough */
        -:  675:			case '\n': /* fallthrough */
        -:  676:			case ':':
       28:  677:				buf[len] = '\0';
       28:  678:				colors = (char **)xrealloc(colors, (words + 1) * sizeof(char *));
       28:  678-block  0
call    0 returned 28
       28:  679:				colors[words++] = savestring(buf, len);
call    0 returned 28
       28:  680:				*buf = '\0';
        -:  681:
       28:  682:				if (!*p)
branch  0 taken 1 (fallthrough)
branch  1 taken 27
        1:  683:					eol = 1;
        1:  683-block  0
unconditional  0 taken 1
        -:  684:
       28:  685:				len = 0;
       28:  686:				p++;
       28:  687:				break;
       28:  687-block  0
unconditional  0 taken 28
        -:  688:
      207:  689:			default:
      207:  690:				buf = (char *)xrealloc(buf, (len + 2) * sizeof(char));
      207:  690-block  0
call    0 returned 207
      207:  691:				buf[len++] = *(p++);
      207:  692:				break;
unconditional  0 taken 207
        -:  693:			}
        -:  694:		}
        -:  695:
        1:  696:		p = (char *)NULL;
        1:  697:		free(ifacecolors);
        1:  698:		ifacecolors = (char *)NULL;
        -:  699:
        1:  700:		if (buf) {
        1:  700-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  701:			free(buf);
        1:  702:			buf = (char *)NULL;
        1:  702-block  0
unconditional  0 taken 1
        -:  703:		}
        -:  704:
        1:  705:		if (colors) {
        1:  705-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  706:			colors = (char **)xrealloc(colors, (words + 1) * sizeof(char *));
        1:  706-block  0
call    0 returned 1
        1:  707:			colors[words] = (char *)NULL;
unconditional  0 taken 1
        -:  708:		}
        -:  709:
        1:  710:		int i = (int)words;
        -:  711:		/* Set the color variables */
       29:  712:		while (--i >= 0) {
        1:  712-block  0
unconditional  0 taken 1
       29:  712-block  1
branch  1 taken 28
branch  2 taken 1 (fallthrough)
        -:  713:
       28:  714:			if (*colors[i] == 't' && strncmp(colors[i], "tx=", 3) == 0) {
       28:  714-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 26
        2:  714-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        -:  715:
        1:  716:				if (!is_color_code(colors[i] + 3))
        1:  716-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  717:					/* zero the corresponding variable as a flag for
        -:  718:					 * the check after this for loop to prepare the
        -:  719:					 * variable to hold the default color */
    #####:  720:					*tx_c = '\0';
    %%%%%:  720-block  0
unconditional  0 never executed
        -:  721:
        -:  722:				else
        1:  723:					snprintf(tx_c, MAX_COLOR + 2, "\001\x1b[%sm\002",
        1:  724:					    colors[i] + 3);
        1:  724-block  0
unconditional  0 taken 1
        -:  725:			}
        -:  726:
       27:  727:			else if (*colors[i] == 'b' && strncmp(colors[i], "bm=", 3) == 0) {
       27:  727-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1:  727-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -:  728:
        1:  729:				if (!is_color_code(colors[i] + 3))
        1:  729-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  730:					*bm_c = '\0';
    %%%%%:  730-block  0
unconditional  0 never executed
        -:  731:
        -:  732:				else
        1:  733:					snprintf(bm_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1:  733-block  0
unconditional  0 taken 1
        -:  734:			}
        -:  735:
       26:  736:			else if (*colors[i] == 'l' && strncmp(colors[i], "li=", 3) == 0) {
       26:  736-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 25
        1:  736-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -:  737:
        1:  738:				if (!is_color_code(colors[i] + 3))
        1:  738-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  739:					*li_c = '\0';
    %%%%%:  739-block  0
unconditional  0 never executed
        -:  740:
        -:  741:				else
        1:  742:					snprintf(li_c, MAX_COLOR + 2, "\001\x1b[%sm\002",
        1:  743:					    colors[i] + 3);
        1:  743-block  0
unconditional  0 taken 1
        -:  744:			}
        -:  745:
       25:  746:			else if (*colors[i] == 't' && strncmp(colors[i], "ti=", 3) == 0) {
       25:  746-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 24
        1:  746-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  747:				if (!is_color_code(colors[i] + 3))
        1:  747-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  748:					*ti_c = '\0';
    %%%%%:  748-block  0
unconditional  0 never executed
        -:  749:				else
        1:  750:					snprintf(ti_c, MAX_COLOR + 2, "\001\x1b[%sm\002",
        1:  751:					    colors[i] + 3);
        1:  751-block  0
unconditional  0 taken 1
        -:  752:			}
        -:  753:
       24:  754:			else if (*colors[i] == 'e' && strncmp(colors[i], "em=", 3) == 0) {
       24:  754-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 22
        2:  754-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1:  755:				if (!is_color_code(colors[i] + 3))
        1:  755-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  756:					*em_c = '\0';
    %%%%%:  756-block  0
unconditional  0 never executed
        -:  757:				else
        1:  758:					snprintf(em_c, MAX_COLOR + 2, "\001\x1b[%sm\002",
        1:  759:					    colors[i] + 3);
        1:  759-block  0
unconditional  0 taken 1
        -:  760:			}
        -:  761:
       23:  762:			else if (*colors[i] == 'w' && strncmp(colors[i], "wm=", 3) == 0) {
       23:  762-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 21
        2:  762-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1:  763:				if (!is_color_code(colors[i] + 3))
        1:  763-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  764:					*wm_c = '\0';
    %%%%%:  764-block  0
unconditional  0 never executed
        -:  765:				else
        1:  766:					snprintf(wm_c, MAX_COLOR + 2, "\001\x1b[%sm\002",
        1:  767:					    colors[i] + 3);
        1:  767-block  0
unconditional  0 taken 1
        -:  768:			}
        -:  769:
       22:  770:			else if (*colors[i] == 'n' && strncmp(colors[i], "nm=", 3) == 0) {
       22:  770-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 21
        1:  770-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  771:				if (!is_color_code(colors[i] + 3))
        1:  771-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  772:					*nm_c = '\0';
    %%%%%:  772-block  0
unconditional  0 never executed
        -:  773:				else
        1:  774:					snprintf(nm_c, MAX_COLOR + 2, "\001\x1b[%sm\002",
        1:  775:					    colors[i] + 3);
        1:  775-block  0
unconditional  0 taken 1
        -:  776:			}
        -:  777:
       21:  778:			else if (*colors[i] == 's' && strncmp(colors[i], "si=", 3) == 0) {
       21:  778-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 17
        4:  778-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 3
        1:  779:				if (!is_color_code(colors[i] + 3))
        1:  779-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  780:					*si_c = '\0';
    %%%%%:  780-block  0
unconditional  0 never executed
        -:  781:				else
        1:  782:					snprintf(si_c, MAX_COLOR + 2, "\001\x1b[%sm\002",
        1:  783:					    colors[i] + 3);
        1:  783-block  0
unconditional  0 taken 1
        -:  784:			}
        -:  785:
       20:  786:			else if (*colors[i] == 'e' && strncmp(colors[i], "el=", 3) == 0) {
       20:  786-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 19
        1:  786-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  787:				if (!is_color_code(colors[i] + 3))
        1:  787-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  788:					*el_c = '\0';
    %%%%%:  788-block  0
unconditional  0 never executed
        -:  789:				else
        1:  790:					snprintf(el_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1:  790-block  0
unconditional  0 taken 1
        -:  791:			}
        -:  792:
       19:  793:			else if (*colors[i] == 'm' && strncmp(colors[i], "mi=", 3) == 0) {
       19:  793-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 18
        1:  793-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  794:				if (!is_color_code(colors[i] + 3))
        1:  794-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  795:					*mi_c = '\0';
    %%%%%:  795-block  0
unconditional  0 never executed
        -:  796:				else
        1:  797:					snprintf(mi_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1:  797-block  0
unconditional  0 taken 1
        -:  798:			}
        -:  799:
       18:  800:			else if (*colors[i] == 'd' && strncmp(colors[i], "dl=", 3) == 0) {
       18:  800-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 14
        4:  800-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 3
        1:  801:				if (!is_color_code(colors[i] + 3))
        1:  801-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  802:					*dl_c = '\0';
    %%%%%:  802-block  0
unconditional  0 never executed
        -:  803:				else
        1:  804:					snprintf(dl_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1:  804-block  0
unconditional  0 taken 1
        -:  805:			}
        -:  806:
       17:  807:			else if (*colors[i] == 'd' && strncmp(colors[i], "df=", 3) == 0) {
       17:  807-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 14
        3:  807-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 2
        1:  808:				if (!is_color_code(colors[i] + 3))
        1:  808-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  809:					*df_c = '\0';
    %%%%%:  809-block  0
unconditional  0 never executed
        -:  810:				else
        1:  811:					snprintf(df_c, MAX_COLOR - 1, "\x1b[%s;49m", colors[i] + 3);
        1:  811-block  0
unconditional  0 taken 1
        -:  812:			}
        -:  813:
       16:  814:			else if (*colors[i] == 'd' && strncmp(colors[i], "dc=", 3) == 0) {
       16:  814-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 14
        2:  814-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1:  815:				if (!is_color_code(colors[i] + 3))
        1:  815-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  816:					*dc_c = '\0';
    %%%%%:  816-block  0
unconditional  0 never executed
        -:  817:				else
        1:  818:					snprintf(dc_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1:  818-block  0
unconditional  0 taken 1
        -:  819:			}
        -:  820:
       15:  821:			else if (*colors[i] == 'w' && strncmp(colors[i], "wc=", 3) == 0) {
       15:  821-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 14
        1:  821-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  822:				if (!is_color_code(colors[i] + 3))
        1:  822-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  823:					*wc_c = '\0';
    %%%%%:  823-block  0
unconditional  0 never executed
        -:  824:				else
        1:  825:					snprintf(wc_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1:  825-block  0
unconditional  0 taken 1
        -:  826:			}
        -:  827:
       14:  828:			else if (*colors[i] == 'd' && strncmp(colors[i], "dh=", 3) == 0) {
       14:  828-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 13
        1:  828-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  829:				if (!is_color_code(colors[i] + 3))
        1:  829-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  830:					*dh_c = '\0';
    %%%%%:  830-block  0
unconditional  0 never executed
        -:  831:				else
        1:  832:					snprintf(dh_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1:  832-block  0
unconditional  0 taken 1
        -:  833:			}
        -:  834:
       28:  835:			free(colors[i]);
       28:  835-block  0
unconditional  0 taken 28
        -:  836:		}
        -:  837:
        1:  838:		free(colors);
        1:  839:		colors = (char **)NULL;
        1:  839-block  0
unconditional  0 taken 1
        -:  840:	}
        -:  841:
        1:  842:	if (!filecolors) {
        1:  842-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  843:		*nd_c = '\0';
    #####:  844:		*nf_c = '\0';
    #####:  845:		*di_c = '\0';
    #####:  846:		*ed_c = '\0';
    #####:  847:		*ne_c = '\0';
    #####:  848:		*ex_c = '\0';
    #####:  849:		*ee_c = '\0';
    #####:  850:		*bd_c = '\0';
    #####:  851:		*ln_c = '\0';
    #####:  852:		*mh_c = '\0';
    #####:  853:		*or_c = '\0';
    #####:  854:		*so_c = '\0';
    #####:  855:		*pi_c = '\0';
    #####:  856:		*cd_c = '\0';
    #####:  857:		*fi_c = '\0';
    #####:  858:		*ef_c = '\0';
    #####:  859:		*su_c = '\0';
    #####:  860:		*sg_c = '\0';
    #####:  861:		*ca_c = '\0';
    #####:  862:		*st_c = '\0';
    #####:  863:		*tw_c = '\0';
    #####:  864:		*ow_c = '\0';
    #####:  865:		*no_c = '\0';
    #####:  866:		*uf_c = '\0';
        -:  867:
        -:  868:		/* Set the LS_COLORS environment variable with default values */
    #####:  869:		char lsc[] = DEF_LS_COLORS;
        -:  870:
    #####:  871:		if (setenv("LS_COLORS", lsc, 1) == -1)
    %%%%%:  871-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  872:			fprintf(stderr, _("%s: Error registering environment colors\n"),
    %%%%%:  872-block  0
call    0 never executed
unconditional  1 never executed
        -:  873:					PROGRAM_NAME);
        -:  874:	}
        -:  875:
        -:  876:	else {
        -:  877:		/* Set the LS_COLORS environment variable to use CliFM own
        -:  878:		 * colors. In this way, files listed for TAB completion will
        -:  879:		 * use CliFM colors instead of system colors */
        -:  880:
        -:  881:		/* Strip CLiFM custom filetypes (nd, ne, nf, ed, ef, ee, uf,
        -:  882:		 * bm, el, mi, dl, tx, df, dc, wc, dh, li, ti, em, wm, nm, si,
        -:  883:		 * and ca), from filecolors to construct a valid value for
        -:  884:		 * LS_COLORS */
        1:  885:		size_t buflen = 0, linec_len = strlen(filecolors);
        1:  886:		char *ls_buf = (char *)NULL;
        1:  887:		int i = 0;
        -:  888:
        1:  889:		ls_buf = (char *)xnmalloc(linec_len + 1, sizeof(char));
        1:  889-block  0
call    0 returned 1
        -:  890:
      149:  891:		while (filecolors[i]) {
unconditional  0 taken 1
      149:  891-block  0
branch  1 taken 148
branch  2 taken 1 (fallthrough)
        -:  892:
      148:  893:			int rem = 0;
        -:  894:
      148:  895:			if ((int)i < (int)(linec_len - 3) && ((filecolors[i] == 'n'
      148:  895-block  0
branch  0 taken 148 (fallthrough)
branch  1 taken 0
      148:  895-block  1
branch  2 taken 5 (fallthrough)
branch  3 taken 143
        5:  896:			&& (filecolors[i + 1] == 'd' || filecolors[i + 1] == 'e'
        5:  896-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 1
        4:  896-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 1
      146:  897:			|| filecolors[i + 1] == 'f')) || (filecolors[i] == 'e'
        3:  897-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
      145:  897-block  1
branch  2 taken 4 (fallthrough)
branch  3 taken 141
        4:  898:			&& (filecolors[i + 1] == 'd' || filecolors[i + 1] == 'f'
        4:  898-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3:  898-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 1
      143:  899:			|| filecolors[i + 1] == 'e')) || (filecolors[i] == 'u'
        2:  899-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
      142:  899-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 140
      142:  900:			&& filecolors[i + 1] == 'f') || (filecolors[i] == 'c'
        2:  900-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
      141:  900-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 139
        9:  901:			&& filecolors[i + 1] == 'a')) && filecolors[i + 2] == '=') {
        2:  901-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        8:  901-block  1
branch  2 taken 8 (fallthrough)
branch  3 taken 0
        -:  902:
        -:  903:				/* If one of the above is found, move to the next
        -:  904:				 * color code */
        8:  905:				rem = 1;
       48:  906:				for (i += 3; filecolors[i] && filecolors[i] != ':'; i++)
        8:  906-block  0
unconditional  0 taken 8
       40:  906-block  1
unconditional  1 taken 40
       48:  906-block  2
branch  2 taken 48 (fallthrough)
branch  3 taken 0
       48:  906-block  3
branch  4 taken 40
branch  5 taken 8 (fallthrough)
        -:  907:					;
        -:  908:			}
        -:  909:
      148:  910:			if (filecolors[i]) {
      148:  910-block  0
branch  0 taken 148 (fallthrough)
branch  1 taken 0
        -:  911:
      148:  912:				if (!rem)
      148:  912-block  0
branch  0 taken 140 (fallthrough)
branch  1 taken 8
      140:  913:					ls_buf[buflen++] = filecolors[i];
      140:  913-block  0
unconditional  0 taken 140
        -:  914:			}
        -:  915:
        -:  916:			else
    #####:  917:				break;
    %%%%%:  917-block  0
unconditional  0 never executed
        -:  918:
      148:  919:			i++;
      148:  919-block  0
unconditional  0 taken 148
        -:  920:		}
        -:  921:
        1:  922:		if (buflen) {
        1:  922-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  923:			ls_buf[buflen] = '\0';
        -:  924:
        1:  925:			if (setenv("LS_COLORS", ls_buf, 1) == -1)
        1:  925-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  926:				fprintf(stderr, _("%s: Error registering environment "
    %%%%%:  926-block  0
call    0 never executed
unconditional  1 never executed
        -:  927:						"colors\n"), PROGRAM_NAME);
        1:  928:			free(ls_buf);
        1:  929:			ls_buf = (char *)NULL;
        1:  929-block  0
unconditional  0 taken 1
        -:  930:		}
        -:  931:
        -:  932:		/* Split the colors line into substrings (one per color) */
        1:  933:		char *p = filecolors, *buf = (char *)NULL, **colors = (char **)NULL;
        1:  934:		size_t len = 0, words = 0;
        1:  935:		int eol = 0;
        -:  936:
      214:  937:		while (!eol) {
        1:  937-block  0
unconditional  0 taken 1
      214:  937-block  1
branch  1 taken 213
branch  2 taken 1 (fallthrough)
      213:  938:			switch (*p) {
      213:  938-block  0
branch  0 taken 25
branch  1 taken 188
        -:  939:
       25:  940:			case '\0': /* fallthrough */
        -:  941:			case '\n': /* fallthrough */
        -:  942:			case ':':
       25:  943:				buf[len] = '\0';
       25:  944:				colors = (char **)xrealloc(colors, (words + 1) * sizeof(char *));
       25:  944-block  0
call    0 returned 25
       25:  945:				colors[words++] = savestring(buf, len);
call    0 returned 25
       25:  946:				*buf = '\0';
        -:  947:
       25:  948:				if (!*p)
branch  0 taken 1 (fallthrough)
branch  1 taken 24
        1:  949:					eol = 1;
        1:  949-block  0
unconditional  0 taken 1
        -:  950:
       25:  951:				len = 0;
       25:  952:				p++;
       25:  953:				break;
       25:  953-block  0
unconditional  0 taken 25
        -:  954:
      188:  955:			default:
      188:  956:				buf = (char *)xrealloc(buf, (len + 2) * sizeof(char));
      188:  956-block  0
call    0 returned 188
      188:  957:				buf[len++] = *(p++);
      188:  958:				break;
unconditional  0 taken 188
        -:  959:			}
        -:  960:		}
        -:  961:
        1:  962:		p = (char *)NULL;
        1:  963:		free(filecolors);
        1:  964:		filecolors = (char *)NULL;
        -:  965:
        1:  966:		if (buf) {
        1:  966-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  967:			free(buf);
        1:  968:			buf = (char *)NULL;
        1:  968-block  0
unconditional  0 taken 1
        -:  969:		}
        -:  970:
        1:  971:		if (colors) {
        1:  971-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  972:			colors = (char **)xrealloc(colors, (words + 1) * sizeof(char *));
        1:  972-block  0
call    0 returned 1
        1:  973:			colors[words] = (char *)NULL;
unconditional  0 taken 1
        -:  974:		}
        -:  975:
        -:  976:		/* Set the color variables */
        1:  977:		i = (int)words;
       26:  978:		while (--i >= 0) {
        1:  978-block  0
unconditional  0 taken 1
       26:  978-block  1
branch  1 taken 25
branch  2 taken 1 (fallthrough)
        -:  979:
       25:  980:			if (*colors[i] == 'd' && strncmp(colors[i], "di=", 3) == 0)
       25:  980-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 24
        1:  980-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  981:				if (!is_color_code(colors[i] + 3))
        1:  981-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  982:					*di_c = '\0';
    %%%%%:  982-block  0
unconditional  0 never executed
        -:  983:				else
        1:  984:					snprintf(di_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1:  984-block  0
unconditional  0 taken 1
        -:  985:
      24*:  986:			else if (*colors[i] == 'd' && strncmp(colors[i], "df=", 3) == 0)
       24:  986-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    %%%%%:  986-block  1
branch  2 never executed
branch  3 never executed
    #####:  987:				if (!is_color_code(colors[i] + 3))
    %%%%%:  987-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  988:					*df_c = '\0';
    %%%%%:  988-block  0
unconditional  0 never executed
        -:  989:				else
    #####:  990:					snprintf(df_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
    %%%%%:  990-block  0
unconditional  0 never executed
        -:  991:
      24*:  992:			else if (*colors[i] == 'd' && strncmp(colors[i], "dc=", 3) == 0)
       24:  992-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    %%%%%:  992-block  1
branch  2 never executed
branch  3 never executed
    #####:  993:				if (!is_color_code(colors[i] + 3))
    %%%%%:  993-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  994:					*dc_c = '\0';
    %%%%%:  994-block  0
unconditional  0 never executed
        -:  995:				else
    #####:  996:					snprintf(dc_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
    %%%%%:  996-block  0
unconditional  0 never executed
        -:  997:
      24*:  998:			else if (*colors[i] == 'w' && strncmp(colors[i], "wc=", 3) == 0)
       24:  998-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    %%%%%:  998-block  1
branch  2 never executed
branch  3 never executed
    #####:  999:				if (!is_color_code(colors[i] + 3))
    %%%%%:  999-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1000:					*wc_c = '\0';
    %%%%%: 1000-block  0
unconditional  0 never executed
        -: 1001:				else
    #####: 1002:					snprintf(wc_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
    %%%%%: 1002-block  0
unconditional  0 never executed
        -: 1003:
      24*: 1004:			else if (*colors[i] == 'd' && strncmp(colors[i], "dh=", 3) == 0)
       24: 1004-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    %%%%%: 1004-block  1
branch  2 never executed
branch  3 never executed
    #####: 1005:				if (!is_color_code(colors[i] + 3))
    %%%%%: 1005-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1006:					*dh_c = '\0';
    %%%%%: 1006-block  0
unconditional  0 never executed
        -: 1007:				else
    #####: 1008:					snprintf(dh_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
    %%%%%: 1008-block  0
unconditional  0 never executed
       24: 1009:			else if (*colors[i] == 'n' && strncmp(colors[i], "nd=", 3) == 0)
       24: 1009-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 20
        4: 1009-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 3
        1: 1010:				if (!is_color_code(colors[i] + 3))
        1: 1010-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1011:					*nd_c = '\0';
    %%%%%: 1011-block  0
unconditional  0 never executed
        -: 1012:				else
        1: 1013:					snprintf(nd_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1013-block  0
unconditional  0 taken 1
        -: 1014:
       23: 1015:			else if (*colors[i] == 'e' && strncmp(colors[i], "ed=", 3) == 0)
       23: 1015-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 19
        4: 1015-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 3
        1: 1016:				if (!is_color_code(colors[i] + 3))
        1: 1016-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1017:					*ed_c = '\0';
    %%%%%: 1017-block  0
unconditional  0 never executed
        -: 1018:				else
        1: 1019:					snprintf(ed_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1019-block  0
unconditional  0 taken 1
        -: 1020:
       22: 1021:			else if (*colors[i] == 'n' && strncmp(colors[i], "ne=", 3) == 0)
       22: 1021-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 19
        3: 1021-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 2
        1: 1022:				if (!is_color_code(colors[i] + 3))
        1: 1022-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1023:					*ne_c = '\0';
    %%%%%: 1023-block  0
unconditional  0 never executed
        -: 1024:				else
        1: 1025:					snprintf(ne_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1025-block  0
unconditional  0 taken 1
        -: 1026:
       21: 1027:			else if (*colors[i] == 'f' && strncmp(colors[i], "fi=", 3) == 0)
       21: 1027-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 20
        1: 1027-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1028:				if (!is_color_code(colors[i] + 3))
        1: 1028-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1029:					*fi_c = '\0';
    %%%%%: 1029-block  0
unconditional  0 never executed
        -: 1030:				else
        1: 1031:					snprintf(fi_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1031-block  0
unconditional  0 taken 1
        -: 1032:
       20: 1033:			else if (*colors[i] == 'e' && strncmp(colors[i], "ef=", 3) == 0)
       20: 1033-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 17
        3: 1033-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 2
        1: 1034:				if (!is_color_code(colors[i] + 3))
        1: 1034-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1035:					*ef_c = '\0';
    %%%%%: 1035-block  0
unconditional  0 never executed
        -: 1036:				else
        1: 1037:					snprintf(ef_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1037-block  0
unconditional  0 taken 1
        -: 1038:
       19: 1039:			else if (*colors[i] == 'n' && strncmp(colors[i], "nf=", 3) == 0)
       19: 1039-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 17
        2: 1039-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 1040:				if (!is_color_code(colors[i] + 3))
        1: 1040-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1041:					*nf_c = '\0';
    %%%%%: 1041-block  0
unconditional  0 never executed
        -: 1042:				else
        1: 1043:					snprintf(nf_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1043-block  0
unconditional  0 taken 1
        -: 1044:
       18: 1045:			else if (*colors[i] == 'l' && strncmp(colors[i], "ln=", 3) == 0)
       18: 1045-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 17
        1: 1045-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1046:				if (!is_color_code(colors[i] + 3))
        1: 1046-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1047:					*ln_c = '\0';
    %%%%%: 1047-block  0
unconditional  0 never executed
        -: 1048:				else
        1: 1049:					snprintf(ln_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1049-block  0
unconditional  0 taken 1
        -: 1050:
       17: 1051:			else if (*colors[i] == 'o' && strncmp(colors[i], "or=", 3) == 0)
       17: 1051-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 15
        2: 1051-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 1052:				if (!is_color_code(colors[i] + 3))
        1: 1052-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1053:					*or_c = '\0';
    %%%%%: 1053-block  0
unconditional  0 never executed
        -: 1054:				else
        1: 1055:					snprintf(or_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1055-block  0
unconditional  0 taken 1
        -: 1056:
       16: 1057:			else if (*colors[i] == 'e' && strncmp(colors[i], "ex=", 3) == 0)
       16: 1057-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 14
        2: 1057-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 1058:				if (!is_color_code(colors[i] + 3))
        1: 1058-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1059:					*ex_c = '\0';
    %%%%%: 1059-block  0
unconditional  0 never executed
        -: 1060:				else
        1: 1061:					snprintf(ex_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1061-block  0
unconditional  0 taken 1
        -: 1062:
       15: 1063:			else if (*colors[i] == 'e' && strncmp(colors[i], "ee=", 3) == 0)
       15: 1063-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 14
        1: 1063-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1064:				if (!is_color_code(colors[i] + 3))
        1: 1064-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1065:					*ee_c = '\0';
    %%%%%: 1065-block  0
unconditional  0 never executed
        -: 1066:				else
        1: 1067:					snprintf(ee_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1067-block  0
unconditional  0 taken 1
        -: 1068:
       14: 1069:			else if (*colors[i] == 'b' && strncmp(colors[i], "bd=", 3) == 0)
       14: 1069-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 13
        1: 1069-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1070:				if (!is_color_code(colors[i] + 3))
        1: 1070-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1071:					*bd_c = '\0';
    %%%%%: 1071-block  0
unconditional  0 never executed
        -: 1072:				else
        1: 1073:					snprintf(bd_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1073-block  0
unconditional  0 taken 1
        -: 1074:
       13: 1075:			else if (*colors[i] == 'c' && strncmp(colors[i], "cd=", 3) == 0)
       13: 1075-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 11
        2: 1075-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 1076:				if (!is_color_code(colors[i] + 3))
        1: 1076-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1077:					*cd_c = '\0';
    %%%%%: 1077-block  0
unconditional  0 never executed
        -: 1078:				else
        1: 1079:					snprintf(cd_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1079-block  0
unconditional  0 taken 1
        -: 1080:
       12: 1081:			else if (*colors[i] == 'p' && strncmp(colors[i], "pi=", 3) == 0)
       12: 1081-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 11
        1: 1081-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1082:				if (!is_color_code(colors[i] + 3))
        1: 1082-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1083:					*pi_c = '\0';
    %%%%%: 1083-block  0
unconditional  0 never executed
        -: 1084:				else
        1: 1085:					snprintf(pi_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1085-block  0
unconditional  0 taken 1
        -: 1086:
       11: 1087:			else if (*colors[i] == 's' && strncmp(colors[i], "so=", 3) == 0)
       11: 1087-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 7
        4: 1087-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 3
        1: 1088:				if (!is_color_code(colors[i] + 3))
        1: 1088-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1089:					*so_c = '\0';
    %%%%%: 1089-block  0
unconditional  0 never executed
        -: 1090:				else
        1: 1091:					snprintf(so_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1091-block  0
unconditional  0 taken 1
        -: 1092:
       10: 1093:			else if (*colors[i] == 's' && strncmp(colors[i], "su=", 3) == 0)
       10: 1093-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 7
        3: 1093-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 2
        1: 1094:				if (!is_color_code(colors[i] + 3))
        1: 1094-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1095:					*su_c = '\0';
    %%%%%: 1095-block  0
unconditional  0 never executed
        -: 1096:				else
        1: 1097:					snprintf(su_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1097-block  0
unconditional  0 taken 1
        -: 1098:
        9: 1099:			else if (*colors[i] == 's' && strncmp(colors[i], "sg=", 3) == 0)
        9: 1099-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 7
        2: 1099-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 1100:				if (!is_color_code(colors[i] + 3))
        1: 1100-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1101:					*sg_c = '\0';
    %%%%%: 1101-block  0
unconditional  0 never executed
        -: 1102:				else
        1: 1103:					snprintf(sg_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1103-block  0
unconditional  0 taken 1
        -: 1104:
        8: 1105:			else if (*colors[i] == 't' && strncmp(colors[i], "tw=", 3) == 0)
        8: 1105-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 7
        1: 1105-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1106:				if (!is_color_code(colors[i] + 3))
        1: 1106-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1107:					*tw_c = '\0';
    %%%%%: 1107-block  0
unconditional  0 never executed
        -: 1108:				else
        1: 1109:					snprintf(tw_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1109-block  0
unconditional  0 taken 1
        -: 1110:
        7: 1111:			else if (*colors[i] == 's' && strncmp(colors[i], "st=", 3) == 0)
        7: 1111-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 6
        1: 1111-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1112:				if (!is_color_code(colors[i] + 3))
        1: 1112-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1113:					*st_c = '\0';
    %%%%%: 1113-block  0
unconditional  0 never executed
        -: 1114:				else
        1: 1115:					snprintf(st_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1115-block  0
unconditional  0 taken 1
        -: 1116:
        6: 1117:			else if (*colors[i] == 'o' && strncmp(colors[i], "ow=", 3) == 0)
        6: 1117-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        1: 1117-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1118:				if (!is_color_code(colors[i] + 3))
        1: 1118-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1119:					*ow_c = '\0';
    %%%%%: 1119-block  0
unconditional  0 never executed
        -: 1120:				else
        1: 1121:					snprintf(ow_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1121-block  0
unconditional  0 taken 1
        -: 1122:
        5: 1123:			else if (*colors[i] == 'c' && strncmp(colors[i], "ca=", 3) == 0)
        5: 1123-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1: 1123-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1124:				if (!is_color_code(colors[i] + 3))
        1: 1124-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1125:					*ca_c = '\0';
    %%%%%: 1125-block  0
unconditional  0 never executed
        -: 1126:				else
        1: 1127:					snprintf(ca_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1127-block  0
unconditional  0 taken 1
        -: 1128:
        4: 1129:			else if (*colors[i] == 'n' && strncmp(colors[i], "no=", 3) == 0)
        4: 1129-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1: 1129-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1130:				if (!is_color_code(colors[i] + 3))
        1: 1130-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1131:					*no_c = '\0';
    %%%%%: 1131-block  0
unconditional  0 never executed
        -: 1132:				else
        1: 1133:					snprintf(no_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1133-block  0
unconditional  0 taken 1
        -: 1134:
        3: 1135:			else if (*colors[i] == 'm' && strncmp(colors[i], "mh=", 3) == 0)
        3: 1135-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1: 1135-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1136:				if (!is_color_code(colors[i] + 3))
        1: 1136-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1137:					*mh_c = '\0';
    %%%%%: 1137-block  0
unconditional  0 never executed
        -: 1138:				else
        1: 1139:					snprintf(mh_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1139-block  0
unconditional  0 taken 1
        -: 1140:
        2: 1141:			else if (*colors[i] == 'u' && strncmp(colors[i], "uf=", 3) == 0) {
        2: 1141-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 1141-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1142:				if (!is_color_code(colors[i] + 3))
        1: 1142-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1143:					*uf_c = '\0';
    %%%%%: 1143-block  0
unconditional  0 never executed
        -: 1144:				else
        1: 1145:					snprintf(uf_c, MAX_COLOR - 1, "\x1b[%sm", colors[i] + 3);
        1: 1145-block  0
unconditional  0 taken 1
        -: 1146:			}
        -: 1147:
       25: 1148:			free(colors[i]);
       25: 1148-block  0
unconditional  0 taken 25
        -: 1149:		}
        -: 1150:
        1: 1151:		free(colors);
        1: 1152:		colors = (char **)NULL;
        1: 1152-block  0
unconditional  0 taken 1
        -: 1153:	}
        -: 1154:
        -: 1155:	/* If some color was not set or it was a wrong color code, set the
        -: 1156:	 * default */
        1: 1157:	if (!*el_c)
        1: 1157-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1158:		strcpy(el_c, DEF_EL_C);
    %%%%%: 1158-block  0
unconditional  0 never executed
        1: 1159:	if (!*mi_c)
        1: 1159-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1160:		strcpy(mi_c, DEF_MI_C);
    %%%%%: 1160-block  0
unconditional  0 never executed
        1: 1161:	if (!*dl_c)
        1: 1161-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1162:		strcpy(dl_c, DEF_DL_C);
    %%%%%: 1162-block  0
unconditional  0 never executed
        1: 1163:	if (!*df_c)
        1: 1163-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1164:		strcpy(df_c, DEF_DF_C);
    %%%%%: 1164-block  0
unconditional  0 never executed
        1: 1165:	if (!*dc_c)
        1: 1165-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1166:		strcpy(dc_c, DEF_DC_C);
    %%%%%: 1166-block  0
unconditional  0 never executed
        1: 1167:	if (!*wc_c)
        1: 1167-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1168:		strcpy(wc_c, DEF_WC_C);
    %%%%%: 1168-block  0
unconditional  0 never executed
        1: 1169:	if (!*dh_c)
        1: 1169-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1170:		strcpy(dh_c, DEF_DH_C);
    %%%%%: 1170-block  0
unconditional  0 never executed
        1: 1171:	if (!*tx_c)
        1: 1171-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1172:		strcpy(tx_c, DEF_TX_C);
    %%%%%: 1172-block  0
unconditional  0 never executed
        1: 1173:	if (!*li_c)
        1: 1173-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1174:		strcpy(li_c, DEF_LI_C);
    %%%%%: 1174-block  0
unconditional  0 never executed
        1: 1175:	if (!*ti_c)
        1: 1175-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1176:		strcpy(ti_c, DEF_TI_C);
    %%%%%: 1176-block  0
unconditional  0 never executed
        1: 1177:	if (!*em_c)
        1: 1177-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1178:		strcpy(em_c, DEF_EM_C);
    %%%%%: 1178-block  0
unconditional  0 never executed
        1: 1179:	if (!*wm_c)
        1: 1179-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1180:		strcpy(wm_c, DEF_WM_C);
    %%%%%: 1180-block  0
unconditional  0 never executed
        1: 1181:	if (!*nm_c)
        1: 1181-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1182:		strcpy(nm_c, DEF_NM_C);
    %%%%%: 1182-block  0
unconditional  0 never executed
        1: 1183:	if (!*si_c)
        1: 1183-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1184:		strcpy(si_c, DEF_SI_C);
    %%%%%: 1184-block  0
unconditional  0 never executed
        1: 1185:	if (!*bm_c)
        1: 1185-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1186:		strcpy(bm_c, DEF_BM_C);
    %%%%%: 1186-block  0
unconditional  0 never executed
        -: 1187:
        1: 1188:	if (!*di_c)
        1: 1188-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1189:		strcpy(di_c, DEF_DI_C);
    %%%%%: 1189-block  0
unconditional  0 never executed
        1: 1190:	if (!*nd_c)
        1: 1190-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1191:		strcpy(nd_c, DEF_ND_C);
    %%%%%: 1191-block  0
unconditional  0 never executed
        1: 1192:	if (!*ed_c)
        1: 1192-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1193:		strcpy(ed_c, DEF_ED_C);
    %%%%%: 1193-block  0
unconditional  0 never executed
        1: 1194:	if (!*ne_c)
        1: 1194-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1195:		strcpy(ne_c, DEF_NE_C);
    %%%%%: 1195-block  0
unconditional  0 never executed
        1: 1196:	if (!*fi_c)
        1: 1196-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1197:		strcpy(fi_c, DEF_FI_C);
    %%%%%: 1197-block  0
unconditional  0 never executed
        1: 1198:	if (!*ef_c)
        1: 1198-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1199:		strcpy(ef_c, DEF_EF_C);
    %%%%%: 1199-block  0
unconditional  0 never executed
        1: 1200:	if (!*nf_c)
        1: 1200-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1201:		strcpy(nf_c, DEF_NF_C);
    %%%%%: 1201-block  0
unconditional  0 never executed
        1: 1202:	if (!*ln_c)
        1: 1202-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1203:		strcpy(ln_c, DEF_LN_C);
    %%%%%: 1203-block  0
unconditional  0 never executed
        1: 1204:	if (!*or_c)
        1: 1204-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1205:		strcpy(or_c, DEF_OR_C);
    %%%%%: 1205-block  0
unconditional  0 never executed
        1: 1206:	if (!*pi_c)
        1: 1206-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1207:		strcpy(pi_c, DEF_PI_C);
    %%%%%: 1207-block  0
unconditional  0 never executed
        1: 1208:	if (!*so_c)
        1: 1208-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1209:		strcpy(so_c, DEF_SO_C);
    %%%%%: 1209-block  0
unconditional  0 never executed
        1: 1210:	if (!*bd_c)
        1: 1210-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1211:		strcpy(bd_c, DEF_BD_C);
    %%%%%: 1211-block  0
unconditional  0 never executed
        1: 1212:	if (!*cd_c)
        1: 1212-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1213:		strcpy(cd_c, DEF_CD_C);
    %%%%%: 1213-block  0
unconditional  0 never executed
        1: 1214:	if (!*su_c)
        1: 1214-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1215:		strcpy(su_c, DEF_SU_C);
    %%%%%: 1215-block  0
unconditional  0 never executed
        1: 1216:	if (!*sg_c)
        1: 1216-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1217:		strcpy(sg_c, DEF_SG_C);
    %%%%%: 1217-block  0
unconditional  0 never executed
        1: 1218:	if (!*st_c)
        1: 1218-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1219:		strcpy(st_c, DEF_ST_C);
    %%%%%: 1219-block  0
unconditional  0 never executed
        1: 1220:	if (!*tw_c)
        1: 1220-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1221:		strcpy(tw_c, DEF_TW_C);
    %%%%%: 1221-block  0
unconditional  0 never executed
        1: 1222:	if (!*ow_c)
        1: 1222-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1223:		strcpy(ow_c, DEF_OW_C);
    %%%%%: 1223-block  0
unconditional  0 never executed
        1: 1224:	if (!*ex_c)
        1: 1224-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1225:		strcpy(ex_c, DEF_EX_C);
    %%%%%: 1225-block  0
unconditional  0 never executed
        1: 1226:	if (!*ee_c)
        1: 1226-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1227:		strcpy(ee_c, DEF_EE_C);
    %%%%%: 1227-block  0
unconditional  0 never executed
        1: 1228:	if (!*ca_c)
        1: 1228-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1229:		strcpy(ca_c, DEF_CA_C);
    %%%%%: 1229-block  0
unconditional  0 never executed
        1: 1230:	if (!*no_c)
        1: 1230-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1231:		strcpy(no_c, DEF_NO_C);
    %%%%%: 1231-block  0
unconditional  0 never executed
        1: 1232:	if (!*uf_c)
        1: 1232-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1233:		strcpy(uf_c, DEF_UF_C);
    %%%%%: 1233-block  0
unconditional  0 never executed
        1: 1234:	if (!*mh_c)
        1: 1234-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1235:		strcpy(mh_c, DEF_MH_C);
    %%%%%: 1235-block  0
unconditional  0 never executed
        -: 1236:
        1: 1237:	if (!*dir_ico_c)
        1: 1237-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1238:		strcpy(dir_ico_c, DEF_DIR_ICO_C);
    %%%%%: 1238-block  0
unconditional  0 never executed
        -: 1239:
        1: 1240:	return EXIT_SUCCESS;
        1: 1240-block  0
unconditional  0 taken 1
        -: 1241:}
        -: 1242:
        -: 1243:/* Print ENTRY using color codes and I as ELN, right padding PAD
        -: 1244: * chars and terminating ENTRY with or without a new line char (NEW_LINE
        -: 1245: * 1 or 0 respectivelly) */
        -: 1246:void
function colors_list called 6 returned 100% blocks executed 25%
        6: 1247:colors_list(const char *ent, const int i, const int pad, const int new_line)
        -: 1248:{
       6*: 1249:	size_t i_digits = (size_t)DIGINUM(i);
        6: 1249-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    %%%%%: 1249-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1249-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 1249-block  3
branch  6 never executed
branch  7 never executed
    %%%%%: 1249-block  4
branch  8 never executed
branch  9 never executed
    %%%%%: 1249-block  5
branch 10 never executed
branch 11 never executed
    %%%%%: 1249-block  6
branch 12 never executed
branch 13 never executed
    %%%%%: 1249-block  7
branch 14 never executed
branch 15 never executed
    %%%%%: 1249-block  8
branch 16 never executed
branch 17 never executed
    %%%%%: 1249-block  9
unconditional 18 never executed
    %%%%%: 1249-block 10
unconditional 19 never executed
    %%%%%: 1249-block 11
unconditional 20 never executed
    %%%%%: 1249-block 12
unconditional 21 never executed
    %%%%%: 1249-block 13
unconditional 22 never executed
    %%%%%: 1249-block 14
unconditional 23 never executed
    %%%%%: 1249-block 15
unconditional 24 never executed
    %%%%%: 1249-block 16
unconditional 25 never executed
    %%%%%: 1249-block 17
unconditional 26 never executed
    %%%%%: 1249-block 18
unconditional 27 never executed
    %%%%%: 1249-block 19
unconditional 28 never executed
    %%%%%: 1249-block 20
unconditional 29 never executed
    %%%%%: 1249-block 21
unconditional 30 never executed
    %%%%%: 1249-block 22
unconditional 31 never executed
    %%%%%: 1249-block 23
unconditional 32 never executed
    %%%%%: 1249-block 24
unconditional 33 never executed
    %%%%%: 1249-block 25
unconditional 34 never executed
        6: 1249-block 26
unconditional 35 taken 6
        -: 1250:
        -: 1251:	/* Num (i) + space + null byte */
        6: 1252:	char *index = (char *)xnmalloc(i_digits + 2, sizeof(char));
        6: 1252-block  0
call    0 returned 6
        -: 1253:
        6: 1254:	if (i > 0) /* When listing files in CWD */
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6: 1255:		sprintf(index, "%d ", i);
        6: 1255-block  0
unconditional  0 taken 6
        -: 1256:
    #####: 1257:	else if (i == -1) /* ELN for entry could not be found */
    %%%%%: 1257-block  0
branch  0 never executed
branch  1 never executed
    #####: 1258:		sprintf(index, "? ");
    %%%%%: 1258-block  0
unconditional  0 never executed
        -: 1259:
        -: 1260:	/* When listing files NOT in CWD (called from search function and
        -: 1261:	 * first argument is a path: "/search_str /path") 'i' is zero. In
        -: 1262:	 * this case, no index should be printed at all */
        -: 1263:	else
    #####: 1264:		index[0] = '\0';
    %%%%%: 1264-block  0
unconditional  0 never executed
        -: 1265:
        -: 1266:	struct stat file_attrib;
        -: 1267:
        6: 1268:	if (lstat(ent, &file_attrib) == -1) {
        6: 1268-block  0
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
    #####: 1269:		fprintf(stderr, "%s%s%s%s%-*s%s%s", el_c, index, df_c,
    %%%%%: 1269-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1269-block  1
unconditional  2 never executed
    %%%%%: 1269-block  2
unconditional  3 never executed
    %%%%%: 1269-block  3
call    4 never executed
        -: 1270:		    uf_c, pad, ent, df_c, new_line ? "\n" : "");
    #####: 1271:		free(index);
    #####: 1272:		return;
unconditional  0 never executed
        -: 1273:	}
        -: 1274:
        6: 1275:	char *linkname = (char *)NULL;
        6: 1276:	char ext_color[MAX_COLOR] = "";
        6: 1277:	char *color = fi_c;
        -: 1278:
        -: 1279:#ifdef _LINUX_CAP
        -: 1280:	cap_t cap;
        -: 1281:#endif
        -: 1282:
        6: 1283:	switch (file_attrib.st_mode & S_IFMT) {
        6: 1283-block  0
branch  0 taken 0
branch  1 taken 6
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
        -: 1284:
    #####: 1285:	case S_IFREG:
        -: 1286:
    #####: 1287:		if (access(ent, R_OK) == -1)
    %%%%%: 1287-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1288:			color = nf_c;
    %%%%%: 1288-block  0
unconditional  0 never executed
        -: 1289:
    #####: 1290:		else if (file_attrib.st_mode & S_ISUID) /* set uid file */
    %%%%%: 1290-block  0
branch  0 never executed
branch  1 never executed
    #####: 1291:			color = su_c;
    %%%%%: 1291-block  0
unconditional  0 never executed
        -: 1292:
    #####: 1293:		else if (file_attrib.st_mode & S_ISGID) /* set gid file */
    %%%%%: 1293-block  0
branch  0 never executed
branch  1 never executed
    #####: 1294:			color = sg_c;
    %%%%%: 1294-block  0
unconditional  0 never executed
        -: 1295:
        -: 1296:		else {
        -: 1297:#ifdef _LINUX_CAP
    #####: 1298:			cap = cap_get_file(ent);
    %%%%%: 1298-block  0
call    0 never executed
        -: 1299:
    #####: 1300:			if (cap) {
branch  0 never executed
branch  1 never executed
    #####: 1301:				color = ca_c;
    #####: 1302:				cap_free(cap);
    %%%%%: 1302-block  0
call    0 never executed
unconditional  1 never executed
        -: 1303:			}
        -: 1304:
    #####: 1305:			else if (file_attrib.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)) {
    %%%%%: 1305-block  0
branch  0 never executed
branch  1 never executed
        -: 1306:#else
        -: 1307:
        -: 1308:			if (file_attrib.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)) {
        -: 1309:#endif
    #####: 1310:				if (file_attrib.st_size == 0)
    %%%%%: 1310-block  0
branch  0 never executed
branch  1 never executed
    #####: 1311:					color = ee_c;
    %%%%%: 1311-block  0
unconditional  0 never executed
        -: 1312:				else
    #####: 1313:					color = ex_c;
    %%%%%: 1313-block  0
unconditional  0 never executed
        -: 1314:			}
        -: 1315:
    #####: 1316:			else if (file_attrib.st_size == 0)
    %%%%%: 1316-block  0
branch  0 never executed
branch  1 never executed
    #####: 1317:				color = ef_c;
    %%%%%: 1317-block  0
unconditional  0 never executed
        -: 1318:
    #####: 1319:			else if (file_attrib.st_nlink > 1)
    %%%%%: 1319-block  0
branch  0 never executed
branch  1 never executed
    #####: 1320:				color = mh_c;
    %%%%%: 1320-block  0
unconditional  0 never executed
        -: 1321:
        -: 1322:			else {
    #####: 1323:				char *ext = (strrchr(ent, '.'));
        -: 1324:
    #####: 1325:				if (ext) {
    %%%%%: 1325-block  0
branch  0 never executed
branch  1 never executed
    #####: 1326:					char *extcolor = get_ext_color(ext);
    %%%%%: 1326-block  0
call    0 never executed
        -: 1327:
    #####: 1328:					if (extcolor) {
branch  0 never executed
branch  1 never executed
    #####: 1329:						snprintf(ext_color, MAX_COLOR, "\x1b[%sm",
        -: 1330:						    extcolor);
    #####: 1331:						color = ext_color;
    #####: 1332:						extcolor = (char *)NULL;
    %%%%%: 1332-block  0
unconditional  0 never executed
        -: 1333:					}
        -: 1334:
    #####: 1335:					ext = (char *)NULL;
    %%%%%: 1335-block  0
unconditional  0 never executed
        -: 1336:				}
        -: 1337:			}
        -: 1338:		}
        -: 1339:
    #####: 1340:		break;
    %%%%%: 1340-block  0
unconditional  0 never executed
        -: 1341:
        6: 1342:	case S_IFDIR:
        -: 1343:
        6: 1344:		if (access(ent, R_OK | X_OK) != 0)
        6: 1344-block  0
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
    #####: 1345:			color = nd_c;
    %%%%%: 1345-block  0
unconditional  0 never executed
        -: 1346:
        -: 1347:		else {
        6: 1348:			int is_oth_w = 0;
        -: 1349:
        6: 1350:			if (file_attrib.st_mode & S_IWOTH)
        6: 1350-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####: 1351:				is_oth_w = 1;
    %%%%%: 1351-block  0
unconditional  0 never executed
        -: 1352:
        6: 1353:			int files_dir = count_dir(ent);
        6: 1353-block  0
call    0 returned 6
        -: 1354:
        6: 1355:			color = (file_attrib.st_mode & S_ISVTX) ? (is_oth_w
        6: 1355-block  0
unconditional  0 taken 6
      12*: 1356:					? tw_c : st_c) : (is_oth_w ? ow_c :
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    %%%%%: 1356-block  0
branch  2 never executed
branch  3 never executed
    %%%%%: 1356-block  1
unconditional  4 never executed
    %%%%%: 1356-block  2
unconditional  5 never executed
    %%%%%: 1356-block  3
unconditional  6 never executed
        6: 1356-block  4
branch  7 taken 6 (fallthrough)
branch  8 taken 0
        6: 1356-block  5
unconditional  9 taken 6
    %%%%%: 1356-block  6
unconditional 10 never executed
        6: 1356-block  7
unconditional 11 taken 6
        -: 1357:					/* If folder is empty, it contains only "."
        -: 1358:					 * and ".." (2 elements). If not mounted (ex:
        -: 1359:					 * /media/usb) the result will be zero. */
       6*: 1360:					(files_dir == 2 || files_dir == 0) ? ed_c : di_c);
        6: 1360-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6: 1360-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 6
    %%%%%: 1360-block  2
unconditional  4 never executed
        6: 1360-block  3
unconditional  5 taken 6
        -: 1361:		}
        -: 1362:
        6: 1363:		break;
        6: 1363-block  0
unconditional  0 taken 6
        -: 1364:
    #####: 1365:	case S_IFLNK:
    #####: 1366:		linkname = realpath(ent, (char *)NULL);
    %%%%%: 1366-block  0
call    0 never executed
        -: 1367:
    #####: 1368:		if (linkname) {
branch  0 never executed
branch  1 never executed
    #####: 1369:			color = ln_c;
    #####: 1370:			free(linkname);
    %%%%%: 1370-block  0
unconditional  0 never executed
        -: 1371:		}
        -: 1372:
        -: 1373:		else
    #####: 1374:			color = or_c;
    %%%%%: 1374-block  0
unconditional  0 never executed
        -: 1375:
    #####: 1376:		break;
    %%%%%: 1376-block  0
unconditional  0 never executed
        -: 1377:
    #####: 1378:	case S_IFIFO:
    #####: 1379:		color = pi_c;
    #####: 1380:		break;
    %%%%%: 1380-block  0
unconditional  0 never executed
    #####: 1381:	case S_IFBLK:
    #####: 1382:		color = bd_c;
    #####: 1383:		break;
    %%%%%: 1383-block  0
unconditional  0 never executed
    #####: 1384:	case S_IFCHR:
    #####: 1385:		color = cd_c;
    #####: 1386:		break;
    %%%%%: 1386-block  0
unconditional  0 never executed
    #####: 1387:	case S_IFSOCK:
    #####: 1388:		color = so_c;
    #####: 1389:		break;
    %%%%%: 1389-block  0
unconditional  0 never executed
        -: 1390:
        -: 1391:	/* In case all the above conditions are false... */
    #####: 1392:	default:
    #####: 1393:		color = no_c;
    #####: 1394:		break;
    %%%%%: 1394-block  0
unconditional  0 never executed
        -: 1395:	}
        -: 1396:
       6*: 1397:	printf("%s%s%s%s%s%s%s%-*s", el_c, index, df_c, color,
        6: 1397-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6: 1397-block  1
unconditional  2 taken 6
    %%%%%: 1397-block  2
unconditional  3 never executed
        6: 1397-block  3
call    4 returned 6
        -: 1398:	    ent, df_c, new_line ? "\n" : "", pad, "");
        -: 1399:
        6: 1400:	free(index);
unconditional  0 taken 6
        -: 1401:}
        -: 1402:
        -: 1403:size_t
function get_colorschemes called 1 returned 100% blocks executed 86%
        1: 1404:get_colorschemes(void)
        -: 1405:{
        1: 1406:	if (!COLORS_DIR)
        1: 1406-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1407:		return 0;
    %%%%%: 1407-block  0
unconditional  0 never executed
        -: 1408:
        -: 1409:	struct stat attr;
        -: 1410:
        1: 1411:	if (stat(COLORS_DIR, &attr) == -1)
        1: 1411-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1412:		return 0;
    %%%%%: 1412-block  0
unconditional  0 never executed
        -: 1413:
        1: 1414:	int schemes_total = count_dir(COLORS_DIR);
        1: 1414-block  0
call    0 returned 1
        -: 1415:
        1: 1416:	if (schemes_total <= 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1417:		return 0;
    %%%%%: 1417-block  0
unconditional  0 never executed
        -: 1418:
        1: 1419:	color_schemes = (char **)xcalloc((size_t)schemes_total + 2, sizeof(char *));
        1: 1419-block  0
call    0 returned 1
        -: 1420:
        1: 1421:	size_t i = 0;
        -: 1422:
        -: 1423:	DIR *dir_p;
        -: 1424:	struct dirent *ent;
        -: 1425:
        -: 1426:	/* count_dir already opened and read this directory succesfully,
        -: 1427:	 * so that we don't need to check opendir for errors */
        1: 1428:	dir_p = opendir(COLORS_DIR);
call    0 returned 1
        -: 1429:
       23: 1430:	while ((ent = readdir(dir_p)) != NULL) {
unconditional  0 taken 1
       23: 1430-block  0
call    1 returned 23
branch  2 taken 22
branch  3 taken 1 (fallthrough)
        -: 1431:
        -: 1432:		/* Skipp . and .. */
       22: 1433:		char *name = ent->d_name;
        -: 1434:
       22: 1435:		if (*name == '.' && (!name[1] || (name[1] == '.' && !name[2])))
       22: 1435-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 20
        2: 1435-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 1435-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1: 1435-block  3
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        2: 1436:			continue;
        2: 1436-block  0
unconditional  0 taken 2
        -: 1437:
       20: 1438:		char *ret = strchr(name, '.');
        -: 1439:
        -: 1440:		/* If the file contains not dot, or if its extension is not
        -: 1441:		 * .cfm, or if it's just a hidden file named ".cfm", skip it */
      20*: 1442:		if (!ret || strcmp(ret, ".cfm") != 0 || ret == name)
       20: 1442-block  0
branch  0 taken 20 (fallthrough)
branch  1 taken 0
       20: 1442-block  1
branch  2 taken 20 (fallthrough)
branch  3 taken 0
       20: 1442-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 20
    #####: 1443:			continue;
    %%%%%: 1443-block  0
unconditional  0 never executed
        -: 1444:
       20: 1445:		*ret = '\0';
        -: 1446:
       20: 1447:		color_schemes[i++] = savestring(name, strlen(name));
       20: 1447-block  0
call    0 returned 20
unconditional  1 taken 20
        -: 1448:	}
        -: 1449:
        1: 1450:	color_schemes[i] = (char *)NULL;
        -: 1451:
        1: 1452:	closedir(dir_p);
        1: 1452-block  0
call    0 returned 1
        -: 1453:
        1: 1454:	return i;
unconditional  0 taken 1
        -: 1455:}
        -: 1456:
        -: 1457:/* List color codes for file types used by the program */
        -: 1458:void
function color_codes called 0 returned 0% blocks executed 0%
    #####: 1459:color_codes(void)
        -: 1460:{
    #####: 1461:	if (!colorize) {
    %%%%%: 1461-block  0
branch  0 never executed
branch  1 never executed
    #####: 1462:		printf(_("%s: Currently running without colors\n"),
    %%%%%: 1462-block  0
call    0 never executed
        -: 1463:		    PROGRAM_NAME);
    #####: 1464:		return;
unconditional  0 never executed
        -: 1465:	}
        -: 1466:
    #####: 1467:	if (ext_colors_n)
    %%%%%: 1467-block  0
branch  0 never executed
branch  1 never executed
    #####: 1468:		printf(_("%sFile type colors%s\n\n"), bold, df_c);
    %%%%%: 1468-block  0
call    0 never executed
unconditional  1 never executed
        -: 1469:
    #####: 1470:	printf(_(" %sfile name%s: Directory with no read permission (nd)\n"),
    %%%%%: 1470-block  0
call    0 never executed
        -: 1471:	    nd_c, df_c);
    #####: 1472:	printf(_(" %sfile name%s: File with no read permission (nf)\n"),
call    0 never executed
        -: 1473:	    nf_c, df_c);
    #####: 1474:	printf(_(" %sfile name%s: Directory* (di)\n"), di_c, df_c);
call    0 never executed
    #####: 1475:	printf(_(" %sfile name%s: EMPTY directory (ed)\n"), ed_c, df_c);
call    0 never executed
    #####: 1476:	printf(_(" %sfile name%s: EMPTY directory with no read "
call    0 never executed
        -: 1477:		 "permission (ne)\n"),
        -: 1478:	    ne_c, df_c);
    #####: 1479:	printf(_(" %sfile name%s: Executable file (ex)\n"), ex_c, df_c);
call    0 never executed
    #####: 1480:	printf(_(" %sfile name%s: Empty executable file (ee)\n"), ee_c, df_c);
call    0 never executed
    #####: 1481:	printf(_(" %sfile name%s: Block special file (bd)\n"), bd_c, df_c);
call    0 never executed
    #####: 1482:	printf(_(" %sfile name%s: Symbolic link* (ln)\n"), ln_c, df_c);
call    0 never executed
    #####: 1483:	printf(_(" %sfile name%s: Broken symbolic link (or)\n"), or_c, df_c);
call    0 never executed
    #####: 1484:	printf(_(" %sfile name%s: Multi-hardlink (mh)\n"), mh_c, df_c);
call    0 never executed
    #####: 1485:	printf(_(" %sfile name%s: Socket file (so)\n"), so_c, df_c);
call    0 never executed
    #####: 1486:	printf(_(" %sfile name%s: Pipe or FIFO special file (pi)\n"), pi_c, df_c);
call    0 never executed
    #####: 1487:	printf(_(" %sfile name%s: Character special file (cd)\n"), cd_c, df_c);
call    0 never executed
    #####: 1488:	printf(_(" %sfile name%s: Regular file (fi)\n"), fi_c, df_c);
call    0 never executed
    #####: 1489:	printf(_(" %sfile name%s: Empty (zero-lenght) file (ef)\n"), ef_c, df_c);
call    0 never executed
    #####: 1490:	printf(_(" %sfile name%s: SUID file (su)\n"), su_c, df_c);
call    0 never executed
    #####: 1491:	printf(_(" %sfile name%s: SGID file (sg)\n"), sg_c, df_c);
call    0 never executed
    #####: 1492:	printf(_(" %sfile name%s: File with capabilities (ca)\n"), ca_c, df_c);
call    0 never executed
    #####: 1493:	printf(_(" %sfile name%s: Sticky and NOT other-writable "
call    0 never executed
        -: 1494:		 "directory* (st)\n"),
        -: 1495:	    st_c, df_c);
    #####: 1496:	printf(_(" %sfile name%s: Sticky and other-writable "
call    0 never executed
        -: 1497:		 "directory* (tw)\n"),
        -: 1498:	    tw_c, df_c);
    #####: 1499:	printf(_(" %sfile name%s: Other-writable and NOT sticky "
call    0 never executed
        -: 1500:		 "directory* (ow)\n"),
        -: 1501:	    ow_c, df_c);
    #####: 1502:	printf(_(" %sfile name%s: Unknown file type (no)\n"), no_c, df_c);
call    0 never executed
    #####: 1503:	printf(_(" %sfile name%s: Unaccessible (non-stat'able) file "
call    0 never executed
        -: 1504:		 "(uf)\n"),
        -: 1505:	    uf_c, df_c);
        -: 1506:
    #####: 1507:	printf(_("\n*The slash followed by a number (/xx) after directories "
call    0 never executed
        -: 1508:		 "or symbolic links to directories indicates the amount of "
        -: 1509:		 "files contained by the corresponding directory, excluding "
        -: 1510:		 "self (.) and parent (..) directories.\n"));
    #####: 1511:	printf(_("\nThe value in parentheses is the code that is to be used "
call    0 never executed
        -: 1512:		 "to modify the color of the corresponding filetype in the "
        -: 1513:		 "color scheme file (in the \"FiletypeColors\" line), "
        -: 1514:		 "using the same ANSI style color format used by dircolors. "
        -: 1515:		 "By default, %s uses only 8 colors, but you can use 256 "
        -: 1516:		 "and RGB colors as well.\n\n"), PROGRAM_NAME);
        -: 1517:
    #####: 1518:	if (ext_colors_n) {
branch  0 never executed
branch  1 never executed
        -: 1519:		size_t i, j;
        -: 1520:
    #####: 1521:		printf(_("%sExtension colors%s\n\n"), bold, df_c);
    %%%%%: 1521-block  0
call    0 never executed
    #####: 1522:		for (i = 0; i < ext_colors_n; i++) {
unconditional  0 never executed
    %%%%%: 1522-block  0
unconditional  1 never executed
    %%%%%: 1522-block  1
branch  2 never executed
branch  3 never executed
    #####: 1523:			char *ret = strrchr(ext_colors[i], '=');
        -: 1524:
    #####: 1525:			if (!ret)
    %%%%%: 1525-block  0
branch  0 never executed
branch  1 never executed
    #####: 1526:				continue;
    %%%%%: 1526-block  0
unconditional  0 never executed
        -: 1527:
    #####: 1528:			printf(" \x1b[%sm", ret + 1);
    %%%%%: 1528-block  0
call    0 never executed
        -: 1529:
    #####: 1530:			for (j = 0; ext_colors[i][j] != '='; j++)
unconditional  0 never executed
unconditional  1 never executed
    %%%%%: 1530-block  0
branch  2 never executed
branch  3 never executed
    #####: 1531:				putchar(ext_colors[i][j]);
    %%%%%: 1531-block  0
call    0 never executed
        -: 1532:
    #####: 1533:			puts("\x1b[0m");
    %%%%%: 1533-block  0
call    0 never executed
unconditional  1 never executed
        -: 1534:		}
        -: 1535:
    #####: 1536:		putchar('\n');
    %%%%%: 1536-block  0
call    0 never executed
unconditional  1 never executed
        -: 1537:	}
        -: 1538:}
