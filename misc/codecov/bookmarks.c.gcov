        -:    0:Source:bookmarks.c
        -:    1:/* bookmarks.c -- bookmarking functions */
        -:    2:
        -:    3:/*
        -:    4: * This file is part of CliFM
        -:    5: * 
        -:    6: * Copyright (C) 2016-2021, L. Abramovich <johndoe.arch@outlook.com>
        -:    7: * All rights reserved.
        -:    8:
        -:    9: * CliFM is free software; you can redistribute it and/or modify
        -:   10: * it under the terms of the GNU General Public License as published by
        -:   11: * the Free Software Foundation; either version 2 of the License, or
        -:   12: * (at your option) any later version.
        -:   13: *
        -:   14: * CliFM is distributed in the hope that it will be useful,
        -:   15: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   16: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   17: * GNU General Public License for more details.
        -:   18: *
        -:   19: * You should have received a copy of the GNU General Public License
        -:   20: * along with this program; if not, write to the Free Software
        -:   21: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
        -:   22: * MA 02110-1301, USA.
        -:   23:*/
        -:   24:
        -:   25:#include "helpers.h"
        -:   26:
        -:   27:#include <errno.h>
        -:   28:#include <stdio.h>
        -:   29:#include <string.h>
        -:   30:#include <sys/stat.h>
        -:   31:#include <unistd.h>
        -:   32:
        -:   33:#include "aux.h"
        -:   34:#include "bookmarks.h"
        -:   35:#include "checks.h"
        -:   36:#include "exec.h"
        -:   37:#include "file_operations.h"
        -:   38:#include "init.h"
        -:   39:#include "mime.h"
        -:   40:#include "readline.h"
        -:   41:#include "messages.h"
        -:   42:
        -:   43:void
function free_bookmarks called 21 returned 100% blocks executed 100%
       21:   44:free_bookmarks(void)
        -:   45:{
       21:   46:	if (!bm_n)
       21:   46-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 20
        1:   47:		return;
        1:   47-block  0
unconditional  0 taken 1
        -:   48:
        -:   49:	size_t i;
      336:   50:	for (i = 0; i < bm_n; i++) {
       20:   50-block  0
unconditional  0 taken 20
      316:   50-block  1
unconditional  1 taken 316
      336:   50-block  2
branch  2 taken 316
branch  3 taken 20 (fallthrough)
      316:   51:		if (bookmarks[i].shortcut)
      316:   51-block  0
branch  0 taken 316 (fallthrough)
branch  1 taken 0
      316:   52:			free(bookmarks[i].shortcut);
      316:   52-block  0
unconditional  0 taken 316
        -:   53:
      316:   54:		if (bookmarks[i].name)
      316:   54-block  0
branch  0 taken 260 (fallthrough)
branch  1 taken 56
      260:   55:			free(bookmarks[i].name);
      260:   55-block  0
unconditional  0 taken 260
        -:   56:
      316:   57:		if (bookmarks[i].path)
      316:   57-block  0
branch  0 taken 316 (fallthrough)
branch  1 taken 0
      316:   58:			free(bookmarks[i].path);
      316:   58-block  0
unconditional  0 taken 316
        -:   59:	}
        -:   60:
       20:   61:	free(bookmarks);
       20:   62:	bookmarks = (struct bookmarks_t *)NULL;
        -:   63:
      280:   64:	for (i = 0; bookmark_names[i]; i++)
       20:   64-block  0
unconditional  0 taken 20
      280:   64-block  1
branch  1 taken 260
branch  2 taken 20 (fallthrough)
      260:   65:		free(bookmark_names[i]);
      260:   65-block  0
unconditional  0 taken 260
       20:   66:	free(bookmark_names);
       20:   67:	bookmark_names = (char **)NULL;
       20:   68:	bm_n = 0;
       20:   69:	return;
       20:   69-block  0
unconditional  0 taken 20
        -:   70:}
        -:   71:
        -:   72:static char **
function bm_prompt called 11 returned 100% blocks executed 100%
       11:   73:bm_prompt(void)
        -:   74:{
       11:   75:	char *bm_sel = (char *)NULL;
       11:   76:	printf(_("%s%s\nEnter '%c' to edit your bookmarks or '%c' to quit.\n"),
       11:   76-block  0
call    0 returned 11
call    1 returned 11
        -:   77:	    NC, df_c, 'e', 'q');
        -:   78:
       22:   79:	while (!bm_sel)
unconditional  0 taken 11
       22:   79-block  0
branch  1 taken 11
branch  2 taken 11 (fallthrough)
       11:   80:		bm_sel = rl_no_hist(_("Choose a bookmark: "));
       11:   80-block  0
call    0 returned 11
call    1 returned 11
unconditional  2 taken 11
        -:   81:
       11:   82:	char **comm_bm = get_substr(bm_sel, ' ');
       11:   82-block  0
call    0 returned 11
       11:   83:	free(bm_sel);
       11:   84:	return comm_bm;
unconditional  0 taken 11
        -:   85:}
        -:   86:
        -:   87:static int
function bookmark_del called 3 returned 100% blocks executed 54%
        3:   88:bookmark_del(char *name)
        -:   89:{
        3:   90:	FILE *bm_fp = NULL;
        3:   91:	bm_fp = fopen(bm_file, "r");
        3:   91-block  0
call    0 returned 3
        3:   92:	if (!bm_fp)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:   93:		return EXIT_FAILURE;
    %%%%%:   93-block  0
unconditional  0 never executed
        -:   94:
        3:   95:	size_t i = 0;
        -:   96:
        -:   97:	/* Get bookmarks from file */
        3:   98:	size_t line_size = 0;
        3:   99:	char *line = (char *)NULL, **bms = (char **)NULL;
        3:  100:	size_t bmn = 0;
        3:  101:	ssize_t line_len = 0;
        -:  102:
       81:  103:	while ((line_len = getline(&line, &line_size, bm_fp)) > 0) {
        3:  103-block  0
unconditional  0 taken 3
       81:  103-block  1
call    1 returned 81
branch  2 taken 78
branch  3 taken 3 (fallthrough)
       78:  104:		if (!line || !*line || *line == '#' || *line == '\n')
       78:  104-block  0
branch  0 taken 78 (fallthrough)
branch  1 taken 0
       78:  104-block  1
branch  2 taken 78 (fallthrough)
branch  3 taken 0
       78:  104-block  2
branch  4 taken 69 (fallthrough)
branch  5 taken 9
       69:  104-block  3
branch  6 taken 0 (fallthrough)
branch  7 taken 69
        9:  105:			continue;
        9:  105-block  0
unconditional  0 taken 9
        -:  106:
       69:  107:		int slash = 0;
      677:  108:		for (i = 0; i < (size_t)line_len; i++) {
       69:  108-block  0
unconditional  0 taken 69
      608:  108-block  1
unconditional  1 taken 608
      677:  108-block  2
branch  2 taken 677
branch  3 taken 0 (fallthrough)
      677:  109:			if (line[i] == '/') {
      677:  109-block  0
branch  0 taken 69 (fallthrough)
branch  1 taken 608
       69:  110:				slash = 1;
       69:  111:				break;
       69:  111-block  0
unconditional  0 taken 69
        -:  112:			}
        -:  113:		}
        -:  114:
      69*:  115:		if (!slash)
       69:  115-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 69
    #####:  116:			continue;
    %%%%%:  116-block  0
unconditional  0 never executed
        -:  117:
       69:  118:		if (line[line_len - 1] == '\n')
       69:  118-block  0
branch  0 taken 69 (fallthrough)
branch  1 taken 0
       69:  119:			line[line_len - 1] = '\0';
       69:  119-block  0
unconditional  0 taken 69
        -:  120:
       69:  121:		bms = (char **)xrealloc(bms, (bmn + 1) * sizeof(char *));
       69:  121-block  0
call    0 returned 69
       69:  122:		bms[bmn++] = savestring(line, (size_t)line_len);
call    0 returned 69
unconditional  1 taken 69
        -:  123:	}
        -:  124:
        3:  125:	free(line);
        3:  126:	line = (char *)NULL;
        -:  127:
        3:  128:	if (!bmn) {
        3:  128-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  129:		puts(_("bookmarks: There are no bookmarks"));
    %%%%%:  129-block  0
call    0 never executed
call    1 never executed
    #####:  130:		fclose(bm_fp);
call    0 never executed
    #####:  131:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  132:	}
        -:  133:
        3:  134:	char **del_elements = (char **)NULL;
        3:  135:	int cmd_line = -1;
        -:  136:	/* This variable let us know two things: a) bookmark name was
        -:  137:	 * specified in command line; b) the index of this name in the
        -:  138:	 * bookmarks array. It is initialized as -1 since the index name
        -:  139:	 * could be zero */
        -:  140:
        3:  141:	if (name) {
        3:  141-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
       45:  142:		for (i = 0; i < bmn; i++) {
        2:  142-block  0
unconditional  0 taken 2
       43:  142-block  1
unconditional  1 taken 43
       45:  142-block  2
branch  2 taken 45
branch  3 taken 0 (fallthrough)
       45:  143:			char *bm_name = strbtw(bms[i], ']', ':');
       45:  143-block  0
call    0 returned 45
       45:  144:			if (!bm_name)
branch  0 taken 8 (fallthrough)
branch  1 taken 37
        8:  145:				continue;
        8:  145-block  0
unconditional  0 taken 8
       37:  146:			if (strcmp(name, bm_name) == 0) {
       37:  146-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 35
        2:  147:				free(bm_name);
        2:  148:				cmd_line = (int)i;
        2:  149:				break;
        2:  149-block  0
unconditional  0 taken 2
        -:  150:			}
       35:  151:			free(bm_name);
       35:  151-block  0
unconditional  0 taken 35
        -:  152:		}
        -:  153:	}
        -:  154:
        -:  155:	/* If a valid bookmark name was passed in command line, copy the
        -:  156:	 * corresponding bookmark index (plus 1, as if it were typed in the
        -:  157:	 * bookmarks screen) to the del_elements array */
        3:  158:	if (cmd_line != -1) {
        3:  158-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  159:		del_elements = (char **)xnmalloc(2, sizeof(char *));
        2:  159-block  0
call    0 returned 2
       2*:  160:		del_elements[0] = (char *)xnmalloc((size_t)DIGINUM(cmd_line + 1) + 1, sizeof(char));
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  160-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    %%%%%:  160-block  1
branch  4 never executed
branch  5 never executed
    %%%%%:  160-block  2
branch  6 never executed
branch  7 never executed
    %%%%%:  160-block  3
branch  8 never executed
branch  9 never executed
    %%%%%:  160-block  4
branch 10 never executed
branch 11 never executed
    %%%%%:  160-block  5
branch 12 never executed
branch 13 never executed
    %%%%%:  160-block  6
branch 14 never executed
branch 15 never executed
    %%%%%:  160-block  7
branch 16 never executed
branch 17 never executed
    %%%%%:  160-block  8
unconditional 18 never executed
    %%%%%:  160-block  9
unconditional 19 never executed
    %%%%%:  160-block 10
unconditional 20 never executed
    %%%%%:  160-block 11
unconditional 21 never executed
    %%%%%:  160-block 12
unconditional 22 never executed
    %%%%%:  160-block 13
unconditional 23 never executed
    %%%%%:  160-block 14
unconditional 24 never executed
    %%%%%:  160-block 15
unconditional 25 never executed
    %%%%%:  160-block 16
unconditional 26 never executed
    %%%%%:  160-block 17
unconditional 27 never executed
    %%%%%:  160-block 18
unconditional 28 never executed
    %%%%%:  160-block 19
unconditional 29 never executed
    %%%%%:  160-block 20
unconditional 30 never executed
    %%%%%:  160-block 21
unconditional 31 never executed
    %%%%%:  160-block 22
unconditional 32 never executed
        2:  160-block 23
unconditional 33 taken 2
        2:  160-block 24
unconditional 34 taken 2
    %%%%%:  160-block 25
unconditional 35 never executed
        2:  160-block 26
call   36 returned 2
        2:  161:		sprintf(del_elements[0], "%d", cmd_line + 1);
        2:  162:		del_elements[1] = (char *)NULL;
unconditional  0 taken 2
        -:  163:	}
        -:  164:
        -:  165:	/* If bookmark name was passed but it is not a valid bookmark */
        1:  166:	else if (name) {
        1:  166-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  167:		fprintf(stderr, _("bookmarks: %s: No such bookmark\n"), name);
    %%%%%:  167-block  0
call    0 never executed
call    1 never executed
    #####:  168:		for (i = 0; i < bmn; i++)
unconditional  0 never executed
    %%%%%:  168-block  0
branch  1 never executed
branch  2 never executed
    #####:  169:			free(bms[i]);
    %%%%%:  169-block  0
unconditional  0 never executed
    #####:  170:		free(bms);
    #####:  171:		fclose(bm_fp);
    %%%%%:  171-block  0
call    0 never executed
    #####:  172:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  173:	}
        -:  174:
        -:  175:	/* If not name, list bookmarks and get user input */
        -:  176:	else {
        1:  177:		printf(_("%sBookmarks%s\n\n"), BOLD, df_c);
        1:  177-block  0
call    0 returned 1
call    1 returned 1
        -:  178:
       24:  179:		for (i = 0; i < bmn; i++)
unconditional  0 taken 1
unconditional  1 taken 23
       24:  179-block  0
branch  2 taken 23
branch  3 taken 1 (fallthrough)
       23:  180:			printf("%s%zu %s%s%s\n", el_c, i + 1, bm_c, bms[i], df_c);
       23:  180-block  0
call    0 returned 23
        -:  181:
        -:  182:		/* Get user input */
        1:  183:		printf(_("\n%sEnter '%c' to quit.\n"), df_c, 'q');
        1:  183-block  0
call    0 returned 1
call    1 returned 1
        1:  184:		char *input = (char *)NULL;
        2:  185:		while (!input)
unconditional  0 taken 1
        2:  185-block  0
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1:  186:			input = rl_no_hist(_("Bookmark(s) to be deleted "
        1:  186-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        -:  187:								"(ex: 1 2-6, or *): "));
        1:  188:		del_elements = get_substr(input, ' ');
        1:  188-block  0
call    0 returned 1
        1:  189:		free(input);
        1:  190:		input = (char *)NULL;
        -:  191:
        1:  192:		if (!del_elements) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  193:			for (i = 0; i < bmn; i++)
    %%%%%:  193-block  0
unconditional  0 never executed
    %%%%%:  193-block  1
branch  1 never executed
branch  2 never executed
    #####:  194:				free(bms[i]);
    %%%%%:  194-block  0
unconditional  0 never executed
    #####:  195:			free(bms);
    #####:  196:			fclose(bm_fp);
    %%%%%:  196-block  0
call    0 never executed
    #####:  197:			fprintf(stderr, _("bookmarks: Error parsing input\n"));
call    0 never executed
call    1 never executed
    #####:  198:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  199:		}
        -:  200:	}
        -:  201:
        -:  202:	/* We have input */
        -:  203:	/* If quit */
        -:  204:	/* I inspect all substrings entered by the user for "q" before any
        -:  205:	 * other value to prevent some accidental deletion, like "1 q", or
        -:  206:	 * worst, "* q" */
        6:  207:	for (i = 0; del_elements[i]; i++) {
        3:  207-block  0
unconditional  0 taken 3
        3:  207-block  1
unconditional  1 taken 3
        6:  207-block  2
branch  2 taken 3
branch  3 taken 3 (fallthrough)
        3:  208:		int quit = 0;
        -:  209:
        3:  210:		if (strcmp(del_elements[i], "q") == 0) {
        3:  210-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  211:			quit = 1;
    %%%%%:  211-block  0
unconditional  0 never executed
        3:  212:		} else if (is_number(del_elements[i]) && (atoi(del_elements[i]) <= 0
        3:  212-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0
        3:  212-block  1
branch  3 taken 3 (fallthrough)
branch  4 taken 0
        3:  213:		|| atoi(del_elements[i]) > (int)bmn)) {
        3:  213-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  214:			fprintf(stderr, _("bookmarks: %s: No such bookmark\n"),
call    0 never executed
    #####:  215:			    del_elements[i]);
    %%%%%:  215-block  0
call    0 never executed
    #####:  216:			quit = 1;
unconditional  0 never executed
        -:  217:		}
        -:  218:
        3:  219:		if (quit) {
        3:  219-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  220:			for (i = 0; i < bmn; i++)
    %%%%%:  220-block  0
unconditional  0 never executed
    %%%%%:  220-block  1
branch  1 never executed
branch  2 never executed
    #####:  221:				free(bms[i]);
    %%%%%:  221-block  0
unconditional  0 never executed
    #####:  222:			free(bms);
        -:  223:
    #####:  224:			for (i = 0; del_elements[i]; i++)
    %%%%%:  224-block  0
unconditional  0 never executed
    %%%%%:  224-block  1
branch  1 never executed
branch  2 never executed
    #####:  225:				free(del_elements[i]);
    %%%%%:  225-block  0
unconditional  0 never executed
    #####:  226:			free(del_elements);
    #####:  227:			fclose(bm_fp);
    %%%%%:  227-block  0
call    0 never executed
    #####:  228:			return EXIT_SUCCESS;
unconditional  0 never executed
        -:  229:		}
        -:  230:	}
        -:  231:
        -:  232:	/* If "*", simply remove the bookmarks file */
        -:  233:	/* If there is some "*" in the input line (like "1 5 6-9 *"), it
        -:  234:	 * makes no sense to remove singles bookmarks: Just delete all of
        -:  235:	 * them at once */
        6:  236:	for (i = 0; del_elements[i]; i++) {
        3:  236-block  0
unconditional  0 taken 3
        3:  236-block  1
unconditional  1 taken 3
        6:  236-block  2
branch  2 taken 3
branch  3 taken 3 (fallthrough)
        3:  237:		if (strcmp(del_elements[i], "*") == 0) {
        3:  237-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  238:			/* Create a backup copy of the bookmarks file, just in case */
    #####:  239:			char *bk_file = (char *)NULL;
    #####:  240:			bk_file = (char *)xcalloc(strlen(config_dir) + 14,
    %%%%%:  240-block  0
call    0 never executed
        -:  241:			    sizeof(char));
    #####:  242:			sprintf(bk_file, "%s/bookmarks.bk", config_dir);
    #####:  243:			char *tmp_cmd[] = {"cp", bm_file, bk_file, NULL};
        -:  244:
    #####:  245:			int ret = launch_execve(tmp_cmd, FOREGROUND, E_NOFLAG);
call    0 never executed
        -:  246:			/* Remove the bookmarks file, free stuff, and exit */
    #####:  247:			if (ret == EXIT_SUCCESS) {
branch  0 never executed
branch  1 never executed
    #####:  248:				unlink(bm_file);
    %%%%%:  248-block  0
call    0 never executed
    #####:  249:				printf(_("bookmarks: All bookmarks were deleted\n "
call    0 never executed
call    1 never executed
        -:  250:					 "However, a backup copy was created (%s)\n"), bk_file);
    #####:  251:				free(bk_file);
    #####:  252:				bk_file = (char *)NULL;
unconditional  0 never executed
        -:  253:			} else {
    #####:  254:				printf(_("bookmarks: Error creating backup file. No "
    %%%%%:  254-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  255:					 "bookmark was deleted\n"));
        -:  256:			}
        -:  257:
    #####:  258:			for (i = 0; i < bmn; i++)
    %%%%%:  258-block  0
unconditional  0 never executed
    %%%%%:  258-block  1
branch  1 never executed
branch  2 never executed
    #####:  259:				free(bms[i]);
    %%%%%:  259-block  0
unconditional  0 never executed
    #####:  260:			free(bms);
        -:  261:
    #####:  262:			for (i = 0; del_elements[i]; i++)
    %%%%%:  262-block  0
unconditional  0 never executed
    %%%%%:  262-block  1
branch  1 never executed
branch  2 never executed
    #####:  263:				free(del_elements[i]);
    %%%%%:  263-block  0
unconditional  0 never executed
    #####:  264:			free(del_elements);
        -:  265:
    #####:  266:			fclose(bm_fp);
    %%%%%:  266-block  0
call    0 never executed
        -:  267:			/* Update bookmark names for TAB completion */
        -:  268:			/*          get_bm_names(); */
    #####:  269:			free_bookmarks();
call    0 never executed
    #####:  270:			load_bookmarks();
call    0 never executed
        -:  271:
        -:  272:			/* If the argument "*" was specified in command line */
    #####:  273:			if (cmd_line != -1)
branch  0 never executed
branch  1 never executed
    #####:  274:				fputs(_("All bookmarks succesfully removed\n"), stdout);
    %%%%%:  274-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  275:
    #####:  276:			return EXIT_SUCCESS;
    %%%%%:  276-block  0
unconditional  0 never executed
        -:  277:		}
        -:  278:	}
        -:  279:
        -:  280:	/* Remove single bookmarks */
        -:  281:	/* Open a temporary file */
        3:  282:	char *tmp_file = (char *)NULL;
        3:  283:	tmp_file = (char *)xnmalloc(strlen(config_dir) + 8, sizeof(char));
        3:  283-block  0
call    0 returned 3
        3:  284:	sprintf(tmp_file, "%s/bm_tmp", config_dir);
        -:  285:
        3:  286:	FILE *tmp_fp = fopen(tmp_file, "w+");
call    0 returned 3
        3:  287:	if (!tmp_fp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  288:		for (i = 0; i < bmn; i++)
    %%%%%:  288-block  0
unconditional  0 never executed
    %%%%%:  288-block  1
branch  1 never executed
branch  2 never executed
    #####:  289:			free(bms[i]);
    %%%%%:  289-block  0
unconditional  0 never executed
    #####:  290:		free(bms);
        -:  291:
    #####:  292:		for (i = 0; del_elements[i]; i++)
    %%%%%:  292-block  0
unconditional  0 never executed
    %%%%%:  292-block  1
branch  1 never executed
branch  2 never executed
    #####:  293:			free(del_elements[i]);
    %%%%%:  293-block  0
unconditional  0 never executed
    #####:  294:		free(del_elements);
        -:  295:
    #####:  296:		fclose(bm_fp);
    %%%%%:  296-block  0
call    0 never executed
    #####:  297:		fprintf(stderr, _("bookmarks: Error creating temporary file\n"));
call    0 never executed
call    1 never executed
        -:  298:
    #####:  299:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  300:	}
        -:  301:
        -:  302:	/* Go back to the beginning of the bookmarks file */
        3:  303:	fseek(bm_fp, 0, SEEK_SET);
        3:  303-block  0
call    0 returned 3
        -:  304:
        -:  305:	/* Dump into the tmp file everything except bookmarks marked for
        -:  306:	 * deletion */
        -:  307:
        3:  308:	char *lineb = (char *)NULL;
       81:  309:	while ((line_len = getline(&lineb, &line_size, bm_fp)) > 0) {
unconditional  0 taken 3
       81:  309-block  0
call    1 returned 81
branch  2 taken 78
branch  3 taken 3 (fallthrough)
       78:  310:		if (lineb[line_len - 1] == '\n')
       78:  310-block  0
branch  0 taken 78 (fallthrough)
branch  1 taken 0
       78:  311:			lineb[line_len - 1] = '\0';
       78:  311-block  0
unconditional  0 taken 78
        -:  312:
       78:  313:		int bm_found = 0;
        -:  314:		size_t j;
        -:  315:
      156:  316:		for (j = 0; del_elements[j]; j++) {
       78:  316-block  0
unconditional  0 taken 78
       78:  316-block  1
unconditional  1 taken 78
      156:  316-block  2
branch  2 taken 78
branch  3 taken 78 (fallthrough)
      78*:  317:			if (!is_number(del_elements[j]))
       78:  317-block  0
call    0 returned 78
branch  1 taken 0 (fallthrough)
branch  2 taken 78
    #####:  318:				continue;
    %%%%%:  318-block  0
unconditional  0 never executed
       78:  319:			if (strcmp(bms[atoi(del_elements[j]) - 1], lineb) == 0)
       78:  319-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 75
        3:  320:				bm_found = 1;
        3:  320-block  0
unconditional  0 taken 3
        -:  321:		}
        -:  322:
       78:  323:		if (bm_found)
       78:  323-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 75
        3:  324:			continue;
        3:  324-block  0
unconditional  0 taken 3
        -:  325:
       75:  326:		fprintf(tmp_fp, "%s\n", lineb);
       75:  326-block  0
call    0 returned 75
unconditional  1 taken 75
        -:  327:	}
        -:  328:
        3:  329:	free(lineb);
        -:  330:
        -:  331:	/* Free stuff */
        6:  332:	for (i = 0; del_elements[i]; i++)
        3:  332-block  0
unconditional  0 taken 3
        6:  332-block  1
branch  1 taken 3
branch  2 taken 3 (fallthrough)
        3:  333:		free(del_elements[i]);
        3:  333-block  0
unconditional  0 taken 3
        3:  334:	free(del_elements);
        -:  335:
       72:  336:	for (i = 0; i < bmn; i++)
        3:  336-block  0
unconditional  0 taken 3
       72:  336-block  1
branch  1 taken 69
branch  2 taken 3 (fallthrough)
       69:  337:		free(bms[i]);
       69:  337-block  0
unconditional  0 taken 69
        3:  338:	free(bms);
        -:  339:
        -:  340:	/* Close files */
        3:  341:	fclose(bm_fp);
        3:  341-block  0
call    0 returned 3
        3:  342:	fclose(tmp_fp);
call    0 returned 3
        -:  343:
        -:  344:	/* Remove the old bookmarks file and make the tmp file the new
        -:  345:	 * bookmarks file*/
        3:  346:	unlink(bm_file);
call    0 returned 3
        3:  347:	rename(tmp_file, bm_file);
call    0 returned 3
        3:  348:	free(tmp_file);
        -:  349:
        -:  350:	/* Update bookmark names for TAB completion */
        -:  351:	/*  get_bm_names(); */
        3:  352:	free_bookmarks();
call    0 returned 3
        3:  353:	load_bookmarks();
call    0 returned 3
        -:  354:
        -:  355:	/* If the bookmark to be removed was specified in command line */
        3:  356:	if (cmd_line != -1)
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  357:		printf(_("Successfully removed '%s'\n"), name);
        2:  357-block  0
call    0 returned 2
call    1 returned 2
unconditional  2 taken 2
        -:  358:
        3:  359:	return EXIT_SUCCESS;
        3:  359-block  0
unconditional  0 taken 3
        -:  360:}
        -:  361:
        -:  362:static int
function bookmark_add called 2 returned 100% blocks executed 56%
        2:  363:bookmark_add(char *file)
        -:  364:{
        2:  365:	if (!file)
        2:  365-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  366:		return EXIT_FAILURE;
    %%%%%:  366-block  0
unconditional  0 never executed
        -:  367:
        2:  368:	int mod_file = 0;
        -:  369:	/* If not absolute path, prepend current path to file */
        2:  370:	if (*file != '/') {
        2:  370-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  371:		char *tmp_file = (char *)NULL;
        1:  372:		tmp_file = (char *)xnmalloc((strlen(ws[cur_ws].path) + strlen(file) + 2), sizeof(char));
        1:  372-block  0
call    0 returned 1
        1:  373:		sprintf(tmp_file, "%s/%s", ws[cur_ws].path, file);
        1:  374:		file = tmp_file;
        1:  375:		tmp_file = (char *)NULL;
        1:  376:		mod_file = 1;
unconditional  0 taken 1
        -:  377:	}
        -:  378:
        -:  379:	/* Check if FILE is an available path */
        -:  380:
        2:  381:	FILE *bm_fp = fopen(bm_file, "r");
        2:  381-block  0
call    0 returned 2
        2:  382:	if (!bm_fp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  383:		fprintf(stderr, _("bookmarks: Error opening the bookmarks file\n"));
    %%%%%:  383-block  0
call    0 never executed
call    1 never executed
    #####:  384:		if (mod_file)
branch  0 never executed
branch  1 never executed
    #####:  385:			free(file);
    %%%%%:  385-block  0
unconditional  0 never executed
        -:  386:
    #####:  387:		return EXIT_FAILURE;
    %%%%%:  387-block  0
unconditional  0 never executed
        -:  388:	}
        -:  389:
        2:  390:	int dup = 0;
        2:  391:	char **bms = (char **)NULL;
        2:  392:	size_t line_size = 0, i, bmn = 0;
        2:  393:	char *line = (char *)NULL;
        -:  394:
       52:  395:	while (getline(&line, &line_size, bm_fp) > 0) {
        2:  395-block  0
unconditional  0 taken 2
       52:  395-block  1
call    1 returned 52
branch  2 taken 50
branch  3 taken 2 (fallthrough)
       50:  396:		if (!line || !*line || *line == '#' || *line == '\n')
       50:  396-block  0
branch  0 taken 50 (fallthrough)
branch  1 taken 0
       50:  396-block  1
branch  2 taken 50 (fallthrough)
branch  3 taken 0
       50:  396-block  2
branch  4 taken 44 (fallthrough)
branch  5 taken 6
       44:  396-block  3
branch  6 taken 0 (fallthrough)
branch  7 taken 44
        6:  397:			continue;
        6:  397-block  0
unconditional  0 taken 6
        -:  398:
       44:  399:		char *tmp_line = (char *)NULL;
       44:  400:		tmp_line = strchr(line, '/');
       44:  401:		if (tmp_line) {
       44:  401-block  0
branch  0 taken 44 (fallthrough)
branch  1 taken 0
       44:  402:			size_t tmp_line_len = strlen(tmp_line);
        -:  403:
       44:  404:			if (tmp_line_len && tmp_line[tmp_line_len - 1] == '\n')
       44:  404-block  0
branch  0 taken 44 (fallthrough)
branch  1 taken 0
       44:  404-block  1
branch  2 taken 44 (fallthrough)
branch  3 taken 0
       44:  405:				tmp_line[tmp_line_len - 1] = '\0';
       44:  405-block  0
unconditional  0 taken 44
        -:  406:
       44:  407:			if (strcmp(tmp_line, file) == 0) {
       44:  407-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 44
    #####:  408:				fprintf(stderr, _("bookmarks: %s: Path already "
    %%%%%:  408-block  0
call    0 never executed
call    1 never executed
        -:  409:						  "bookmarked\n"),
        -:  410:				    file);
    #####:  411:				dup = 1;
    #####:  412:				break;
unconditional  0 never executed
        -:  413:			}
        -:  414:
       44:  415:			tmp_line = (char *)NULL;
       44:  415-block  0
unconditional  0 taken 44
        -:  416:		}
        -:  417:
        -:  418:		/* Store lines: used later to check hotkeys */
       44:  419:		bms = (char **)xrealloc(bms, (bmn + 1) * sizeof(char *));
       44:  419-block  0
call    0 returned 44
       44:  420:		bms[bmn++] = savestring(line, strlen(line));
call    0 returned 44
unconditional  1 taken 44
        -:  421:	}
        -:  422:
        2:  423:	free(line);
        2:  424:	line = (char *)NULL;
        2:  425:	fclose(bm_fp);
        2:  425-block  0
call    0 returned 2
        -:  426:
        2:  427:	if (dup) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  428:		for (i = 0; i < bmn; i++)
    %%%%%:  428-block  0
unconditional  0 never executed
    %%%%%:  428-block  1
branch  1 never executed
branch  2 never executed
    #####:  429:			free(bms[i]);
    %%%%%:  429-block  0
unconditional  0 never executed
    #####:  430:		free(bms);
    #####:  431:		if (mod_file)
    %%%%%:  431-block  0
branch  0 never executed
branch  1 never executed
    #####:  432:			free(file);
    %%%%%:  432-block  0
unconditional  0 never executed
    #####:  433:		return EXIT_FAILURE;
    %%%%%:  433-block  0
unconditional  0 never executed
        -:  434:	}
        -:  435:
        -:  436:	/* If path is available */
        -:  437:
        2:  438:	char *name = (char *)NULL, *hk = (char *)NULL, *tmp = (char *)NULL;
        -:  439:
        -:  440:	/* Ask for data to construct the bookmark line. Both values could be
        -:  441:	 * NULL */
        2:  442:	puts(_("Bookmark line example: [sc]name:path"));
        2:  442-block  0
call    0 returned 2
call    1 returned 2
        2:  443:	hk = rl_no_hist("Shortcut: ");
call    0 returned 2
        -:  444:
        -:  445:	/* Check if hotkey is available */
        2:  446:	if (hk) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  447:		char *tmp_line = (char *)NULL;
        -:  448:
       46:  449:		for (i = 0; i < bmn; i++) {
        2:  449-block  0
unconditional  0 taken 2
       44:  449-block  1
unconditional  1 taken 44
       46:  449-block  2
branch  2 taken 44
branch  3 taken 2 (fallthrough)
       44:  450:			tmp_line = strbtw(bms[i], '[', ']');
       44:  450-block  0
call    0 returned 44
       44:  451:			if (tmp_line) {
branch  0 taken 44 (fallthrough)
branch  1 taken 0
       44:  452:				if (strcmp(hk, tmp_line) == 0) {
       44:  452-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 44
    #####:  453:					fprintf(stderr, _("bookmarks: %s: This shortcut is "
    %%%%%:  453-block  0
call    0 never executed
call    1 never executed
        -:  454:							  "already in use\n"), hk);
        -:  455:
    #####:  456:					dup = 1;
    #####:  457:					free(tmp_line);
    #####:  458:					break;
unconditional  0 never executed
        -:  459:				}
        -:  460:
       44:  461:				free(tmp_line);
       44:  461-block  0
unconditional  0 taken 44
        -:  462:			}
        -:  463:		}
        -:  464:	}
        -:  465:
        2:  466:	if (dup) {
        2:  466-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  467:		if (hk)
    %%%%%:  467-block  0
branch  0 never executed
branch  1 never executed
    #####:  468:			free(hk);
    %%%%%:  468-block  0
unconditional  0 never executed
    #####:  469:		for (i = 0; i < bmn; i++)
    %%%%%:  469-block  0
unconditional  0 never executed
    %%%%%:  469-block  1
branch  1 never executed
branch  2 never executed
    #####:  470:			free(bms[i]);
    %%%%%:  470-block  0
unconditional  0 never executed
    #####:  471:		free(bms);
    #####:  472:		if (mod_file)
    %%%%%:  472-block  0
branch  0 never executed
branch  1 never executed
    #####:  473:			free(file);
    %%%%%:  473-block  0
unconditional  0 never executed
    #####:  474:		return EXIT_FAILURE;
    %%%%%:  474-block  0
unconditional  0 never executed
        -:  475:	}
        -:  476:
        2:  477:	name = rl_no_hist("Name: ");
        2:  477-block  0
call    0 returned 2
        -:  478:
        2:  479:	if (name) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -:  480:		/* Check name is not duplicated */
        2:  481:		char *tmp_line = (char *)NULL;
       46:  482:		for (i = 0; i < bmn; i++) {
        2:  482-block  0
unconditional  0 taken 2
       44:  482-block  1
unconditional  1 taken 44
       46:  482-block  2
branch  2 taken 44
branch  3 taken 2 (fallthrough)
       44:  483:			tmp_line = strbtw(bms[i], ']', ':');
       44:  483-block  0
call    0 returned 44
       44:  484:			if (tmp_line) {
branch  0 taken 36 (fallthrough)
branch  1 taken 8
       36:  485:				if (strcmp(name, tmp_line) == 0) {
       36:  485-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 36
    #####:  486:					fprintf(stderr, _("bookmarks: %s: This name is "
    %%%%%:  486-block  0
call    0 never executed
call    1 never executed
        -:  487:							  "already in use\n"), name);
    #####:  488:					dup = 1;
    #####:  489:					free(tmp_line);
    #####:  490:					break;
unconditional  0 never executed
        -:  491:				}
       36:  492:				free(tmp_line);
       36:  492-block  0
unconditional  0 taken 36
        -:  493:			}
        -:  494:		}
        -:  495:
        2:  496:		if (dup) {
        2:  496-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  497:			free(name);
    #####:  498:			if (hk)
    %%%%%:  498-block  0
branch  0 never executed
branch  1 never executed
    #####:  499:				free(hk);
    %%%%%:  499-block  0
unconditional  0 never executed
    #####:  500:			for (i = 0; i < bmn; i++)
    %%%%%:  500-block  0
unconditional  0 never executed
    %%%%%:  500-block  1
branch  1 never executed
branch  2 never executed
    #####:  501:				free(bms[i]);
    %%%%%:  501-block  0
unconditional  0 never executed
    #####:  502:			free(bms);
    #####:  503:			if (mod_file)
    %%%%%:  503-block  0
branch  0 never executed
branch  1 never executed
    #####:  504:				free(file);
    %%%%%:  504-block  0
unconditional  0 never executed
    #####:  505:			return EXIT_FAILURE;
    %%%%%:  505-block  0
unconditional  0 never executed
        -:  506:		}
        -:  507:
        -:  508:		/* Generate the bookmark line */
        2:  509:		if (hk) { /* name AND hk */
        2:  509-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  510:			tmp = (char *)xcalloc(strlen(hk) + strlen(name) + strlen(file) + 5, sizeof(char));
        2:  510-block  0
call    0 returned 2
        2:  511:			sprintf(tmp, "[%s]%s:%s\n", hk, name, file);
        2:  512:			free(hk);
unconditional  0 taken 2
        -:  513:		} else { /* Only name */
    #####:  514:			tmp = (char *)xnmalloc(strlen(name) + strlen(file) + 3,
    %%%%%:  514-block  0
call    0 never executed
        -:  515:			    sizeof(char));
    #####:  516:			sprintf(tmp, "%s:%s\n", name, file);
unconditional  0 never executed
        -:  517:		}
        -:  518:
        2:  519:		free(name);
        2:  520:		name = (char *)NULL;
        2:  520-block  0
unconditional  0 taken 2
        -:  521:	}
        -:  522:
    #####:  523:	else if (hk) { /* Only hk */
    %%%%%:  523-block  0
branch  0 never executed
branch  1 never executed
    #####:  524:		tmp = (char *)xnmalloc(strlen(hk) + strlen(file) + 4,
    %%%%%:  524-block  0
call    0 never executed
        -:  525:		    sizeof(char));
    #####:  526:		sprintf(tmp, "[%s]%s\n", hk, file);
    #####:  527:		free(hk);
    #####:  528:		hk = (char *)NULL;
unconditional  0 never executed
        -:  529:	} else { /* Neither shortcut nor name: only path */
    #####:  530:		tmp = (char *)xnmalloc(strlen(file) + 2, sizeof(char));
    %%%%%:  530-block  0
call    0 never executed
    #####:  531:		sprintf(tmp, "%s\n", file);
unconditional  0 never executed
        -:  532:	}
        -:  533:
       46:  534:	for (i = 0; i < bmn; i++)
        2:  534-block  0
unconditional  0 taken 2
       46:  534-block  1
branch  1 taken 44
branch  2 taken 2 (fallthrough)
       44:  535:		free(bms[i]);
       44:  535-block  0
unconditional  0 taken 44
        2:  536:	free(bms);
        2:  537:	bms = (char **)NULL;
        -:  538:
        2:  539:	if (!tmp) {
        2:  539-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  540:		fprintf(stderr, _("bookmarks: Error generating the bookmark line\n"));
    %%%%%:  540-block  0
call    0 never executed
call    1 never executed
    #####:  541:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  542:	}
        -:  543:
        -:  544:	/* Once we have the bookmark line, write it to the bookmarks file */
        -:  545:
        2:  546:	bm_fp = fopen(bm_file, "a+");
        2:  546-block  0
call    0 returned 2
        2:  547:	if (!bm_fp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  548:		fprintf(stderr, _("bookmarks: Error opening the bookmarks file\n"));
    %%%%%:  548-block  0
call    0 never executed
call    1 never executed
    #####:  549:		free(tmp);
    #####:  550:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  551:	}
        -:  552:
        2:  553:	if (mod_file)
        2:  553-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  554:		free(file);
        1:  554-block  0
unconditional  0 taken 1
        -:  555:
        2:  556:	if (fseek(bm_fp, 0L, SEEK_END) == -1) {
        2:  556-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:  557:		fprintf(stderr, _("bookmarks: Error opening the bookmarks file\n"));
    %%%%%:  557-block  0
call    0 never executed
call    1 never executed
    #####:  558:		free(tmp);
    #####:  559:		fclose(bm_fp);
call    0 never executed
    #####:  560:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  561:	}
        -:  562:
        -:  563:	/* Everything is fine: add the new bookmark to the bookmarks file */
        2:  564:	fprintf(bm_fp, "%s", tmp);
        2:  564-block  0
call    0 returned 2
        2:  565:	fclose(bm_fp);
call    0 returned 2
        2:  566:	printf(_("File succesfully bookmarked\n"));
call    0 returned 2
call    1 returned 2
        2:  567:	free(tmp);
        -:  568:	/* Update bookmark names for TAB completion */
        -:  569:	/*  get_bm_names();  */
        2:  570:	free_bookmarks();
call    0 returned 2
        2:  571:	load_bookmarks();
call    0 returned 2
        2:  572:	return EXIT_SUCCESS;
unconditional  0 taken 2
        -:  573:}
        -:  574:
        -:  575:int
function edit_bookmarks called 7 returned 100% blocks executed 45%
        7:  576:edit_bookmarks(char *cmd)
        -:  577:{
        7:  578:	int exit_status = EXIT_SUCCESS;
        -:  579:
        7:  580:	if (!cmd) {
        7:  580-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:  581:		exit_status = open_file(bm_file);
        7:  581-block  0
call    0 returned 7
unconditional  1 taken 7
        -:  582:	} else {
    #####:  583:		char *tmp_cmd[] = {cmd, bm_file, NULL};
    #####:  584:		if (launch_execve(tmp_cmd, FOREGROUND, E_NOSTDERR) != EXIT_SUCCESS)
    %%%%%:  584-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  585:			exit_status = EXIT_FAILURE;
    %%%%%:  585-block  0
unconditional  0 never executed
        -:  586:	}
        -:  587:
        7:  588:	if (exit_status == EXIT_FAILURE)
        7:  588-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    #####:  589:		fprintf(stderr, _("%s: Cannot open the bookmarks file"), PROGRAM_NAME);
    %%%%%:  589-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  590:
        7:  591:	return exit_status;
        7:  591-block  0
unconditional  0 taken 7
        -:  592:}
        -:  593:
        -:  594:int
function open_bookmark called 11 returned 100% blocks executed 78%
       11:  595:open_bookmark(void)
        -:  596:{
        -:  597:	/* If no bookmarks */
       11:  598:	if (bm_n == 0) {
       11:  598-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####:  599:		printf(_("Bookmarks: There are no bookmarks\nEnter 'bm edit' "
    %%%%%:  599-block  0
call    0 never executed
call    1 never executed
        -:  600:			 "or press F11 to edit the bookmarks file. You can "
        -:  601:			 "also enter 'bm add PATH' to add a new bookmark\n"));
    #####:  602:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  603:	}
        -:  604:
        -:  605:	/* We have bookmarks... */
        -:  606:	struct stat file_attrib;
        -:  607:
       11:  608:	if (clear_screen)
       11:  608-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####:  609:		CLEAR;
    %%%%%:  609-block  0
call    0 never executed
unconditional  1 never executed
        -:  610:
       11:  611:	printf(_("%sBookmarks Manager%s\n\n"), BOLD, df_c);
       11:  611-block  0
call    0 returned 11
call    1 returned 11
        -:  612:
        -:  613:	/* Print bookmarks taking into account the existence of shortcut,
        -:  614:	 * name, and path for each bookmark */
       11:  615:	size_t i, eln = 0;
        -:  616:
      255:  617:	for (i = 0; i < bm_n; i++) {
unconditional  0 taken 11
      244:  617-block  0
unconditional  1 taken 244
      255:  617-block  1
branch  2 taken 244
branch  3 taken 11 (fallthrough)
     244*:  618:		if (!bookmarks[i].path || !*bookmarks[i].path)
      244:  618-block  0
branch  0 taken 244 (fallthrough)
branch  1 taken 0
      244:  618-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 244
    #####:  619:			continue;
    %%%%%:  619-block  0
unconditional  0 never executed
      244:  620:		eln++;
      244:  621:		int is_dir = 0, sc_ok = 0, name_ok = 0, non_existent = 0;
      244:  622:		int path_ok = stat(bookmarks[i].path, &file_attrib);
      244:  622-block  0
call    0 returned 244
        -:  623:
      244:  624:		if (bookmarks[i].shortcut)
branch  0 taken 244 (fallthrough)
branch  1 taken 0
      244:  625:			sc_ok = 1;
      244:  625-block  0
unconditional  0 taken 244
        -:  626:
      244:  627:		if (bookmarks[i].name)
      244:  627-block  0
branch  0 taken 200 (fallthrough)
branch  1 taken 44
      200:  628:			name_ok = 1;
      200:  628-block  0
unconditional  0 taken 200
        -:  629:
      244:  630:		if (path_ok == -1) {
      244:  630-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 242
        2:  631:			non_existent = 1;
        2:  631-block  0
unconditional  0 taken 2
        -:  632:		} else {
      242:  633:			switch ((file_attrib.st_mode & S_IFMT)) {
      242:  633-block  0
branch  0 taken 232
branch  1 taken 10
branch  2 taken 0
      232:  634:			case S_IFDIR: is_dir = 1; break;
      232:  634-block  0
unconditional  0 taken 232
       10:  635:			case S_IFREG: break;
       10:  635-block  0
unconditional  0 taken 10
    #####:  636:			default: non_existent = 1; break;
    %%%%%:  636-block  0
unconditional  0 never executed
        -:  637:			}
        -:  638:		}
        -:  639:
     974*:  640:		printf("%s%zu%s %s%c%s%c%s %s%s%s\n", el_c, eln, df_c,
      244:  640-block  0
branch  0 taken 200 (fallthrough)
branch  1 taken 44
      244:  640-block  1
branch  2 taken 242 (fallthrough)
branch  3 taken 2
      242:  640-block  2
unconditional  4 taken 242
        2:  640-block  3
unconditional  5 taken 2
      244:  640-block  4
branch  6 taken 244 (fallthrough)
branch  7 taken 0
      244:  640-block  5
unconditional  8 taken 244
    %%%%%:  640-block  6
unconditional  9 never executed
      244:  640-block  7
branch 10 taken 244 (fallthrough)
branch 11 taken 0
    %%%%%:  640-block  8
unconditional 12 never executed
      244:  640-block  9
branch 13 taken 244 (fallthrough)
branch 14 taken 0
      244:  640-block 10
unconditional 15 taken 244
    %%%%%:  640-block 11
unconditional 16 never executed
      244:  640-block 12
call   17 returned 244
unconditional 18 taken 244
      244:  641:		    BOLD, sc_ok ? '[' : 0, sc_ok ? bookmarks[i].shortcut : "",
      244:  641-block  0
unconditional  0 taken 244
      242:  642:		    sc_ok ? ']' : 0, df_c, non_existent ? GRAY : (is_dir ? bm_c : fi_c),
      242:  642-block  0
branch  0 taken 232 (fallthrough)
branch  1 taken 10
      232:  642-block  1
unconditional  2 taken 232
       10:  642-block  2
unconditional  3 taken 10
      244:  643:		    name_ok ? bookmarks[i].name : bookmarks[i].path, df_c);
      200:  643-block  0
unconditional  0 taken 200
       44:  643-block  1
unconditional  1 taken 44
        -:  644:	}
        -:  645:
        -:  646:	/* User selection. Display the prompt */
       11:  647:	char **arg = bm_prompt();
       11:  647-block  0
call    0 returned 11
       11:  648:	if (!arg || !*arg)
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11:  648-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 11
    #####:  649:		return EXIT_FAILURE;
    %%%%%:  649-block  0
unconditional  0 never executed
        -:  650:
       11:  651:	int exit_status = EXIT_SUCCESS;
        -:  652:
        -:  653:	/* Case "edit" */
      11*:  654:	if (*arg[0] == 'e' && (!arg[0][1] || strcmp(arg[0], "edit") == 0)) {
       11:  654-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 8
        3:  654-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 3
    %%%%%:  654-block  2
branch  4 never executed
branch  5 never executed
        3:  655:		stat(bm_file, &file_attrib);
        3:  655-block  0
call    0 returned 3
        3:  656:		time_t mtime_bfr = (time_t)file_attrib.st_mtime;
        -:  657:
        3:  658:		edit_bookmarks(arg[1] ? arg[1] : NULL);
call    0 returned 3
        -:  659:
        3:  660:		stat(bm_file, &file_attrib);
call    0 returned 3
        3:  661:		if (mtime_bfr != (time_t)file_attrib.st_mtime) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  662:			free_bookmarks();
        3:  662-block  0
call    0 returned 3
        3:  663:			load_bookmarks();
call    0 returned 3
unconditional  1 taken 3
        -:  664:		}
        -:  665:
        6:  666:		for (i = 0; arg[i]; i++)
        3:  666-block  0
unconditional  0 taken 3
        6:  666-block  1
branch  1 taken 3
branch  2 taken 3 (fallthrough)
        3:  667:			free(arg[i]);
        3:  667-block  0
unconditional  0 taken 3
        3:  668:		free(arg);
        -:  669:
        3:  670:		arg = (char **)NULL;
        -:  671:
        3:  672:		char *tmp_cmd[] = {"bm", NULL};
        3:  673:		bookmarks_function(tmp_cmd);
        3:  673-block  0
call    0 returned 3
        3:  674:		return EXIT_SUCCESS;
unconditional  0 taken 3
        -:  675:	}
        -:  676:
        -:  677:	/* Case "quit" */
       8*:  678:	if (*arg[0] == 'q' && (!arg[0][1] || strcmp(arg[0], "quit") == 0))
        8:  678-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 3
        5:  678-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 5
    %%%%%:  678-block  2
branch  4 never executed
branch  5 never executed
        5:  679:		goto FREE_AND_EXIT;
        5:  679-block  0
unconditional  0 taken 5
        -:  680:
        3:  681:	char *tmp_path = (char *)NULL;
        -:  682:
        -:  683:	/* Get the corresponding bookmark path */
        -:  684:	/* If an ELN */
        3:  685:	if (is_number(arg[0])) {
        3:  685-block  0
call    0 returned 3
branch  1 taken 2 (fallthrough)
branch  2 taken 1
        2:  686:		int num = atoi(arg[0]);
        2:  687:		if (num <= 0 || (size_t)num > bm_n) {
        2:  687-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  687-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    #####:  688:			fprintf(stderr, _("Bookmarks: %d: No such ELN\n"), num);
    %%%%%:  688-block  0
call    0 never executed
call    1 never executed
    #####:  689:			exit_status = EXIT_FAILURE;
    #####:  690:			goto FREE_AND_EXIT;
unconditional  0 never executed
        -:  691:		} else {
        2:  692:			tmp_path = bookmarks[num - 1].path;
        2:  692-block  0
unconditional  0 taken 2
        -:  693:		}
        -:  694:	} else {
        -:  695:	/* If string, check shortcuts and names */
        5:  696:		for (i = 0; i < bm_n; i++) {
        1:  696-block  0
unconditional  0 taken 1
        4:  696-block  1
unconditional  1 taken 4
        5:  696-block  2
branch  2 taken 5
branch  3 taken 0 (fallthrough)
        5:  697:			if ((bookmarks[i].shortcut && *arg[0] == *bookmarks[i].shortcut
        5:  697-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5:  697-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 4
        1:  698:			&& strcmp(arg[0], bookmarks[i].shortcut) == 0)
        1:  698-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        4:  699:			|| (bookmarks[i].name && *arg[0] == *bookmarks[i].name
        4:  699-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  699-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    #####:  700:			&& strcmp(arg[0], bookmarks[i].name) == 0)) {
    %%%%%:  700-block  0
branch  0 never executed
branch  1 never executed
        -:  701:
        1:  702:				if (bookmarks[i].path) {
        1:  702-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  703:					char *tmp_cmd[] = {"o", bookmarks[i].path,
        -:  704:					    arg[1] ? arg[1] : NULL,
        -:  705:					    NULL};
        -:  706:
        1:  707:					exit_status = open_function(tmp_cmd);
        1:  707-block  0
call    0 returned 1
        1:  708:					goto FREE_AND_EXIT;
unconditional  0 taken 1
        -:  709:				}
        -:  710:
    #####:  711:				fprintf(stderr, _("%s: %s: Invalid bookmark\n"),
    %%%%%:  711-block  0
call    0 never executed
call    1 never executed
        -:  712:				    PROGRAM_NAME, arg[0]);
    #####:  713:				exit_status = EXIT_FAILURE;
    #####:  714:				goto FREE_AND_EXIT;
unconditional  0 never executed
        -:  715:			}
        -:  716:		}
        -:  717:	}
        -:  718:
        2:  719:	if (!tmp_path) {
        2:  719-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  720:		fprintf(stderr, _("Bookmarks: %s: No such bookmark\n"),
    %%%%%:  720-block  0
call    0 never executed
call    1 never executed
        -:  721:		    arg[0]);
    #####:  722:		exit_status = EXIT_FAILURE;
    #####:  723:		goto FREE_AND_EXIT;
unconditional  0 never executed
        -:  724:	}
        -:  725:
        2:  726:	char *tmp_cmd[] = {"o", tmp_path, arg[1] ? arg[1] : NULL, NULL};
        2:  727:	exit_status = open_function(tmp_cmd);
        2:  727-block  0
call    0 returned 2
        2:  728:	goto FREE_AND_EXIT;
unconditional  0 taken 2
        -:  729:
        8:  730:FREE_AND_EXIT : {
       16:  731:	for (i = 0; arg[i]; i++)
        8:  731-block  0
unconditional  0 taken 8
       16:  731-block  1
branch  1 taken 8
branch  2 taken 8 (fallthrough)
        8:  732:		free(arg[i]);
        8:  732-block  0
unconditional  0 taken 8
        8:  733:	free(arg);
        8:  734:	arg = (char **)NULL;
        8:  735:	return exit_status;
        8:  735-block  0
unconditional  0 taken 8
        -:  736:}
        -:  737:}
        -:  738:
        -:  739:int
function bookmarks_function called 20 returned 100% blocks executed 44%
       20:  740:bookmarks_function(char **cmd)
        -:  741:{
       20:  742:	if (xargs.stealth_mode == 1) {
       20:  742-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####:  743:		printf(_("%s: Access to configuration files is not allowed in "
    %%%%%:  743-block  0
call    0 never executed
call    1 never executed
        -:  744:			 "stealth mode\n"), PROGRAM_NAME);
    #####:  745:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  746:	}
        -:  747:
       20:  748:	if (!config_ok) {
       20:  748-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####:  749:		fprintf(stderr, _("Bookmarks function disabled\n"));
    %%%%%:  749-block  0
call    0 never executed
call    1 never executed
    #####:  750:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  751:	}
        -:  752:
        -:  753:	/* If the bookmarks file doesn't exist, create it. NOTE: This file
        -:  754:	 * should be created at startup (by get_bm_names()), but we check
        -:  755:	 * it again here just in case it was meanwhile deleted for some
        -:  756:	 * reason */
        -:  757:
        -:  758:	/* If no arguments */
       20:  759:	if (!cmd[1])
       20:  759-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 9
       11:  760:		return open_bookmark();
       11:  760-block  0
call    0 returned 11
unconditional  1 taken 11
        -:  761:
        -:  762:	/* Check arguments */
        -:  763:
        -:  764:	/* Add a bookmark */
        9:  765:	if (*cmd[1] == 'a' && (!cmd[1][1] || strcmp(cmd[1], "add") == 0)) {
        9:  765-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 7
        2:  765-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1:  765-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        2:  766:		if (!cmd[2]) {
        2:  766-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  767:			puts(_(BOOKMARKS_USAGE));
    %%%%%:  767-block  0
call    0 never executed
call    1 never executed
    #####:  768:			return EXIT_SUCCESS;
unconditional  0 never executed
        -:  769:		}
        -:  770:
        2:  771:		if (access(cmd[2], F_OK) != 0) {
        2:  771-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:  772:			fprintf(stderr, _("Bookmarks: %s: %s\n"), cmd[2],
call    0 never executed
call    1 never executed
    #####:  773:			    strerror(errno));
    %%%%%:  773-block  0
call    0 never executed
    #####:  774:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  775:		}
        -:  776:
        2:  777:		return bookmark_add(cmd[2]);
        2:  777-block  0
call    0 returned 2
unconditional  1 taken 2
        -:  778:	}
        -:  779:
        -:  780:	/* Delete bookmarks */
        7:  781:	if (*cmd[1] == 'd' && (!cmd[1][1] || strcmp(cmd[1], "del") == 0))
        7:  781-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 4
        3:  781-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        3:  781-block  2
branch  4 taken 3 (fallthrough)
branch  5 taken 0
        3:  782:		return bookmark_del(cmd[2] ? cmd[2] : NULL);
        3:  782-block  0
call    0 returned 3
unconditional  1 taken 3
        -:  783:
        -:  784:	/* Edit */
        4:  785:	if (*cmd[1] == 'e' && (!cmd[1][1] || strcmp(cmd[1], "edit") == 0))
        4:  785-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  785-block  1
branch  2 taken 4 (fallthrough)
branch  3 taken 0
        4:  785-block  2
branch  4 taken 4 (fallthrough)
branch  5 taken 0
        4:  786:		return edit_bookmarks(cmd[2] ? cmd[2] : NULL);
        4:  786-block  0
call    0 returned 4
unconditional  1 taken 4
        -:  787:
        -:  788:	/* Shortcut or bm name */
        -:  789:	size_t i;
    #####:  790:	for (i = 0; i < bm_n; i++) {
    %%%%%:  790-block  0
unconditional  0 never executed
    %%%%%:  790-block  1
unconditional  1 never executed
    %%%%%:  790-block  2
branch  2 never executed
branch  3 never executed
    #####:  791:		if ((bookmarks[i].shortcut && *cmd[1] == *bookmarks[i].shortcut
    %%%%%:  791-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  791-block  1
branch  2 never executed
branch  3 never executed
    #####:  792:			&& strcmp(cmd[1], bookmarks[i].shortcut) == 0)
    %%%%%:  792-block  0
branch  0 never executed
branch  1 never executed
    #####:  793:			|| (bookmarks[i].name && *cmd[1] == *bookmarks[i].name
    %%%%%:  793-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  793-block  1
branch  2 never executed
branch  3 never executed
    #####:  794:			&& strcmp(cmd[1], bookmarks[i].name) == 0)) {
    %%%%%:  794-block  0
branch  0 never executed
branch  1 never executed
        -:  795:
    #####:  796:			if (bookmarks[i].path) {
    %%%%%:  796-block  0
branch  0 never executed
branch  1 never executed
    #####:  797:				char *tmp_cmd[] = {"o", bookmarks[i].path,
        -:  798:				    cmd[2] ? cmd[2] : NULL, NULL};
    #####:  799:				return open_function(tmp_cmd);
    %%%%%:  799-block  0
call    0 never executed
unconditional  1 never executed
        -:  800:			}
        -:  801:
    #####:  802:			fprintf(stderr, _("Bookmarks: %s: Invalid bookmark\n"),
call    0 never executed
    #####:  803:			    cmd[1]);
    %%%%%:  803-block  0
call    0 never executed
    #####:  804:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  805:		}
        -:  806:	}
        -:  807:
    #####:  808:	fprintf(stderr, _("Bookmarks: %s: No such bookmark\n"), cmd[1]);
    %%%%%:  808-block  0
call    0 never executed
call    1 never executed
    #####:  809:	return EXIT_FAILURE;
unconditional  0 never executed
        -:  810:}
