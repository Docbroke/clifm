        -:    0:Source:init.c
        -:    1:/* init.c -- functions controlling the program initialization */
        -:    2:
        -:    3:/*
        -:    4: * This file is part of CliFM
        -:    5: * 
        -:    6: * Copyright (C) 2016-2021, L. Abramovich <johndoe.arch@outlook.com>
        -:    7: * All rights reserved.
        -:    8:
        -:    9: * CliFM is free software; you can redistribute it and/or modify
        -:   10: * it under the terms of the GNU General Public License as published by
        -:   11: * the Free Software Foundation; either version 2 of the License, or
        -:   12: * (at your option) any later version.
        -:   13: *
        -:   14: * CliFM is distributed in the hope that it will be useful,
        -:   15: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   16: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   17: * GNU General Public License for more details.
        -:   18: *
        -:   19: * You should have received a copy of the GNU General Public License
        -:   20: * along with this program; if not, write to the Free Software
        -:   21: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
        -:   22: * MA 02110-1301, USA.
        -:   23:*/
        -:   24:
        -:   25:#include "helpers.h"
        -:   26:
        -:   27:#include <errno.h>
        -:   28:#include <fcntl.h>
        -:   29:#include <getopt.h>
        -:   30:#include <pwd.h>
        -:   31:#include <signal.h>
        -:   32:#include <stdio.h>
        -:   33:#include <string.h>
        -:   34:#include <sys/stat.h>
        -:   35:#include <termios.h>
        -:   36:#include <time.h>
        -:   37:#include <unistd.h>
        -:   38:#include <readline/readline.h>
        -:   39:#include <readline/history.h>
        -:   40:#ifdef __NetBSD__
        -:   41:#include <ctype.h>
        -:   42:#endif
        -:   43:
        -:   44:#include "aux.h"
        -:   45:#include "checks.h"
        -:   46:#include "config.h"
        -:   47:#include "exec.h"
        -:   48:#include "init.h"
        -:   49:#include "mime.h"
        -:   50:#include "misc.h"
        -:   51:#include "navigation.h"
        -:   52:#include "sort.h"
        -:   53:#include "string.h"
        -:   54:#include "history.h"
        -:   55:#include "file_operations.h"
        -:   56:
        -:   57:struct user_t user;
        -:   58:
        -:   59:/* 
        -:   60: * functions
        -:   61: */
        -:   62:
        -:   63:#ifndef _NO_GETTEXT
        -:   64:/* Initialize gettext for translations support */
        -:   65:int
function init_gettext called 4 returned 100% blocks executed 86%
        4:   66:init_gettext(void)
        -:   67:{
        -:   68:	char locale_dir[PATH_MAX];
       4*:   69:	snprintf(locale_dir, PATH_MAX - 1, "%s/locale", data_dir
        4:   69-block  0
unconditional  0 taken 4
    %%%%%:   69-block  1
unconditional  1 never executed
        4:   70:			? data_dir : "/usr/share");
        4:   70-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   71:	bindtextdomain(PNL, locale_dir);
        4:   71-block  0
call    0 returned 4
        4:   72:	textdomain(PNL);
call    0 returned 4
        4:   73:	return EXIT_SUCCESS;
unconditional  0 taken 4
        -:   74:
        -:   75:}
        -:   76:#endif
        -:   77:
        -:   78:int
function backup_argv called 4 returned 100% blocks executed 100%
        4:   79:backup_argv(int argc, char **argv)
        -:   80:{
        4:   81:	argc_bk = argc;
        4:   82:	argv_bk = (char **)xnmalloc((size_t)argc + 1, sizeof(char *));
        4:   82-block  0
call    0 returned 4
        -:   83:
        4:   84:	register int i = argc;
       12:   85:	while (--i >= 0)
unconditional  0 taken 4
       12:   85-block  0
branch  1 taken 8
branch  2 taken 4 (fallthrough)
        8:   86:		argv_bk[i] = savestring(argv[i], strlen(argv[i]));
        8:   86-block  0
call    0 returned 8
unconditional  1 taken 8
        4:   87:	argv_bk[argc] = (char *)NULL;
        -:   88:
        4:   89:	return EXIT_SUCCESS;
        4:   89-block  0
unconditional  0 taken 4
        -:   90:}
        -:   91:
        -:   92:int
function init_workspaces called 4 returned 100% blocks executed 100%
        4:   93:init_workspaces(void)
        -:   94:{
        4:   95:	ws = (struct ws_t *)xnmalloc(MAX_WS, sizeof(struct ws_t));
        4:   95-block  0
call    0 returned 4
        4:   96:	int i = MAX_WS;
       36:   97:	while (--i >= 0)
unconditional  0 taken 4
       36:   97-block  0
branch  1 taken 32
branch  2 taken 4 (fallthrough)
       32:   98:		ws[i].path = (char *)NULL;
       32:   98-block  0
unconditional  0 taken 32
        -:   99:
        4:  100:	return EXIT_SUCCESS;
        4:  100-block  0
unconditional  0 taken 4
        -:  101:}
        -:  102:
        -:  103:int
function get_home called 4 returned 100% blocks executed 57%
        4:  104:get_home(void)
        -:  105:{
        4:  106:	if (access(user.home, W_OK) == -1) {
        4:  106-block  0
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
        -:  107:		/* If no user's home, or if it's not writable, there won't be
        -:  108:		 * any config nor trash directory. These flags are used to
        -:  109:		 * prevent functions from trying to access any of these
        -:  110:		 * directories */
    #####:  111:		home_ok = 0;
    #####:  112:		config_ok = 0;
        -:  113:#ifndef _NO_TRASH
    #####:  114:		trash_ok = 0;
        -:  115:#endif
        -:  116:		/* Print message: trash, bookmarks, command logs, commands
        -:  117:		 * history and program messages won't be stored */
    #####:  118:		_err('e', PRINT_PROMPT, _("%s: Cannot access the home directory. "
    %%%%%:  118-block  0
call    0 never executed
call    1 never executed
        -:  119:				  "Trash, bookmarks, commands logs, and commands history are "
        -:  120:				  "disabled. Program messages and selected files won't be "
        -:  121:				  "persistent. Using default options\n"), PROGRAM_NAME);
    #####:  122:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  123:	}
        -:  124:
        4:  125:	user_home_len = strlen(user.home);
        4:  126:	return EXIT_SUCCESS;
        4:  126-block  0
unconditional  0 taken 4
        -:  127:}
        -:  128:
        -:  129:int
function init_history called 4 returned 100% blocks executed 60%
        4:  130:init_history(void)
        -:  131:{
        -:  132:	/* Limit the log files size */
        4:  133:	check_file_size(log_file, max_log);
        4:  133-block  0
call    0 returned 4
        4:  134:	check_file_size(msg_log_file, max_log);
call    0 returned 4
        -:  135:
        -:  136:	/* Get history */
        -:  137:	struct stat attr;
        4:  138:	if (stat(hist_file, &attr) == 0 && attr.st_size != 0) {
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0
        4:  138-block  0
branch  3 taken 4 (fallthrough)
branch  4 taken 0
        -:  139:		/* If the size condition is not included, and in case of a zero
        -:  140:		 * size file, read_history() produces malloc errors */
        -:  141:		/* Recover history from the history file */
        4:  142:		read_history(hist_file); /* This line adds more leaks to
        4:  142-block  0
call    0 returned 4
        -:  143:																readline */
        -:  144:		/* Limit the size of the history file to max_hist lines */
        4:  145:		history_truncate_file(hist_file, max_hist);
call    0 returned 4
unconditional  1 taken 4
        -:  146:	} else {
        -:  147:	/* If the history file doesn't exist, create it */
    #####:  148:		FILE *hist_fp = fopen(hist_file, "w+");
    %%%%%:  148-block  0
call    0 never executed
    #####:  149:		if (!hist_fp) {
branch  0 never executed
branch  1 never executed
    #####:  150:			_err('w', PRINT_PROMPT, "%s: fopen: '%s': %s\n",
call    0 never executed
unconditional  1 never executed
    #####:  151:			    PROGRAM_NAME, hist_file, strerror(errno));
    %%%%%:  151-block  0
call    0 never executed
        -:  152:		} else {
        -:  153:			/* To avoid malloc errors in read_history(), do not
        -:  154:			 * create an empty file */
    #####:  155:			fputs("edit\n", hist_fp);
    %%%%%:  155-block  0
call    0 never executed
        -:  156:			/* There is no need to run read_history() here, since
        -:  157:			 * the history file is still empty */
    #####:  158:			fclose(hist_fp);
call    0 never executed
unconditional  1 never executed
        -:  159:		}
        -:  160:	}
        -:  161:
        4:  162:	return EXIT_SUCCESS;
        4:  162-block  0
unconditional  0 taken 4
        -:  163:}
        -:  164:
        -:  165:int
function set_start_path called 4 returned 100% blocks executed 22%
        4:  166:set_start_path(void)
        -:  167:{
        -:  168:	/* Last path is overriden by positional parameters in the command line */
        4:  169:	if (restore_last_path)
        4:  169-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3:  170:		get_last_path();
        3:  170-block  0
call    0 returned 3
unconditional  1 taken 3
        -:  171:
        4:  172:	if (cur_ws == UNSET)
        4:  172-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  173:		cur_ws = DEF_CUR_WS;
    %%%%%:  173-block  0
unconditional  0 never executed
        -:  174:
        4:  175:	if (cur_ws > MAX_WS - 1) {
        4:  175-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  176:		cur_ws = DEF_CUR_WS;
    #####:  177:		_err('w', PRINT_PROMPT, _("%s: %zu: Invalid workspace."
    %%%%%:  177-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  178:			"\nFalling back to workspace %zu\n"), PROGRAM_NAME,
        -:  179:		    cur_ws, cur_ws + 1);
        -:  180:	}
        -:  181:
        -:  182:	/* If path was not set (neither in the config file nor via command
        -:  183:	 * line nor via the RestoreLastPath option), set the default (CWD),
        -:  184:	 * and if CWD is not set, use the user's home directory, and if the
        -:  185:	 * home cannot be found either, try the root directory, and if
        -:  186:	 * there's no access to the root dir either, exit.
        -:  187:	 * Bear in mind that if you launch CliFM through a terminal emulator,
        -:  188:	 * say xterm (xterm -e clifm), xterm will run a shell, say bash, and
        -:  189:	 * the shell will read its config file. Now, if this config file
        -:  190:	 * changes the CWD, this will be the CWD for CliFM */
        4:  191:	if (!ws[cur_ws].path) {
        4:  191-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  192:		char cwd[PATH_MAX] = "";
    #####:  193:		if (getcwd(cwd, sizeof(cwd)) == NULL) {}
    %%%%%:  193-block  0
call    0 never executed
        -:  194:
    #####:  195:		if (!*cwd || strlen(cwd) == 0) {
branch  0 never executed
branch  1 never executed
    %%%%%:  195-block  0
branch  2 never executed
branch  3 never executed
    #####:  196:			if (user_home) {
    %%%%%:  196-block  0
branch  0 never executed
branch  1 never executed
    #####:  197:				ws[cur_ws].path = savestring(user_home, strlen(user_home));
    %%%%%:  197-block  0
call    0 never executed
unconditional  1 never executed
        -:  198:			} else {
    #####:  199:				if (access("/", R_OK | X_OK) == -1) {
    %%%%%:  199-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  200:					fprintf(stderr, "%s: /: %s\n", PROGRAM_NAME,
call    0 never executed
    #####:  201:					    strerror(errno));
    %%%%%:  201-block  0
call    0 never executed
    #####:  202:					exit(EXIT_FAILURE);
call    0 never executed
        -:  203:				} else {
    #####:  204:					ws[cur_ws].path = savestring("/", 1);
    %%%%%:  204-block  0
call    0 never executed
unconditional  1 never executed
        -:  205:				}
        -:  206:			}
        -:  207:		} else {
    #####:  208:			ws[cur_ws].path = savestring(cwd, strlen(cwd));
    %%%%%:  208-block  0
call    0 never executed
unconditional  1 never executed
        -:  209:		}
        -:  210:	}
        -:  211:
        -:  212:	/* Make path the CWD */
        -:  213:	/* If chdir(path) fails, set path to cwd, list files and print the
        -:  214:	 * error message. If no access to CWD either, exit */
        4:  215:	if (xchdir(ws[cur_ws].path, NO_TITLE) == -1) {
        4:  215-block  0
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
    #####:  216:		_err('e', PRINT_PROMPT, "%s: chdir: '%s': %s\n", PROGRAM_NAME,
    #####:  217:		    ws[cur_ws].path, strerror(errno));
    %%%%%:  217-block  0
call    0 never executed
call    1 never executed
        -:  218:
    #####:  219:		char cwd[PATH_MAX] = "";
    #####:  220:		if (getcwd(cwd, sizeof(cwd)) == NULL) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  221:			_err(0, NOPRINT_PROMPT, _("%s: Fatal error! Failed "
    %%%%%:  221-block  0
call    0 never executed
call    1 never executed
        -:  222:					"retrieving current working directory\n"), PROGRAM_NAME);
    #####:  223:			exit(EXIT_FAILURE);
call    0 never executed
        -:  224:		}
        -:  225:
    #####:  226:		if (ws[cur_ws].path)
    %%%%%:  226-block  0
branch  0 never executed
branch  1 never executed
    #####:  227:			free(ws[cur_ws].path);
    %%%%%:  227-block  0
unconditional  0 never executed
    #####:  228:		ws[cur_ws].path = savestring(cwd, strlen(cwd));
    %%%%%:  228-block  0
call    0 never executed
unconditional  1 never executed
        -:  229:	}
        -:  230:
        4:  231:	return EXIT_SUCCESS;
        4:  231-block  0
unconditional  0 taken 4
        -:  232:}
        -:  233:
        -:  234:/* Get the system data directory (usually /usr/share) */
        -:  235:void
function get_data_dir called 4 returned 100% blocks executed 90%
        4:  236:get_data_dir(void)
        -:  237:{
        -:  238:	/* First try standard values for DATADIR */
        4:  239:	char *data_dirs[] = {
        -:  240:		"/usr/share",
        -:  241:		"/usr/local/share",
        -:  242:#if defined(__HAIKU__)
        -:  243:		"/boot/system/non-packaged/data",
        -:  244:		"/boot/system/data",
        -:  245:#endif
        -:  246:		NULL };
        -:  247:
        -:  248:	struct stat attr;
        -:  249:	size_t i;
        -:  250:
       4*:  251:	for (i = 0; data_dirs[i]; i++) {
        4:  251-block  0
unconditional  0 taken 4
    %%%%%:  251-block  1
unconditional  1 never executed
        4:  251-block  2
branch  2 taken 4
branch  3 taken 0 (fallthrough)
        -:  252:		char tmp[PATH_MAX];
        4:  253:		snprintf(tmp, PATH_MAX - 1, "%s/%s", data_dirs[i], PNL);
        4:  254:		if (stat(tmp, &attr) == EXIT_SUCCESS) {
        4:  254-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0
        4:  255:			data_dir = (char *)xrealloc(data_dir, (strlen(data_dirs[i]) + 1)
        4:  255-block  0
call    0 returned 4
        -:  256:										* sizeof(char));
        4:  257:			strcpy(data_dir, data_dirs[i]);
        4:  258:			break;
unconditional  0 taken 4
        -:  259:		}
        -:  260:	}
        -:  261:
        -:  262:/*	if (data_dir)
        -:  263:		return; */
        4:  264:	return;
        4:  264-block  0
unconditional  0 taken 4
        -:  265:
        -:  266:	/* If not found, try to get DATADIR from executable's path */
        -:  267:/*	data_dir = get_cmd_path(PNL);
        -:  268:
        -:  269:	if (!data_dir)
        -:  270:		return;
        -:  271:
        -:  272:	size_t j = strlen(data_dir),
        -:  273:		   count = 0;
        -:  274:
        -:  275:	while (--j >= 0) {
        -:  276:		if (data_dir[j] == '/')
        -:  277:			count++;
        -:  278:		if (count == 2) {
        -:  279:			data_dir[j] = '\0';
        -:  280:			break;
        -:  281:		}
        -:  282:	}
        -:  283:
        -:  284:	char tmp[PATH_MAX];
        -:  285:	snprintf(tmp, PATH_MAX - 1, "%s/share/%s", data_dir, PNL);
        -:  286:	if (stat(tmp, &attr) == EXIT_SUCCESS) {
        -:  287:		snprintf(tmp, PATH_MAX - 1, "%s/share", data_dir);
        -:  288:		data_dir = (char *)xrealloc(data_dir, (strlen(tmp) + 1) * sizeof(char));
        -:  289:		strcpy(data_dir, tmp);
        -:  290:		return;
        -:  291:	} */
        -:  292:}
        -:  293:
        -:  294:void
function check_env_filter called 4 returned 100% blocks executed 45%
        4:  295:check_env_filter(void)
        -:  296:{
        4:  297:	if (filter)
        4:  297-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  298:		return;
    %%%%%:  298-block  0
unconditional  0 never executed
        -:  299:
        4:  300:	char *p = getenv("CLIFM_FILTER");
        4:  300-block  0
call    0 returned 4
        4:  301:	if (!p)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  302:		return;
        4:  302-block  0
unconditional  0 taken 4
        -:  303:
    #####:  304:	if (*p == '!') {
    %%%%%:  304-block  0
branch  0 never executed
branch  1 never executed
    #####:  305:		filter_rev = 1;
    #####:  306:		p++;
    %%%%%:  306-block  0
unconditional  0 never executed
        -:  307:	} else {
    #####:  308:		filter_rev = 0;
    %%%%%:  308-block  0
unconditional  0 never executed
        -:  309:	}
        -:  310:	
    #####:  311:	filter = savestring(p, strlen(p));
    %%%%%:  311-block  0
call    0 never executed
unconditional  1 never executed
        -:  312:}
        -:  313:
        -:  314:char *
function get_date called 22 returned 100% blocks executed 88%
       22:  315:get_date(void)
        -:  316:{
       22:  317:	time_t rawtime = time(NULL);
       22:  317-block  0
call    0 returned 22
        -:  318:	struct tm tm;
       22:  319:	localtime_r(&rawtime, &tm);
call    0 returned 22
       22:  320:	size_t date_max = 128;
        -:  321:
       22:  322:	char *p = (char *)malloc((date_max + 1) * sizeof(char)), *date;
       22:  323:	if (p) {
branch  0 taken 22 (fallthrough)
branch  1 taken 0
       22:  324:		date = p;
       22:  325:		p = (char *)NULL;
       22:  325-block  0
unconditional  0 taken 22
        -:  326:	} else {
    #####:  327:		return (char *)NULL;
    %%%%%:  327-block  0
unconditional  0 never executed
        -:  328:	}
        -:  329:
       22:  330:	strftime(date, date_max, "%Y-%m-%dT%T%z", &tm);
       22:  331:	return date;
       22:  331-block  0
unconditional  0 taken 22
        -:  332:}
        -:  333:
        -:  334:static pid_t
function get_own_pid called 4 returned 100% blocks executed 80%
        4:  335:get_own_pid(void)
        -:  336:{
        -:  337:	pid_t pid;
        -:  338:
        -:  339:	/* Get the process id */
        4:  340:	pid = getpid();
        4:  340-block  0
call    0 returned 4
        -:  341:
        4:  342:	if (pid < 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  343:		return 0;
    %%%%%:  343-block  0
unconditional  0 never executed
        4:  344:	return pid;
        4:  344-block  0
unconditional  0 taken 4
        -:  345:}
        -:  346:
        -:  347:/* Returns pointer to user data struct, exits if not found */
        -:  348:struct user_t
function get_user called 11 returned 100% blocks executed 64%
       11:  349:get_user(void)
        -:  350:{
        -:  351:	struct passwd *pw;
        -:  352:	struct user_t tmp_user;
        -:  353:
       11:  354:	pw = getpwuid(geteuid());
       11:  354-block  0
call    0 returned 11
call    1 returned 11
       11:  355:	if (!pw) {
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####:  356:		_err('e', NOPRINT_PROMPT, _("%s: Cannot detect user data. Exiting early"),
    %%%%%:  356-block  0
call    0 never executed
call    1 never executed
        -:  357:			PROGRAM_NAME);
    #####:  358:		exit(-1);
call    0 never executed
        -:  359:	}
        -:  360:
       11:  361:	tmp_user.uid = pw->pw_uid;
       11:  362:	tmp_user.gid = pw->pw_gid;
       11:  363:	char *p = getenv("HOME");
       11:  363-block  0
call    0 returned 11
       11:  364:	if (!p)
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####:  365:		tmp_user.home = savestring(pw->pw_dir, strlen(pw->pw_dir));
    %%%%%:  365-block  0
call    0 never executed
unconditional  1 never executed
        -:  366:	else
       11:  367:		tmp_user.home = savestring(p, strlen(p));
       11:  367-block  0
call    0 returned 11
unconditional  1 taken 11
       11:  368:	tmp_user.name = savestring(pw->pw_name, strlen(pw->pw_name));
       11:  368-block  0
call    0 returned 11
       11:  369:	tmp_user.shell = savestring(pw->pw_shell, strlen(pw->pw_shell));
call    0 returned 11
        -:  370:
       11:  371:	if (!tmp_user.home || !tmp_user.name || !tmp_user.shell) {
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11:  371-block  0
branch  2 taken 11 (fallthrough)
branch  3 taken 0
       11:  371-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 11
    #####:  372:		_err('e', NOPRINT_PROMPT, _("%s: Cannot detect user data. Exiting"),
    %%%%%:  372-block  0
call    0 never executed
call    1 never executed
        -:  373:			PROGRAM_NAME);
    #####:  374:		exit(-1);
call    0 never executed
        -:  375:	}
        -:  376:
       11:  377:	tmp_user.home_len = strlen(tmp_user.home);
       11:  378:	return tmp_user;
       11:  378-block  0
unconditional  0 taken 11
        -:  379:}
        -:  380:
        -:  381:/* Reconstruct the jump database from database file */
        -:  382:void
function load_jumpdb called 24 returned 100% blocks executed 85%
       24:  383:load_jumpdb(void)
        -:  384:{
       24:  385:	if (xargs.no_dirjump == 1 || !config_ok || !config_dir)
       24:  385-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24:  385-block  1
branch  2 taken 24 (fallthrough)
branch  3 taken 0
       24:  385-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 24
       4*:  386:		return;
    %%%%%:  386-block  0
unconditional  0 never executed
        4:  386-block  1
unconditional  1 taken 4
        -:  387:
       24:  388:	size_t dir_len = strlen(config_dir);
       24:  389:	char *jump_file = (char *)xnmalloc(dir_len + 10, sizeof(char));
       24:  389-block  0
call    0 returned 24
       24:  390:	snprintf(jump_file, dir_len + 10, "%s/jump.cfm", config_dir);
        -:  391:
        -:  392:	int fd;
       24:  393:	FILE *fp = open_fstream_r(jump_file, &fd);
call    0 returned 24
       24:  394:	if (!fp) {
branch  0 taken 2 (fallthrough)
branch  1 taken 22
        2:  395:		free(jump_file);
        2:  396:		return;
        2:  396-block  0
unconditional  0 taken 2
        -:  397:	}
        -:  398:
        -:  399:	char tmp_line[PATH_MAX];
       22:  400:	size_t jump_lines = 0;
        -:  401:
      858:  402:	while (fgets(tmp_line, (int)sizeof(tmp_line), fp)) {
       22:  402-block  0
unconditional  0 taken 22
      858:  402-block  1
call    1 returned 858
branch  2 taken 836
branch  3 taken 22 (fallthrough)
      836:  403:		if (*tmp_line != '\n' && *tmp_line >= '0' && *tmp_line <= '9')
      836:  403-block  0
branch  0 taken 836 (fallthrough)
branch  1 taken 0
      836:  403-block  1
branch  2 taken 836 (fallthrough)
branch  3 taken 0
      836:  403-block  2
branch  4 taken 816 (fallthrough)
branch  5 taken 20
      816:  404:			jump_lines++;
      816:  404-block  0
unconditional  0 taken 816
        -:  405:	}
        -:  406:
       22:  407:	if (!jump_lines) {
       22:  407-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 22
    #####:  408:		free(jump_file);
    #####:  409:		close_fstream(fp, fd);
    %%%%%:  409-block  0
call    0 never executed
    #####:  410:		return;
unconditional  0 never executed
        -:  411:	}
        -:  412:
       22:  413:	jump_db = (struct jump_t *)xnmalloc(jump_lines + 2, sizeof(struct jump_t));
       22:  413-block  0
call    0 returned 22
        -:  414:
       22:  415:	fseek(fp, 0L, SEEK_SET);
call    0 returned 22
        -:  416:
       22:  417:	size_t line_size = 0;
       22:  418:	char *line = (char *)NULL;
       22:  419:	ssize_t line_len = 0;
        -:  420:
      858:  421:	while ((line_len = getline(&line, &line_size, fp)) > 0) {
unconditional  0 taken 22
      858:  421-block  0
call    1 returned 858
branch  2 taken 836
branch  3 taken 22 (fallthrough)
     836*:  422:		if (!*line || *line == '\n')
      836:  422-block  0
branch  0 taken 836 (fallthrough)
branch  1 taken 0
      836:  422-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 836
    #####:  423:			continue;
    %%%%%:  423-block  0
unconditional  0 never executed
      836:  424:		if (*line == '@') {
      836:  424-block  0
branch  0 taken 20 (fallthrough)
branch  1 taken 816
       20:  425:			if (line[line_len - 1] == '\n')
       20:  425-block  0
branch  0 taken 20 (fallthrough)
branch  1 taken 0
       20:  426:				line[line_len - 1] = '\0';
       20:  426-block  0
unconditional  0 taken 20
       20:  427:			if (is_number(line + 1))
       20:  427-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0
       20:  428:				jump_total_rank = atoi(line + 1);
       20:  428-block  0
unconditional  0 taken 20
       20:  429:			continue;
       20:  429-block  0
unconditional  0 taken 20
        -:  430:		}
     816*:  431:		if (*line < '0' || *line > '9')
      816:  431-block  0
branch  0 taken 816 (fallthrough)
branch  1 taken 0
      816:  431-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 816
    #####:  432:			continue;
    %%%%%:  432-block  0
unconditional  0 never executed
        -:  433:
      816:  434:		if (line[line_len - 1] == '\n')
      816:  434-block  0
branch  0 taken 816 (fallthrough)
branch  1 taken 0
      816:  435:			line[line_len - 1] = '\0';
      816:  435-block  0
unconditional  0 taken 816
        -:  436:
      816:  437:		char *tmp = strchr(line, ':');
     816*:  438:		if (!tmp)
      816:  438-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 816
    #####:  439:			continue;
    %%%%%:  439-block  0
unconditional  0 never executed
        -:  440:
      816:  441:		*tmp = '\0';
     816*:  442:		if (!*(++tmp))
      816:  442-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 816
    #####:  443:			continue;
    %%%%%:  443-block  0
unconditional  0 never executed
        -:  444:
      816:  445:		int visits = 1;
        -:  446:
      816:  447:		if (is_number(line))
      816:  447-block  0
call    0 returned 816
branch  1 taken 816 (fallthrough)
branch  2 taken 0
      816:  448:			visits = atoi(line);
      816:  448-block  0
unconditional  0 taken 816
        -:  449:
      816:  450:		char *tmpb = strchr(tmp, ':');
      816:  451:		if (!tmpb)
      816:  451-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 804
       12:  452:			continue;
       12:  452-block  0
unconditional  0 taken 12
        -:  453:
      804:  454:		*tmpb = '\0';
        -:  455:
     804*:  456:		if (!*(++tmpb))
      804:  456-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 804
    #####:  457:			continue;
    %%%%%:  457-block  0
unconditional  0 never executed
        -:  458:
      804:  459:		time_t first = 0;
        -:  460:
      804:  461:		if (is_number(tmp))
      804:  461-block  0
call    0 returned 804
branch  1 taken 804 (fallthrough)
branch  2 taken 0
      804:  462:			first = (time_t)atoi(tmp);
      804:  462-block  0
unconditional  0 taken 804
        -:  463:
      804:  464:		char *tmpc = strchr(tmpb, ':');
      804:  465:		if (!tmpc)
      804:  465-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 802
        2:  466:			continue;
        2:  466-block  0
unconditional  0 taken 2
        -:  467:
      802:  468:		*tmpc = '\0';
        -:  469:
     802*:  470:		if (!*(++tmpc))
      802:  470-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 802
    #####:  471:			continue;
    %%%%%:  471-block  0
unconditional  0 never executed
        -:  472:
        -:  473:		/* Purge the database from non-existent directories */
     802*:  474:		if (access(tmpc, F_OK) == -1)
      802:  474-block  0
call    0 returned 802
branch  1 taken 0 (fallthrough)
branch  2 taken 802
    #####:  475:			continue;
    %%%%%:  475-block  0
unconditional  0 never executed
        -:  476:
      802:  477:		jump_db[jump_n].visits = (size_t)visits;
      802:  478:		jump_db[jump_n].first_visit = first;
        -:  479:
      802:  480:		if (is_number(tmpb))
      802:  480-block  0
call    0 returned 802
branch  1 taken 802 (fallthrough)
branch  2 taken 0
      802:  481:			jump_db[jump_n].last_visit = (time_t)atoi(tmpb);
      802:  481-block  0
unconditional  0 taken 802
        -:  482:		else
    #####:  483:			jump_db[jump_n].last_visit = 0; /* UNIX Epoch */
    %%%%%:  483-block  0
unconditional  0 never executed
        -:  484:
      802:  485:		jump_db[jump_n].keep = 0;
      802:  486:		jump_db[jump_n].rank = 0;
      802:  487:		jump_db[jump_n++].path = savestring(tmpc, strlen(tmpc));
      802:  487-block  0
call    0 returned 802
unconditional  1 taken 802
        -:  488:	}
        -:  489:
       22:  490:	close_fstream(fp, fd);
       22:  490-block  0
call    0 returned 22
       22:  491:	free(line);
       22:  492:	free(jump_file);
        -:  493:
       22:  494:	if (!jump_n) {
branch  0 taken 2 (fallthrough)
branch  1 taken 20
        2:  495:		free(jump_db);
        2:  496:		jump_db = (struct jump_t *)NULL;
        2:  497:		return;
        2:  497-block  0
unconditional  0 taken 2
        -:  498:	}
        -:  499:
       20:  500:	jump_db[jump_n].path = (char *)NULL;
       20:  501:	jump_db[jump_n].rank = 0;
       20:  502:	jump_db[jump_n].keep = 0;
       20:  503:	jump_db[jump_n].visits = 0;
       20:  504:	jump_db[jump_n].first_visit = -1;
       20:  504-block  0
unconditional  0 taken 20
        -:  505:}
        -:  506:
        -:  507:int
function load_bookmarks called 21 returned 100% blocks executed 77%
       21:  508:load_bookmarks(void)
        -:  509:{
       21:  510:	if (create_bm_file() == EXIT_FAILURE)
       21:  510-block  0
call    0 returned 21
branch  1 taken 0 (fallthrough)
branch  2 taken 21
    #####:  511:		return EXIT_FAILURE;
    %%%%%:  511-block  0
unconditional  0 never executed
        -:  512:
       21:  513:	if (!bm_file)
       21:  513-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 21
    #####:  514:		return EXIT_FAILURE;
    %%%%%:  514-block  0
unconditional  0 never executed
        -:  515:
        -:  516:	int fd;
       21:  517:	FILE *fp = open_fstream_r(bm_file, &fd);
       21:  517-block  0
call    0 returned 21
       21:  518:	if (!fp)
branch  0 taken 0 (fallthrough)
branch  1 taken 21
    #####:  519:		return EXIT_FAILURE;
    %%%%%:  519-block  0
unconditional  0 never executed
        -:  520:
       21:  521:	size_t bm_total = 0;
        -:  522:	char tmp_line[256];
      421:  523:	while (fgets(tmp_line, (int)sizeof(tmp_line), fp)) {
       21:  523-block  0
unconditional  0 taken 21
      421:  523-block  1
call    1 returned 421
branch  2 taken 400
branch  3 taken 21 (fallthrough)
      400:  524:		if (!*tmp_line || *tmp_line == '#' || *tmp_line == '\n')
      400:  524-block  0
branch  0 taken 400 (fallthrough)
branch  1 taken 0
      400:  524-block  1
branch  2 taken 323 (fallthrough)
branch  3 taken 77
      323:  524-block  2
branch  4 taken 7 (fallthrough)
branch  5 taken 316
       84:  525:			continue;
       84:  525-block  0
unconditional  0 taken 84
      316:  526:		bm_total++;
      316:  526-block  0
unconditional  0 taken 316
        -:  527:	}
        -:  528:
       21:  529:	if (!bm_total) {
       21:  529-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 20
        1:  530:		close_fstream(fp, fd);
        1:  530-block  0
call    0 returned 1
        1:  531:		return EXIT_SUCCESS;
unconditional  0 taken 1
        -:  532:	}
        -:  533:
       20:  534:	fseek(fp, 0L, SEEK_SET);
       20:  534-block  0
call    0 returned 20
        -:  535:
       20:  536:	bookmarks = (struct bookmarks_t *)xnmalloc(bm_total + 1,
call    0 returned 20
        -:  537:	    sizeof(struct bookmarks_t));
       20:  538:	size_t line_size = 0;
       20:  539:	char *line = (char *)NULL;
       20:  540:	ssize_t line_len = 0;
        -:  541:
      414:  542:	while ((line_len = getline(&line, &line_size, fp)) > 0) {
unconditional  0 taken 20
      414:  542-block  0
call    1 returned 414
branch  2 taken 394
branch  3 taken 20 (fallthrough)
      394:  543:		if (!*line || *line == '\n' || *line == '#')
      394:  543-block  0
branch  0 taken 394 (fallthrough)
branch  1 taken 0
      394:  543-block  1
branch  2 taken 388 (fallthrough)
branch  3 taken 6
      388:  543-block  2
branch  4 taken 72 (fallthrough)
branch  5 taken 316
       78:  544:			continue;
       78:  544-block  0
unconditional  0 taken 78
      316:  545:		if (line[line_len - 1] == '\n')
      316:  545-block  0
branch  0 taken 315 (fallthrough)
branch  1 taken 1
      315:  546:			line[line_len - 1] = '\0';
      315:  546-block  0
unconditional  0 taken 315
        -:  547:
        -:  548:		/* Neither hotkey nor name, but only a path */
     316*:  549:		if (*line == '/') {
      316:  549-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 316
    #####:  550:			bookmarks[bm_n].shortcut = (char *)NULL;
    #####:  551:			bookmarks[bm_n].name = (char *)NULL;
    #####:  552:			bookmarks[bm_n++].path = savestring(line, strlen(line));
    %%%%%:  552-block  0
call    0 never executed
    #####:  553:			continue;
unconditional  0 never executed
        -:  554:		}
        -:  555:
      316:  556:		if (*line == '[') {
      316:  556-block  0
branch  0 taken 316 (fallthrough)
branch  1 taken 0
      316:  557:			char *p = line;
      316:  558:			p++;
      316:  559:			char *tmp = strchr(line, ']');
     316*:  560:			if (!tmp) {
      316:  560-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 316
    #####:  561:				bookmarks[bm_n].shortcut = (char *)NULL;
    #####:  562:				bookmarks[bm_n].name = (char *)NULL;
    #####:  563:				bookmarks[bm_n++].path = (char *)NULL;
    #####:  564:				continue;
    %%%%%:  564-block  0
unconditional  0 never executed
        -:  565:			}
        -:  566:
      316:  567:			*tmp = '\0';
        -:  568:
      316:  569:			bookmarks[bm_n].shortcut = savestring(p, strlen(p));
      316:  569-block  0
call    0 returned 316
        -:  570:
      316:  571:			tmp++;
      316:  572:			p = tmp;
      316:  573:			tmp = strchr(p, ':');
        -:  574:
      316:  575:			if (!tmp) {
branch  0 taken 56 (fallthrough)
branch  1 taken 260
       56:  576:				bookmarks[bm_n].name = (char *)NULL;
       56:  577:				if (*p)
       56:  577-block  0
branch  0 taken 56 (fallthrough)
branch  1 taken 0
       56:  578:					bookmarks[bm_n++].path = savestring(p, strlen(p));
       56:  578-block  0
call    0 returned 56
unconditional  1 taken 56
        -:  579:				else
    #####:  580:					bookmarks[bm_n++].path = (char *)NULL;
    %%%%%:  580-block  0
unconditional  0 never executed
       56:  581:				continue;
       56:  581-block  0
unconditional  0 taken 56
        -:  582:			}
        -:  583:
      260:  584:			*tmp = '\0';
      260:  585:			bookmarks[bm_n].name = savestring(p, strlen(p));
      260:  585-block  0
call    0 returned 260
        -:  586:
     260*:  587:			if (!*(++tmp)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 260
    #####:  588:				bookmarks[bm_n++].path = (char *)NULL;
    #####:  589:				continue;
    %%%%%:  589-block  0
unconditional  0 never executed
        -:  590:			}
        -:  591:
      260:  592:			bookmarks[bm_n++].path = savestring(tmp, strlen(tmp));
      260:  592-block  0
call    0 returned 260
      260:  593:			continue;
unconditional  0 taken 260
        -:  594:		}
        -:  595:
        -:  596:		/* No shortcut. Let's try with name */
    #####:  597:		bookmarks[bm_n].shortcut = (char *)NULL;
    #####:  598:		char *tmp = strchr(line, ':');
        -:  599:
        -:  600:		/* No name either */
    #####:  601:		if (!tmp) {
    %%%%%:  601-block  0
branch  0 never executed
branch  1 never executed
    #####:  602:			bookmarks[bm_n].name = (char *)NULL;
    #####:  603:			bookmarks[bm_n++].path = (char *)NULL;
    #####:  604:			continue;
    %%%%%:  604-block  0
unconditional  0 never executed
        -:  605:		}
        -:  606:
    #####:  607:		*tmp = '\0';
    #####:  608:		bookmarks[bm_n].name = savestring(line, strlen(line));
    %%%%%:  608-block  0
call    0 never executed
        -:  609:
    #####:  610:		if (!*(++tmp)) {
branch  0 never executed
branch  1 never executed
    #####:  611:			bookmarks[bm_n++].path = (char *)NULL;
    #####:  612:			continue;
    %%%%%:  612-block  0
unconditional  0 never executed
        -:  613:		} else {
    #####:  614:			bookmarks[bm_n++].path = savestring(tmp, strlen(tmp));
    %%%%%:  614-block  0
call    0 never executed
unconditional  1 never executed
        -:  615:		}
        -:  616:	}
        -:  617:
       20:  618:	free(line);
       20:  619:	close_fstream(fp, fd);
       20:  619-block  0
call    0 returned 20
        -:  620:
       20:  621:	if (!bm_n) {
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####:  622:		free(bookmarks);
    #####:  623:		bookmarks = (struct bookmarks_t *)NULL;
    #####:  624:		return EXIT_SUCCESS;
    %%%%%:  624-block  0
unconditional  0 never executed
        -:  625:	}
        -:  626:
        -:  627:	/* bookmark_names array shouldn't exist: is only used for bookmark
        -:  628:	 * completion. xbookmarks[i].name should be used instead, but is
        -:  629:	 * currently not working */
        -:  630:
       20:  631:	size_t i, j = 0;
       20:  632:	bookmark_names = (char **)xnmalloc(bm_n + 2, sizeof(char *));
       20:  632-block  0
call    0 returned 20
        -:  633:
      336:  634:	for (i = 0; i < bm_n; i++) {
unconditional  0 taken 20
      316:  634-block  0
unconditional  1 taken 316
      336:  634-block  1
branch  2 taken 316
branch  3 taken 20 (fallthrough)
      316:  635:		if (!bookmarks[i].name || !*bookmarks[i].name)
      316:  635-block  0
branch  0 taken 260 (fallthrough)
branch  1 taken 56
      260:  635-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 260
       56:  636:			continue;
       56:  636-block  0
unconditional  0 taken 56
      260:  637:		bookmark_names[j++] = savestring(bookmarks[i].name,
unconditional  0 taken 260
      260:  638:		    strlen(bookmarks[i].name));
      260:  638-block  0
call    0 returned 260
        -:  639:	}
        -:  640:
       20:  641:	bookmark_names[j] = (char *)NULL;
       20:  642:	return EXIT_SUCCESS;
       20:  642-block  0
unconditional  0 taken 20
        -:  643:}
        -:  644:
        -:  645:/* Store actions from the actions file into a struct */
        -:  646:int
function load_actions called 15 returned 100% blocks executed 90%
       15:  647:load_actions(void)
        -:  648:{
       15:  649:	if (!config_ok)
       15:  649-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 15
    #####:  650:		return EXIT_FAILURE;
    %%%%%:  650-block  0
unconditional  0 never executed
        -:  651:
        -:  652:	/* Free the actions struct array */
       15:  653:	if (actions_n) {
       15:  653-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 13
        2:  654:		int i = (int)actions_n;
       49:  655:		while (--i >= 0) {
        2:  655-block  0
unconditional  0 taken 2
       49:  655-block  1
branch  1 taken 47
branch  2 taken 2 (fallthrough)
       47:  656:			free(usr_actions[i].name);
       47:  657:			free(usr_actions[i].value);
       47:  657-block  0
unconditional  0 taken 47
        -:  658:		}
        -:  659:
        2:  660:		free(usr_actions);
        2:  661:		usr_actions = (struct actions_t *)xnmalloc(1, sizeof(struct actions_t));
        2:  661-block  0
call    0 returned 2
        2:  662:		actions_n = 0;
unconditional  0 taken 2
        -:  663:	}
        -:  664:
        -:  665:	/* Open the actions file */
        -:  666:	int fd;
       15:  667:	FILE *fp = open_fstream_r(actions_file, &fd);
       15:  667-block  0
call    0 returned 15
       15:  668:	if (!fp)
branch  0 taken 0 (fallthrough)
branch  1 taken 15
    #####:  669:		return EXIT_FAILURE;
    %%%%%:  669-block  0
unconditional  0 never executed
        -:  670:
       15:  671:	size_t line_size = 0;
       15:  672:	char *line = (char *)NULL;
       15:  673:	ssize_t line_len = 0;
        -:  674:
      488:  675:	while ((line_len = getline(&line, &line_size, fp)) > 0) {
       15:  675-block  0
unconditional  0 taken 15
      488:  675-block  1
call    1 returned 488
branch  2 taken 473
branch  3 taken 15 (fallthrough)
      473:  676:		if (!line || !*line || *line == '#' || *line == '\n')
      473:  676-block  0
branch  0 taken 473 (fallthrough)
branch  1 taken 0
      473:  676-block  1
branch  2 taken 473 (fallthrough)
branch  3 taken 0
      473:  676-block  2
branch  4 taken 303 (fallthrough)
branch  5 taken 170
      303:  676-block  3
branch  6 taken 36 (fallthrough)
branch  7 taken 267
      206:  677:			continue;
      206:  677-block  0
unconditional  0 taken 206
      267:  678:		if (line[line_len - 1] == '\n')
      267:  678-block  0
branch  0 taken 267 (fallthrough)
branch  1 taken 0
      267:  679:			line[line_len - 1] = '\0';
      267:  679-block  0
unconditional  0 taken 267
        -:  680:
      267:  681:		char *tmp = (char *)NULL;
      267:  682:		tmp = strrchr(line, '=');
     267*:  683:		if (!tmp)
      267:  683-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 267
    #####:  684:			continue;
    %%%%%:  684-block  0
unconditional  0 never executed
        -:  685:
        -:  686:		/* Now copy left and right value of each action into the
        -:  687:		 * actions struct */
      267:  688:		usr_actions = xrealloc(usr_actions, (size_t)(actions_n + 1)
      267:  688-block  0
call    0 returned 267
        -:  689:								* sizeof(struct actions_t));
      267:  690:		usr_actions[actions_n].value = savestring(tmp + 1, strlen(tmp + 1));
call    0 returned 267
      267:  691:		*tmp = '\0';
      267:  692:		usr_actions[actions_n++].name = savestring(line, strlen(line));
call    0 returned 267
unconditional  1 taken 267
        -:  693:	}
        -:  694:
       15:  695:	free(line);
       15:  696:	close_fstream(fp, fd);
       15:  696-block  0
call    0 returned 15
       15:  697:	return EXIT_SUCCESS;
unconditional  0 taken 15
        -:  698:}
        -:  699:
        -:  700:/* Load remotes information from FILE */
        -:  701:int
function load_remotes called 26 returned 100% blocks executed 83%
       26:  702:load_remotes(void)
        -:  703:{
       26:  704:	if (!remotes_file || !*remotes_file)
       26:  704-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 0
       26:  704-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 26
    #####:  705:		return EXIT_FAILURE;
    %%%%%:  705-block  0
unconditional  0 never executed
        -:  706:
        -:  707:	int fd;
       26:  708:	FILE *fp = open_fstream_r(remotes_file, &fd);
       26:  708-block  0
call    0 returned 26
       26:  709:	if (!fp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 26
    #####:  710:		fprintf(stderr, "%s: %s\n", remotes_file, strerror(errno));
    %%%%%:  710-block  0
call    0 never executed
call    1 never executed
    #####:  711:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  712:	}
        -:  713:
       26:  714:	size_t n = 0;
       26:  715:	remotes = (struct remote_t *)xnmalloc(n + 1, sizeof(struct remote_t));
       26:  715-block  0
call    0 returned 26
       26:  716:	remotes[n].name = (char *)NULL;
       26:  717:	remotes[n].desc = (char *)NULL;
       26:  718:	remotes[n].mountpoint = (char *)NULL;
       26:  719:	remotes[n].mount_cmd = (char *)NULL;
       26:  720:	remotes[n].unmount_cmd = (char *)NULL;
       26:  721:	remotes[n].auto_unmount = 0;
       26:  722:	remotes[n].auto_mount = 0;
       26:  723:	remotes[n].mounted = 0;
        -:  724:
       26:  725:	size_t line_sz = 0;
       26:  726:	char *line = (char *)NULL;
        -:  727:
      954:  728:	while (getline(&line, &line_sz, fp) > 0) {
unconditional  0 taken 26
      954:  728-block  0
call    1 returned 954
branch  2 taken 928
branch  3 taken 26 (fallthrough)
      928:  729:		if (!*line || *line == '#' || *line == '\n')
      928:  729-block  0
branch  0 taken 928 (fallthrough)
branch  1 taken 0
      928:  729-block  1
branch  2 taken 486 (fallthrough)
branch  3 taken 442
      486:  729-block  2
branch  4 taken 201 (fallthrough)
branch  5 taken 285
      643:  730:			continue;
      643:  730-block  0
unconditional  0 taken 643
      285:  731:		if (*line == '[') {
      285:  731-block  0
branch  0 taken 38 (fallthrough)
branch  1 taken 247
       38:  732:			if (remotes[n].name)
       38:  732-block  0
branch  0 taken 19 (fallthrough)
branch  1 taken 19
       19:  733:				n++;
       19:  733-block  0
unconditional  0 taken 19
       38:  734:			remotes = (struct remote_t *)xrealloc(
       38:  734-block  0
call    0 returned 38
        -:  735:					remotes, (n + 2) * sizeof(struct remote_t));
        -:  736:
       38:  737:			remotes[n].name = (char *)NULL;
       38:  738:			remotes[n].desc = (char *)NULL;
       38:  739:			remotes[n].mountpoint = (char *)NULL;
       38:  740:			remotes[n].mount_cmd = (char *)NULL;
       38:  741:			remotes[n].unmount_cmd = (char *)NULL;
       38:  742:			remotes[n].auto_unmount = 0;
       38:  743:			remotes[n].auto_mount = 0;
       38:  744:			remotes[n].mounted = 0;
        -:  745:
       38:  746:			char *name = strbtw(line, '[', ']');
call    0 returned 38
      38*:  747:			if (!name)
branch  0 taken 0 (fallthrough)
branch  1 taken 38
    #####:  748:				continue;
    %%%%%:  748-block  0
unconditional  0 never executed
      38*:  749:			if (!*name) {
       38:  749-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 38
    #####:  750:				free(name);
    #####:  751:				name = (char *)NULL;
    #####:  752:				continue;
    %%%%%:  752-block  0
unconditional  0 never executed
        -:  753:			}
       76:  754:			remotes[n].name = (char *)xrealloc(remotes[n].name,
       38:  755:							(strlen(name) + 1) * sizeof(char));
       38:  755-block  0
call    0 returned 38
       38:  756:			strcpy(remotes[n].name, name);
       38:  757:			free(name);
       38:  758:			name = (char *)NULL;
unconditional  0 taken 38
        -:  759:		}
        -:  760:
     285*:  761:		if (!remotes[n].name)
      285:  761-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 285
    #####:  762:			continue;
    %%%%%:  762-block  0
unconditional  0 never executed
        -:  763:
      285:  764:		char *ret = strchr(line, '=');
      285:  765:		if (!ret)
      285:  765-block  0
branch  0 taken 57 (fallthrough)
branch  1 taken 228
       57:  766:			continue;
       57:  766-block  0
unconditional  0 taken 57
     228*:  767:		if (!*(++ret))
      228:  767-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 228
    #####:  768:			continue;
    %%%%%:  768-block  0
unconditional  0 never executed
        -:  769:
      228:  770:		size_t ret_len = strlen(ret);
      228:  771:		if (ret[ret_len - 1] == '\n')
      228:  771-block  0
branch  0 taken 228 (fallthrough)
branch  1 taken 0
      228:  772:			ret[--ret_len] = '\0';
      228:  772-block  0
unconditional  0 taken 228
        -:  773:
      228:  774:		char *deq_str = remove_quotes(ret);
      228:  774-block  0
call    0 returned 228
      228:  775:		if (deq_str)
branch  0 taken 228 (fallthrough)
branch  1 taken 0
      228:  776:			ret = deq_str;
      228:  776-block  0
unconditional  0 taken 228
        -:  777:
      228:  778:		if (strncmp(line, "Comment=", 8) == 0) {
      228:  778-block  0
branch  0 taken 38 (fallthrough)
branch  1 taken 190
       76:  779:			remotes[n].desc = (char *)xrealloc(remotes[n].desc,
       38:  780:							(ret_len + 1) * sizeof(char));
       38:  780-block  0
call    0 returned 38
       38:  781:			strcpy(remotes[n].desc, ret);
unconditional  0 taken 38
      190:  782:		} else if (strncmp(line, "Mountpoint=", 11) == 0) {
      190:  782-block  0
branch  0 taken 38 (fallthrough)
branch  1 taken 152
       38:  783:			char *tmp = (char *)NULL; 
       38:  784:			if (*ret == '~')
       38:  784-block  0
branch  0 taken 19 (fallthrough)
branch  1 taken 19
       19:  785:				tmp = tilde_expand(ret);
       19:  785-block  0
call    0 returned 19
unconditional  1 taken 19
       57:  786:			remotes[n].mountpoint = (char *)xrealloc(remotes[n].mountpoint,
       38:  786-block  0
branch  0 taken 19 (fallthrough)
branch  1 taken 19
       19:  786-block  1
unconditional  2 taken 19
       38:  786-block  2
call    3 returned 38
       19:  787:								((tmp ? strlen(tmp) : ret_len) + 1)
       19:  787-block  0
unconditional  0 taken 19
        -:  788:								* sizeof(char));
       38:  789:			strcpy(remotes[n].mountpoint, tmp ? tmp : ret);
branch  0 taken 19 (fallthrough)
branch  1 taken 19
       19:  789-block  0
unconditional  2 taken 19
       19:  789-block  1
unconditional  3 taken 19
       38:  790:			free(tmp);
       38:  791:			if (count_dir(remotes[n].mountpoint, CPOP) > 2)
       38:  791-block  0
call    0 returned 38
branch  1 taken 0 (fallthrough)
branch  2 taken 38
    #####:  792:				remotes[n].mounted = 1;
    %%%%%:  792-block  0
unconditional  0 never executed
      152:  793:		} else if (strncmp(line, "MountCmd=", 9) == 0) {
      152:  793-block  0
branch  0 taken 38 (fallthrough)
branch  1 taken 114
       38:  794:			int replaced = 0;
       38:  795:			if (remotes[n].mountpoint) {
       38:  795-block  0
branch  0 taken 38 (fallthrough)
branch  1 taken 0
       38:  796:				char *rep = replace_substr(ret, "%m", remotes[n].mountpoint);
       38:  796-block  0
call    0 returned 38
       38:  797:				if (rep) {
branch  0 taken 38 (fallthrough)
branch  1 taken 0
       76:  798:					remotes[n].mount_cmd = (char *)xrealloc(
       38:  799:								remotes[n].mount_cmd,
       38:  800:								(strlen(rep) + 1) * sizeof(char));
       38:  800-block  0
call    0 returned 38
       38:  801:					strcpy(remotes[n].mount_cmd, rep);
       38:  802:					free(rep);
       38:  803:					replaced = 1;
unconditional  0 taken 38
        -:  804:				}
        -:  805:			}
        -:  806:
       38:  807:			if (!replaced) {
       38:  807-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 38
    #####:  808:				remotes[n].mount_cmd = (char *)xrealloc(remotes[n].mount_cmd,
    #####:  809:									(ret_len + 1) * sizeof(char));
    %%%%%:  809-block  0
call    0 never executed
    #####:  810:				strcpy(remotes[n].mount_cmd, ret);
unconditional  0 never executed
        -:  811:			}
      114:  812:		} else if (strncmp(line, "UnmountCmd=", 11) == 0) {
      114:  812-block  0
branch  0 taken 38 (fallthrough)
branch  1 taken 76
       38:  813:			int replaced = 0;
       38:  814:			if (remotes[n].mountpoint) {
       38:  814-block  0
branch  0 taken 38 (fallthrough)
branch  1 taken 0
       38:  815:				char *rep = replace_substr(ret, "%m", remotes[n].mountpoint);
       38:  815-block  0
call    0 returned 38
       38:  816:				if (rep) {
branch  0 taken 38 (fallthrough)
branch  1 taken 0
       76:  817:					remotes[n].unmount_cmd = (char *)xrealloc(
       38:  818:							remotes[n].unmount_cmd,
       38:  819:							(strlen(rep) + 1) * sizeof(char));
       38:  819-block  0
call    0 returned 38
       38:  820:					strcpy(remotes[n].unmount_cmd, rep);
       38:  821:					free(rep);
       38:  822:					replaced = 1;
unconditional  0 taken 38
        -:  823:				}
        -:  824:			}
        -:  825:
       38:  826:			if (!replaced) {
       38:  826-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 38
    #####:  827:				remotes[n].mount_cmd = (char *)xrealloc(remotes[n].unmount_cmd,
    #####:  828:								(ret_len + 1) * sizeof(char));
    %%%%%:  828-block  0
call    0 never executed
    #####:  829:				strcpy(remotes[n].unmount_cmd, ret);
unconditional  0 never executed
        -:  830:			}
       76:  831:		} else if (strncmp(line, "AutoUnmount=", 12) == 0) {
       76:  831-block  0
branch  0 taken 38 (fallthrough)
branch  1 taken 38
       38:  832:			if (strcmp(ret, "true") == 0)
       38:  832-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 37
        1:  833:				remotes[n].auto_unmount = 1;
        1:  833-block  0
unconditional  0 taken 1
       38:  834:		} else if (strncmp(line, "AutoMount=", 10) == 0) {
       38:  834-block  0
branch  0 taken 38 (fallthrough)
branch  1 taken 0
       38:  835:			if (strcmp(ret, "true") == 0)
       38:  835-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 38
    #####:  836:				remotes[n].auto_mount = 1;
    %%%%%:  836-block  0
unconditional  0 never executed
        -:  837:		}
        -:  838:	}
        -:  839:
       26:  840:	free(line);
       26:  841:	close_fstream(fp, fd);
       26:  841-block  0
call    0 returned 26
        -:  842:
       26:  843:	if (remotes[n].name) {
branch  0 taken 19 (fallthrough)
branch  1 taken 7
       19:  844:		++n;
       19:  845:		remotes[n].name = (char *)NULL;
       19:  845-block  0
unconditional  0 taken 19
        -:  846:	}
        -:  847:
       26:  848:	remotes_n = n;
       26:  849:	return EXIT_SUCCESS;
       26:  849-block  0
unconditional  0 taken 26
        -:  850:}
        -:  851:
        -:  852:/* Evaluate external arguments, if any, and change initial variables to
        -:  853: * its corresponding value */
        -:  854:void
function external_arguments called 4 returned 100% blocks executed 13%
        4:  855:external_arguments(int argc, char **argv)
        -:  856:{
        -:  857:	/* Disable automatic error messages to be able to handle them
        -:  858:	 * myself via the '?' case in the switch */
        4:  859:	opterr = optind = 0;
        -:  860:
        -:  861:	/* Link long (--option) and short options (-o) for the getopt_long
        -:  862:	 * function */
        -:  863:	static struct option longopts[] = {
        -:  864:	    {"no-hidden", no_argument, 0, 'a'},
        -:  865:	    {"show-hidden", no_argument, 0, 'A'},
        -:  866:	    {"bookmarks-file", no_argument, 0, 'b'},
        -:  867:	    {"config-file", no_argument, 0, 'c'},
        -:  868:	    {"config-dir", required_argument, 0, 'D'},
        -:  869:	    {"no-eln", no_argument, 0, 'e'},
        -:  870:	    {"no-folders-first", no_argument, 0, 'f'},
        -:  871:	    {"folders-first", no_argument, 0, 'F'},
        -:  872:	    {"pager", no_argument, 0, 'g'},
        -:  873:	    {"no-pager", no_argument, 0, 'G'},
        -:  874:	    {"help", no_argument, 0, 'h'},
        -:  875:	    {"no-case-sensitive", no_argument, 0, 'i'},
        -:  876:	    {"case-sensitive", no_argument, 0, 'I'},
        -:  877:	    {"keybindings-file", no_argument, 0, 'k'},
        -:  878:	    {"no-long-view", no_argument, 0, 'l'},
        -:  879:	    {"long-view", no_argument, 0, 'L'},
        -:  880:	    {"dirhist-map", no_argument, 0, 'm'},
        -:  881:	    {"no-list-on-the-fly", no_argument, 0, 'o'},
        -:  882:	    {"list-on-the-fly", no_argument, 0, 'O'},
        -:  883:	    {"path", required_argument, 0, 'p'},
        -:  884:	    {"profile", required_argument, 0, 'P'},
        -:  885:	    {"splash", no_argument, 0, 's'},
        -:  886:	    {"stealth-mode", no_argument, 0, 'S'},
        -:  887:	    {"unicode", no_argument, 0, 'U'},
        -:  888:	    {"no-unicode", no_argument, 0, 'u'},
        -:  889:	    {"version", no_argument, 0, 'v'},
        -:  890:	    {"workspace", required_argument, 0, 'w'},
        -:  891:	    {"no-ext-cmds", no_argument, 0, 'x'},
        -:  892:	    {"light-mode", no_argument, 0, 'y'},
        -:  893:	    {"sort", required_argument, 0, 'z'},
        -:  894:
        -:  895:	    /* Only long options */
        -:  896:	    {"no-cd-auto", no_argument, 0, 0},
        -:  897:	    {"no-open-auto", no_argument, 0, 1},
        -:  898:	    {"no-restore-last-path", no_argument, 0, 2},
        -:  899:	    {"no-tips", no_argument, 0, 3},
        -:  900:	    {"disk-usage", no_argument, 0, 4},
        -:  901:	    {"no-classify", no_argument, 0, 6},
        -:  902:	    {"share-selbox", no_argument, 0, 7},
        -:  903:	    {"rl-vi-mode", no_argument, 0, 8},
        -:  904:	    {"max-dirhist", required_argument, 0, 9},
        -:  905:	    {"sort-reverse", no_argument, 0, 10},
        -:  906:	    {"no-files-counter", no_argument, 0, 11},
        -:  907:	    {"no-welcome-message", no_argument, 0, 12},
        -:  908:	    {"no-clear-screen", no_argument, 0, 13},
        -:  909:	    {"enable-logs", no_argument, 0, 15},
        -:  910:	    {"max-path", required_argument, 0, 16},
        -:  911:	    {"opener", required_argument, 0, 17},
        -:  912:	    {"expand-bookmarks", no_argument, 0, 18},
        -:  913:	    {"only-dirs", no_argument, 0, 19},
        -:  914:	    {"list-and-quit", no_argument, 0, 20},
        -:  915:	    {"color-scheme", required_argument, 0, 21},
        -:  916:	    {"cd-on-quit", no_argument, 0, 22},
        -:  917:	    {"no-dir-jumper", no_argument, 0, 23},
        -:  918:	    {"icons", no_argument, 0, 24},
        -:  919:	    {"icons-use-file-color", no_argument, 0, 25},
        -:  920:	    {"no-columns", no_argument, 0, 26},
        -:  921:	    {"no-colors", no_argument, 0, 27},
        -:  922:	    {"max-files", required_argument, 0, 28},
        -:  923:	    {"trash-as-rm", no_argument, 0, 29},
        -:  924:	    {"case-sens-dirjump", no_argument, 0, 30},
        -:  925:	    {"case-sens-path-comp", no_argument, 0, 31},
        -:  926:	    {"cwd-in-title", no_argument, 0, 32},
        -:  927:	    {"open", required_argument, 0, 33},
        -:  928:	    {"print-sel", no_argument, 0, 34},
        -:  929:	    {"no-suggestions", no_argument, 0, 35},
        -:  930:	    {"autojump", no_argument, 0, 36},
        -:  931:	    {"highlight", no_argument, 0, 37},
        -:  932:	    {"no-file-cap", no_argument, 0, 38},
        -:  933:	    {"no-file-ext", no_argument, 0, 39},
        -:  934:	    {"no-follow-symlink", no_argument, 0, 40},
        -:  935:	    {0, 0, 0, 0}};
        -:  936:
        -:  937:	/* Increment whenever a new (only) long option is added */
        4:  938:	int long_opts = 33;
        -:  939:	int optc;
        -:  940:	/* Variables to store arguments to options (-c, -p and -P) */
        4:  941:	char *path_value = (char *)NULL,
        4:  942:		 *alt_profile_value = (char *)NULL,
        4:  943:	     *alt_dir_value = (char *)NULL,
        4:  944:	     *config_value = (char *)NULL,
        4:  945:	     *kbinds_value = (char *)NULL,
        4:  946:	     *bm_value = (char *)NULL;
        -:  947:
        6:  948:	while ((optc = getopt_long(argc, argv,
        4:  948-block  0
unconditional  0 taken 4
        6:  948-block  1
call    1 returned 6
        -:  949:		    "+aAb:c:D:efFgGhiIk:lLmoOp:P:sSUuvw:xyz:", longopts,
        6:  950:		    (int *)0)) != EOF) {
branch  0 taken 2
branch  1 taken 4 (fallthrough)
        -:  951:		/* ':' and '::' in the short options string means 'required' and
        -:  952:		 * 'optional argument' respectivelly. Thus, 'p' and 'P' require
        -:  953:		 * an argument here. The plus char (+) tells getopt to stop
        -:  954:		 * processing at the first non-option (and non-argument) */
        2:  955:		switch (optc) {
        2:  955-block  0
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
branch 21 taken 0
branch 22 taken 0
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 0
branch 28 taken 0
branch 29 taken 0
branch 30 taken 2
branch 31 taken 0
branch 32 taken 0
branch 33 taken 0
branch 34 taken 0
branch 35 taken 0
branch 36 taken 0
branch 37 taken 0
branch 38 taken 0
branch 39 taken 0
branch 40 taken 0
branch 41 taken 0
branch 42 taken 0
branch 43 taken 0
branch 44 taken 0
branch 45 taken 0
branch 46 taken 0
branch 47 taken 0
branch 48 taken 0
branch 49 taken 0
branch 50 taken 0
branch 51 taken 0
branch 52 taken 0
branch 53 taken 0
branch 54 taken 0
branch 55 taken 0
branch 56 taken 0
branch 57 taken 0
branch 58 taken 0
branch 59 taken 0
branch 60 taken 0
branch 61 taken 0
branch 62 taken 0
branch 63 taken 0
branch 64 taken 0
branch 65 taken 0
branch 66 taken 0
branch 67 taken 0
branch 68 taken 0
branch 69 taken 0
branch 70 taken 0
        -:  956:
    #####:  957:		case 0: xargs.autocd = autocd = 0; break;
    %%%%%:  957-block  0
unconditional  0 never executed
    #####:  958:		case 1:	xargs.auto_open = auto_open = 0; break;
    %%%%%:  958-block  0
unconditional  0 never executed
    #####:  959:		case 2:	xargs.restore_last_path = restore_last_path = 0; break;
    %%%%%:  959-block  0
unconditional  0 never executed
    #####:  960:		case 3: xargs.tips = tips = 0; break;
    %%%%%:  960-block  0
unconditional  0 never executed
    #####:  961:		case 4:	xargs.disk_usage = disk_usage = 1; break;
    %%%%%:  961-block  0
unconditional  0 never executed
        -:  962:
    #####:  963:		case 6:	xargs.classify = classify = 0; break;
    %%%%%:  963-block  0
unconditional  0 never executed
    #####:  964:		case 7:	xargs.share_selbox = share_selbox = 1; break;
    %%%%%:  964-block  0
unconditional  0 never executed
    #####:  965:		case 8:	xargs.rl_vi_mode = 1; break;
    %%%%%:  965-block  0
unconditional  0 never executed
        -:  966:
    #####:  967:		case 9: {
    #####:  968:			if (!is_number(optarg))
    %%%%%:  968-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  969:				break;
    %%%%%:  969-block  0
unconditional  0 never executed
    #####:  970:			int opt_int = atoi(optarg);
    #####:  971:			if (opt_int >= 0)
    %%%%%:  971-block  0
branch  0 never executed
branch  1 never executed
    #####:  972:				xargs.max_dirhist = max_dirhist = opt_int;
    %%%%%:  972-block  0
unconditional  0 never executed
    #####:  973:		} break;
    %%%%%:  973-block  0
unconditional  0 never executed
        -:  974:
    #####:  975:		case 10: xargs.sort_reverse = sort_reverse = 1; break;
    %%%%%:  975-block  0
unconditional  0 never executed
    #####:  976:		case 11: xargs.files_counter = files_counter = 0; break;
    %%%%%:  976-block  0
unconditional  0 never executed
    #####:  977:		case 12: xargs.welcome_message = welcome_message = 0; break;
    %%%%%:  977-block  0
unconditional  0 never executed
    #####:  978:		case 13: xargs.clear_screen = clear_screen = 0; break;
    %%%%%:  978-block  0
unconditional  0 never executed
        -:  979:
    #####:  980:		case 15: xargs.logs = logs_enabled = 1;	break;
    %%%%%:  980-block  0
unconditional  0 never executed
        -:  981:
    #####:  982:		case 16: {
    #####:  983:			if (!is_number(optarg))
    %%%%%:  983-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  984:				break;
    %%%%%:  984-block  0
unconditional  0 never executed
    #####:  985:			int opt_int = atoi(optarg);
    #####:  986:			if (opt_int >= 0)
    %%%%%:  986-block  0
branch  0 never executed
branch  1 never executed
    #####:  987:				xargs.max_path = max_path = opt_int;
    %%%%%:  987-block  0
unconditional  0 never executed
    #####:  988:		} break;
    %%%%%:  988-block  0
unconditional  0 never executed
        -:  989:
    #####:  990:		case 17: opener = savestring(optarg, strlen(optarg)); break;
    %%%%%:  990-block  0
call    0 never executed
unconditional  1 never executed
    #####:  991:		case 18: xargs.expand_bookmarks = expand_bookmarks = 1; break;
    %%%%%:  991-block  0
unconditional  0 never executed
    #####:  992:		case 19: xargs.only_dirs = only_dirs = 1; break;
    %%%%%:  992-block  0
unconditional  0 never executed
    #####:  993:		case 20: xargs.list_and_quit = 1; break;
    %%%%%:  993-block  0
unconditional  0 never executed
    #####:  994:		case 21: usr_cscheme = savestring(optarg, strlen(optarg)); break;
    %%%%%:  994-block  0
call    0 never executed
unconditional  1 never executed
    #####:  995:		case 22: xargs.cd_on_quit = cd_on_quit = 1; break;
    %%%%%:  995-block  0
unconditional  0 never executed
    #####:  996:		case 23: xargs.no_dirjump = 1; break;
    %%%%%:  996-block  0
unconditional  0 never executed
        -:  997:#ifndef _NO_ICONS
    #####:  998:		case 24: xargs.icons = icons = 1; break;
    %%%%%:  998-block  0
unconditional  0 never executed
    #####:  999:		case 25:
    #####: 1000:			xargs.icons = icons = 1;
    #####: 1001:			xargs.icons_use_file_color = 1;
    #####: 1002:			break;
    %%%%%: 1002-block  0
unconditional  0 never executed
        -: 1003:#else
        -: 1004:		case 24: /* fallthrough */
        -: 1005:		case 25:
        -: 1006:			fprintf(stderr, _("%s: icons: %s\n"), PROGRAM_NAME, _(NOT_AVAILABLE));
        -: 1007:			exit(EXIT_FAILURE);
        -: 1008:#endif
    #####: 1009:		case 26:
    #####: 1010:			xargs.no_columns = 1;
    #####: 1011:			columned = 0;
    #####: 1012:			break;
    %%%%%: 1012-block  0
unconditional  0 never executed
        -: 1013:
    #####: 1014:		case 27:
    #####: 1015:			xargs.no_colors = 1;
    #####: 1016:			colorize = 0;
    #####: 1017:			break;
    %%%%%: 1017-block  0
unconditional  0 never executed
        -: 1018:
    #####: 1019:		case 28:
    #####: 1020:			if (!is_number(optarg))
    %%%%%: 1020-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1021:				break;
    %%%%%: 1021-block  0
unconditional  0 never executed
    #####: 1022:			int opt_int = atoi(optarg);
    #####: 1023:			if (opt_int >= 0)
    %%%%%: 1023-block  0
branch  0 never executed
branch  1 never executed
    #####: 1024:				xargs.max_files = max_files = opt_int;
    %%%%%: 1024-block  0
unconditional  0 never executed
    #####: 1025:			break;
    %%%%%: 1025-block  0
unconditional  0 never executed
        -: 1026:
    #####: 1027:		case 29:
        -: 1028:#ifndef _NO_TRASH
    #####: 1029:			xargs.trasrm = tr_as_rm = 1; break;
    %%%%%: 1029-block  0
unconditional  0 never executed
        -: 1030:#else
        -: 1031:		fprintf(stderr, _("%s: trash: %s\n"), PROGRAM_NAME, _(NOT_AVAILABLE));
        -: 1032:			exit(EXIT_FAILURE);
        -: 1033:#endif
    #####: 1034:		case 30: xargs.case_sens_dirjump = case_sens_dirjump = 1; break;
    %%%%%: 1034-block  0
unconditional  0 never executed
    #####: 1035:		case 31: xargs.case_sens_path_comp = case_sens_path_comp = 1; break;
    %%%%%: 1035-block  0
unconditional  0 never executed
        2: 1036:		case 32: xargs.cwd_in_title = 1; break;
        2: 1036-block  0
unconditional  0 taken 2
        -: 1037:
    #####: 1038:		case 33: {
        -: 1039:			struct stat attr;
    #####: 1040:			if (stat(optarg, &attr) == -1) {
    %%%%%: 1040-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1041:				fprintf(stderr, "%s: %s: %s", PROGRAM_NAME, optarg,
call    0 never executed
    #####: 1042:				    strerror(errno));
    %%%%%: 1042-block  0
call    0 never executed
    #####: 1043:				exit(EXIT_FAILURE);
call    0 never executed
        -: 1044:			}
        -: 1045:
    #####: 1046:			if ((attr.st_mode & S_IFMT) != S_IFDIR) {
    %%%%%: 1046-block  0
branch  0 never executed
branch  1 never executed
    #####: 1047:				tmp_dir = (char *)xnmalloc(5, sizeof(char));
    %%%%%: 1047-block  0
call    0 never executed
    #####: 1048:				strcpy(tmp_dir, "/tmp");
    #####: 1049:				mime_file = (char *)xnmalloc(PATH_MAX, sizeof(char));
call    0 never executed
    #####: 1050:				snprintf(mime_file, PATH_MAX,
    %%%%%: 1050-block  0
unconditional  0 never executed
    %%%%%: 1050-block  1
unconditional  1 never executed
    %%%%%: 1050-block  2
call    2 never executed
        -: 1051:				    "%s/.config/clifm/profiles/%s/mimelist.cfm",
    #####: 1052:				    getenv("HOME"), alt_profile ? alt_profile : "default");
branch  0 never executed
branch  1 never executed
    #####: 1053:				int ret = open_file(optarg);
call    0 never executed
    #####: 1054:				exit(ret);
call    0 never executed
        -: 1055:			}
        -: 1056:
    #####: 1057:			printf(_("%s: %s: Is a directory\n"), PROGRAM_NAME, optarg);
    %%%%%: 1057-block  0
call    0 never executed
call    1 never executed
    #####: 1058:			exit(EXIT_FAILURE);
call    0 never executed
        -: 1059:
        -: 1060:			/*			flags |= START_PATH;
        -: 1061:			path_value = optarg;
        -: 1062:			xargs.path = 1; */
        -: 1063:		} break;
        -: 1064:
    #####: 1065:		case 34: xargs.printsel = 1; break;
    %%%%%: 1065-block  0
unconditional  0 never executed
    #####: 1066:		case 35: xargs.suggestions = suggestions = 0; break;
    %%%%%: 1066-block  0
unconditional  0 never executed
    #####: 1067:		case 36: xargs.autojump = autojump = 0; break;
    %%%%%: 1067-block  0
unconditional  0 never executed
        -: 1068:#ifndef _NO_HIGHLIGHT
    #####: 1069:		case 37: xargs.highlight = highlight = 1; break;
    %%%%%: 1069-block  0
unconditional  0 never executed
        -: 1070:#endif
    #####: 1071:		case 38: xargs.check_cap = check_cap = 0; break;
    %%%%%: 1071-block  0
unconditional  0 never executed
    #####: 1072:		case 39: xargs.check_ext = check_ext = 0; break;
    %%%%%: 1072-block  0
unconditional  0 never executed
    #####: 1073:		case 40: xargs.follow_symlinks = follow_symlinks = 0; break;
    %%%%%: 1073-block  0
unconditional  0 never executed
        -: 1074:
    #####: 1075:		case 'a':
    #####: 1076:			flags &= ~HIDDEN; /* Remove HIDDEN from 'flags' */
    #####: 1077:			show_hidden = xargs.hidden = 0;
    #####: 1078:			break;
    %%%%%: 1078-block  0
unconditional  0 never executed
        -: 1079:
    #####: 1080:		case 'A':
    #####: 1081:			flags |= HIDDEN; /* Add HIDDEN to 'flags' */
    #####: 1082:			show_hidden = xargs.hidden = 1;
    #####: 1083:			break;
    %%%%%: 1083-block  0
unconditional  0 never executed
        -: 1084:
    #####: 1085:		case 'b':
    #####: 1086:			xargs.bm_file = 1;
    #####: 1087:			bm_value = optarg;
    #####: 1088:			break;
    %%%%%: 1088-block  0
unconditional  0 never executed
        -: 1089:
    #####: 1090:		case 'c':
    #####: 1091:			xargs.config = 1;
    #####: 1092:			config_value = optarg;
    #####: 1093:			break;
    %%%%%: 1093-block  0
unconditional  0 never executed
        -: 1094:
    #####: 1095:		case 'D': alt_dir_value = optarg; break;
    %%%%%: 1095-block  0
unconditional  0 never executed
    #####: 1096:		case 'e': xargs.noeln = no_eln = 1;	break;
    %%%%%: 1096-block  0
unconditional  0 never executed
        -: 1097:
    #####: 1098:		case 'f':
    #####: 1099:			flags &= ~FOLDERS_FIRST;
    #####: 1100:			list_folders_first = xargs.ffirst = 0;
    #####: 1101:			break;
    %%%%%: 1101-block  0
unconditional  0 never executed
        -: 1102:
    #####: 1103:		case 'F':
    #####: 1104:			flags |= FOLDERS_FIRST;
    #####: 1105:			list_folders_first = xargs.ffirst = 1;
    #####: 1106:			break;
    %%%%%: 1106-block  0
unconditional  0 never executed
        -: 1107:
    #####: 1108:		case 'g': pager = xargs.pager = 1; break;
    %%%%%: 1108-block  0
unconditional  0 never executed
    #####: 1109:		case 'G': pager = xargs.pager = 0; break;
    %%%%%: 1109-block  0
unconditional  0 never executed
        -: 1110:
    #####: 1111:		case 'h':
    #####: 1112:			flags |= HELP;
        -: 1113:			/* Do not display "Press any key to continue" */
    #####: 1114:			flags |= EXT_HELP;
    #####: 1115:			help_function();
    %%%%%: 1115-block  0
call    0 never executed
    #####: 1116:			exit(EXIT_SUCCESS);
call    0 never executed
        -: 1117:
    #####: 1118:		case 'i':
    #####: 1119:			flags &= ~CASE_SENS;
    #####: 1120:			case_sensitive = xargs.sensitive = 0;
    #####: 1121:			break;
    %%%%%: 1121-block  0
unconditional  0 never executed
        -: 1122:
    #####: 1123:		case 'I':
    #####: 1124:			flags |= CASE_SENS;
    #####: 1125:			case_sensitive = xargs.sensitive = 1;
    #####: 1126:			break;
    %%%%%: 1126-block  0
unconditional  0 never executed
        -: 1127:
    #####: 1128:		case 'k': kbinds_value = optarg; break;
    %%%%%: 1128-block  0
unconditional  0 never executed
    #####: 1129:		case 'l': long_view = xargs.longview = 0; break;
    %%%%%: 1129-block  0
unconditional  0 never executed
    #####: 1130:		case 'L': long_view = xargs.longview = 1; break;
    %%%%%: 1130-block  0
unconditional  0 never executed
    #####: 1131:		case 'm': dirhist_map = xargs.dirmap = 1; break;
    %%%%%: 1131-block  0
unconditional  0 never executed
        -: 1132:
    #####: 1133:		case 'o':
    #####: 1134:			flags &= ~ON_THE_FLY;
    #####: 1135:			cd_lists_on_the_fly = xargs.cd_list_auto = 0;
    #####: 1136:			break;
    %%%%%: 1136-block  0
unconditional  0 never executed
        -: 1137:
    #####: 1138:		case 'O':
    #####: 1139:			flags |= ON_THE_FLY;
    #####: 1140:			cd_lists_on_the_fly = xargs.cd_list_auto = 1;
    #####: 1141:			break;
    %%%%%: 1141-block  0
unconditional  0 never executed
        -: 1142:
    #####: 1143:		case 'p':
    #####: 1144:			flags |= START_PATH;
    #####: 1145:			path_value = optarg;
    #####: 1146:			xargs.path = 1;
    #####: 1147:			break;
    %%%%%: 1147-block  0
unconditional  0 never executed
        -: 1148:
    #####: 1149:		case 'P':
    #####: 1150:			flags |= ALT_PROFILE;
    #####: 1151:			alt_profile_value = optarg;
    #####: 1152:			break;
    %%%%%: 1152-block  0
unconditional  0 never executed
        -: 1153:
    #####: 1154:		case 's':
    #####: 1155:			flags |= SPLASH;
    #####: 1156:			splash_screen = xargs.splash = 1;
    #####: 1157:			break;
    %%%%%: 1157-block  0
unconditional  0 never executed
        -: 1158:
    #####: 1159:		case 'S': xargs.stealth_mode = 1; break;
    %%%%%: 1159-block  0
unconditional  0 never executed
    #####: 1160:		case 'u': unicode = xargs.unicode = 0; break;
    %%%%%: 1160-block  0
unconditional  0 never executed
    #####: 1161:		case 'U': unicode = xargs.unicode = 1; break;
    %%%%%: 1161-block  0
unconditional  0 never executed
        -: 1162:
    #####: 1163:		case 'v':
    #####: 1164:			flags |= PRINT_VERSION;
    #####: 1165:			version_function();
    %%%%%: 1165-block  0
call    0 never executed
    #####: 1166:			exit(EXIT_SUCCESS);
call    0 never executed
        -: 1167:
    #####: 1168:		case 'w': {
    #####: 1169:			if (!is_number(optarg))
    %%%%%: 1169-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1170:				break;
    %%%%%: 1170-block  0
unconditional  0 never executed
    #####: 1171:			int iopt = atoi(optarg);
        -: 1172:
    #####: 1173:			if (iopt >= 0 && iopt <= MAX_WS)
    %%%%%: 1173-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1173-block  1
branch  2 never executed
branch  3 never executed
    #####: 1174:				cur_ws = iopt - 1;
    %%%%%: 1174-block  0
unconditional  0 never executed
    #####: 1175:		} break;
    %%%%%: 1175-block  0
unconditional  0 never executed
        -: 1176:
    #####: 1177:		case 'x': ext_cmd_ok = xargs.ext = 0; break;
    %%%%%: 1177-block  0
unconditional  0 never executed
    #####: 1178:		case 'y': light_mode = xargs.light = 1; break;
    %%%%%: 1178-block  0
unconditional  0 never executed
        -: 1179:
    #####: 1180:		case 'z': {
    #####: 1181:			int arg = atoi(optarg);
    #####: 1182:			if (!is_number(optarg) || arg < 0 || arg > SORT_TYPES)
    %%%%%: 1182-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1182-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1182-block  2
branch  5 never executed
branch  6 never executed
    #####: 1183:				sort = 1;
    %%%%%: 1183-block  0
unconditional  0 never executed
        -: 1184:			else
    #####: 1185:				sort = arg;
    %%%%%: 1185-block  0
unconditional  0 never executed
    #####: 1186:			xargs.sort = sort;
    #####: 1187:		} break;
    %%%%%: 1187-block  0
unconditional  0 never executed
        -: 1188:
    #####: 1189:		case '?': /* If some unrecognized option was found... */
        -: 1190:
        -: 1191:			/* Options that requires an argument */
        -: 1192:			/* Short options */
    #####: 1193:			switch (optopt) {
    %%%%%: 1193-block  0
branch  0 never executed
branch  1 never executed
    #####: 1194:			case 'b': /* fallthrough */
        -: 1195:			case 'c': /* fallthrough */
        -: 1196:			case 'k': /* fallthrough */
        -: 1197:			case 'p': /* fallthrough */
        -: 1198:			case 'P': /* fallthrough */
        -: 1199:			case 'w': /* fallthrough */
        -: 1200:			case 'z':
    #####: 1201:				fprintf(stderr, _("%s: option requires an argument -- "
    %%%%%: 1201-block  0
call    0 never executed
call    1 never executed
        -: 1202:						  "'%c'\nTry '%s --help' for more information.\n"),
        -: 1203:				    PROGRAM_NAME, optopt, PNL);
    #####: 1204:				exit(EXIT_FAILURE);
call    0 never executed
        -: 1205:			}
        -: 1206:
        -: 1207:			/* Long options */
    #####: 1208:			if (optopt >= 0 && optopt <= long_opts) {
    %%%%%: 1208-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1208-block  1
branch  2 never executed
branch  3 never executed
    #####: 1209:				fprintf(stderr, _("%s: option requires an argument\nTry '%s "
    %%%%%: 1209-block  0
call    0 never executed
call    1 never executed
        -: 1210:					"--help' for more information.\n"), PROGRAM_NAME, PNL);
    #####: 1211:				exit(EXIT_FAILURE);
call    0 never executed
        -: 1212:			}
        -: 1213:
        -: 1214:			/* If unknown option is printable... */
    #####: 1215:			if (isprint(optopt)) {
    %%%%%: 1215-block  0
branch  0 never executed
branch  1 never executed
    #####: 1216:				fprintf(stderr, _("%s: invalid option -- '%c'\nUsage: "
    %%%%%: 1216-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1217:						  "%s %s\nTry '%s --help' for more information.\n"),
        -: 1218:				    PROGRAM_NAME, optopt, GRAL_USAGE, PNL, PNL);
        -: 1219:			} else {
    #####: 1220:				fprintf(stderr, _("%s: unknown option character '\\%x'\n"),
    %%%%%: 1220-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1221:				    PROGRAM_NAME, (unsigned int)optopt);
        -: 1222:			}
        -: 1223:
    #####: 1224:			exit(EXIT_FAILURE);
    %%%%%: 1224-block  0
call    0 never executed
        -: 1225:
    #####: 1226:		default:
    #####: 1227:			break;
    %%%%%: 1227-block  0
unconditional  0 never executed
        -: 1228:		}
        -: 1229:	}
        -: 1230:
        -: 1231:	/* Positional parameters. If a directory, use it as CliFM starting
        -: 1232:	 * path. Otherwise, open the file with the associated application
        -: 1233:	 * and exit */
        4: 1234:	int i = optind;
        4: 1235:	if (argv[i]) {
        4: 1235-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        -: 1236:		struct stat attr;
        2: 1237:		char *_exp_path = tilde_expand(argv[i]);
        2: 1237-block  0
call    0 returned 2
        2: 1238:		if (_exp_path) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1239:			if (stat(_exp_path, &attr) == -1) {
        2: 1239-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####: 1240:				fprintf(stderr, "%s: %s: %s", PROGRAM_NAME, _exp_path,
call    0 never executed
    #####: 1241:					strerror(errno));
    %%%%%: 1241-block  0
call    0 never executed
    #####: 1242:				free(_exp_path);
    #####: 1243:				exit(EXIT_FAILURE);
call    0 never executed
        -: 1244:			}
        2: 1245:			free(_exp_path);
        2: 1245-block  0
unconditional  0 taken 2
        -: 1246:		} else {
    #####: 1247:			fprintf(stderr, _("%s: Error expanding tilde\n"), PROGRAM_NAME);
    %%%%%: 1247-block  0
call    0 never executed
call    1 never executed
    #####: 1248:			exit(EXIT_FAILURE);
call    0 never executed
        -: 1249:		}
        -: 1250:
        2: 1251:		if ((attr.st_mode & S_IFMT) != S_IFDIR) {
        2: 1251-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 1252:			tmp_dir = (char *)xnmalloc(5, sizeof(char));
    %%%%%: 1252-block  0
call    0 never executed
    #####: 1253:			strcpy(tmp_dir, "/tmp");
    #####: 1254:			mime_file = (char *)xnmalloc(PATH_MAX, sizeof(char));
call    0 never executed
    #####: 1255:			snprintf(mime_file, PATH_MAX,
    %%%%%: 1255-block  0
unconditional  0 never executed
    %%%%%: 1255-block  1
unconditional  1 never executed
    %%%%%: 1255-block  2
call    2 never executed
        -: 1256:			    "%s/.config/clifm/profiles/%s/mimelist.cfm",
    #####: 1257:			    getenv("HOME"), alt_profile ? alt_profile : "default");
branch  0 never executed
branch  1 never executed
    #####: 1258:			int ret = open_file(argv[i]);
call    0 never executed
    #####: 1259:			exit(ret);
call    0 never executed
        -: 1260:		}
        -: 1261:
        2: 1262:		flags |= START_PATH;
        2: 1263:		path_value = argv[i];
        2: 1264:		xargs.path = 1;
        2: 1264-block  0
unconditional  0 taken 2
        -: 1265:	}
        -: 1266:
        4: 1267:	if (bm_value) {
        4: 1267-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####: 1268:		char *bm_exp = (char *)NULL;
        -: 1269:
    #####: 1270:		if (*bm_value == '~') {
    %%%%%: 1270-block  0
branch  0 never executed
branch  1 never executed
    #####: 1271:			bm_exp = tilde_expand(bm_value);
    %%%%%: 1271-block  0
call    0 never executed
    #####: 1272:			bm_value = bm_exp;
unconditional  0 never executed
        -: 1273:		}
        -: 1274:
    #####: 1275:		if (access(bm_value, R_OK) == -1) {
    %%%%%: 1275-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1276:			_err('e', PRINT_PROMPT, _("%s: %s: %s\n"
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1277:						  "Falling back to the default bookmarks file\n"),
    #####: 1278:			    PROGRAM_NAME, bm_value, strerror(errno));
    %%%%%: 1278-block  0
call    0 never executed
        -: 1279:		} else {
    #####: 1280:			alt_bm_file = savestring(bm_value, strlen(bm_value));
    %%%%%: 1280-block  0
call    0 never executed
    #####: 1281:			_err('n', PRINT_PROMPT, _("%s: Loaded alternative "
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1282:						  "bookmarks file\n"), PROGRAM_NAME);
        -: 1283:		}
        -: 1284:	}
        -: 1285:
        4: 1286:	if (alt_dir_value) {
        4: 1286-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####: 1287:		char *dir_exp = (char *)NULL;
        -: 1288:
    #####: 1289:		if (*alt_dir_value == '~') {
    %%%%%: 1289-block  0
branch  0 never executed
branch  1 never executed
    #####: 1290:			dir_exp = tilde_expand(alt_dir_value);
    %%%%%: 1290-block  0
call    0 never executed
    #####: 1291:			alt_dir_value = dir_exp;
unconditional  0 never executed
        -: 1292:		}
        -: 1293:
    #####: 1294:		int dir_ok = 1;
        -: 1295:		struct stat attr;
    #####: 1296:		if (stat(alt_dir_value, &attr) == -1) {
    %%%%%: 1296-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1297:			char *tmp_cmd[] = {"mkdir", "-p", alt_dir_value, NULL};
    #####: 1298:			int ret = launch_execve(tmp_cmd, FOREGROUND, E_NOSTDERR);
    %%%%%: 1298-block  0
call    0 never executed
    #####: 1299:			if (ret != EXIT_SUCCESS) {
branch  0 never executed
branch  1 never executed
    #####: 1300:				_err('e', PRINT_PROMPT, _("%s: %s: Cannot create directory "
    %%%%%: 1300-block  0
call    0 never executed
call    1 never executed
        -: 1301:				"(error %d)\nFalling back to default configuration directory\n"),
        -: 1302:					PROGRAM_NAME, alt_dir_value, ret);
    #####: 1303:				dir_ok = 0;
unconditional  0 never executed
        -: 1304:			}
        -: 1305:		}
        -: 1306:
    #####: 1307:		if (access(alt_dir_value, W_OK) == -1) {
    %%%%%: 1307-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1308:			if (dir_ok) {
    %%%%%: 1308-block  0
branch  0 never executed
branch  1 never executed
    #####: 1309:				_err('e', PRINT_PROMPT, _("%s: %s: %s\n"
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1310:					"Falling back to default configuration directory\n"),
    #####: 1311:					PROGRAM_NAME, alt_dir_value, strerror(errno));
    %%%%%: 1311-block  0
call    0 never executed
        -: 1312:			}
        -: 1313:		} else {
    #####: 1314:			alt_config_dir = savestring(alt_dir_value, strlen(alt_dir_value));
    %%%%%: 1314-block  0
call    0 never executed
    #####: 1315:			_err(0, PRINT_PROMPT, _("%s: %s: Using alternative "
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1316:				"configuration directory\n"), PROGRAM_NAME, alt_config_dir);
        -: 1317:		}
        -: 1318:
    #####: 1319:		if (dir_exp)
    %%%%%: 1319-block  0
branch  0 never executed
branch  1 never executed
    #####: 1320:			free(dir_exp);
    %%%%%: 1320-block  0
unconditional  0 never executed
        -: 1321:	}
        -: 1322:
        4: 1323:	if (kbinds_value) {
        4: 1323-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####: 1324:		char *kbinds_exp = (char *)NULL;
    #####: 1325:		if (*kbinds_value == '~') {
    %%%%%: 1325-block  0
branch  0 never executed
branch  1 never executed
    #####: 1326:			kbinds_exp = tilde_expand(kbinds_value);
    %%%%%: 1326-block  0
call    0 never executed
    #####: 1327:			kbinds_value = kbinds_exp;
unconditional  0 never executed
        -: 1328:		}
        -: 1329:
        -: 1330:		/*      if (alt_kbinds_file) {
        -: 1331:			free(alt_kbinds_file);
        -: 1332:			alt_kbinds_file = (char *)NULL;
        -: 1333:		} */
        -: 1334:
    #####: 1335:		if (access(kbinds_value, R_OK) == -1) {
    %%%%%: 1335-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1336:			_err('e', PRINT_PROMPT, _("%s: %s: %s\n"
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1337:						  "Falling back to the default keybindings file\n"),
    #####: 1338:			    PROGRAM_NAME, kbinds_value, strerror(errno));
    %%%%%: 1338-block  0
call    0 never executed
        -: 1339:			/*          xargs.config = -1; */
        -: 1340:		} else {
    #####: 1341:			alt_kbinds_file = savestring(kbinds_value, strlen(kbinds_value));
    %%%%%: 1341-block  0
call    0 never executed
    #####: 1342:			_err('n', PRINT_PROMPT, _("%s: Loaded alternative "
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1343:				"keybindings file\n"), PROGRAM_NAME);
        -: 1344:		}
        -: 1345:
    #####: 1346:		if (kbinds_exp)
    %%%%%: 1346-block  0
branch  0 never executed
branch  1 never executed
    #####: 1347:			free(kbinds_exp);
    %%%%%: 1347-block  0
unconditional  0 never executed
        -: 1348:	}
        -: 1349:
        4: 1350:	if (xargs.config && config_value) {
        4: 1350-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 1350-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    #####: 1351:		char *config_exp = (char *)NULL;
        -: 1352:
    #####: 1353:		if (*config_value == '~') {
    %%%%%: 1353-block  0
branch  0 never executed
branch  1 never executed
    #####: 1354:			config_exp = tilde_expand(config_value);
    %%%%%: 1354-block  0
call    0 never executed
    #####: 1355:			config_value = config_exp;
unconditional  0 never executed
        -: 1356:		}
        -: 1357:
        -: 1358:		/*      if (alt_config_file) {
        -: 1359:			free(alt_config_file);
        -: 1360:			alt_config_file = (char *)NULL;
        -: 1361:		} */
        -: 1362:
    #####: 1363:		if (access(config_value, R_OK) == -1) {
    %%%%%: 1363-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1364:			_err('e', PRINT_PROMPT, _("%s: %s: %s\n"
call    0 never executed
call    1 never executed
        -: 1365:				"Falling back to default\n"), PROGRAM_NAME,
    #####: 1366:			    config_value, strerror(errno));
    %%%%%: 1366-block  0
call    0 never executed
    #####: 1367:			xargs.config = -1;
unconditional  0 never executed
        -: 1368:		} else {
    #####: 1369:			alt_config_file = savestring(config_value, strlen(config_value));
    %%%%%: 1369-block  0
call    0 never executed
    #####: 1370:			_err('n', PRINT_PROMPT, _("%s: Loaded alternative "
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1371:				"configuration file\n"), PROGRAM_NAME);
        -: 1372:		}
        -: 1373:
    #####: 1374:		if (config_exp)
    %%%%%: 1374-block  0
branch  0 never executed
branch  1 never executed
    #####: 1375:			free(config_exp);
    %%%%%: 1375-block  0
unconditional  0 never executed
        -: 1376:	}
        -: 1377:
        4: 1378:	if ((flags & START_PATH) && path_value) {
        4: 1378-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2: 1378-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 1379:		char *path_exp = (char *)NULL;
        -: 1380:		char path_tmp[PATH_MAX];
        -: 1381:
        2: 1382:		if (*path_value == '~') {
        2: 1382-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 1383:			path_exp = tilde_expand(path_value);
    %%%%%: 1383-block  0
call    0 never executed
    #####: 1384:			xstrsncpy(path_tmp, path_exp, PATH_MAX);
call    0 never executed
unconditional  1 never executed
        2: 1385:		} else if (*path_value != '/') {
        2: 1385-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 1386:			snprintf(path_tmp, PATH_MAX - 1, "%s/%s", getenv("PWD"), path_value);
    %%%%%: 1386-block  0
call    0 never executed
unconditional  1 never executed
        -: 1387:		} else {
        2: 1388:			xstrsncpy(path_tmp, path_value, PATH_MAX);
        2: 1388-block  0
call    0 returned 2
unconditional  1 taken 2
        -: 1389:		}
        -: 1390:
        2: 1391:		if (xchdir(path_tmp, SET_TITLE) == 0) {
        2: 1391-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2: 1392:			if (cur_ws == UNSET)
        2: 1392-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1393:				cur_ws = DEF_CUR_WS;
        2: 1393-block  0
unconditional  0 taken 2
        2: 1394:			if (ws[cur_ws].path)
        2: 1394-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 1395:				free(ws[cur_ws].path);
    %%%%%: 1395-block  0
unconditional  0 never executed
        -: 1396:
        2: 1397:			ws[cur_ws].path = savestring(path_tmp, strlen(path_tmp));
        2: 1397-block  0
call    0 returned 2
unconditional  1 taken 2
        -: 1398:		} else { /* Error changing directory */
    #####: 1399:			if (xargs.list_and_quit == 1) {
    %%%%%: 1399-block  0
branch  0 never executed
branch  1 never executed
    #####: 1400:				fprintf(stderr, "%s: %s: %s\n", PROGRAM_NAME,
call    0 never executed
    #####: 1401:				    path_tmp, strerror(errno));
    %%%%%: 1401-block  0
call    0 never executed
    #####: 1402:				exit(EXIT_FAILURE);
call    0 never executed
        -: 1403:			}
        -: 1404:
    #####: 1405:			_err('w', PRINT_PROMPT, "%s: %s: %s\n", PROGRAM_NAME,
call    0 never executed
unconditional  1 never executed
    #####: 1406:			    path_tmp, strerror(errno));
    %%%%%: 1406-block  0
call    0 never executed
        -: 1407:		}
        -: 1408:
        2: 1409:		if (path_exp)
        2: 1409-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 1410:			free(path_exp);
    %%%%%: 1410-block  0
unconditional  0 never executed
        -: 1411:	}
        -: 1412:
       4*: 1413:	if ((flags & ALT_PROFILE) && alt_profile_value) {
        4: 1413-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 1413-block  1
branch  2 never executed
branch  3 never executed
    #####: 1414:		if (alt_profile)
    %%%%%: 1414-block  0
branch  0 never executed
branch  1 never executed
    #####: 1415:			free(alt_profile);
    %%%%%: 1415-block  0
unconditional  0 never executed
    #####: 1416:		alt_profile = savestring(alt_profile_value, strlen(alt_profile_value));
    %%%%%: 1416-block  0
call    0 never executed
unconditional  1 never executed
        -: 1417:	}
        4: 1418:}
        -: 1419:
        -: 1420:void
function unset_xargs called 4 returned 100% blocks executed 100%
        4: 1421:unset_xargs(void)
        -: 1422:{
        4: 1423:	xargs.autojump = UNSET;
        4: 1424:	xargs.auto_open = UNSET;
        4: 1425:	xargs.autocd = UNSET;
        4: 1426:	xargs.bm_file = UNSET;
        4: 1427:	xargs.case_sens_dirjump = UNSET;
        4: 1428:	xargs.case_sens_path_comp = UNSET;
        4: 1429:	xargs.cd_list_auto = UNSET;
        4: 1430:	xargs.check_cap = UNSET;
        4: 1431:	xargs.check_ext = UNSET;
        4: 1432:	xargs.cd_on_quit = UNSET;
        4: 1433:	xargs.classify = UNSET;
        4: 1434:	xargs.clear_screen = UNSET;
        4: 1435:	xargs.color_scheme = UNSET;
        4: 1436:	xargs.config = UNSET;
        4: 1437:	xargs.cwd_in_title = UNSET;
        4: 1438:	xargs.dirmap = UNSET;
        4: 1439:	xargs.disk_usage = UNSET;
        4: 1440:	xargs.expand_bookmarks = UNSET;
        4: 1441:	xargs.ext = UNSET;
        4: 1442:	xargs.ffirst = UNSET;
        4: 1443:	xargs.files_counter = UNSET;
        4: 1444:	xargs.follow_symlinks = UNSET;
        4: 1445:	xargs.hidden = UNSET;
        -: 1446:#ifndef _NO_HIGHLIGHT
        4: 1447:	xargs.highlight = UNSET;
        -: 1448:#endif
        -: 1449:#ifndef _NO_ICONS
        4: 1450:	xargs.icons = UNSET;
        4: 1451:	xargs.icons_use_file_color = UNSET;
        -: 1452:#endif
        4: 1453:	xargs.light = UNSET;
        4: 1454:	xargs.list_and_quit = UNSET;
        4: 1455:	xargs.logs = UNSET;
        4: 1456:	xargs.longview = UNSET;
        4: 1457:	xargs.max_dirhist = UNSET;
        4: 1458:	xargs.max_path = UNSET;
        4: 1459:	xargs.no_colors = UNSET;
        4: 1460:	xargs.no_columns = UNSET;
        4: 1461:	xargs.no_dirjump = UNSET;
        4: 1462:	xargs.noeln = UNSET;
        4: 1463:	xargs.only_dirs = UNSET;
        4: 1464:	xargs.path = UNSET;
        4: 1465:	xargs.pager = UNSET;
        4: 1466:	xargs.printsel = UNSET;
        4: 1467:	xargs.restore_last_path = UNSET;
        4: 1468:	xargs.rl_vi_mode = UNSET;
        4: 1469:	xargs.sensitive = UNSET;
        4: 1470:	xargs.share_selbox = UNSET;
        4: 1471:	xargs.sort = UNSET;
        4: 1472:	xargs.sort_reverse = UNSET;
        4: 1473:	xargs.splash = UNSET;
        4: 1474:	xargs.stealth_mode = UNSET;
        -: 1475:#ifndef _NO_SUGGESTIONS
        4: 1476:	xargs.suggestions = UNSET;
        -: 1477:#endif
        4: 1478:	xargs.tips = UNSET;
        -: 1479:#ifndef _NO_TRASH
        4: 1480:	xargs.trasrm = UNSET;
        -: 1481:#endif
        4: 1482:	xargs.unicode = UNSET;
        4: 1483:	xargs.welcome_message = UNSET;
        4: 1484:}
        -: 1485:
        -: 1486:/* Keep track of attributes of the shell. Make sure the shell is running
        -: 1487: * interactively as the foreground job before proceeding.
        -: 1488: * Taken from:
        -: 1489: * https://www.gnu.org/software/libc/manual/html_node/Initializing-the-Shell.html#Initializing-the-Shell
        -: 1490: * */
        -: 1491:void
function init_shell called 4 returned 100% blocks executed 71%
        4: 1492:init_shell(void)
        -: 1493:{
        -: 1494:	/* If shell is not interactive */
        4: 1495:	if (!isatty(STDIN_FILENO)) {
        4: 1495-block  0
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
    #####: 1496:		handle_stdin();
    %%%%%: 1496-block  0
call    0 never executed
    #####: 1497:		return;
unconditional  0 never executed
        -: 1498:	}
        -: 1499:
        -: 1500:	/* Loop until we are in the foreground */
        4: 1501:	while (tcgetpgrp(STDIN_FILENO) != (own_pid = getpgrp()))
        4: 1501-block  0
unconditional  0 taken 4
        4: 1501-block  1
call    1 returned 4
call    2 returned 4
branch  3 taken 0
branch  4 taken 4 (fallthrough)
    #####: 1502:		kill(-own_pid, SIGTTIN);
    %%%%%: 1502-block  0
call    0 never executed
unconditional  1 never executed
        -: 1503:
        -: 1504:	/* Ignore interactive and job-control signals */
        4: 1505:	set_signals_to_ignore();
        4: 1505-block  0
call    0 returned 4
        -: 1506:	/* Put ourselves in our own process group */
        4: 1507:	own_pid = get_own_pid();
call    0 returned 4
        -: 1508:
        4: 1509:	if (flags & ROOT_USR) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -: 1510:		/* Make the shell pgid (process group id) equal to its pid */
        -: 1511:		/* Without the setpgid line below, the program cannot be run
        -: 1512:		 * with sudo, but it can be run nonetheless by the root user */
        1: 1513:		if (setpgid(own_pid, own_pid) < 0) {
        1: 1513-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1514:			_err(0, NOPRINT_PROMPT, "%s: setpgid: %s\n", PROGRAM_NAME,
call    0 never executed
    #####: 1515:			    strerror(errno));
    %%%%%: 1515-block  0
call    0 never executed
    #####: 1516:			exit(EXIT_FAILURE);
call    0 never executed
        -: 1517:		}
        -: 1518:	}
        -: 1519:
        -: 1520:	/* Grab control of the terminal */
        4: 1521:	tcsetpgrp(STDIN_FILENO, own_pid);
        4: 1521-block  0
call    0 returned 4
        -: 1522:	/* Save default terminal attributes for shell */
        4: 1523:	tcgetattr(STDIN_FILENO, &shell_tmodes);
call    0 returned 4
        4: 1524:	return;
unconditional  0 taken 4
        -: 1525:}
        -: 1526:
        -: 1527:/* Get current entries in the Selection Box, if any. */
        -: 1528:int
function get_sel_files called 513 returned 100% blocks executed 92%
      513: 1529:get_sel_files(void)
        -: 1530:{
      513: 1531:	if (!selfile_ok || !config_ok)
      513: 1531-block  0
branch  0 taken 513 (fallthrough)
branch  1 taken 0
      513: 1531-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 513
    #####: 1532:		return EXIT_FAILURE;
    %%%%%: 1532-block  0
unconditional  0 never executed
        -: 1533:
        -: 1534:	/* First, clear the sel array, in case it was already used */
      513: 1535:	if (sel_n > 0) {
      513: 1535-block  0
branch  0 taken 53 (fallthrough)
branch  1 taken 460
       53: 1536:		int i = (int)sel_n;
      180: 1537:		while (--i >= 0)
       53: 1537-block  0
unconditional  0 taken 53
      180: 1537-block  1
branch  1 taken 127
branch  2 taken 53 (fallthrough)
      127: 1538:			free(sel_elements[i]);
      127: 1538-block  0
unconditional  0 taken 127
        -: 1539:	}
        -: 1540:
        -: 1541:	/*  free(sel_elements); */
        -: 1542:
      513: 1543:	sel_n = 0;
        -: 1544:
        -: 1545:	/* Open the tmp sel file and load its contents into the sel array */
        -: 1546:	int fd;
      513: 1547:	FILE *fp = open_fstream_r(sel_file, &fd);
      513: 1547-block  0
call    0 returned 513
        -: 1548:	/*  sel_elements = xcalloc(1, sizeof(char *)); */
      513: 1549:	if (!fp)
branch  0 taken 460 (fallthrough)
branch  1 taken 53
      460: 1550:		return EXIT_FAILURE;
      460: 1550-block  0
unconditional  0 taken 460
        -: 1551:
        -: 1552:	/* Since this file contains only paths, we can be sure no line
        -: 1553:	 * length will be larger than PATH_MAX */
       53: 1554:	char line[PATH_MAX] = "";
      180: 1555:	while (fgets(line, (int)sizeof(line), fp)) {
       53: 1555-block  0
unconditional  0 taken 53
      180: 1555-block  1
call    1 returned 180
branch  2 taken 127
branch  3 taken 53 (fallthrough)
      127: 1556:		size_t len = strlen(line);
        -: 1557:
      127: 1558:		if (line[len - 1] == '\n')
      127: 1558-block  0
branch  0 taken 127 (fallthrough)
branch  1 taken 0
      127: 1559:			line[len - 1] = '\0';
      127: 1559-block  0
unconditional  0 taken 127
        -: 1560:
     127*: 1561:		if (!*line || *line == '#')
      127: 1561-block  0
branch  0 taken 127 (fallthrough)
branch  1 taken 0
      127: 1561-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 127
    #####: 1562:			continue;
    %%%%%: 1562-block  0
unconditional  0 never executed
        -: 1563:
      127: 1564:		sel_elements = (char **)xrealloc(sel_elements, (sel_n + 1) * sizeof(char *));
      127: 1564-block  0
call    0 returned 127
      127: 1565:		sel_elements[sel_n++] = savestring(line, len);
call    0 returned 127
unconditional  1 taken 127
        -: 1566:	}
        -: 1567:
       53: 1568:	close_fstream(fp, fd);
       53: 1568-block  0
call    0 returned 53
       53: 1569:	return EXIT_SUCCESS;
unconditional  0 taken 53
        -: 1570:}
        -: 1571:
        -: 1572:size_t
function get_cdpath called 4 returned 100% blocks executed 100%
        4: 1573:get_cdpath(void)
        -: 1574:{
        4: 1575:	char *p = getenv("CDPATH");
        4: 1575-block  0
call    0 returned 4
        4: 1576:	if (!p || !*p)
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3: 1576-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 3
        1: 1577:		return 0;
        1: 1577-block  0
unconditional  0 taken 1
        -: 1578:
        3: 1579:	char *t = savestring(p, strlen(p));
        3: 1579-block  0
call    0 returned 3
        -: 1580:
        -: 1581:	/* Get each path in CDPATH */
        3: 1582:	size_t i, n = 0, len = 0;
        6: 1583:	for (i = 0; t[i]; i++) {
unconditional  0 taken 3
        3: 1583-block  0
unconditional  1 taken 3
        6: 1583-block  1
branch  2 taken 6
branch  3 taken 0 (fallthrough)
        -: 1584:		/* Store path in CDPATH in a tmp buffer */
        -: 1585:		char buf[PATH_MAX];
       54: 1586:		while (t[i] && t[i] != ':')
        6: 1586-block  0
unconditional  0 taken 6
       54: 1586-block  1
branch  1 taken 51 (fallthrough)
branch  2 taken 3
       51: 1586-block  2
branch  3 taken 48
branch  4 taken 3 (fallthrough)
       48: 1587:			buf[len++] = t[i++];
       48: 1587-block  0
unconditional  0 taken 48
        6: 1588:		buf[len] = '\0';
        -: 1589:
        -: 1590:		/* Make room in cdpaths for a new path */
        6: 1591:		cdpaths = (char **)xrealloc(cdpaths, (n + 2) * sizeof(char *));
        6: 1591-block  0
call    0 returned 6
        -: 1592:
        -: 1593:		/* Dump the buffer into the global cdpaths array */
        6: 1594:		cdpaths[n++] = savestring(buf, len);
call    0 returned 6
        -: 1595:
        6: 1596:		len = 0;
        6: 1597:		if (!t[i])
branch  0 taken 3 (fallthrough)
branch  1 taken 3
        3: 1598:			break;
        3: 1598-block  0
unconditional  0 taken 3
        -: 1599:	}
        -: 1600:
        3: 1601:	cdpaths[n] = (char *)NULL;
        -: 1602:
        3: 1603:	free(t);
        3: 1604:	return n;
        3: 1604-block  0
unconditional  0 taken 3
        -: 1605:}
        -: 1606:
        -: 1607:/* Store all paths in the PATH environment variable into a globally
        -: 1608: * declared array (paths) */
        -: 1609:size_t
function get_path_env called 22 returned 100% blocks executed 95%
       22: 1610:get_path_env(void)
        -: 1611:{
       22: 1612:	size_t i = 0;
        -: 1613:	/* Get the value of the PATH env variable */
       22: 1614:	char *path_tmp = (char *)NULL;
        -: 1615:
        -: 1616:#if __linux__
      550: 1617:	for (i = 0; __environ[i]; i++) {
       22: 1617-block  0
unconditional  0 taken 22
      528: 1617-block  1
unconditional  1 taken 528
      550: 1617-block  2
branch  2 taken 550
branch  3 taken 0 (fallthrough)
      550: 1618:		if (*__environ[i] == 'P' && strncmp(__environ[i], "PATH", 4) == 0) {
      550: 1618-block  0
branch  0 taken 43 (fallthrough)
branch  1 taken 507
       43: 1618-block  1
branch  2 taken 22 (fallthrough)
branch  3 taken 21
       22: 1619:			path_tmp = straft(__environ[i], '=');
       22: 1619-block  0
call    0 returned 22
       22: 1620:			break;
unconditional  0 taken 22
        -: 1621:		}
        -: 1622:	}
        -: 1623:#else
        -: 1624:	char *ptr = getenv("PATH");
        -: 1625:	if (!ptr || !*ptr)
        -: 1626:		return 0;
        -: 1627:	path_tmp = savestring(ptr, strlen(ptr));
        -: 1628:#endif
        -: 1629:
       22: 1630:	if (!path_tmp)
       22: 1630-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 22
    #####: 1631:		return 0;
    %%%%%: 1631-block  0
unconditional  0 never executed
        -: 1632:
        -: 1633:	/* Get each path in PATH */
       22: 1634:	size_t path_num = 0, length = 0;
      132: 1635:	for (i = 0; path_tmp[i]; i++) {
       22: 1635-block  0
unconditional  0 taken 22
      110: 1635-block  1
unconditional  1 taken 110
      132: 1635-block  2
branch  2 taken 132
branch  3 taken 0 (fallthrough)
        -: 1636:		/* Store path in PATH in a tmp buffer */
        -: 1637:		char buf[PATH_MAX];
     2178: 1638:		while (path_tmp[i] && path_tmp[i] != ':')
      132: 1638-block  0
unconditional  0 taken 132
     2178: 1638-block  1
branch  1 taken 2156 (fallthrough)
branch  2 taken 22
     2156: 1638-block  2
branch  3 taken 2046
branch  4 taken 110 (fallthrough)
     2046: 1639:			buf[length++] = path_tmp[i++];
     2046: 1639-block  0
unconditional  0 taken 2046
      132: 1640:		buf[length] = '\0';
        -: 1641:
        -: 1642:		/* Make room in paths for a new path */
      132: 1643:		paths = (char **)xrealloc(paths, (path_num + 1) * sizeof(char *));
      132: 1643-block  0
call    0 returned 132
        -: 1644:
        -: 1645:		/* Dump the buffer into the global paths array */
      132: 1646:		paths[path_num] = savestring(buf, length);
call    0 returned 132
        -: 1647:
      132: 1648:		path_num++;
      132: 1649:		length = 0;
      132: 1650:		if (!path_tmp[i])
branch  0 taken 22 (fallthrough)
branch  1 taken 110
       22: 1651:			break;
       22: 1651-block  0
unconditional  0 taken 22
        -: 1652:	}
        -: 1653:
       22: 1654:	free(path_tmp);
       22: 1655:	return path_num;
       22: 1655-block  0
unconditional  0 taken 22
        -: 1656:}
        -: 1657:
        -: 1658:/* Set PATH to last visited directory and CUR_WS to last used
        -: 1659: * workspace */
        -: 1660:int
function get_last_path called 8 returned 100% blocks executed 88%
        8: 1661:get_last_path(void)
        -: 1662:{
        8: 1663:	if (!config_dir)
        8: 1663-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####: 1664:		return EXIT_FAILURE;
    %%%%%: 1664-block  0
unconditional  0 never executed
        -: 1665:
        8: 1666:	char *last_file = (char *)xnmalloc(strlen(config_dir) + 7, sizeof(char));
        8: 1666-block  0
call    0 returned 8
        8: 1667:	sprintf(last_file, "%s/.last", config_dir);
        -: 1668:
        -: 1669:	int fd;
        8: 1670:	FILE *fp = open_fstream_r(last_file, &fd);
call    0 returned 8
        8: 1671:	if (!fp) {
branch  0 taken 1 (fallthrough)
branch  1 taken 7
        1: 1672:		free(last_file);
        1: 1673:		return EXIT_FAILURE;
        1: 1673-block  0
unconditional  0 taken 1
        -: 1674:	}
        -: 1675:
        -: 1676:	/*  size_t i;
        -: 1677:	for (i = 0; i < MAX_WS; i++) {
        -: 1678:
        -: 1679:		if (ws[i].path) {
        -: 1680:			free(ws[i].path);
        -: 1681:			ws[i].path = (char *)NULL;
        -: 1682:		}
        -: 1683:	} */
        -: 1684:
        7: 1685:	char line[PATH_MAX] = "";
       35: 1686:	while (fgets(line, (int)sizeof(line), fp)) {
        7: 1686-block  0
unconditional  0 taken 7
       35: 1686-block  1
call    1 returned 35
branch  2 taken 28
branch  3 taken 7 (fallthrough)
       28: 1687:		char *p = line;
      28*: 1688:		if (!*p || !strchr(p, '/'))
       28: 1688-block  0
branch  0 taken 28 (fallthrough)
branch  1 taken 0
       28: 1688-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 28
    #####: 1689:			continue;
    %%%%%: 1689-block  0
unconditional  0 never executed
      28*: 1690:		if (!strchr(p, ':'))
       28: 1690-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 28
    #####: 1691:			continue;
    %%%%%: 1691-block  0
unconditional  0 never executed
        -: 1692:
       28: 1693:		size_t len = strlen(p);
       28: 1694:		if (p[len - 1] == '\n')
       28: 1694-block  0
branch  0 taken 28 (fallthrough)
branch  1 taken 0
       28: 1695:			p[len - 1] = '\0';
       28: 1695-block  0
unconditional  0 taken 28
        -: 1696:
       28: 1697:		int cur = 0;
       28: 1698:		if (*p == '*') {
       28: 1698-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 21
       7*: 1699:			if (!*(++p))
        7: 1699-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    #####: 1700:				continue;
    %%%%%: 1700-block  0
unconditional  0 never executed
        7: 1701:			cur = 1;
        7: 1701-block  0
unconditional  0 taken 7
        -: 1702:		}
        -: 1703:
       28: 1704:		int ws_n = *p - '0';
       28: 1705:		if (cur && cur_ws == UNSET)
       28: 1705-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 21
        7: 1705-block  1
branch  2 taken 6 (fallthrough)
branch  3 taken 1
        6: 1706:			cur_ws = ws_n;
        6: 1706-block  0
unconditional  0 taken 6
        -: 1707:
       28: 1708:		if (ws_n >= 0 && ws_n < MAX_WS && !ws[ws_n].path)
       28: 1708-block  0
branch  0 taken 28 (fallthrough)
branch  1 taken 0
       28: 1708-block  1
branch  2 taken 28 (fallthrough)
branch  3 taken 0
       28: 1708-block  2
branch  4 taken 27 (fallthrough)
branch  5 taken 1
       27: 1709:			ws[ws_n].path = savestring(p + 2, strlen(p + 2));
       27: 1709-block  0
call    0 returned 27
unconditional  1 taken 27
        -: 1710:	}
        -: 1711:
        7: 1712:	close_fstream(fp, fd);
        7: 1712-block  0
call    0 returned 7
        7: 1713:	free(last_file);
        7: 1714:	return EXIT_SUCCESS;
unconditional  0 taken 7
        -: 1715:}
        -: 1716:
        -: 1717:/* Restore pinned dir from file */
        -: 1718:int
function load_pinned_dir called 4 returned 100% blocks executed 33%
        4: 1719:load_pinned_dir(void)
        -: 1720:{
        4: 1721:	if (!config_ok)
        4: 1721-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####: 1722:		return EXIT_FAILURE;
    %%%%%: 1722-block  0
unconditional  0 never executed
        -: 1723:
        4: 1724:	char *pin_file = (char *)xnmalloc(strlen(config_dir) + 6, sizeof(char));
        4: 1724-block  0
call    0 returned 4
        4: 1725:	sprintf(pin_file, "%s/.pin", config_dir);
        -: 1726:
        -: 1727:	int fd;
        4: 1728:	FILE *fp = open_fstream_r(pin_file, &fd);
call    0 returned 4
        4: 1729:	if (!fp) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 1730:		free(pin_file);
        4: 1731:		return EXIT_FAILURE;
        4: 1731-block  0
unconditional  0 taken 4
        -: 1732:	}
        -: 1733:
    #####: 1734:	char line[PATH_MAX] = "";
    #####: 1735:	if (fgets(line, (int)sizeof(line), fp) == NULL) {
    %%%%%: 1735-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1736:		free(pin_file);
    #####: 1737:		close_fstream(fp, fd);
    %%%%%: 1737-block  0
call    0 never executed
    #####: 1738:		return EXIT_FAILURE;
unconditional  0 never executed
        -: 1739:	}
        -: 1740:
    #####: 1741:	if (!*line || !strchr(line, '/')) {
    %%%%%: 1741-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1741-block  1
branch  2 never executed
branch  3 never executed
    #####: 1742:		free(pin_file);
    #####: 1743:		close_fstream(fp, fd);
    %%%%%: 1743-block  0
call    0 never executed
    #####: 1744:		return EXIT_FAILURE;
unconditional  0 never executed
        -: 1745:	}
        -: 1746:
    #####: 1747:	if (pinned_dir) {
    %%%%%: 1747-block  0
branch  0 never executed
branch  1 never executed
    #####: 1748:		free(pinned_dir);
    #####: 1749:		pinned_dir = (char *)NULL;
    %%%%%: 1749-block  0
unconditional  0 never executed
        -: 1750:	}
        -: 1751:
    #####: 1752:	pinned_dir = savestring(line, strlen(line));
    %%%%%: 1752-block  0
call    0 never executed
    #####: 1753:	close_fstream(fp, fd);
call    0 never executed
    #####: 1754:	free(pin_file);
    #####: 1755:	return EXIT_SUCCESS;
unconditional  0 never executed
        -: 1756:}
        -: 1757:
        -: 1758:/* Get the list of files in PATH, plus CliFM internal commands, and send
        -: 1759: * them into an array to be read by my readline custom auto-complete
        -: 1760: * function (my_rl_completion) */
        -: 1761:void
function get_path_programs called 22 returned 100% blocks executed 94%
       22: 1762:get_path_programs(void)
        -: 1763:{
       22: 1764:	int i, j, l = 0, total_cmd = 0;
       22: 1765:	int *cmd_n = (int *)0;
       22: 1766:	struct dirent ***commands_bin = (struct dirent ***)NULL;
        -: 1767:
       22: 1768:	if (ext_cmd_ok) {
       22: 1768-block  0
branch  0 taken 20 (fallthrough)
branch  1 taken 2
       20: 1769:		char cwd[PATH_MAX] = "";
       20: 1770:		if (getcwd(cwd, sizeof(cwd)) == NULL) {}
       20: 1770-block  0
call    0 returned 20
        -: 1771:
       20: 1772:		commands_bin = (struct dirent ***)xnmalloc(
call    0 returned 20
        -: 1773:						path_n, sizeof(struct dirent));
       20: 1774:		cmd_n = (int *)xnmalloc(path_n, sizeof(int));
call    0 returned 20
        -: 1775:
       20: 1776:		i = (int)path_n;
      140: 1777:		while (--i >= 0) {
unconditional  0 taken 20
      140: 1777-block  0
branch  1 taken 120
branch  2 taken 20 (fallthrough)
     120*: 1778:			if (!paths[i] || !*paths[i] || xchdir(paths[i], NO_TITLE) == -1) {
      120: 1778-block  0
branch  0 taken 120 (fallthrough)
branch  1 taken 0
      120: 1778-block  1
branch  2 taken 120 (fallthrough)
branch  3 taken 0
      120: 1778-block  2
call    4 returned 120
branch  5 taken 0 (fallthrough)
branch  6 taken 120
    #####: 1779:				cmd_n[i] = 0;
    #####: 1780:				continue;
    %%%%%: 1780-block  0
unconditional  0 never executed
        -: 1781:			}
        -: 1782:
     120*: 1783:			cmd_n[i] = scandir(paths[i], &commands_bin[i],
      120: 1783-block  0
unconditional  0 taken 120
    %%%%%: 1783-block  1
unconditional  1 never executed
      120: 1783-block  2
call    2 returned 120
      120: 1784:						light_mode ? NULL : skip_nonexec, xalphasort);
      120: 1784-block  0
branch  0 taken 120 (fallthrough)
branch  1 taken 0
        -: 1785:			/* If paths[i] directory does not exist, scandir returns -1.
        -: 1786:			 * Fedora, for example, adds $HOME/bin and $HOME/.local/bin to
        -: 1787:			 * PATH disregarding if they exist or not. If paths[i] dir is
        -: 1788:			 * empty do not use it either */
      120: 1789:			if (cmd_n[i] > 0)
branch  0 taken 120 (fallthrough)
branch  1 taken 0
      120: 1790:				total_cmd += cmd_n[i];
      120: 1790-block  0
unconditional  0 taken 120
        -: 1791:		}
       20: 1792:		xchdir(cwd, NO_TITLE);
       20: 1792-block  0
call    0 returned 20
        -: 1793:	}
        -: 1794:
        -: 1795:	/* Add internal commands */
       22: 1796:	size_t internal_cmd_n = 0;
     1188: 1797:	while (internal_cmds[internal_cmd_n])
       22: 1797-block  0
unconditional  0 taken 22
     1188: 1797-block  1
branch  1 taken 1166
branch  2 taken 22 (fallthrough)
     1166: 1798:		internal_cmd_n++;
     1166: 1798-block  0
unconditional  0 taken 1166
        -: 1799:
       44: 1800:	bin_commands = (char **)xnmalloc((size_t)total_cmd + internal_cmd_n +
       22: 1801:					     aliases_n + actions_n + 2, sizeof(char *));
       22: 1801-block  0
call    0 returned 22
        -: 1802:
       22: 1803:	i = (int)internal_cmd_n;
     1188: 1804:	while (--i >= 0)
unconditional  0 taken 22
     1188: 1804-block  0
branch  1 taken 1166
branch  2 taken 22 (fallthrough)
     1166: 1805:		bin_commands[l++] = savestring(internal_cmds[i],
     1166: 1805-block  0
call    0 returned 1166
unconditional  1 taken 1166
        -: 1806:		    strlen(internal_cmds[i]));
        -: 1807:
        -: 1808:	/* Now add aliases, if any */
       22: 1809:	if (aliases_n) {
       22: 1809-block  0
branch  0 taken 15 (fallthrough)
branch  1 taken 7
       15: 1810:		i = (int)aliases_n;
       90: 1811:		while (--i >= 0) {
       15: 1811-block  0
unconditional  0 taken 15
       90: 1811-block  1
branch  1 taken 75
branch  2 taken 15 (fallthrough)
       75: 1812:			int index = strcntchr(aliases[i], '=');
       75: 1812-block  0
call    0 returned 75
       75: 1813:			if (index != -1) {
branch  0 taken 75 (fallthrough)
branch  1 taken 0
       75: 1814:				bin_commands[l] = (char *)xnmalloc((size_t)index + 1,
       75: 1814-block  0
call    0 returned 75
        -: 1815:				    sizeof(char));
       75: 1816:				xstrsncpy(bin_commands[l], aliases[i], (size_t)index);
call    0 returned 75
       75: 1817:				bin_commands[l++][index] = '\0';
unconditional  0 taken 75
        -: 1818:			}
        -: 1819:		}
        -: 1820:	}
        -: 1821:
        -: 1822:	/* And user defined actions too, if any */
       22: 1823:	if (actions_n) {
       22: 1823-block  0
branch  0 taken 20 (fallthrough)
branch  1 taken 2
       20: 1824:		i = (int)actions_n;
      448: 1825:		while (--i >= 0) {
       20: 1825-block  0
unconditional  0 taken 20
      448: 1825-block  1
branch  1 taken 428
branch  2 taken 20 (fallthrough)
      428: 1826:			bin_commands[l++] = savestring(usr_actions[i].name,
unconditional  0 taken 428
      428: 1827:			    strlen(usr_actions[i].name));
      428: 1827-block  0
call    0 returned 428
        -: 1828:		}
        -: 1829:	}
        -: 1830:
       22: 1831:	if (ext_cmd_ok && total_cmd) {
       22: 1831-block  0
branch  0 taken 20 (fallthrough)
branch  1 taken 2
       20: 1831-block  1
branch  2 taken 20 (fallthrough)
branch  3 taken 0
        -: 1832:		/* And finally, add commands in PATH */
       20: 1833:		i = (int)path_n;
      140: 1834:		while (--i >= 0) {
       20: 1834-block  0
unconditional  0 taken 20
      140: 1834-block  1
branch  1 taken 120
branch  2 taken 20 (fallthrough)
     120*: 1835:			if (!cmd_n[i] || cmd_n[i] <= 0)
      120: 1835-block  0
branch  0 taken 120 (fallthrough)
branch  1 taken 0
      120: 1835-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 120
    #####: 1836:				continue;
    %%%%%: 1836-block  0
unconditional  0 never executed
        -: 1837:
      120: 1838:			j = cmd_n[i];
    73403: 1839:			while (--j >= 0) {
      120: 1839-block  0
unconditional  0 taken 120
    73403: 1839-block  1
branch  1 taken 73283
branch  2 taken 120 (fallthrough)
   146566: 1840:				bin_commands[l++] = savestring(commands_bin[i][j]->d_name,
    73283: 1841:					strlen(commands_bin[i][j]->d_name));
    73283: 1841-block  0
call    0 returned 73283
    73283: 1842:				free(commands_bin[i][j]);
unconditional  0 taken 73283
        -: 1843:			}
        -: 1844:
      120: 1845:			free(commands_bin[i]);
      120: 1845-block  0
unconditional  0 taken 120
        -: 1846:		}
        -: 1847:
       20: 1848:		free(commands_bin);
       20: 1849:		free(cmd_n);
       20: 1849-block  0
unconditional  0 taken 20
        -: 1850:	}
        -: 1851:
       22: 1852:	path_progsn = (size_t)l;
       22: 1853:	bin_commands[l] = (char *)NULL;
       22: 1854:}
        -: 1855:
        -: 1856:void
function get_aliases called 24 returned 100% blocks executed 64%
       24: 1857:get_aliases(void)
        -: 1858:{
       24: 1859:	if (!config_ok)
       24: 1859-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1860:		return;
    %%%%%: 1860-block  0
unconditional  0 never executed
    %%%%%: 1860-block  1
unconditional  1 never executed
        -: 1861:
        -: 1862:	int fd;
       24: 1863:	FILE *fp = open_fstream_r(config_file, &fd);
       24: 1863-block  0
call    0 returned 24
       24: 1864:	if (!fp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1865:		_err('e', PRINT_PROMPT, "%s: alias: '%s': %s\n",
call    0 never executed
    #####: 1866:		    PROGRAM_NAME, config_file, strerror(errno));
    %%%%%: 1866-block  0
call    0 never executed
    #####: 1867:		return;
unconditional  0 never executed
        -: 1868:	}
        -: 1869:
       24: 1870:	if (aliases_n) {
       24: 1870-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1871:		int i = (int)aliases_n;
    #####: 1872:		while (--i >= 0)
    %%%%%: 1872-block  0
unconditional  0 never executed
    %%%%%: 1872-block  1
branch  1 never executed
branch  2 never executed
    #####: 1873:			free(aliases[i]);
    %%%%%: 1873-block  0
unconditional  0 never executed
    #####: 1874:		free(aliases);
    #####: 1875:		aliases = (char **)NULL;
    #####: 1876:		aliases_n = 0;
    %%%%%: 1876-block  0
unconditional  0 never executed
        -: 1877:	}
        -: 1878:
       24: 1879:	char *line = (char *)NULL;
       24: 1880:	size_t line_size = 0;
        -: 1881:
     6179: 1882:	while (getline(&line, &line_size, fp) > 0) {
       24: 1882-block  0
unconditional  0 taken 24
     6179: 1882-block  1
call    1 returned 6179
branch  2 taken 6155
branch  3 taken 24 (fallthrough)
     6155: 1883:		if (*line == 'a' && strncmp(line, "alias ", 6) == 0) {
     6155: 1883-block  0
branch  0 taken 85 (fallthrough)
branch  1 taken 6070
       85: 1883-block  1
branch  2 taken 85 (fallthrough)
branch  3 taken 0
       85: 1884:			char *alias_line = strchr(line, ' ');
       85: 1885:			if (alias_line) {
       85: 1885-block  0
branch  0 taken 85 (fallthrough)
branch  1 taken 0
       85: 1886:				alias_line++;
       85: 1887:				aliases = (char **)xrealloc(aliases, (aliases_n + 1)
       85: 1887-block  0
call    0 returned 85
        -: 1888:							* sizeof(char *));
       85: 1889:				aliases[aliases_n++] = savestring(alias_line,
call    0 returned 85
unconditional  1 taken 85
        -: 1890:							strlen(alias_line));
        -: 1891:			}
        -: 1892:		}
        -: 1893:	}
        -: 1894:
       24: 1895:	free(line);
       24: 1896:	close_fstream(fp, fd);
       24: 1896-block  0
call    0 returned 24
        -: 1897:}
        -: 1898:
        -: 1899:int
function load_dirhist called 24 returned 100% blocks executed 86%
       24: 1900:load_dirhist(void)
        -: 1901:{
       24: 1902:	if (!config_ok)
       24: 1902-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1903:		return EXIT_FAILURE;
    %%%%%: 1903-block  0
unconditional  0 never executed
        -: 1904:
        -: 1905:	int fd;
       24: 1906:	FILE *fp = open_fstream_r(dirhist_file, &fd);
       24: 1906-block  0
call    0 returned 24
       24: 1907:	if (!fp)
branch  0 taken 2 (fallthrough)
branch  1 taken 22
        2: 1908:		return EXIT_FAILURE;
        2: 1908-block  0
unconditional  0 taken 2
        -: 1909:
       22: 1910:	size_t dirs = 0;
        -: 1911:
        -: 1912:	char tmp_line[PATH_MAX];
     2069: 1913:	while (fgets(tmp_line, (int)sizeof(tmp_line), fp))
       22: 1913-block  0
unconditional  0 taken 22
     2069: 1913-block  1
call    1 returned 2069
branch  2 taken 2047
branch  3 taken 22 (fallthrough)
     2047: 1914:		dirs++;
     2047: 1914-block  0
unconditional  0 taken 2047
        -: 1915:
       22: 1916:	if (!dirs) {
       22: 1916-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 22
    #####: 1917:		close_fstream(fp, fd);
    %%%%%: 1917-block  0
call    0 never executed
    #####: 1918:		return EXIT_SUCCESS;
unconditional  0 never executed
        -: 1919:	}
        -: 1920:
       22: 1921:	old_pwd = (char **)xnmalloc(dirs + 2, sizeof(char *));
       22: 1921-block  0
call    0 returned 22
        -: 1922:
       22: 1923:	fseek(fp, 0L, SEEK_SET);
call    0 returned 22
        -: 1924:
       22: 1925:	size_t line_size = 0;
       22: 1926:	char *line = (char *)NULL;
       22: 1927:	ssize_t line_len = 0;
        -: 1928:
       22: 1929:	dirhist_total_index = 0;
        -: 1930:
     2069: 1931:	while ((line_len = getline(&line, &line_size, fp)) > 0) {
unconditional  0 taken 22
     2069: 1931-block  0
call    1 returned 2069
branch  2 taken 2047
branch  3 taken 22 (fallthrough)
    2047*: 1932:		if (!line || !*line || *line == '\n')
     2047: 1932-block  0
branch  0 taken 2047 (fallthrough)
branch  1 taken 0
     2047: 1932-block  1
branch  2 taken 2047 (fallthrough)
branch  3 taken 0
     2047: 1932-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 2047
    #####: 1933:			continue;
    %%%%%: 1933-block  0
unconditional  0 never executed
     2047: 1934:		if (line[line_len - 1] == '\n')
     2047: 1934-block  0
branch  0 taken 2047 (fallthrough)
branch  1 taken 0
     2047: 1935:			line[line_len - 1] = '\0';
     2047: 1935-block  0
unconditional  0 taken 2047
     2047: 1936:		old_pwd[dirhist_total_index] = (char *)xnmalloc((size_t)line_len + 1,
     2047: 1936-block  0
call    0 returned 2047
        -: 1937:										sizeof(char));
     2047: 1938:		strcpy(old_pwd[dirhist_total_index++], line);
unconditional  0 taken 2047
        -: 1939:	}
        -: 1940:
       22: 1941:	close_fstream(fp, fd);
       22: 1941-block  0
call    0 returned 22
       22: 1942:	old_pwd[dirhist_total_index] = (char *)NULL;
       22: 1943:	free(line);
       22: 1944:	dirhist_cur_index = dirhist_total_index - 1;
       22: 1945:	return EXIT_SUCCESS;
unconditional  0 taken 22
        -: 1946:}
        -: 1947:
        -: 1948:void
function get_prompt_cmds called 24 returned 100% blocks executed 68%
       24: 1949:get_prompt_cmds(void)
        -: 1950:{
       24: 1951:	if (!config_ok)
       24: 1951-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1952:		return;
    %%%%%: 1952-block  0
unconditional  0 never executed
    %%%%%: 1952-block  1
unconditional  1 never executed
        -: 1953:
        -: 1954:	int fd;
       24: 1955:	FILE *fp = open_fstream_r(config_file, &fd);
       24: 1955-block  0
call    0 returned 24
       24: 1956:	if (!fp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1957:		_err('e', PRINT_PROMPT, "%s: prompt: '%s': %s\n",
call    0 never executed
    #####: 1958:		    PROGRAM_NAME, config_file, strerror(errno));
    %%%%%: 1958-block  0
call    0 never executed
    #####: 1959:		return;
unconditional  0 never executed
        -: 1960:	}
        -: 1961:
       24: 1962:	if (prompt_cmds_n) {
       24: 1962-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
        -: 1963:		size_t i;
    #####: 1964:		for (i = 0; i < prompt_cmds_n; i++)
    %%%%%: 1964-block  0
unconditional  0 never executed
    %%%%%: 1964-block  1
branch  1 never executed
branch  2 never executed
    #####: 1965:			free(prompt_cmds[i]);
    %%%%%: 1965-block  0
unconditional  0 never executed
    #####: 1966:		free(prompt_cmds);
    #####: 1967:		prompt_cmds = (char **)NULL;
    #####: 1968:		prompt_cmds_n = 0;
    %%%%%: 1968-block  0
unconditional  0 never executed
        -: 1969:	}
        -: 1970:
       24: 1971:	int prompt_line_found = 0;
       24: 1972:	char *line = (char *)NULL;
       24: 1973:	size_t line_size = 0;
       24: 1974:	ssize_t line_len = 0;
        -: 1975:
     6148: 1976:	while ((line_len = getline(&line, &line_size, fp)) > 0) {
       24: 1976-block  0
unconditional  0 taken 24
     6148: 1976-block  1
call    1 returned 6148
branch  2 taken 6148
branch  3 taken 0 (fallthrough)
     6148: 1977:		if (prompt_line_found) {
     6148: 1977-block  0
branch  0 taken 165 (fallthrough)
branch  1 taken 5983
      165: 1978:			if (strncmp(line, "#END OF PROMPT", 14) == 0)
      165: 1978-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 141
       24: 1979:				break;
       24: 1979-block  0
unconditional  0 taken 24
      141: 1980:			if (*line != '#') {
      141: 1980-block  0
branch  0 taken 65 (fallthrough)
branch  1 taken 76
      130: 1981:				prompt_cmds = (char **)xrealloc(prompt_cmds,
       65: 1982:				    (prompt_cmds_n + 1) * sizeof(char *));
       65: 1982-block  0
call    0 returned 65
       65: 1983:				prompt_cmds[prompt_cmds_n++] = savestring(
call    0 returned 65
unconditional  1 taken 65
        -: 1984:				    line, (size_t)line_len);
        -: 1985:			}
     5983: 1986:		} else if (strncmp(line, "#PROMPT", 7) == 0) {
     5983: 1986-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 5959
       24: 1987:			prompt_line_found = 1;
       24: 1987-block  0
unconditional  0 taken 24
        -: 1988:		}
        -: 1989:	}
        -: 1990:
       24: 1991:	free(line);
       24: 1992:	close_fstream(fp, fd);
       24: 1992-block  0
call    0 returned 24
        -: 1993:}
        -: 1994:
        -: 1995:/* If some option was not set, set it to the default value */
        -: 1996:void
function check_options called 24 returned 100% blocks executed 56%
       24: 1997:check_options(void)
        -: 1998:{
       24: 1999:	if (!usr_cscheme)
       24: 1999-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 23
        1: 2000:		usr_cscheme = savestring("default", 7);
        1: 2000-block  0
call    0 returned 1
unconditional  1 taken 1
        -: 2001:
        -: 2002:	/* Do no override command line options */
       24: 2003:	if (xargs.cwd_in_title == UNSET)
       24: 2003-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 22
        2: 2004:		xargs.cwd_in_title = DEF_CWD_IN_TITLE;
        2: 2004-block  0
unconditional  0 taken 2
        -: 2005:
       24: 2006:	if (cp_cmd == UNSET)
       24: 2006-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2007:		cp_cmd = DEF_CP_CMD;
    %%%%%: 2007-block  0
unconditional  0 never executed
        -: 2008:
       24: 2009:	if (check_cap == UNSET)
       24: 2009-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 2010:		check_cap = DEF_CHECK_CAP;
       24: 2010-block  0
unconditional  0 taken 24
        -: 2011:
       24: 2012:	if (check_ext == UNSET)
       24: 2012-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 2013:		check_ext = DEF_CHECK_EXT;
       24: 2013-block  0
unconditional  0 taken 24
        -: 2014:
       24: 2015:	if (follow_symlinks == UNSET)
       24: 2015-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 2016:		follow_symlinks = DEF_FOLLOW_SYMLINKS;
       24: 2016-block  0
unconditional  0 taken 24
        -: 2017:
       24: 2018:	if (mv_cmd == UNSET)
       24: 2018-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2019:		mv_cmd = DEF_MV_CMD;
    %%%%%: 2019-block  0
unconditional  0 never executed
        -: 2020:
       24: 2021:	if (min_name_trim == UNSET)
       24: 2021-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 23
        1: 2022:		min_name_trim = DEF_MIN_NAME_TRIM;
        1: 2022-block  0
unconditional  0 taken 1
        -: 2023:
       24: 2024:	if (min_jump_rank == UNSET)
       24: 2024-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 22
        2: 2025:		min_jump_rank = DEF_MIN_JUMP_RANK;
        2: 2025-block  0
unconditional  0 taken 2
        -: 2026:
       24: 2027:	if (max_jump_total_rank == UNSET)
       24: 2027-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 22
        2: 2028:		max_jump_total_rank = DEF_MAX_JUMP_TOTAL_RANK;
        2: 2028-block  0
unconditional  0 taken 2
        -: 2029:
       24: 2030:	if (no_eln == UNSET) {
       24: 2030-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 2031:		if (xargs.noeln == UNSET)
       24: 2031-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 2032:			no_eln = DEF_NOELN;
       24: 2032-block  0
unconditional  0 taken 24
        -: 2033:		else
    #####: 2034:			no_eln = xargs.noeln;
    %%%%%: 2034-block  0
unconditional  0 never executed
        -: 2035:	}
        -: 2036:
       24: 2037:	if (prompt_style == UNSET)
       24: 2037-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 18
        6: 2038:		prompt_style = DEF_PROMPT_STYLE;
        6: 2038-block  0
unconditional  0 taken 6
        -: 2039:
        -: 2040:#ifndef _NO_HIGHLIGHT
       24: 2041:	if (highlight == UNSET) {
       24: 2041-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 17
        7: 2042:		if (xargs.highlight == UNSET)
        7: 2042-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7: 2043:			highlight = DEF_HIGHLIGHT;
        7: 2043-block  0
unconditional  0 taken 7
        -: 2044:		else
    #####: 2045:			highlight = xargs.highlight;
    %%%%%: 2045-block  0
unconditional  0 never executed
        -: 2046:	}
        -: 2047:#endif
        -: 2048:
        -: 2049:#ifndef _NO_SUGGESTIONS
       24: 2050:	if (suggestions == UNSET) {
       24: 2050-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 18
        6: 2051:		if (xargs.suggestions == UNSET)
        6: 2051-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6: 2052:			suggestions = DEF_SUGGESTIONS;
        6: 2052-block  0
unconditional  0 taken 6
        -: 2053:		else
    #####: 2054:			suggestions = xargs.suggestions;
    %%%%%: 2054-block  0
unconditional  0 never executed
        -: 2055:	}
        -: 2056:
       24: 2057:	if (!suggestion_strategy)
       24: 2057-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 18
        6: 2058:		suggestion_strategy = savestring(DEF_SUG_STRATEGY, SUG_STRATS);
        6: 2058-block  0
call    0 returned 6
unconditional  1 taken 6
        -: 2059:
       24: 2060:	if (suggest_filetype_color == UNSET)
       24: 2060-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 18
        6: 2061:		suggest_filetype_color = DEF_SUG_FILETYPE_COLOR;
        6: 2061-block  0
unconditional  0 taken 6
        -: 2062:#endif
        -: 2063:
       24: 2064:	if (print_selfiles == UNSET) {
       24: 2064-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 19
        5: 2065:		if (xargs.printsel == UNSET)
        5: 2065-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5: 2066:			print_selfiles = DEF_PRINTSEL;
        5: 2066-block  0
unconditional  0 taken 5
        -: 2067:		else
    #####: 2068:			print_selfiles = xargs.printsel;
    %%%%%: 2068-block  0
unconditional  0 never executed
        -: 2069:	}
        -: 2070:
       24: 2071:	if (max_printselfiles == UNSET)
       24: 2071-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 19
        5: 2072:		max_printselfiles = DEF_MAXPRINTSEL;
        5: 2072-block  0
unconditional  0 taken 5
        -: 2073:
       24: 2074:	if (case_sens_dirjump == UNSET) {
       24: 2074-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 22
        2: 2075:		if (xargs.case_sens_dirjump == UNSET)
        2: 2075-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 2076:			case_sens_dirjump = DEF_CASE_SENS_DIRJUMP;
        2: 2076-block  0
unconditional  0 taken 2
        -: 2077:		else
    #####: 2078:			case_sens_dirjump = xargs.case_sens_dirjump;
    %%%%%: 2078-block  0
unconditional  0 never executed
        -: 2079:	}
        -: 2080:
       24: 2081:	if (case_sens_path_comp == UNSET) {
       24: 2081-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 22
        2: 2082:		if (xargs.case_sens_path_comp == UNSET)
        2: 2082-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 2083:			case_sens_path_comp = DEF_CASE_SENS_PATH_COMP;
        2: 2083-block  0
unconditional  0 taken 2
        -: 2084:		else
    #####: 2085:			case_sens_path_comp = xargs.case_sens_path_comp;
    %%%%%: 2085-block  0
unconditional  0 never executed
        -: 2086:	}
        -: 2087:#ifndef _NO_TRASH
       24: 2088:	if (tr_as_rm == UNSET) {
       24: 2088-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 23
        1: 2089:		if (xargs.trasrm == UNSET)
        1: 2089-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2090:			tr_as_rm = DEF_TRASRM;
        1: 2090-block  0
unconditional  0 taken 1
        -: 2091:		else
    #####: 2092:			tr_as_rm = xargs.trasrm;
    %%%%%: 2092-block  0
unconditional  0 never executed
        -: 2093:	}
        -: 2094:#endif
      24*: 2095:	if (xargs.stealth_mode == 1 && !opener)
       24: 2095-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    %%%%%: 2095-block  1
branch  2 never executed
branch  3 never executed
    #####: 2096:		opener = savestring(FALLBACK_OPENER, strlen(FALLBACK_OPENER));
    %%%%%: 2096-block  0
call    0 never executed
unconditional  1 never executed
        -: 2097:
       24: 2098:	if (only_dirs == UNSET) {
       24: 2098-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 20
        4: 2099:		if (xargs.only_dirs == UNSET)
        4: 2099-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 2100:			only_dirs = DEF_ONLY_DIRS;
        4: 2100-block  0
unconditional  0 taken 4
        -: 2101:		else
    #####: 2102:			only_dirs = xargs.only_dirs;
    %%%%%: 2102-block  0
unconditional  0 never executed
        -: 2103:	}
        -: 2104:
       24: 2105:	if (colorize == UNSET) {
       24: 2105-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 20
        4: 2106:		if (xargs.no_colors == UNSET)
        4: 2106-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 2107:			colorize = DEF_COLORS;
        4: 2107-block  0
unconditional  0 taken 4
        -: 2108:		else
    #####: 2109:			colorize = xargs.no_colors;
    %%%%%: 2109-block  0
unconditional  0 never executed
        -: 2110:	}
        -: 2111:
       24: 2112:	if (expand_bookmarks == UNSET) {
       24: 2112-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2113:		if (xargs.expand_bookmarks == UNSET)
    %%%%%: 2113-block  0
branch  0 never executed
branch  1 never executed
    #####: 2114:			expand_bookmarks = DEF_EXPAND_BOOKMARKS;
    %%%%%: 2114-block  0
unconditional  0 never executed
        -: 2115:		else
    #####: 2116:			expand_bookmarks = xargs.expand_bookmarks;
    %%%%%: 2116-block  0
unconditional  0 never executed
        -: 2117:	}
        -: 2118:
       24: 2119:	if (splash_screen == UNSET) {
       24: 2119-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2120:		if (xargs.splash == UNSET)
    %%%%%: 2120-block  0
branch  0 never executed
branch  1 never executed
    #####: 2121:			splash_screen = DEF_SPLASH_SCREEN;
    %%%%%: 2121-block  0
unconditional  0 never executed
        -: 2122:		else
    #####: 2123:			splash_screen = xargs.splash;
    %%%%%: 2123-block  0
unconditional  0 never executed
        -: 2124:	}
        -: 2125:
       24: 2126:	if (welcome_message == UNSET) {
       24: 2126-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2127:		if (xargs.welcome_message == UNSET)
    %%%%%: 2127-block  0
branch  0 never executed
branch  1 never executed
    #####: 2128:			welcome_message = DEF_WELCOME_MESSAGE;
    %%%%%: 2128-block  0
unconditional  0 never executed
        -: 2129:		else
    #####: 2130:			welcome_message = xargs.welcome_message;
    %%%%%: 2130-block  0
unconditional  0 never executed
        -: 2131:	}
        -: 2132:
       24: 2133:	if (show_hidden == UNSET) {
       24: 2133-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2134:		if (xargs.hidden == UNSET)
    %%%%%: 2134-block  0
branch  0 never executed
branch  1 never executed
    #####: 2135:			show_hidden = DEF_SHOW_HIDDEN;
    %%%%%: 2135-block  0
unconditional  0 never executed
        -: 2136:		else
    #####: 2137:			show_hidden = xargs.hidden;
    %%%%%: 2137-block  0
unconditional  0 never executed
        -: 2138:	}
        -: 2139:
       24: 2140:	if (files_counter == UNSET) {
       24: 2140-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 23
        1: 2141:		if (xargs.files_counter == UNSET)
        1: 2141-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2142:			files_counter = DEF_FILES_COUNTER;
        1: 2142-block  0
unconditional  0 taken 1
        -: 2143:		else
    #####: 2144:			files_counter = xargs.files_counter;
    %%%%%: 2144-block  0
unconditional  0 never executed
        -: 2145:	}
        -: 2146:
       24: 2147:	if (long_view == UNSET) {
       24: 2147-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2148:		if (xargs.longview == UNSET)
    %%%%%: 2148-block  0
branch  0 never executed
branch  1 never executed
    #####: 2149:			long_view = DEF_LONG_VIEW;
    %%%%%: 2149-block  0
unconditional  0 never executed
        -: 2150:		else
    #####: 2151:			long_view = xargs.longview;
    %%%%%: 2151-block  0
unconditional  0 never executed
        -: 2152:	}
        -: 2153:
       24: 2154:	if (ext_cmd_ok == UNSET) {
       24: 2154-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2155:		if (xargs.ext == UNSET)
    %%%%%: 2155-block  0
branch  0 never executed
branch  1 never executed
    #####: 2156:			ext_cmd_ok = DEF_EXT_CMD_OK;
    %%%%%: 2156-block  0
unconditional  0 never executed
        -: 2157:		else
    #####: 2158:			ext_cmd_ok = xargs.ext;
    %%%%%: 2158-block  0
unconditional  0 never executed
        -: 2159:	}
        -: 2160:
       24: 2161:	if (pager == UNSET) {
       24: 2161-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2162:		if (xargs.pager == UNSET)
    %%%%%: 2162-block  0
branch  0 never executed
branch  1 never executed
    #####: 2163:			pager = DEF_PAGER;
    %%%%%: 2163-block  0
unconditional  0 never executed
        -: 2164:		else
    #####: 2165:			pager = xargs.pager;
    %%%%%: 2165-block  0
unconditional  0 never executed
        -: 2166:	}
        -: 2167:
       24: 2168:	if (max_dirhist == UNSET) {
       24: 2168-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2169:		if (xargs.max_dirhist == UNSET)
    %%%%%: 2169-block  0
branch  0 never executed
branch  1 never executed
    #####: 2170:			max_dirhist = DEF_MAX_DIRHIST;
    %%%%%: 2170-block  0
unconditional  0 never executed
        -: 2171:		else
    #####: 2172:			max_dirhist = xargs.max_dirhist;
    %%%%%: 2172-block  0
unconditional  0 never executed
        -: 2173:	}
        -: 2174:
       24: 2175:	if (clear_screen == UNSET) {
       24: 2175-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2176:		if (xargs.clear_screen == UNSET)
    %%%%%: 2176-block  0
branch  0 never executed
branch  1 never executed
    #####: 2177:			clear_screen = DEF_CLEAR_SCREEN;
    %%%%%: 2177-block  0
unconditional  0 never executed
        -: 2178:		else
    #####: 2179:			clear_screen = xargs.clear_screen;
    %%%%%: 2179-block  0
unconditional  0 never executed
        -: 2180:	}
        -: 2181:
       24: 2182:	if (list_folders_first == UNSET) {
       24: 2182-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2183:		if (xargs.ffirst == UNSET)
    %%%%%: 2183-block  0
branch  0 never executed
branch  1 never executed
    #####: 2184:			list_folders_first = DEF_LIST_FOLDERS_FIRST;
    %%%%%: 2184-block  0
unconditional  0 never executed
        -: 2185:		else
    #####: 2186:			list_folders_first = xargs.ffirst;
    %%%%%: 2186-block  0
unconditional  0 never executed
        -: 2187:	}
        -: 2188:
       24: 2189:	if (cd_lists_on_the_fly == UNSET) {
       24: 2189-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2190:		if (xargs.cd_list_auto == UNSET)
    %%%%%: 2190-block  0
branch  0 never executed
branch  1 never executed
    #####: 2191:			cd_lists_on_the_fly = DEF_CD_LISTS_ON_THE_FLY;
    %%%%%: 2191-block  0
unconditional  0 never executed
        -: 2192:		else
    #####: 2193:			cd_lists_on_the_fly = xargs.cd_list_auto;
    %%%%%: 2193-block  0
unconditional  0 never executed
        -: 2194:	}
        -: 2195:
       24: 2196:	if (case_sensitive == UNSET) {
       24: 2196-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2197:		if (xargs.sensitive == UNSET)
    %%%%%: 2197-block  0
branch  0 never executed
branch  1 never executed
    #####: 2198:			case_sensitive = DEF_CASE_SENSITIVE;
    %%%%%: 2198-block  0
unconditional  0 never executed
        -: 2199:		else
    #####: 2200:			case_sensitive = xargs.sensitive;
    %%%%%: 2200-block  0
unconditional  0 never executed
        -: 2201:	}
        -: 2202:
       24: 2203:	if (unicode == UNSET) {
       24: 2203-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2204:		if (xargs.unicode == UNSET)
    %%%%%: 2204-block  0
branch  0 never executed
branch  1 never executed
    #####: 2205:			unicode = DEF_UNICODE;
    %%%%%: 2205-block  0
unconditional  0 never executed
        -: 2206:		else
    #####: 2207:			unicode = xargs.unicode;
    %%%%%: 2207-block  0
unconditional  0 never executed
        -: 2208:	}
        -: 2209:
       24: 2210:	if (max_path == UNSET) {
       24: 2210-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2211:		if (xargs.max_path == UNSET)
    %%%%%: 2211-block  0
branch  0 never executed
branch  1 never executed
    #####: 2212:			max_path = DEF_MAX_PATH;
    %%%%%: 2212-block  0
unconditional  0 never executed
        -: 2213:		else
    #####: 2214:			max_path = xargs.max_path;
    %%%%%: 2214-block  0
unconditional  0 never executed
        -: 2215:	}
        -: 2216:
       24: 2217:	if (logs_enabled == UNSET) {
       24: 2217-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2218:		if (xargs.logs == UNSET)
    %%%%%: 2218-block  0
branch  0 never executed
branch  1 never executed
    #####: 2219:			logs_enabled = DEF_LOGS_ENABLED;
    %%%%%: 2219-block  0
unconditional  0 never executed
        -: 2220:		else
    #####: 2221:			logs_enabled = xargs.logs;
    %%%%%: 2221-block  0
unconditional  0 never executed
        -: 2222:	}
        -: 2223:
       24: 2224:	if (light_mode == UNSET) {
       24: 2224-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 23
        1: 2225:		if (xargs.light == UNSET)
        1: 2225-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2226:			light_mode = DEF_LIGHT_MODE;
        1: 2226-block  0
unconditional  0 taken 1
        -: 2227:		else
    #####: 2228:			light_mode = xargs.light;
    %%%%%: 2228-block  0
unconditional  0 never executed
        -: 2229:	}
        -: 2230:
       24: 2231:	if (classify == UNSET) {
       24: 2231-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 23
        1: 2232:		if (xargs.classify == UNSET)
        1: 2232-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2233:			classify = DEF_CLASSIFY;
        1: 2233-block  0
unconditional  0 taken 1
        -: 2234:		else
    #####: 2235:			classify = xargs.classify;
    %%%%%: 2235-block  0
unconditional  0 never executed
        -: 2236:	}
        -: 2237:
       24: 2238:	if (share_selbox == UNSET) {
       24: 2238-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2239:		if (xargs.share_selbox == UNSET)
    %%%%%: 2239-block  0
branch  0 never executed
branch  1 never executed
    #####: 2240:			share_selbox = DEF_SHARE_SELBOX;
    %%%%%: 2240-block  0
unconditional  0 never executed
        -: 2241:		else
    #####: 2242:			share_selbox = xargs.share_selbox;
    %%%%%: 2242-block  0
unconditional  0 never executed
        -: 2243:	}
        -: 2244:
       24: 2245:	if (sort == UNSET) {
       24: 2245-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 23
        1: 2246:		if (xargs.sort == UNSET)
        1: 2246-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2247:			sort = DEF_SORT;
        1: 2247-block  0
unconditional  0 taken 1
        -: 2248:		else
    #####: 2249:			sort = xargs.sort;
    %%%%%: 2249-block  0
unconditional  0 never executed
        -: 2250:	}
        -: 2251:
       24: 2252:	if (sort_reverse == UNSET) {
       24: 2252-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2253:		if (xargs.sort_reverse == UNSET)
    %%%%%: 2253-block  0
branch  0 never executed
branch  1 never executed
    #####: 2254:			sort_reverse = DEF_SORT_REVERSE;
    %%%%%: 2254-block  0
unconditional  0 never executed
        -: 2255:		else
    #####: 2256:			sort_reverse = xargs.sort_reverse;
    %%%%%: 2256-block  0
unconditional  0 never executed
        -: 2257:	}
        -: 2258:
       24: 2259:	if (tips == UNSET) {
       24: 2259-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 23
        1: 2260:		if (xargs.tips == UNSET)
        1: 2260-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2261:			tips = DEF_TIPS;
        1: 2261-block  0
unconditional  0 taken 1
        -: 2262:		else
    #####: 2263:			tips = xargs.tips;
    %%%%%: 2263-block  0
unconditional  0 never executed
        -: 2264:	}
        -: 2265:
       24: 2266:	if (autocd == UNSET) {
       24: 2266-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 23
        1: 2267:		if (xargs.autocd == UNSET)
        1: 2267-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2268:			autocd = DEF_AUTOCD;
        1: 2268-block  0
unconditional  0 taken 1
        -: 2269:		else
    #####: 2270:			autocd = xargs.autocd;
    %%%%%: 2270-block  0
unconditional  0 never executed
        -: 2271:	}
        -: 2272:
       24: 2273:	if (auto_open == UNSET) {
       24: 2273-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 23
        1: 2274:		if (xargs.auto_open == UNSET)
        1: 2274-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2275:			auto_open = DEF_AUTO_OPEN;
        1: 2275-block  0
unconditional  0 taken 1
        -: 2276:		else
    #####: 2277:			auto_open = xargs.auto_open;
    %%%%%: 2277-block  0
unconditional  0 never executed
        -: 2278:	}
        -: 2279:
       24: 2280:	if (autojump == UNSET) {
       24: 2280-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 17
        7: 2281:		if (xargs.autojump == UNSET)
        7: 2281-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7: 2282:			autojump = DEF_AUTOJUMP;
        7: 2282-block  0
unconditional  0 taken 7
        -: 2283:		else
    #####: 2284:			autojump = xargs.autojump;
    %%%%%: 2284-block  0
unconditional  0 never executed
        7: 2285:		if (autojump == 1)
        7: 2285-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    #####: 2286:			autocd = 1;
    %%%%%: 2286-block  0
unconditional  0 never executed
        -: 2287:	}
        -: 2288:
       24: 2289:	if (cd_on_quit == UNSET) {
       24: 2289-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 23
        1: 2290:		if (xargs.cd_on_quit == UNSET)
        1: 2290-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2291:			cd_on_quit = DEF_CD_ON_QUIT;
        1: 2291-block  0
unconditional  0 taken 1
        -: 2292:		else
    #####: 2293:			cd_on_quit = xargs.cd_on_quit;
    %%%%%: 2293-block  0
unconditional  0 never executed
        -: 2294:	}
        -: 2295:
       24: 2296:	if (dirhist_map == UNSET) {
       24: 2296-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 23
        1: 2297:		if (xargs.dirmap == UNSET)
        1: 2297-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2298:			dirhist_map = DEF_DIRHIST_MAP;
        1: 2298-block  0
unconditional  0 taken 1
        -: 2299:		else
    #####: 2300:			dirhist_map = xargs.dirmap;
    %%%%%: 2300-block  0
unconditional  0 never executed
        -: 2301:	}
        -: 2302:
       24: 2303:	if (disk_usage == UNSET) {
       24: 2303-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 23
        1: 2304:		if (xargs.disk_usage == UNSET)
        1: 2304-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2305:			disk_usage = DEF_DISK_USAGE;
        1: 2305-block  0
unconditional  0 taken 1
        -: 2306:		else
    #####: 2307:			disk_usage = xargs.disk_usage;
    %%%%%: 2307-block  0
unconditional  0 never executed
        -: 2308:	}
        -: 2309:
       24: 2310:	if (restore_last_path == UNSET) {
       24: 2310-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2311:		if (xargs.restore_last_path == UNSET)
    %%%%%: 2311-block  0
branch  0 never executed
branch  1 never executed
    #####: 2312:			restore_last_path = DEF_RESTORE_LAST_PATH;
    %%%%%: 2312-block  0
unconditional  0 never executed
        -: 2313:		else
    #####: 2314:			restore_last_path = xargs.restore_last_path;
    %%%%%: 2314-block  0
unconditional  0 never executed
        -: 2315:	}
        -: 2316:
       24: 2317:	if (!*div_line_char) {
       24: 2317-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2318:		*div_line_char = DEF_DIV_LINE_CHAR;
    #####: 2319:		div_line_char[1] = '\0';
    %%%%%: 2319-block  0
unconditional  0 never executed
        -: 2320:	}
        -: 2321:
       24: 2322:	if (max_hist == UNSET)
       24: 2322-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2323:		max_hist = DEF_MAX_HIST;
    %%%%%: 2323-block  0
unconditional  0 never executed
        -: 2324:
       24: 2325:	if (max_log == UNSET)
       24: 2325-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2326:		max_log = DEF_MAX_LOG;
    %%%%%: 2326-block  0
unconditional  0 never executed
        -: 2327:
       24: 2328:	if (!user.shell) {
       24: 2328-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 17
        7: 2329:		struct user_t tmp_user = get_user();
        7: 2329-block  0
call    0 returned 7
        7: 2330:		user.shell = tmp_user.shell;
        -: 2331:
        -: 2332:		/* We don't need these values of the user struct: free(d) them */
        7: 2333:		free(tmp_user.name);
        7: 2334:		free(tmp_user.home);
        -: 2335:
        7: 2336:		if (!user.shell)
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    #####: 2337:			user.shell = savestring(FALLBACK_SHELL, strlen(FALLBACK_SHELL));
    %%%%%: 2337-block  0
call    0 never executed
unconditional  1 never executed
        -: 2338:	}
        -: 2339:
       24: 2340:	if (!term)
       24: 2340-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2341:		term = savestring(DEFAULT_TERM_CMD, strlen(DEFAULT_TERM_CMD));
    %%%%%: 2341-block  0
call    0 never executed
unconditional  1 never executed
        -: 2342:
       24: 2343:	if (!encoded_prompt)
       24: 2343-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2344:		encoded_prompt = savestring(DEFAULT_PROMPT, strlen(DEFAULT_PROMPT));
    %%%%%: 2344-block  0
call    0 never executed
unconditional  1 never executed
        -: 2345:
        -: 2346:	/* Since in stealth mode we have no access to the config file, we
        -: 2347:	 * cannot use 'lira', since it relays on a file.
        -: 2348:	 * Set it thus to xdg-open, if not already set via command line */
      24*: 2349:	if (xargs.stealth_mode == 1 && !opener)
       24: 2349-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    %%%%%: 2349-block  1
branch  2 never executed
branch  3 never executed
    #####: 2350:		opener = savestring(FALLBACK_OPENER, strlen(FALLBACK_OPENER));
    %%%%%: 2350-block  0
call    0 never executed
unconditional  1 never executed
       24: 2351:}
