        -:    0:Source:config.c
        -:    1:/* config.c -- functions to define, create, and set configuration files */
        -:    2:
        -:    3:/*
        -:    4: * This file is part of CliFM
        -:    5: * 
        -:    6: * Copyright (C) 2016-2021, L. Abramovich <johndoe.arch@outlook.com>
        -:    7: * All rights reserved.
        -:    8:
        -:    9: * CliFM is free software; you can redistribute it and/or modify
        -:   10: * it under the terms of the GNU General Public License as published by
        -:   11: * the Free Software Foundation; either version 2 of the License, or
        -:   12: * (at your option) any later version.
        -:   13: *
        -:   14: * CliFM is distributed in the hope that it will be useful,
        -:   15: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   16: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   17: * GNU General Public License for more details.
        -:   18: *
        -:   19: * You should have received a copy of the GNU General Public License
        -:   20: * along with this program; if not, write to the Free Software
        -:   21: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
        -:   22: * MA 02110-1301, USA.
        -:   23:*/
        -:   24:
        -:   25:#include "helpers.h"
        -:   26:
        -:   27:#include <errno.h>
        -:   28:#include <limits.h>
        -:   29:#include <stdio.h>
        -:   30:#include <readline/readline.h>
        -:   31:#include <string.h>
        -:   32:#include <sys/stat.h>
        -:   33:#include <time.h>
        -:   34:#include <unistd.h>
        -:   35:
        -:   36:#include "aux.h"
        -:   37:#include "colors.h"
        -:   38:#include "config.h"
        -:   39:#include "exec.h"
        -:   40:#include "init.h"
        -:   41:#include "listing.h"
        -:   42:#include "mime.h"
        -:   43:#include "misc.h"
        -:   44:#include "navigation.h"
        -:   45:#include "file_operations.h"
        -:   46:
        -:   47:/* Regenerate the configuration file and create a back up of the old
        -:   48: * one */
        -:   49:static int
function regen_config called 0 returned 0% blocks executed 0%
    #####:   50:regen_config(void)
        -:   51:{
    #####:   52:	int config_found = 1;
        -:   53:	struct stat config_attrib;
        -:   54:
    #####:   55:	if (stat(config_file, &config_attrib) == -1) {
    %%%%%:   55-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   56:		puts(_("No configuration file found"));
    %%%%%:   56-block  0
call    0 never executed
call    1 never executed
    #####:   57:		config_found = 0;
unconditional  0 never executed
        -:   58:	}
        -:   59:
    #####:   60:	if (config_found) {
    %%%%%:   60-block  0
branch  0 never executed
branch  1 never executed
    #####:   61:		time_t rawtime = time(NULL);
    %%%%%:   61-block  0
call    0 never executed
        -:   62:		struct tm t;
    #####:   63:		localtime_r(&rawtime, &t);
call    0 never executed
        -:   64:
        -:   65:		char date[18];
    #####:   66:		strftime(date, 18, "%Y%m%d@%H:%M:%S", &t);
        -:   67:
    #####:   68:		char *bk = (char *)xnmalloc(strlen(config_file) + strlen(date) + 2, sizeof(char));
call    0 never executed
    #####:   69:		sprintf(bk, "%s.%s", config_file, date);
        -:   70:
    #####:   71:		char *cmd[] = {"mv", config_file, bk, NULL};
        -:   72:
    #####:   73:		if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   74:			free(bk);
    #####:   75:			return EXIT_FAILURE;
    %%%%%:   75-block  0
unconditional  0 never executed
        -:   76:		}
        -:   77:
    #####:   78:		printf(_("Old configuration file stored as '%s'\n"), bk);
    %%%%%:   78-block  0
call    0 never executed
call    1 never executed
    #####:   79:		free(bk);
unconditional  0 never executed
        -:   80:	}
        -:   81:
    #####:   82:	if (create_config(config_file) != EXIT_SUCCESS)
    %%%%%:   82-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   83:		return EXIT_FAILURE;
    %%%%%:   83-block  0
unconditional  0 never executed
        -:   84:
    #####:   85:	printf(_("New configuration file written to '%s'\n"), config_file);
    %%%%%:   85-block  0
call    0 never executed
call    1 never executed
    #####:   86:	reload_config();
call    0 never executed
    #####:   87:	return EXIT_SUCCESS;
unconditional  0 never executed
        -:   88:}
        -:   89:
        -:   90:/* Edit the config file, either via the mime function or via the first
        -:   91: * passed argument (Ex: 'edit nano'). The 'gen' option regenerates
        -:   92: * the configuration file and creates a back up of the old one. */
        -:   93:int
function edit_function called 9 returned 100% blocks executed 49%
        9:   94:edit_function(char **comm)
        -:   95:{
        9:   96:	if (xargs.stealth_mode == 1) {
        9:   96-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    #####:   97:		printf(_("%s: Access to configuration files is not allowed in "
    %%%%%:   97-block  0
call    0 never executed
call    1 never executed
        -:   98:			 "stealth mode\n"), PROGRAM_NAME);
    #####:   99:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  100:	}
        -:  101:
       9*:  102:	if (comm[1] && *comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        9:  102-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    %%%%%:  102-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  102-block  2
branch  4 never executed
branch  5 never executed
    #####:  103:		printf("%s\n", EDIT_USAGE);
    %%%%%:  103-block  0
call    0 never executed
    #####:  104:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  105:	}
        -:  106:
       9*:  107:	if (comm[1] && *comm[1] == 'r' && strcmp(comm[1], "reset") == 0)
        9:  107-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    %%%%%:  107-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  107-block  2
branch  4 never executed
branch  5 never executed
    #####:  108:		return regen_config();
    %%%%%:  108-block  0
call    0 never executed
unconditional  1 never executed
        -:  109:
        9:  110:	if (!config_ok) {
        9:  110-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    #####:  111:		fprintf(stderr, _("%s: Cannot access the configuration file\n"),
    %%%%%:  111-block  0
call    0 never executed
call    1 never executed
        -:  112:		    PROGRAM_NAME);
    #####:  113:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  114:	}
        -:  115:
        -:  116:	/* Get modification time of the config file before opening it */
        -:  117:	struct stat file_attrib;
        -:  118:
        -:  119:	/* If, for some reason (like someone erasing the file while the
        -:  120:	 * program is running) clifmrc doesn't exist, recreate the
        -:  121:	 * configuration file. Then run 'stat' again to reread the attributes
        -:  122:	 * of the file */
        9:  123:	if (stat(config_file, &file_attrib) == -1) {
        9:  123-block  0
call    0 returned 9
branch  1 taken 0 (fallthrough)
branch  2 taken 9
    #####:  124:		create_config(config_file);
    %%%%%:  124-block  0
call    0 never executed
    #####:  125:		stat(config_file, &file_attrib);
call    0 never executed
unconditional  1 never executed
        -:  126:	}
        -:  127:
        9:  128:	time_t mtime_bfr = (time_t)file_attrib.st_mtime;
        9:  129:	int ret = EXIT_SUCCESS;
        -:  130:
        -:  131:	/* If there is an argument... */
        9:  132:	if (comm[1]) {
        9:  132-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    #####:  133:		char *cmd[] = {comm[1], config_file, NULL};
    #####:  134:		ret = launch_execve(cmd, FOREGROUND, E_NOSTDERR);
    %%%%%:  134-block  0
call    0 never executed
        -:  135:	} else {
        -:  136:		/* If no application was passed as 2nd argument */
        9:  137:		ret = open_file(config_file);
        9:  137-block  0
call    0 returned 9
unconditional  1 taken 9
        -:  138:	}
        -:  139:
        9:  140:	if (ret != EXIT_SUCCESS)
        9:  140-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    #####:  141:		return EXIT_FAILURE;
    %%%%%:  141-block  0
unconditional  0 never executed
        -:  142:
        -:  143:	/* Get modification time after opening the config file */
        9:  144:	stat(config_file, &file_attrib);
        9:  144-block  0
call    0 returned 9
        -:  145:	/* If modification times differ, the file was modified after being
        -:  146:	 * opened */
        -:  147:
        9:  148:	if (mtime_bfr != (time_t)file_attrib.st_mtime) {
branch  0 taken 8 (fallthrough)
branch  1 taken 1
        -:  149:		/* Reload configuration only if the config file was modified */
        8:  150:		reload_config();
        8:  150-block  0
call    0 returned 8
        8:  151:		welcome_message = 0;
        -:  152:
        8:  153:		if (cd_lists_on_the_fly) {
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8:  154:			free_dirlist();
        8:  154-block  0
call    0 returned 8
        8:  155:			ret = list_dir();
call    0 returned 8
unconditional  1 taken 8
        -:  156:		}
        -:  157:	}
        -:  158:
        9:  159:	return ret;
        9:  159-block  0
unconditional  0 taken 9
        -:  160:}
        -:  161:
        -:  162:void
function set_env called 24 returned 100% blocks executed 90%
       24:  163:set_env(void)
        -:  164:{
       24:  165:	if (xargs.stealth_mode == 1)
       24:  165-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####:  166:		return;
    %%%%%:  166-block  0
unconditional  0 never executed
        -:  167:
        -:  168:	/* Set a few environment variables, mostly useful to run custom
        -:  169:	 * scripts via the actions function */
        -:  170:	/* CLIFM env variable is set to one when CliFM is running, so that
        -:  171:	 * external programs can determine if they were spawned by CliFM */
       24:  172:	setenv("CLIFM", "1", 1);
       24:  172-block  0
call    0 returned 24
       24:  173:	setenv("CLIFM_PROFILE", alt_profile ? alt_profile : "default", 1);
branch  0 taken 6 (fallthrough)
branch  1 taken 18
        6:  173-block  0
unconditional  2 taken 6
       18:  173-block  1
unconditional  3 taken 18
       24:  173-block  2
call    4 returned 24
        -:  174:
       24:  175:	if (sel_file)
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24:  176:		setenv("CLIFM_SELFILE", sel_file, 1);
       24:  176-block  0
call    0 returned 24
unconditional  1 taken 24
        -:  177:}
        -:  178:
        -:  179:/* Define the file for the Selection Box */
        -:  180:void
function set_sel_file called 24 returned 100% blocks executed 64%
       24:  181:set_sel_file(void)
        -:  182:{
       24:  183:	if (sel_file) {
       24:  183-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####:  184:		free(sel_file);
    #####:  185:		sel_file = (char *)NULL;
    %%%%%:  185-block  0
unconditional  0 never executed
        -:  186:	}
        -:  187:
       24:  188:	if (!config_dir)
       24:  188-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####:  189:		return;
    %%%%%:  189-block  0
unconditional  0 never executed
        -:  190:
       24:  191:	size_t config_len = strlen(config_dir);
        -:  192:
       24:  193:	if (!share_selbox) {
       24:  193-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
        -:  194:		/* Private selection box is stored in the profile
        -:  195:		 * directory */
       24:  196:		sel_file = (char *)xnmalloc(config_len + 9, sizeof(char));
       24:  196-block  0
call    0 returned 24
        -:  197:
       24:  198:		sprintf(sel_file, "%s/selbox", config_dir);
unconditional  0 taken 24
        -:  199:	} else {
        -:  200:		/* Common selection box is stored in the general
        -:  201:		 * configuration directory */
    #####:  202:		sel_file = (char *)xnmalloc(config_len + 17, sizeof(char));
    %%%%%:  202-block  0
call    0 never executed
    #####:  203:		sprintf(sel_file, "%s/.config/%s/selbox", user.home, PNL);
unconditional  0 never executed
        -:  204:	}
        -:  205:
       24:  206:	return;
       24:  206-block  0
unconditional  0 taken 24
        -:  207:}
        -:  208:
        -:  209:int
function create_kbinds_file called 4 returned 100% blocks executed 26%
        4:  210:create_kbinds_file(void)
        -:  211:{
        4:  212:	if (!config_ok)
        4:  212-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  213:		return EXIT_FAILURE;
    %%%%%:  213-block  0
unconditional  0 never executed
        -:  214:
        -:  215:	struct stat attr;
        -:  216:	/* If the file already exists, do nothing */
        4:  217:	if (stat(kbinds_file, &attr) == EXIT_SUCCESS)
        4:  217-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0
        4:  218:		return EXIT_SUCCESS;
        4:  218-block  0
unconditional  0 taken 4
        -:  219:
        -:  220:	/* If not, try to import it from DATADIR */
    #####:  221:	if (data_dir) {
    %%%%%:  221-block  0
branch  0 never executed
branch  1 never executed
        -:  222:		char sys_file[PATH_MAX];
    #####:  223:		snprintf(sys_file, PATH_MAX - 1, "%s/%s/keybindings.cfm", data_dir, PNL);
    #####:  224:		if (stat(sys_file, &attr) == EXIT_SUCCESS) {
    %%%%%:  224-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  225:			char *cmd[] = {"cp", sys_file, kbinds_file, NULL};
    #####:  226:			if (launch_execve(cmd, FOREGROUND, E_NOFLAG) == EXIT_SUCCESS)
    %%%%%:  226-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  227:				return EXIT_SUCCESS;
    %%%%%:  227-block  0
unconditional  0 never executed
        -:  228:		}
        -:  229:	}
        -:  230:
        -:  231:	/* Else, create it */
    #####:  232:	FILE *fp = fopen(kbinds_file, "w");
    %%%%%:  232-block  0
call    0 never executed
    #####:  233:	if (!fp) {
branch  0 never executed
branch  1 never executed
    #####:  234:		_err('w', PRINT_PROMPT, "%s: '%s': %s\n", PROGRAM_NAME, kbinds_file,
call    0 never executed
    #####:  235:		    strerror(errno));
    %%%%%:  235-block  0
call    0 never executed
    #####:  236:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  237:	}
        -:  238:
    #####:  239:	fprintf(fp, "# Keybindings file for %s\n\n\
    %%%%%:  239-block  0
call    0 never executed
        -:  240:# Use the 'kbgen' plugin (compile it first: gcc -o kbgen kbgen.c) to \n\
        -:  241:# find out the escape code for the key or key sequence you want. Use \n\
        -:  242:# either octal, hexadecimal codes or symbols.\n\
        -:  243:# Ex: For Alt-/ (in rxvt terminals) 'kbgen' will print the following \n\
        -:  244:# lines:\n\
        -:  245:# Hex  | Oct | Symbol\n\
        -:  246:# ---- | ---- | ------\n\
        -:  247:# \\x1b | \\033 | ESC (\\e)\n\
        -:  248:# \\x2f | \\057 | /\n\
        -:  249:# In this case, the keybinding, if using symbols, is: \"\\e/:function\"\n\
        -:  250:# In case you prefer the hex codes it would be: \\x1b\\x2f:function.\n\
        -:  251:# GNU emacs escape sequences are also allowed (ex: \"\\M-a\", Alt-a\n\
        -:  252:# in most keyboards, or \"\\C-r\" for Ctrl-r).\n\
        -:  253:# Some codes, especially those involving keys like Ctrl or the arrow\n\
        -:  254:# keys, vary depending on the terminal emulator and the system settings.\n\
        -:  255:# These keybindings should be set up thus on a per terminal basis.\n\
        -:  256:# You can also consult the terminfo database via the infocmp command.\n\
        -:  257:# See terminfo(5) and infocmp(1).\n\
        -:  258:\n\
        -:  259:# Alt-j\n\
        -:  260:previous-dir:\\M-j\n\
        -:  261:# Shift-Left (rxvt)\n\
        -:  262:previous-dir2:\\e[d\n\
        -:  263:# Shift-Left (xterm)\n\
        -:  264:previous-dir3:\\e[2D\n\
        -:  265:# Shift-Left (others)\n\
        -:  266:previous-dir4:\\e[1;2D\n\
        -:  267:\n\
        -:  268:# Alt-k\n\
        -:  269:next-dir:\\M-k\n\
        -:  270:# Shift-right (rxvt)\n\
        -:  271:next-dir2:\\e[c\n\
        -:  272:# Shift-Right (xterm)\n\
        -:  273:next-dir3:\\e[2C\n\
        -:  274:# Shift-Right (others)\n\
        -:  275:next-dir4:\\e[1;2C\n\
        -:  276:first-dir:\\C-\\M-j\n\
        -:  277:last-dir:\\C-\\M-k\n\
        -:  278:\n\
        -:  279:# Alt-u\n\
        -:  280:parent-dir:\\M-u\n\
        -:  281:# Shift-Up (rxvt)\n\
        -:  282:parent-dir2:\\e[a\n\
        -:  283:# Shift-Up (xterm)\n\
        -:  284:parent-dir3:\\e[2A\n\
        -:  285:# Shift-Up (others)\n\
        -:  286:parent-dir4:\\e[1;2A\n\
        -:  287:\n\
        -:  288:# Alt-e\n\
        -:  289:home-dir:\\M-e\n\
        -:  290:# Home key (rxvt)\n\
        -:  291:home-dir2:\\e[7~\n\
        -:  292:# Home key (xterm)\n\
        -:  293:home-dir3:\\e[H\n\
        -:  294:home-dir4:\n\
        -:  295:\n\
        -:  296:# Alt-r\n\
        -:  297:root-dir:\\M-r\n\
        -:  298:# Alt-/ (rxvt)\n\
        -:  299:root-dir2:\\e/\n\
        -:  300:#root-dir3:\n\
        -:  301:\n\
        -:  302:pinned-dir:\\M-p\n\
        -:  303:workspace1:\\M-1\n\
        -:  304:workspace2:\\M-2\n\
        -:  305:workspace3:\\M-3\n\
        -:  306:workspace4:\\M-4\n\
        -:  307:\n\
        -:  308:# Help\n\
        -:  309:# F1-3\n\
        -:  310:show-manpage:\\eOP\n\
        -:  311:show-cmds:\\eOQ\n\
        -:  312:show-kbinds:\\eOR\n\
        -:  313:\n\
        -:  314:prepend-sudo:\\M-v\n\
        -:  315:create-file:\\M-n\n\
        -:  316:new-instance:\\C-x\n\
        -:  317:previous-profile:\\C-\\M-o\n\
        -:  318:next-profile:\\C-\\M-p\n\
        -:  319:archive-sel:\\C-\\M-a\n\
        -:  320:rename-sel:\\C-\\M-r\n\
        -:  321:remove-sel:\\C-\\M-d\n\
        -:  322:trash-sel:\\C-\\M-t\n\
        -:  323:untrash-all:\\C-\\M-u\n\
        -:  324:paste-sel:\\C-\\M-v\n\
        -:  325:move-sel:\\C-\\M-n\n\
        -:  326:export-sel:\\C-\\M-e\n\
        -:  327:open-sel:\\C-\\M-g\n\
        -:  328:bookmark-sel:\\C-\\M-b\n\
        -:  329:refresh-screen:\\C-r\n\
        -:  330:clear-line:\\M-c\n\
        -:  331:clear-msgs:\\M-t\n\
        -:  332:show-dirhist:\\M-h\n\
        -:  333:toggle-hidden:\\M-i\n\
        -:  334:toggle-hidden2:\\M-.\n\
        -:  335:toggle-light:\\M-y\n\
        -:  336:toggle-long:\\M-l\n\
        -:  337:sort-previous:\\M-z\n\
        -:  338:sort-next:\\M-x\n\
        -:  339:bookmarks:\\M-b\n\
        -:  340:select-all:\\M-a\n\
        -:  341:deselect-all:\\M-d\n\
        -:  342:mountpoints:\\M-m\n\
        -:  343:folders-first:\\M-g\n\
        -:  344:selbox:\\M-s\n\
        -:  345:lock:\\M-o\n\
        -:  346:# F6-12\n\
        -:  347:open-mime:\\e[17~\n\
        -:  348:open-jump-db:\\e[18~\n\
        -:  349:edit-color-scheme:\\e[19~\n\
        -:  350:open-keybinds:\\e[20~\n\
        -:  351:open-config:\\e[21~\n\
        -:  352:open-bookmarks:\\e[23~\n\
        -:  353:quit:\\e[24~\n\n\
        -:  354:# Plugins\n\
        -:  355:# 1) Make sure your plugin is in the plugins directory (or use any of the\n\
        -:  356:# plugins in there)\n\
        -:  357:# 2) Link pluginx to your plugin using the 'actions edit' command. Ex:\n\
        -:  358:# \"plugin1=myplugin.sh\"\n\
        -:  359:# 3) Set a keybinding here for pluginx. Ex: \"plugin1:\\M-7\"\n\n\
        -:  360:#plugin1:\n\
        -:  361:#plugin2:\n\
        -:  362:#plugin3:\n\
        -:  363:#plugin4:\n",
        -:  364:	    PROGRAM_NAME);
        -:  365:
    #####:  366:	fclose(fp);
call    0 never executed
    #####:  367:	return EXIT_SUCCESS;
unconditional  0 never executed
        -:  368:}
        -:  369:
        -:  370:static int
function create_actions_file called 24 returned 100% blocks executed 52%
       24:  371:create_actions_file(char *file)
        -:  372:{
        -:  373:	struct stat attr;
        -:  374:	/* If the file already exists, do nothing */
       24:  375:	if (stat(file, &attr) == EXIT_SUCCESS)
       24:  375-block  0
call    0 returned 24
branch  1 taken 23 (fallthrough)
branch  2 taken 1
       23:  376:		return EXIT_SUCCESS;
       23:  376-block  0
unconditional  0 taken 23
        -:  377:
        -:  378:	/* If not, try to import it from DATADIR */
        1:  379:	if (data_dir) {
        1:  379-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  380:		char sys_file[PATH_MAX];
        1:  381:		snprintf(sys_file, PATH_MAX - 1, "%s/%s/actions.cfm", data_dir, PNL);
        1:  382:		if (stat(sys_file, &attr) == EXIT_SUCCESS) {
        1:  382-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  383:			char *cmd[] = {"cp", sys_file, file, NULL};
        1:  384:			if (launch_execve(cmd, FOREGROUND, E_NOFLAG) == EXIT_SUCCESS)
        1:  384-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  385:				return EXIT_SUCCESS;
        1:  385-block  0
unconditional  0 taken 1
        -:  386:		}
        -:  387:	}
        -:  388:
        -:  389:	/* Else, create it */
        -:  390:	int fd;
    #####:  391:	FILE *fp = open_fstream_w(file, &fd);
    %%%%%:  391-block  0
call    0 never executed
    #####:  392:	if (!fp) {
branch  0 never executed
branch  1 never executed
    #####:  393:		_err('e', PRINT_PROMPT, "%s: '%s': %s\n", PROGRAM_NAME,
call    0 never executed
    #####:  394:		    file, strerror(errno));
    %%%%%:  394-block  0
call    0 never executed
    #####:  395:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  396:	}
        -:  397:
    #####:  398:	fprintf(fp, "######################\n"
    %%%%%:  398-block  0
call    0 never executed
        -:  399:		"# Actions file for %s #\n"
        -:  400:		"######################\n\n"
        -:  401:		"# Define here your custom actions. Actions are "
        -:  402:		"custom command names\n"
        -:  403:		"# bound to a executable file located either in "
        -:  404:		"DATADIR/clifm/plugins\n"
        -:  405:		"# (usually /usr/share/clifm/plugins) or in "
        -:  406:		"$XDG_CONFIG_HOME/clifm/plugins.\n"
        -:  407:		"# Actions can be executed directly from "
        -:  408:		"%s command line, as if they\n"
        -:  409:		"# were any other command, and the associated "
        -:  410:		"file will be executed\n"
        -:  411:		"# instead. All parameters passed to the action "
        -:  412:		"command will be passed\n"
        -:  413:		"# to the corresponding plugin as well.\n\n"
        -:  414:		"i=img_viewer.sh\n"
        -:  415:		"kbgen=kbgen\n"
        -:  416:		"vid=vid_viewer.sh\n"
        -:  417:		"ptot=pdf_viewer.sh\n"
        -:  418:		"music=music_player.sh\n"
        -:  419:		"update=update.sh\n"
        -:  420:		"wall=wallpaper_setter.sh\n"
        -:  421:		"dragon=dragondrop.sh\n"
        -:  422:		"bn=batch_create.sh\n"
        -:  423:		"+=finder.sh\n"
        -:  424:		"++=jumper.sh\n"
        -:  425:		"-=fzfnav.sh\n"
        -:  426:		"*=fzfsel.sh\n"
        -:  427:		"**=fzfdesel.sh\n"
        -:  428:		"h=fzfhist.sh\n"
        -:  429:		"//=rgfind.sh\n"
        -:  430:		"ih=ihelp.sh\n",
        -:  431:	    PROGRAM_NAME, PROGRAM_NAME);
        -:  432:
    #####:  433:	close_fstream(fp, fd);
call    0 never executed
    #####:  434:	return EXIT_SUCCESS;
unconditional  0 never executed
        -:  435:}
        -:  436:
        -:  437:void
function create_tmp_files called 24 returned 100% blocks executed 37%
       24:  438:create_tmp_files(void)
        -:  439:{
       24:  440:	if (!user.name)
       24:  440-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####:  441:		return;
    %%%%%:  441-block  0
unconditional  0 never executed
        -:  442:
       24:  443:	size_t pnl_len = strlen(PNL);
        -:  444:
        -:  445:	/* #### CHECK THE TMP DIR #### */
        -:  446:
        -:  447:	/* If the temporary directory doesn't exist, create it. I create
        -:  448:	 * the parent directory (/tmp/clifm) with 1777 permissions (world
        -:  449:	 * writable with the sticky bit set), so that every user is able
        -:  450:	 * to create files in here, but only the file's owner can remove
        -:  451:	 * or modify them */
        -:  452:
       24:  453:	size_t user_len = strlen(user.name);
       24:  454:	tmp_dir = (char *)xnmalloc(pnl_len + user_len + 7, sizeof(char));
       24:  454-block  0
call    0 returned 24
       24:  455:	snprintf(tmp_dir, pnl_len + 6, "/tmp/%s", PNL);
        -:  456:
        -:  457:	struct stat file_attrib;
       24:  458:	if (stat(tmp_dir, &file_attrib) == -1) {
call    0 returned 24
branch  1 taken 0 (fallthrough)
branch  2 taken 24
    #####:  459:		char *md_cmd[] = {"mkdir", "-pm1777", tmp_dir, NULL};
    #####:  460:		if (launch_execve(md_cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS) {
    %%%%%:  460-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  461:			_err('e', PRINT_PROMPT, _("%s: '%s': Error creating temporary "
    %%%%%:  461-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  462:					"directory\n"), PROGRAM_NAME, tmp_dir);
        -:  463:		}
        -:  464:	}
        -:  465:
        -:  466:	/* Once the parent directory exists, create the user's directory to
        -:  467:	 * store the list of selected files:
        -:  468:	 * TMP_DIR/clifm/username/.selbox_PROFILE. I use here very
        -:  469:	 * restrictive permissions (700), since only the corresponding user
        -:  470:	 * must be able to read and/or modify this list */
        -:  471:
       24:  472:	snprintf(tmp_dir, pnl_len + user_len + 7, "/tmp/%s/%s", PNL, user.name);
        -:  473:
       24:  474:	if (stat(tmp_dir, &file_attrib) == -1) {
       24:  474-block  0
call    0 returned 24
branch  1 taken 1 (fallthrough)
branch  2 taken 23
        1:  475:		char *md_cmd2[] = {"mkdir", "-pm700", tmp_dir, NULL};
        1:  476:		if (launch_execve(md_cmd2, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS) {
        1:  476-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  477:			selfile_ok = 0;
    #####:  478:			_err('e', PRINT_PROMPT, _("%s: '%s': Error creating temporary "
    %%%%%:  478-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  479:					"directory\n"), PROGRAM_NAME, tmp_dir);
        -:  480:		}
        -:  481:	}
        -:  482:
        -:  483:	/* If the directory exists, check it is writable */
       23:  484:	else if (access(tmp_dir, W_OK) == -1) {
       23:  484-block  0
call    0 returned 23
branch  1 taken 0 (fallthrough)
branch  2 taken 23
    #####:  485:		if (!sel_file) {
    %%%%%:  485-block  0
branch  0 never executed
branch  1 never executed
    #####:  486:			selfile_ok = 0;
    #####:  487:			_err('w', PRINT_PROMPT, "%s: '%s': Directory not writable. Selected "
    %%%%%:  487-block  0
call    0 never executed
unconditional  1 never executed
        -:  488:				"files will be lost after program exit\n",
        -:  489:			    PROGRAM_NAME, tmp_dir);
        -:  490:		}
        -:  491:	}
        -:  492:
        -:  493:	/* If the config directory isn't available, define an alternative
        -:  494:	 * selection file in /tmp */
      24*:  495:	if (!sel_file && xargs.stealth_mode != 1) {
       24:  495-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    %%%%%:  495-block  1
branch  2 never executed
branch  3 never executed
    #####:  496:		size_t tmp_dir_len = strlen(tmp_dir);
        -:  497:
    #####:  498:		if (!share_selbox) {
    %%%%%:  498-block  0
branch  0 never executed
branch  1 never executed
    #####:  499:			size_t prof_len = 0;
        -:  500:
    #####:  501:			if (alt_profile)
    %%%%%:  501-block  0
branch  0 never executed
branch  1 never executed
    #####:  502:				prof_len = strlen(alt_profile);
    %%%%%:  502-block  0
unconditional  0 never executed
        -:  503:			else
    #####:  504:				prof_len = 7; /* Lenght of "default" */
    %%%%%:  504-block  0
unconditional  0 never executed
        -:  505:
    #####:  506:			sel_file = (char *)xnmalloc(tmp_dir_len + prof_len + 9,
    %%%%%:  506-block  0
call    0 never executed
        -:  507:			    sizeof(char));
    #####:  508:			sprintf(sel_file, "%s/selbox_%s", tmp_dir,
    %%%%%:  508-block  0
unconditional  0 never executed
    %%%%%:  508-block  1
unconditional  1 never executed
    %%%%%:  508-block  2
unconditional  2 never executed
    #####:  509:			    (alt_profile) ? alt_profile : "default");
branch  0 never executed
branch  1 never executed
        -:  510:		} else {
    #####:  511:			sel_file = (char *)xnmalloc(tmp_dir_len + 8, sizeof(char));
    %%%%%:  511-block  0
call    0 never executed
    #####:  512:			sprintf(sel_file, "%s/selbox", tmp_dir);
unconditional  0 never executed
        -:  513:		}
        -:  514:
    #####:  515:		_err('w', PRINT_PROMPT, _("%s: '%s': Using a temporary directory for "
    %%%%%:  515-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  516:					  "the Selection Box. Selected files won't be persistent accros "
        -:  517:					  "reboots"), PROGRAM_NAME, tmp_dir);
        -:  518:	}
        -:  519:}
        -:  520:
        -:  521:static void
function define_config_file_names called 24 returned 100% blocks executed 77%
       24:  522:define_config_file_names(void)
        -:  523:{
       24:  524:	size_t pnl_len = strlen(PNL);
        -:  525:
       24:  526:	if (alt_config_dir) {
       24:  526-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####:  527:		config_dir_gral = (char *)xnmalloc(strlen(alt_config_dir) + pnl_len
    %%%%%:  527-block  0
call    0 never executed
        -:  528:											+ 2, sizeof(char));
    #####:  529:		sprintf(config_dir_gral, "%s/%s", alt_config_dir, PNL);
    #####:  530:		free(alt_config_dir);
unconditional  0 never executed
        -:  531:	} else {
        -:  532:		/* If $XDG_CONFIG_HOME is set, use it for the config file.
        -:  533:		 * Else, fall back to $HOME/.config */
       24:  534:		char *xdg_config_home = getenv("XDG_CONFIG_HOME");
       24:  534-block  0
call    0 returned 24
        -:  535:
       24:  536:		if (xdg_config_home) {
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####:  537:			size_t xdg_config_home_len = strlen(xdg_config_home);
        -:  538:
    #####:  539:			config_dir_gral = (char *)xnmalloc(xdg_config_home_len + pnl_len
    %%%%%:  539-block  0
call    0 never executed
        -:  540:												+ 2, sizeof(char));
    #####:  541:			sprintf(config_dir_gral, "%s/%s", xdg_config_home, PNL);
        -:  542:
    #####:  543:			xdg_config_home = (char *)NULL;
unconditional  0 never executed
        -:  544:		} else {
       24:  545:			config_dir_gral = (char *)xnmalloc(user.home_len + pnl_len + 11,
       24:  545-block  0
call    0 returned 24
        -:  546:												sizeof(char));
       24:  547:			sprintf(config_dir_gral, "%s/.config/%s", user.home, PNL);
unconditional  0 taken 24
        -:  548:		}
        -:  549:	}
        -:  550:
       24:  551:	size_t config_gral_len = strlen(config_dir_gral);
        -:  552:
        -:  553:	/* alt_profile will not be NULL whenever the -P option is used
        -:  554:	 * to run the program under an alternative profile */
       24:  555:	if (alt_profile) {
       24:  555-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 18
        6:  556:		config_dir = (char *)xnmalloc(config_gral_len + strlen(alt_profile) + 11, sizeof(char));
        6:  556-block  0
call    0 returned 6
        6:  557:		sprintf(config_dir, "%s/profiles/%s", config_dir_gral, alt_profile);
unconditional  0 taken 6
        -:  558:	} else {
       18:  559:		config_dir = (char *)xnmalloc(config_gral_len + 18, sizeof(char));
       18:  559-block  0
call    0 returned 18
       18:  560:		sprintf(config_dir, "%s/profiles/default", config_dir_gral);
unconditional  0 taken 18
        -:  561:	}
        -:  562:
       24:  563:	if (alt_kbinds_file) {
       24:  563-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####:  564:		kbinds_file = savestring(alt_kbinds_file, strlen(alt_kbinds_file));
    %%%%%:  564-block  0
call    0 never executed
    #####:  565:		free(alt_kbinds_file);
    #####:  566:		alt_kbinds_file = (char *)NULL;
unconditional  0 never executed
        -:  567:	} else {
        -:  568:		/* Keybindings per user, not per profile */
       24:  569:		kbinds_file = (char *)xnmalloc(config_gral_len + 17, sizeof(char));
       24:  569-block  0
call    0 returned 24
       24:  570:		sprintf(kbinds_file, "%s/keybindings.cfm", config_dir_gral);
unconditional  0 taken 24
        -:  571:	}
        -:  572:
       24:  573:	colors_dir = (char *)xnmalloc(config_gral_len + 8, sizeof(char));
       24:  573-block  0
call    0 returned 24
       24:  574:	sprintf(colors_dir, "%s/colors", config_dir_gral);
        -:  575:
       24:  576:	plugins_dir = (char *)xnmalloc(config_gral_len + 9, sizeof(char));
call    0 returned 24
       24:  577:	sprintf(plugins_dir, "%s/plugins", config_dir_gral);
        -:  578:
        -:  579:#ifndef _NO_TRASH
       24:  580:	trash_dir = (char *)xnmalloc(user.home_len + 20, sizeof(char));
call    0 returned 24
       24:  581:	sprintf(trash_dir, "%s/.local/share/Trash", user.home);
        -:  582:
       24:  583:	size_t trash_len = strlen(trash_dir);
        -:  584:
       24:  585:	trash_files_dir = (char *)xnmalloc(trash_len + 7, sizeof(char));
call    0 returned 24
       24:  586:	sprintf(trash_files_dir, "%s/files", trash_dir);
        -:  587:
       24:  588:	trash_info_dir = (char *)xnmalloc(trash_len + 6, sizeof(char));
call    0 returned 24
       24:  589:	sprintf(trash_info_dir, "%s/info", trash_dir);
        -:  590:#endif
        -:  591:
       24:  592:	size_t config_len = strlen(config_dir);
        -:  593:
       24:  594:	dirhist_file = (char *)xnmalloc(config_len + 13, sizeof(char));
call    0 returned 24
       24:  595:	sprintf(dirhist_file, "%s/dirhist.cfm", config_dir);
        -:  596:
       24:  597:	if (!alt_bm_file) {
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24:  598:		bm_file = (char *)xnmalloc(config_len + 15, sizeof(char));
       24:  598-block  0
call    0 returned 24
       24:  599:		sprintf(bm_file, "%s/bookmarks.cfm", config_dir);
unconditional  0 taken 24
        -:  600:	} else {
    #####:  601:		bm_file = savestring(alt_bm_file, strlen(alt_bm_file));
    %%%%%:  601-block  0
call    0 never executed
    #####:  602:		free(alt_bm_file);
    #####:  603:		alt_bm_file = (char *)NULL;
unconditional  0 never executed
        -:  604:	}
        -:  605:
       24:  606:	log_file = (char *)xnmalloc(config_len + 9, sizeof(char));
       24:  606-block  0
call    0 returned 24
       24:  607:	sprintf(log_file, "%s/log.cfm", config_dir);
        -:  608:
       24:  609:	hist_file = (char *)xnmalloc(config_len + 13, sizeof(char));
call    0 returned 24
       24:  610:	sprintf(hist_file, "%s/history.cfm", config_dir);
        -:  611:
       24:  612:	if (!alt_config_file) {
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24:  613:		config_file = (char *)xnmalloc(config_len + pnl_len + 4, sizeof(char));
       24:  613-block  0
call    0 returned 24
       24:  614:		sprintf(config_file, "%s/%src", config_dir, PNL);
unconditional  0 taken 24
        -:  615:	} else {
    #####:  616:		config_file = savestring(alt_config_file, strlen(alt_config_file));
    %%%%%:  616-block  0
call    0 never executed
    #####:  617:		free(alt_config_file);
    #####:  618:		alt_config_file = (char *)NULL;
unconditional  0 never executed
        -:  619:	}
        -:  620:
       24:  621:	profile_file = (char *)xnmalloc(config_len + 13, sizeof(char));
       24:  621-block  0
call    0 returned 24
       24:  622:	sprintf(profile_file, "%s/profile.cfm", config_dir);
        -:  623:
       24:  624:	msg_log_file = (char *)xnmalloc(config_len + 14, sizeof(char));
call    0 returned 24
       24:  625:	sprintf(msg_log_file, "%s/messages.cfm", config_dir);
        -:  626:
       24:  627:	mime_file = (char *)xnmalloc(config_len + 14, sizeof(char));
call    0 returned 24
       24:  628:	sprintf(mime_file, "%s/mimelist.cfm", config_dir);
        -:  629:
       24:  630:	actions_file = (char *)xnmalloc(config_len + 13, sizeof(char));
call    0 returned 24
       24:  631:	sprintf(actions_file, "%s/actions.cfm", config_dir);
        -:  632:
       24:  633:	remotes_file = (char *)xnmalloc(config_len + 10, sizeof(char));
call    0 returned 24
       24:  634:	sprintf(remotes_file, "%s/nets.cfm", config_dir);
        -:  635:
       24:  636:	return;
unconditional  0 taken 24
        -:  637:}
        -:  638:
        -:  639:static int
function import_rl_file called 24 returned 100% blocks executed 47%
       24:  640:import_rl_file(void)
        -:  641:{
       24:  642:	if (!data_dir || !config_dir_gral)
       24:  642-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24:  642-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 24
    #####:  643:		return EXIT_FAILURE;
    %%%%%:  643-block  0
unconditional  0 never executed
        -:  644:
        -:  645:	char tmp[PATH_MAX];
       24:  646:	sprintf(tmp, "%s/readline.cfm", config_dir_gral);
        -:  647:	struct stat attr;
       24:  648:	if (lstat(tmp, &attr) == 0)
       24:  648-block  0
call    0 returned 24
branch  1 taken 24 (fallthrough)
branch  2 taken 0
       24:  649:		return EXIT_SUCCESS;
       24:  649-block  0
unconditional  0 taken 24
        -:  650:
        -:  651:	char rl_file[PATH_MAX];
    #####:  652:	snprintf(rl_file, PATH_MAX - 1, "%s/%s/readline.cfm", data_dir, PNL);
    #####:  653:	if (stat(rl_file, &attr) == EXIT_SUCCESS) {
    %%%%%:  653-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  654:		char *cmd[] = {"cp", rl_file, config_dir_gral, NULL};
    #####:  655:		if (launch_execve(cmd, FOREGROUND, E_NOSTDERR) == EXIT_SUCCESS)
    %%%%%:  655-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  656:			return EXIT_SUCCESS;
    %%%%%:  656-block  0
unconditional  0 never executed
        -:  657:	}
        -:  658:
    #####:  659:	return EXIT_FAILURE;
    %%%%%:  659-block  0
unconditional  0 never executed
        -:  660:}
        -:  661:
        -:  662:int
function create_config called 1 returned 100% blocks executed 38%
        1:  663:create_config(char *file)
        -:  664:{
        -:  665:	struct stat attr;
        -:  666:
        -:  667:	/* First, try to import it from DATADIR */
        1:  668:	if (data_dir) {
        1:  668-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  669:		char sys_file[PATH_MAX];
        1:  670:		snprintf(sys_file, PATH_MAX - 1, "%s/%s/%src", data_dir, PNL, PNL);
        1:  671:		if (stat(sys_file, &attr) == EXIT_SUCCESS) {
        1:  671-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  672:			char *cmd[] = {"cp", sys_file, file, NULL};
        1:  673:			if (launch_execve(cmd, FOREGROUND, E_NOFLAG) == EXIT_SUCCESS)
        1:  673-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  674:				return EXIT_SUCCESS;
        1:  674-block  0
unconditional  0 taken 1
        -:  675:		}
        -:  676:	}
        -:  677:
        -:  678:	/* If not found, create it */
        -:  679:	int fd;
    #####:  680:	FILE *config_fp = open_fstream_w(file, &fd);
    %%%%%:  680-block  0
call    0 never executed
        -:  681:
    #####:  682:	if (!config_fp) {
branch  0 never executed
branch  1 never executed
    #####:  683:		fprintf(stderr, "%s: fopen: %s: %s\n", PROGRAM_NAME, file, strerror(errno));
    %%%%%:  683-block  0
call    0 never executed
call    1 never executed
    #####:  684:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  685:	}
        -:  686:
        -:  687:	/* Do not translate anything in the config file */
    #####:  688:	fprintf(config_fp,
    %%%%%:  688-block  0
call    0 never executed
        -:  689:
        -:  690:	    "\t\t###########################################\n\
        -:  691:\t\t#                  CLIFM                  #\n\
        -:  692:\t\t#  The anti-eye-candy, KISS file manager  #\n\
        -:  693:\t\t###########################################\n\n"
        -:  694:
        -:  695:	    "# This is the configuration file for CliFM\n\n"
        -:  696:
        -:  697:	    "# Color schemes are stored in the colors directory. By default,\n\
        -:  698:# the 'default' color scheme is used. Visit %s\n\
        -:  699:# to get a few more\n\
        -:  700:ColorScheme=%s\n\n"
        -:  701:
        -:  702:	    "# The amount of files contained by a directory is informed next\n\
        -:  703:# to the directory name. However, this feature might slow things down when,\n\
        -:  704:# for example, listing files on a remote server. The filescounter can be\n\
        -:  705:# disabled here, via the --no-files-counter option, or using the 'fc'\n\
        -:  706:# command while in the program itself.\n\
        -:  707:FilesCounter=%s\n\n"
        -:  708:
        -:  709:	    "# The character used to construct the line dividing the list of files and\n\
        -:  710:# the prompt. DividingLineChar accepts both literal characters (in single\n\
        -:  711:# quotes) and decimal numbers.\n\
        -:  712:DividingLineChar='%c'\n\n"
        -:  713:
        -:  714:	    "# If set to true, print a map of the current position in the directory\n\
        -:  715:# history list, showing previous, current, and next entries\n\
        -:  716:DirhistMap=%s\n\n"
        -:  717:
        -:  718:		"# Use a regex expression to filter file names when listing files.\n\
        -:  719:# Example: !.*~$ to exclude backup files (ending with ~), or ^\\. to list \n\
        -:  720:# only hidden files. Do not quote the regular expression\n\
        -:  721:Filter=\n\n"
        -:  722:
        -:  723:	    "# Set the default copy command. Available options are: 0 = cp,\n\
        -:  724:# 1 = advcp, and 2 = wcp. Both 1 and 2 add a progress bar to cp.\n\
        -:  725:cpCmd=%d\n\n"
        -:  726:
        -:  727:	    "# Set the default move command. Available options are: 0 = mv,\n\
        -:  728:# and 1 = advmv. 1 adds a progress bar to mv.\n\
        -:  729:mvCmd=%d\n\n"
        -:  730:
        -:  731:	    "# The prompt line is built using string literals and/or one or more of\n\
        -:  732:# the following escape sequences:\n"
        -:  733:	    "# \\e: Escape character\n\
        -:  734:# \\h: The hostname, up to the first dot\n\
        -:  735:# \\u: The username\n\
        -:  736:# \\H: The full hostname\n\
        -:  737:# \\n: A newline character\n\
        -:  738:# \\r: A carriage return\n\
        -:  739:# \\a: A bell character\n\
        -:  740:# \\d: The date, in abbrevieted form (ex: 'Tue May 26')\n\
        -:  741:# \\s: The name of the shell (everything after the last slash) currently used\n\
        -:  742:# by CliFM\n\
        -:  743:# \\S: The number of the current workspace\n\
        -:  744:# \\l: Print an 'L' if running in light mode\n\
        -:  745:# \\P: Current profile name\n\
        -:  746:# \\t: The time, in 24-hour HH:MM:SS format\n\
        -:  747:# \\T: The time, in 12-hour HH:MM:SS format\n\
        -:  748:# \\@: The time, in 12-hour am/pm format\n\
        -:  749:# \\A: The time, in 24-hour HH:MM format\n\
        -:  750:# \\w: The full current working directory, with $HOME abbreviated with a tilde\n\
        -:  751:# \\W: The basename of $PWD, with $HOME abbreviated with a tilde\n\
        -:  752:# \\p: A mix of the two above, it abbreviates the current working directory \n\
        -:  753:# only if longer than PathMax (a value defined in the configuration file).\n\
        -:  754:# \\z: Exit code of the last executed command. :) if success and :( in case of\n\
        -:  755:# error\n\
        -:  756:# \\$ '#', if the effective user ID is 0, and '$' otherwise\n\
        -:  757:# \\nnn: The character whose ASCII code is the octal value nnn\n\
        -:  758:# \\\\: A backslash\n\
        -:  759:# \\[: Begin a sequence of non-printing characters. This is mostly used to\n\
        -:  760:# add color to the prompt line\n\
        -:  761:# \\]: End a sequence of non-printing characters\n\n"
        -:  762:
        -:  763:	    "Prompt=\"%s\"\n\n"
        -:  764:
        -:  765:	    "# If set to 'default', CliFM state information (selected files,\n\
        -:  766:# trashed files, current workspace, messages, and stealth mode) will be printed\n\
        -:  767:# to the left of the prompt. Otherwise, if set to 'custom', this information\n\
        -:  768:# will be stored in environment variables to be handled by the prompt string\n\
        -:  769:# itself. Consult the manpage for more information.\n\
        -:  770:PromptStyle=default\n\n",
        -:  771:
        -:  772:	    COLORS_REPO,
        -:  773:		DEF_COLOR_SCHEME,
        -:  774:		DEF_FILES_COUNTER == 1 ? "true" : "false",
        -:  775:		DEF_DIV_LINE_CHAR,
        -:  776:		DEF_DIRHIST_MAP == 1 ? "true" : "false",
        -:  777:		DEF_CP_CMD,
        -:  778:		DEF_MV_CMD,
        -:  779:	    DEFAULT_PROMPT);
        -:  780:
    #####:  781:	fprintf(config_fp,
call    0 never executed
        -:  782:	    "# MaxPath is only used for the /p option of the prompt: the current working\n\
        -:  783:# directory will be abbreviated to its basename (everything after last slash)\n\
        -:  784:# whenever the current path is longer than MaxPath.\n\
        -:  785:MaxPath=%d\n\n"
        -:  786:
        -:  787:	    "WelcomeMessage=%s\n\n\
        -:  788:# Print %s's logo screen at startup\n\
        -:  789:SplashScreen=%s\n\n\
        -:  790:ShowHiddenFiles=%s\n\n\
        -:  791:# List files properties next to file names instead of just file names\n\
        -:  792:LongViewMode=%s\n\n\
        -:  793:# Keep a record of both external commands and internal commands able to\n\
        -:  794:# modify the files system (e.g. 'r', 'c', 'm', and so on)\n\
        -:  795:LogCmds=%s\n\n"
        -:  796:
        -:  797:	    "# Minimum length at which a file name can be trimmed in long view mode\n\
        -:  798:# (including ELN length and spaces)\n\
        -:  799:MinFilenameTrim=%d\n\n"
        -:  800:
        -:  801:	    "# When a directory rank in the jump database is below MinJumpRank, it\n\
        -:  802:# will be forgotten\n\
        -:  803:MinJumpRank=%d\n\n"
        -:  804:
        -:  805:	    "# When the sum of all ranks in the jump database reaches MaxJumpTotalRank,\n\
        -:  806:# all ranks will be reduced 10%%, and those falling below MinJumpRank will\n\
        -:  807:# be deleted\n\
        -:  808:MaxJumpTotalRank=%d\n\n"
        -:  809:
        -:  810:	    "# Should CliFM be allowed to run external, shell commands?\n\
        -:  811:ExternalCommands=%s\n\n"
        -:  812:
        -:  813:	    "# Write the last visited directory to $XDG_CONFIG_HOME/clifm/.last to be\n\
        -:  814:# later accessed by the corresponding shell function at program exit.\n\
        -:  815:# To enable this feature consult the manpage.\n\
        -:  816:CdOnQuit=%s\n\n"
        -:  817:
        -:  818:	    "# If set to true, a command name that is the name of a directory or a\n\
        -:  819:# file is executed as if it were the argument to the the 'cd' or the \n\
        -:  820:# 'open' commands respectivelly: 'cd DIR' works the same as just 'DIR'\n\
        -:  821:# and 'open FILE' works the same as just 'FILE'.\n\
        -:  822:Autocd=%s\n\
        -:  823:AutoOpen=%s\n\n"
        -:  824:
        -:  825:	    "# If set to true, enable auto-suggestions.\n\
        -:  826:AutoSuggestions=%s\n\n"
        -:  827:
        -:  828:	    "# The following checks will be performed in the order specified\n\
        -:  829:# by SuggestionStrategy. Available checks:\n\
        -:  830:# a = Aliases names\n\
        -:  831:# b = Bookmarks names\n\
        -:  832:# c = Possible completions\n\
        -:  833:# e = ELN's\n\
        -:  834:# f = File names in current directory\n\
        -:  835:# h = Commands history\n\
        -:  836:# j = Jump database\n\
        -:  837:# Use a dash (-) to skip a check. Ex: 'eahfj-c' to skip the bookmarks check\n\
        -:  838:SuggestionStrategy=%s\n\n"
        -:  839:
        -:  840:	    "# If set to true, suggest file names using the corresponding\n\
        -:  841:# file type color (set via the color scheme file).\n\
        -:  842:SuggestFiletypeColor=%s\n\n"
        -:  843:
        -:  844:"SyntaxHighlighting=%s\n\n"
        -:  845:
        -:  846:	    "# If set to true, expand bookmark names into the corresponding bookmark\n\
        -:  847:# path: if the bookmark is \"name=/path\", \"name\" will be interpreted\n\
        -:  848:# as /path. TAB completion is also available for bookmark names.\n\
        -:  849:ExpandBookmarks=%s\n\n"
        -:  850:
        -:  851:	    "# In light mode, extra file type checks (except those provided by\n\
        -:  852:# the d_type field of the dirent structure (see readdir(3))\n\
        -:  853:# are disabled to speed up the listing process. stat(3) and access(3)\n\
        -:  854:# are not executed at all, so that we cannot know in advance if a file\n\
        -:  855:# is readable by the current user, if it is executable, SUID, SGID, if a\n\
        -:  856:# symlink is broken, and so on. The file extension check is ignored as\n\
        -:  857:# well, so that the color per extension feature is disabled.\n\
        -:  858:LightMode=%s\n\n",
        -:  859:
        -:  860:		DEF_MAX_PATH,
        -:  861:		DEF_WELCOME_MESSAGE == 1 ? "true" : "false",
        -:  862:		PROGRAM_NAME,
        -:  863:		DEF_SPLASH_SCREEN == 1 ? "true" : "false",
        -:  864:		DEF_SHOW_HIDDEN == 1 ? "true" : "false",
        -:  865:		DEF_LONG_VIEW == 1 ? "true" : "false",
        -:  866:		DEF_LOGS_ENABLED == 1 ? "true" : "false",
        -:  867:		DEF_MIN_NAME_TRIM,
        -:  868:		DEF_MIN_JUMP_RANK,
        -:  869:		DEF_MAX_JUMP_TOTAL_RANK,
        -:  870:		DEF_EXT_CMD_OK == 1 ? "true" : "false",
        -:  871:		DEF_CD_ON_QUIT == 1 ? "true" : "false",
        -:  872:		DEF_AUTOCD == 1 ? "true" : "false",
        -:  873:		DEF_AUTO_OPEN == 1 ? "true" : "false",
        -:  874:		DEF_SUGGESTIONS == 1 ? "true" : "false",
        -:  875:		DEF_SUG_STRATEGY,
        -:  876:		DEF_SUG_FILETYPE_COLOR == 1 ? "true" : "false",
        -:  877:		DEF_HIGHLIGHT == 1 ? "true" : "false",
        -:  878:		DEF_EXPAND_BOOKMARKS == 1 ? "true" : "false",
        -:  879:		DEF_LIGHT_MODE == 1 ? "true" : "false"
        -:  880:		);
        -:  881:
    #####:  882:	fprintf(config_fp,
call    0 never executed
        -:  883:	    "# If running with colors, append directory indicator and files counter\n\
        -:  884:# to directories. If running without colors (via the --no-colors option),\n\
        -:  885:# append file type indicator at the end of file names: '/' for directories,\n\
        -:  886:# '@' for symbolic links, '=' for sockets, '|' for FIFO/pipes, '*'\n\
        -:  887:# for for executable files, and '?' for unknown file types. Bear in mind\n\
        -:  888:# that when running in light mode the check for executable files won't be\n\
        -:  889:# performed, and thereby no indicator will be added to executable files.\n\
        -:  890:Classify=%s\n\n"
        -:  891:
        -:  892:	    "# Should the Selection Box be shared among different profiles?\n\
        -:  893:ShareSelbox=%s\n\n"
        -:  894:
        -:  895:	    "# Choose the resource opener to open files with their default associated\n\
        -:  896:# application. If not set, 'lira', CLiFM's built-in opener, is used.\n\
        -:  897:Opener=\n\n"
        -:  898:
        -:  899:	    "# Set the shell to be used when running external commands. Defaults to the\n\
        -:  900:# user's shell as specified in '/etc/passwd'.\n\
        -:  901:SystemShell=\n\n"
        -:  902:
        -:  903:	    "# Only used when opening a directory via a new CliFM instance (with the 'x'\n\
        -:  904:# command), this option specifies the command to be used to launch a\n\
        -:  905:# terminal emulator to run CliFM on it.\n\
        -:  906:TerminalCmd='%s'\n\n"
        -:  907:
        -:  908:	    "# Choose sorting method: 0 = none, 1 = name, 2 = size, 3 = atime\n\
        -:  909:# 4 = btime (ctime if not available), 5 = ctime, 6 = mtime, 7 = version\n\
        -:  910:# (name if note available) 8 = extension, 9 = inode, 10 = owner, 11 = group\n\
        -:  911:# NOTE: the 'version' method is not available on FreeBSD\n\
        -:  912:Sort=%d\n\
        -:  913:# By default, CliFM sorts files from less to more (ex: from 'a' to 'z' if\n\
        -:  914:# using the \"name\" method). To invert this ordering, set SortReverse to\n\
        -:  915:# true (you can also use the --sort-reverse option or the 'st' command)\n\
        -:  916:SortReverse=%s\n\n"
        -:  917:
        -:  918:	    "# Print a usage tip at startup\n\
        -:  919:Tips=%s\n\n\
        -:  920:ListFoldersFirst=%s\n\
        -:  921:CdListsAutomatically=%s\n\n\
        -:  922:# Enable case sensitive listing for files in the current directory\n\
        -:  923:CaseSensitiveList=%s\n\n\
        -:  924:# Enable case sensitive lookup for the directory jumper function (via \n\
        -:  925:# the 'j' command)\n\
        -:  926:CaseSensitiveDirJump=%s\n\n\
        -:  927:# Enable case sensitive completion for file names\n\
        -:  928:CaseSensitivePathComp=%s\n\n\
        -:  929:Unicode=%s\n\n\
        -:  930:# Enable Mas, the files list pager (executed whenever the list of files\n\
        -:  931:# does not fit in the screen)\n\
        -:  932:Pager=%s\n\n\
        -:  933:MaxHistory=%d\n\
        -:  934:MaxDirhist=%d\n\
        -:  935:MaxLog=%d\n\
        -:  936:DiskUsage=%s\n\n"
        -:  937:
        -:  938:		"# If set to true, always print the list of selected files. Since this\n\
        -:  939:# list could become quite extensive, you can limit the number of printed \n\
        -:  940:# entries using the MaxPrintSelfiles option (-1 = no limit, 0 = auto (never\n\
        -:  941:# print more than half terminal height), or any custom value)\n\
        -:  942:PrintSelfiles=%s\n\
        -:  943:MaxPrintSelfiles=%d\n\n"
        -:  944:
        -:  945:	    "# If set to true, clear the screen before listing files\n\
        -:  946:ClearScreen=%s\n\n"
        -:  947:
        -:  948:	    "# If not specified, StartingPath defaults to the current working\n\
        -:  949:# directory.\n\
        -:  950:StartingPath=\n\n"
        -:  951:
        -:  952:	    "# If set to true, start CliFM in the last visited directory (and in the\n\
        -:  953:# last used workspace). This option overrides StartingPath.\n\
        -:  954:RestoreLastPath=%s\n\n"
        -:  955:
        -:  956:	    "# If set to true, the 'r' command executes 'trash' instead of 'rm' to\n\
        -:  957:# prevent accidental deletions.\n\
        -:  958:TrashAsRm=%s\n\n"
        -:  959:
        -:  960:	    "# Set readline editing mode: 0 for vi and 1 for emacs (default).\n\
        -:  961:RlEditMode=%d\n\n"
        -:  962:
        -:  963:	    "#END OF OPTIONS\n\n",
        -:  964:
        -:  965:		DEF_CLASSIFY == 1 ? "true" : "false",
        -:  966:		DEF_SHARE_SELBOX == 1 ? "true" : "false",
        -:  967:		DEFAULT_TERM_CMD,
        -:  968:		DEF_SORT,
        -:  969:		DEF_SORT_REVERSE == 1 ? "true" : "false",
        -:  970:		DEF_TIPS == 1 ? "true" : "false",
        -:  971:		DEF_LIST_FOLDERS_FIRST == 1 ? "true" : "false",
        -:  972:		DEF_CD_LISTS_ON_THE_FLY == 1 ? "true" : "false",
        -:  973:		DEF_CASE_SENSITIVE == 1 ? "true" : "false",
        -:  974:		DEF_CASE_SENS_DIRJUMP == 1 ? "true" : "false",
        -:  975:		DEF_CASE_SENS_PATH_COMP == 1 ? "true" : "false",
        -:  976:		DEF_UNICODE == 1 ? "true" : "false",
        -:  977:		DEF_PAGER == 1 ? "true" : "false",
        -:  978:		DEF_MAX_HIST,
        -:  979:		DEF_MAX_DIRHIST,
        -:  980:		DEF_MAX_LOG,
        -:  981:		DEF_DISK_USAGE == 1 ? "true" : "false",
        -:  982:		DEF_PRINTSEL == 1 ? "true" : "false",
        -:  983:		DEF_MAXPRINTSEL,
        -:  984:		DEF_CLEAR_SCREEN == 1 ? "true" : "false",
        -:  985:		DEF_RESTORE_LAST_PATH == 1 ? "true" : "false",
        -:  986:		DEF_TRASRM == 1 ? "true" : "false",
        -:  987:		DEF_RL_EDIT_MODE
        -:  988:		);
        -:  989:
    #####:  990:	fputs(
call    0 never executed
        -:  991:
        -:  992:	    "#ALIASES\n\
        -:  993:#alias ls='ls --color=auto -A'\n\n"
        -:  994:
        -:  995:	    "#PROMPT COMMANDS\n\n"
        -:  996:	    "# Write below the commands you want to be executed before the prompt.\n\
        -:  997:# Ex:\n\
        -:  998:#/usr/share/clifm/plugins/git_status.sh\n\
        -:  999:#date | awk '{print $1\", \"$2,$3\", \"$4}'\n\n"
        -: 1000:	    "#END OF PROMPT COMMANDS\n\n",
        -: 1001:	    config_fp);
        -: 1002:
    #####: 1003:	close_fstream(config_fp, fd);
call    0 never executed
    #####: 1004:	return EXIT_SUCCESS;
unconditional  0 never executed
        -: 1005:}
        -: 1006:
        -: 1007:static void
function create_def_cscheme called 24 returned 100% blocks executed 44%
       24: 1008:create_def_cscheme(void)
        -: 1009:{
       24: 1010:	if (!colors_dir)
       24: 1010-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1011:		return;
    %%%%%: 1011-block  0
unconditional  0 never executed
        -: 1012:
       24: 1013:	char *cscheme_file = (char *)xnmalloc(strlen(colors_dir) + 13, sizeof(char));
       24: 1013-block  0
call    0 returned 24
       24: 1014:	sprintf(cscheme_file, "%s/default.cfm", colors_dir);
        -: 1015:
        -: 1016:	/* If the file already exists, do nothing */
        -: 1017:	struct stat attr;
       24: 1018:	if (stat(cscheme_file, &attr) != -1) {
call    0 returned 24
branch  1 taken 24 (fallthrough)
branch  2 taken 0
       24: 1019:		free(cscheme_file);
       24: 1020:		return;
       24: 1020-block  0
unconditional  0 taken 24
        -: 1021:	}
        -: 1022:
        -: 1023:	int fd;
    #####: 1024:	FILE *fp = open_fstream_w(cscheme_file, &fd);
    %%%%%: 1024-block  0
call    0 never executed
    #####: 1025:	if (!fp) {
branch  0 never executed
branch  1 never executed
    #####: 1026:		_err('w', PRINT_PROMPT, "%s: Error creating default color scheme "
call    0 never executed
    #####: 1027:			"file: %s\n", PROGRAM_NAME, strerror(errno));
    %%%%%: 1027-block  0
call    0 never executed
    #####: 1028:		free(cscheme_file);
    #####: 1029:		return;
unconditional  0 never executed
        -: 1030:	}
        -: 1031:
    #####: 1032:	fprintf(fp, "# Default color scheme for %s\n\n\
    %%%%%: 1032-block  0
call    0 never executed
        -: 1033:# FiletypeColors defines the color used for file types when listing files,\n\
        -: 1034:# just as InterfaceColors defines colors for CliFM's interface and ExtColors\n\
        -: 1035:# for file extensions. They all make use of the same format used by the\n\
        -: 1036:# LS_COLORS environment variable. Thus, \"di=01;34\" means that (non-empty)\n\
        -: 1037:# directories will be listed in bold blue.\n\
        -: 1038:# Color codes are traditional ANSI escape sequences less the escape char and\n\
        -: 1039:# the final 'm'. 8 bit, 256 colors, and RGB colors are supported.\n\
        -: 1040:# A detailed explanation of all these codes can be found in the manpage.\n\n"
        -: 1041:
        -: 1042:		    "FiletypeColors=\"%s\"\n\n"
        -: 1043:
        -: 1044:		    "InterfaceColors=\"%s\"\n\n"
        -: 1045:
        -: 1046:		    "# Same as FiletypeColors, but for file extensions. The format is always\n\
        -: 1047:# *.EXT=COLOR\n"
        -: 1048:#ifndef _NO_ICONS
        -: 1049:		    "ExtColors=\"%s\"\n\n"
        -: 1050:
        -: 1051:		    "DirIconsColor=\"00;33\"\n",
        -: 1052:#else
        -: 1053:		    "ExtColors=\"%s\"\n\n",
        -: 1054:#endif
        -: 1055:		PROGRAM_NAME,
        -: 1056:	    DEF_FILE_COLORS,
        -: 1057:	    DEF_IFACE_COLORS,
        -: 1058:	    DEF_EXT_COLORS);
        -: 1059:
    #####: 1060:	close_fstream(fp, fd);
call    0 never executed
    #####: 1061:	free(cscheme_file);
    #####: 1062:	return;
unconditional  0 never executed
        -: 1063:}
        -: 1064:
        -: 1065:static int
function create_remotes_file called 24 returned 100% blocks executed 75%
       24: 1066:create_remotes_file(void)
        -: 1067:{
       24: 1068:	if (!remotes_file || !*remotes_file)
       24: 1068-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 1068-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 24
    #####: 1069:		return EXIT_FAILURE;
    %%%%%: 1069-block  0
unconditional  0 never executed
        -: 1070:
        -: 1071:	struct stat attr;
       24: 1072:	if (stat(remotes_file, &attr) == EXIT_SUCCESS)
       24: 1072-block  0
call    0 returned 24
branch  1 taken 23 (fallthrough)
branch  2 taken 1
       23: 1073:		return EXIT_SUCCESS;
       23: 1073-block  0
unconditional  0 taken 23
        -: 1074:
        -: 1075:	int fd;
        1: 1076:	FILE *fp = open_fstream_w(remotes_file, &fd);
        1: 1076-block  0
call    0 returned 1
        1: 1077:	if (!fp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1078:		_err('e', PRINT_PROMPT, "%s: '%s': %s\n", PROGRAM_NAME,
call    0 never executed
    #####: 1079:		    remotes_file, strerror(errno));
    %%%%%: 1079-block  0
call    0 never executed
    #####: 1080:		return EXIT_FAILURE;
unconditional  0 never executed
        -: 1081:	}
        -: 1082:
        1: 1083:	fprintf(fp, "#####################################\n"
        1: 1083-block  0
call    0 returned 1
        -: 1084:		"# Remotes management file for %s #\n"
        -: 1085:		"#####################################\n\n"
        -: 1086:		"# Blank and commented lines are omitted\n\n"
        -: 1087:		"# Example:\n"
        -: 1088:		"# A name for this remote. It will be used by the 'net' command\n"
        -: 1089:		"# and will be available for TAB completion\n"
        -: 1090:		"# [work_smb]\n\n"
        -: 1091:		"# Comment=My work samba server\n"
        -: 1092:		"# Mountpoint=/home/user/.config/clifm/mounts/work_smb\n\n"
        -: 1093:		"# Use %%m as a placeholder for Mountpoint\n"
        -: 1094:		"# MountCmd=mount.cifs //WORK_IP/shared %%m -o OPTIONS\n"
        -: 1095:		"# UnmountCmd=umount %%m\n\n"
        -: 1096:		"# Automatically mount this remote at startup\n"
        -: 1097:		"# AutoMount=true\n\n"
        -: 1098:		"# Automatically unmount this remote at exit\n"
        -: 1099:		"# AutoUnmount=true\n\n", PROGRAM_NAME);
        -: 1100:
        1: 1101:	close_fstream(fp, fd);
call    0 returned 1
        1: 1102:	return EXIT_SUCCESS;
unconditional  0 taken 1
        -: 1103:}
        -: 1104:
        -: 1105:static void
function create_config_files called 24 returned 100% blocks executed 45%
       24: 1106:create_config_files(void)
        -: 1107:{
        -: 1108:	struct stat attr;
        -: 1109:
        -: 1110:			/* #############################
        -: 1111:			 * #        TRASH DIRS         #
        -: 1112:			 * ############################# */
        -: 1113:#ifndef _NO_TRASH
       24: 1114:	if (stat(trash_dir, &attr) == -1) {
       24: 1114-block  0
call    0 returned 24
branch  1 taken 0 (fallthrough)
branch  2 taken 24
    #####: 1115:		char *trash_files = (char *)NULL;
    #####: 1116:		trash_files = (char *)xnmalloc(strlen(trash_dir) + 7, sizeof(char));
    %%%%%: 1116-block  0
call    0 never executed
        -: 1117:
    #####: 1118:		sprintf(trash_files, "%s/files", trash_dir);
    #####: 1119:		char *trash_info = (char *)NULL;
    #####: 1120:		trash_info = (char *)xnmalloc(strlen(trash_dir) + 6, sizeof(char));
call    0 never executed
        -: 1121:
    #####: 1122:		sprintf(trash_info, "%s/info", trash_dir);
    #####: 1123:		char *cmd[] = {"mkdir", "-p", trash_files, trash_info, NULL};
        -: 1124:
    #####: 1125:		int ret = launch_execve(cmd, FOREGROUND, E_NOFLAG);
call    0 never executed
    #####: 1126:		free(trash_files);
    #####: 1127:		free(trash_info);
        -: 1128:
    #####: 1129:		if (ret != EXIT_SUCCESS) {
branch  0 never executed
branch  1 never executed
    #####: 1130:			trash_ok = 0;
    #####: 1131:			_err('w', PRINT_PROMPT, _("%s: mkdir: '%s': Error creating trash "
    %%%%%: 1131-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1132:				"directory. Trash function disabled\n"), PROGRAM_NAME, trash_dir);
        -: 1133:		}
        -: 1134:	}
        -: 1135:
        -: 1136:	/* If it exists, check it is writable */
       24: 1137:	else if (access(trash_dir, W_OK) == -1) {
       24: 1137-block  0
call    0 returned 24
branch  1 taken 0 (fallthrough)
branch  2 taken 24
    #####: 1138:		trash_ok = 0;
    #####: 1139:		_err('w', PRINT_PROMPT, _("%s: '%s': Directory not writable. "
    %%%%%: 1139-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1140:				"Trash function disabled\n"), PROGRAM_NAME, trash_dir);
        -: 1141:	}
        -: 1142:#endif
        -: 1143:				/* ####################
        -: 1144:				 * #    CONFIG DIR    #
        -: 1145:				 * #################### */
        -: 1146:
        -: 1147:	/* If the config directory doesn't exist, create it */
        -: 1148:	/* Use the GNU mkdir to let it handle parent directories */
       24: 1149:	if (stat(config_dir, &attr) == -1) {
       24: 1149-block  0
call    0 returned 24
branch  1 taken 0 (fallthrough)
branch  2 taken 24
    #####: 1150:		char *tmp_cmd[] = {"mkdir", "-p", config_dir, NULL};
    #####: 1151:		if (launch_execve(tmp_cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS) {
    %%%%%: 1151-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1152:			config_ok = 0;
    #####: 1153:			_err('e', PRINT_PROMPT, _("%s: mkdir: '%s': Error creating "
    %%%%%: 1153-block  0
call    0 never executed
call    1 never executed
        -: 1154:				"configuration directory. Bookmarks, commands logs, and "
        -: 1155:				"command history are disabled. Program messages won't be "
        -: 1156:				"persistent. Using default options\n"),
        -: 1157:			    PROGRAM_NAME, config_dir);
    #####: 1158:			return;
unconditional  0 never executed
        -: 1159:		}
        -: 1160:	}
        -: 1161:
        -: 1162:	/* If it exists, check it is writable */
       24: 1163:	else if (access(config_dir, W_OK) == -1) {
       24: 1163-block  0
call    0 returned 24
branch  1 taken 0 (fallthrough)
branch  2 taken 24
    #####: 1164:		config_ok = 0;
    #####: 1165:		_err('e', PRINT_PROMPT, _("%s: '%s': Directory not writable. Bookmarks, "
    %%%%%: 1165-block  0
call    0 never executed
call    1 never executed
        -: 1166:			"commands logs, and commands history are disabled. Program messages "
        -: 1167:			"won't be persistent. Using default options\n"),
        -: 1168:		    PROGRAM_NAME, config_dir);
    #####: 1169:		return;
unconditional  0 never executed
        -: 1170:	}
        -: 1171:
        -: 1172:				/* #####################
        -: 1173:				 * #    CONFIG FILE    #
        -: 1174:				 * #####################*/
        -: 1175:
       24: 1176:	if (stat(config_file, &attr) == -1) {
       24: 1176-block  0
call    0 returned 24
branch  1 taken 0 (fallthrough)
branch  2 taken 24
    #####: 1177:		if (create_config(config_file) == EXIT_SUCCESS)
    %%%%%: 1177-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1178:			config_ok = 1;
    %%%%%: 1178-block  0
unconditional  0 never executed
        -: 1179:		else
    #####: 1180:			config_ok = 0;
    %%%%%: 1180-block  0
unconditional  0 never executed
        -: 1181:	}
        -: 1182:
       24: 1183:	if (!config_ok)
       24: 1183-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1184:		return;
    %%%%%: 1184-block  0
unconditional  0 never executed
        -: 1185:
        -: 1186:				/* ######################
        -: 1187:				 * #    PROFILE FILE    #
        -: 1188:				 * ###################### */
        -: 1189:
       24: 1190:	if (stat(profile_file, &attr) == -1) {
       24: 1190-block  0
call    0 returned 24
branch  1 taken 1 (fallthrough)
branch  2 taken 23
        1: 1191:		FILE *profile_fp = fopen(profile_file, "w");
        1: 1191-block  0
call    0 returned 1
        1: 1192:		if (!profile_fp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1193:			_err('e', PRINT_PROMPT, "%s: fopen: '%s': %s\n", PROGRAM_NAME,
call    0 never executed
unconditional  1 never executed
    #####: 1194:			    profile_file, strerror(errno));
    %%%%%: 1194-block  0
call    0 never executed
        -: 1195:		} else {
        1: 1196:			fprintf(profile_fp, _("#%s profile\n\
        1: 1196-block  0
call    0 returned 1
call    1 returned 1
        -: 1197:# Write here the commands you want to be executed at startup\n\
        -: 1198:# Ex:\n#echo -e \"%s, the anti-eye-candy/KISS file manager\"\n"),
        -: 1199:			    PROGRAM_NAME, PROGRAM_NAME);
        1: 1200:			fclose(profile_fp);
call    0 returned 1
unconditional  1 taken 1
        -: 1201:		}
        -: 1202:	}
        -: 1203:
        -: 1204:				/* #####################
        -: 1205:				 * #    COLORS DIR     #
        -: 1206:				 * ##################### */
        -: 1207:
       24: 1208:	if (stat(colors_dir, &attr) == -1) {
       24: 1208-block  0
call    0 returned 24
branch  1 taken 0 (fallthrough)
branch  2 taken 24
    #####: 1209:		char *cmd[] = {"mkdir", colors_dir, NULL};
    #####: 1210:		if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS) {
    %%%%%: 1210-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1211:			_err('w', PRINT_PROMPT, _("%s: mkdir: Error creating colors "
    %%%%%: 1211-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1212:				"directory. Using the default color scheme\n"),
        -: 1213:			    PROGRAM_NAME);
        -: 1214:		}
        -: 1215:	}
        -: 1216:
        -: 1217:	/* Generate the default color scheme file */
       24: 1218:	create_def_cscheme();
       24: 1218-block  0
call    0 returned 24
        -: 1219:
        -: 1220:				/* #####################
        -: 1221:				 * #      PLUGINS      #
        -: 1222:				 * #####################*/
        -: 1223:
       24: 1224:	if (stat(plugins_dir, &attr) == -1) {
call    0 returned 24
branch  1 taken 0 (fallthrough)
branch  2 taken 24
    #####: 1225:		char *cmd[] = {"mkdir", plugins_dir, NULL};
    #####: 1226:		if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS) {
    %%%%%: 1226-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1227:			_err('e', PRINT_PROMPT, _("%s: mkdir: Error creating plugins "
    %%%%%: 1227-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1228:				"directory. The actions function is disabled\n"),
        -: 1229:			    PROGRAM_NAME);
        -: 1230:		}
        -: 1231:	}
        -: 1232:
       24: 1233:	import_rl_file();
       24: 1233-block  0
call    0 returned 24
       24: 1234:	create_actions_file(actions_file);
call    0 returned 24
       24: 1235:	create_mime_file(mime_file, 0);
call    0 returned 24
       24: 1236:	create_remotes_file();
call    0 returned 24
        -: 1237:}
        -: 1238:
        -: 1239:int
function create_mime_file called 25 returned 100% blocks executed 63%
       25: 1240:create_mime_file(char *file, int new_prof)
        -: 1241:{
        -: 1242:	struct stat attr;
       25: 1243:	if (stat(file, &attr) == EXIT_SUCCESS)
       25: 1243-block  0
call    0 returned 25
branch  1 taken 24 (fallthrough)
branch  2 taken 1
       24: 1244:		return EXIT_SUCCESS;
       24: 1244-block  0
unconditional  0 taken 24
        -: 1245:
        1: 1246:	if (!data_dir)
        1: 1246-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1247:		return EXIT_FAILURE;
    %%%%%: 1247-block  0
unconditional  0 never executed
        -: 1248:
        -: 1249:	char sys_mimelist[PATH_MAX];
        1: 1250:	snprintf(sys_mimelist, PATH_MAX - 1, "%s/%s/mimelist.cfm", data_dir, PNL);
        -: 1251:
        1: 1252:	if (stat(sys_mimelist, &attr) == -1) {
        1: 1252-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 1253:		_err('e', PRINT_PROMPT, "%s: %s: %s\n", PROGRAM_NAME,
call    0 never executed
    #####: 1254:			sys_mimelist, strerror(errno));
    %%%%%: 1254-block  0
call    0 never executed
    #####: 1255:		return EXIT_FAILURE;
unconditional  0 never executed
        -: 1256:	}
        -: 1257:
        1: 1258:	char *cmd[] = {"cp", "-f", sys_mimelist, file, NULL};
        1: 1259:	if (launch_execve(cmd, FOREGROUND, E_NOFLAG) == EXIT_SUCCESS) {
        1: 1259-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 1260:		if (!new_prof) {
        1: 1260-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1261:			_err('n', PRINT_PROMPT, _("%s created a new MIME list file (%s) "
    %%%%%: 1261-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1262:				"It is recommended to edit this file (entering 'mm edit' or "
        -: 1263:				"pressing F6) to add the programs you use and remove those "
        -: 1264:				"you don't. This will make the process of opening files "
        -: 1265:				"faster and smoother\n"),
        -: 1266:				PROGRAM_NAME, file, sys_mimelist);
        -: 1267:		}
        1: 1268:		return EXIT_SUCCESS;
        1: 1268-block  0
unconditional  0 taken 1
        -: 1269:	}
        -: 1270:
    #####: 1271:	return EXIT_FAILURE;
    %%%%%: 1271-block  0
unconditional  0 never executed
        -: 1272:}
        -: 1273:
        -: 1274:int
function create_bm_file called 21 returned 100% blocks executed 71%
       21: 1275:create_bm_file(void)
        -: 1276:{
       21: 1277:	if (!bm_file)
       21: 1277-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 21
    #####: 1278:		return EXIT_FAILURE;
    %%%%%: 1278-block  0
unconditional  0 never executed
        -: 1279:
        -: 1280:	struct stat file_attrib;
       21: 1281:	if (stat(bm_file, &file_attrib) == -1) {
       21: 1281-block  0
call    0 returned 21
branch  1 taken 1 (fallthrough)
branch  2 taken 20
        1: 1282:		FILE *fp = fopen(bm_file, "w+");
        1: 1282-block  0
call    0 returned 1
        1: 1283:		if (!fp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1284:			_err('e', PRINT_PROMPT, "bookmarks: '%s': %s\n", bm_file,
call    0 never executed
    #####: 1285:			    strerror(errno));
    %%%%%: 1285-block  0
call    0 never executed
    #####: 1286:			return EXIT_FAILURE;
unconditional  0 never executed
        -: 1287:		} else {
       1*: 1288:			fprintf(fp, "### This is the bookmarks file for %s ###\n\n"
        1: 1288-block  0
unconditional  0 taken 1
    %%%%%: 1288-block  1
unconditional  1 never executed
        1: 1288-block  2
call    2 returned 1
        -: 1289:				    "# Empty and commented lines are ommited\n"
        -: 1290:				    "# The bookmarks syntax is: [shortcut]name:path\n"
        -: 1291:				    "# Example:\n"
        -: 1292:				    "[c]clifm:%s\n",
        1: 1293:			    PROGRAM_NAME, config_dir ? config_dir : "path/to/file");
        1: 1293-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1294:			fclose(fp);
call    0 returned 1
unconditional  1 taken 1
        -: 1295:		}
        -: 1296:	}
        -: 1297:
       21: 1298:	return EXIT_SUCCESS;
       21: 1298-block  0
unconditional  0 taken 21
        -: 1299:}
        -: 1300:
        -: 1301:static void
function read_config called 24 returned 100% blocks executed 76%
       24: 1302:read_config(void)
        -: 1303:{
       24: 1304:	int ret = -1;
        -: 1305:
        -: 1306:	int fd;
       24: 1307:	FILE *config_fp = open_fstream_r(config_file, &fd);
       24: 1307-block  0
call    0 returned 24
       24: 1308:	if (!config_fp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1309:		_err('e', PRINT_PROMPT, _("%s: fopen: '%s': %s. Using default values.\n"),
call    0 never executed
call    1 never executed
    #####: 1310:		    PROGRAM_NAME, config_file, strerror(errno));
    %%%%%: 1310-block  0
call    0 never executed
    #####: 1311:		return;
unconditional  0 never executed
        -: 1312:	}
        -: 1313:
       24: 1314:	if (xargs.rl_vi_mode == 1)
       24: 1314-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1315:		rl_vi_editing_mode(1, 0);
    %%%%%: 1315-block  0
call    0 never executed
unconditional  1 never executed
        -: 1316:
       24: 1317:	*div_line_char = '\0';
        -: 1318:#define MAX_BOOL 6 /* false (5) + 1 */
        -: 1319:	/* starting path(14) + PATH_MAX + \n(1)*/
        -: 1320:	char line[PATH_MAX + 15];
        -: 1321:
     5795: 1322:	while (fgets(line, (int)sizeof(line), config_fp)) {
       24: 1322-block  0
unconditional  0 taken 24
     5795: 1322-block  1
call    1 returned 5795
branch  2 taken 5795
branch  3 taken 0 (fallthrough)
     5795: 1323:		if (*line == '\n' || (*line == '#' && line[1] != 'E'))
     5795: 1323-block  0
branch  0 taken 4740 (fallthrough)
branch  1 taken 1055
     4740: 1323-block  1
branch  2 taken 3308 (fallthrough)
branch  3 taken 1432
     3308: 1323-block  2
branch  4 taken 3284 (fallthrough)
branch  5 taken 24
     4339: 1324:			continue;
     4339: 1324-block  0
unconditional  0 taken 4339
     1456: 1325:		if (*line == '#' && strncmp(line, "#END OF OPTIONS", 15) == 0)
     1456: 1325-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 1432
       24: 1325-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 24
        -: 1326:			break;
        -: 1327:
     1432: 1328:		else if (xargs.autocd == UNSET && *line == 'A'
     1432: 1328-block  0
branch  0 taken 1432 (fallthrough)
branch  1 taken 0
     1432: 1328-block  1
branch  2 taken 81 (fallthrough)
branch  3 taken 1351
      104: 1329:		&& strncmp(line, "Autocd=", 7) == 0) {
       81: 1329-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 58
       23: 1329-block  1
unconditional  2 taken 23
       23: 1330:			char opt_str[MAX_BOOL] = "";
       23: 1331:			ret = sscanf(line, "Autocd=%5s\n", opt_str);
      23*: 1332:			if (ret == -1)
       23: 1332-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1333:				continue;
    %%%%%: 1333-block  0
unconditional  0 never executed
       23: 1334:			if (strncmp(opt_str, "true", 4) == 0)
       23: 1334-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1335:				autocd = 1;
       23: 1335-block  0
unconditional  0 taken 23
    #####: 1336:			else if (strncmp(opt_str, "false", 5) == 0)
    %%%%%: 1336-block  0
branch  0 never executed
branch  1 never executed
    #####: 1337:				autocd = 0;
    %%%%%: 1337-block  0
unconditional  0 never executed
        -: 1338:		}
        -: 1339:
     1409: 1340:		else if (xargs.autojump == UNSET && *line == 'A'
     1409: 1340-block  0
branch  0 taken 1409 (fallthrough)
branch  1 taken 0
     1409: 1340-block  1
branch  2 taken 58 (fallthrough)
branch  3 taken 1351
       75: 1341:		&& strncmp(line, "AutoJump=", 9) == 0) {
       58: 1341-block  0
branch  0 taken 17 (fallthrough)
branch  1 taken 41
       17: 1341-block  1
unconditional  2 taken 17
       17: 1342:			char opt_str[MAX_BOOL] = "";
       17: 1343:			ret = sscanf(line, "AutoJump=%5s\n", opt_str);
      17*: 1344:			if (ret == -1)
       17: 1344-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 17
    #####: 1345:				continue;
    %%%%%: 1345-block  0
unconditional  0 never executed
       17: 1346:			if (strncmp(opt_str, "true", 4) == 0)
       17: 1346-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 17
    #####: 1347:				autojump = autocd = 1;
    %%%%%: 1347-block  0
unconditional  0 never executed
       17: 1348:			else if (strncmp(opt_str, "false", 5) == 0)
       17: 1348-block  0
branch  0 taken 17 (fallthrough)
branch  1 taken 0
       17: 1349:				autojump = 0;
       17: 1349-block  0
unconditional  0 taken 17
        -: 1350:		}
        -: 1351:
     1392: 1352:		else if (xargs.auto_open == UNSET && *line == 'A'
     1392: 1352-block  0
branch  0 taken 1392 (fallthrough)
branch  1 taken 0
     1392: 1352-block  1
branch  2 taken 41 (fallthrough)
branch  3 taken 1351
       64: 1353:		&& strncmp(line, "AutoOpen=", 9) == 0) {
       41: 1353-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 18
       23: 1353-block  1
unconditional  2 taken 23
       23: 1354:			char opt_str[MAX_BOOL] = "";
       23: 1355:			ret = sscanf(line, "AutoOpen=%5s\n", opt_str);
      23*: 1356:			if (ret == -1)
       23: 1356-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1357:				continue;
    %%%%%: 1357-block  0
unconditional  0 never executed
       23: 1358:			if (strncmp(opt_str, "true", 4) == 0)
       23: 1358-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1359:				auto_open = 1;
       23: 1359-block  0
unconditional  0 taken 23
    #####: 1360:			else if (strncmp(opt_str, "false", 5) == 0)
    %%%%%: 1360-block  0
branch  0 never executed
branch  1 never executed
    #####: 1361:				auto_open = 0;
    %%%%%: 1361-block  0
unconditional  0 never executed
        -: 1362:		}
        -: 1363:
     1369: 1364:		else if (xargs.suggestions == UNSET && *line == 'A'
     1369: 1364-block  0
branch  0 taken 1369 (fallthrough)
branch  1 taken 0
     1369: 1364-block  1
branch  2 taken 18 (fallthrough)
branch  3 taken 1351
       36: 1365:		&& strncmp(line, "AutoSuggestions=", 16) == 0) {
       18: 1365-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18: 1365-block  1
unconditional  2 taken 18
       18: 1366:			char opt_str[MAX_BOOL] = "";
       18: 1367:			ret = sscanf(line, "AutoSuggestions=%5s\n", opt_str);
      18*: 1368:			if (ret == -1)
       18: 1368-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 18
    #####: 1369:				continue;
    %%%%%: 1369-block  0
unconditional  0 never executed
       18: 1370:			if (strncmp(opt_str, "true", 4) == 0)
       18: 1370-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18: 1371:				suggestions = 1;
       18: 1371-block  0
unconditional  0 taken 18
    #####: 1372:			else if (strncmp(opt_str, "false", 5) == 0)
    %%%%%: 1372-block  0
branch  0 never executed
branch  1 never executed
    #####: 1373:				suggestions = 0;
    %%%%%: 1373-block  0
unconditional  0 never executed
        -: 1374:		}
        -: 1375:
     1351: 1376:		else if (xargs.case_sens_dirjump == UNSET && *line == 'C'
     1351: 1376-block  0
branch  0 taken 1351 (fallthrough)
branch  1 taken 0
     1351: 1376-block  1
branch  2 taken 186 (fallthrough)
branch  3 taken 1165
      208: 1377:		&& strncmp(line, "CaseSensitiveDirJump=", 21) == 0) {
      186: 1377-block  0
branch  0 taken 22 (fallthrough)
branch  1 taken 164
       22: 1377-block  1
unconditional  2 taken 22
       22: 1378:			char opt_str[MAX_BOOL] = "";
       22: 1379:			ret = sscanf(line, "CaseSensitiveDirJump=%5s\n", opt_str);
        -: 1380:
      22*: 1381:			if (ret == -1)
       22: 1381-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 22
    #####: 1382:				continue;
    %%%%%: 1382-block  0
unconditional  0 never executed
        -: 1383:
       22: 1384:			if (strncmp(opt_str, "true", 4) == 0)
       22: 1384-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 18
        4: 1385:				case_sens_dirjump = 1;
        4: 1385-block  0
unconditional  0 taken 4
       18: 1386:			else if (strncmp(opt_str, "false", 5) == 0)
       18: 1386-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18: 1387:				case_sens_dirjump = 0;
       18: 1387-block  0
unconditional  0 taken 18
        -: 1388:		}
        -: 1389:
     1329: 1390:		else if (xargs.sensitive == UNSET && *line == 'C'
     1329: 1390-block  0
branch  0 taken 1329 (fallthrough)
branch  1 taken 0
     1329: 1390-block  1
branch  2 taken 164 (fallthrough)
branch  3 taken 1165
      188: 1391:		&& strncmp(line, "CaseSensitiveList=", 18) == 0) {
      164: 1391-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 140
       24: 1391-block  1
unconditional  2 taken 24
       24: 1392:			char opt_str[MAX_BOOL] = "";
       24: 1393:			ret = sscanf(line, "CaseSensitiveList=%5s\n",
        -: 1394:			    opt_str);
      24*: 1395:			if (ret == -1)
       24: 1395-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1396:				continue;
    %%%%%: 1396-block  0
unconditional  0 never executed
       24: 1397:			if (strncmp(opt_str, "true", 4) == 0)
       24: 1397-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1398:				case_sensitive = 1;
    %%%%%: 1398-block  0
unconditional  0 never executed
       24: 1399:			else if (strncmp(opt_str, "false", 5) == 0)
       24: 1399-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 1400:				case_sensitive = 0;
       24: 1400-block  0
unconditional  0 taken 24
        -: 1401:		}
        -: 1402:
     1305: 1403:		else if (xargs.case_sens_path_comp == UNSET && *line == 'C'
     1305: 1403-block  0
branch  0 taken 1305 (fallthrough)
branch  1 taken 0
     1305: 1403-block  1
branch  2 taken 140 (fallthrough)
branch  3 taken 1165
      162: 1404:		&& strncmp(line, "CaseSensitivePathComp=", 22) == 0) {
      140: 1404-block  0
branch  0 taken 22 (fallthrough)
branch  1 taken 118
       22: 1404-block  1
unconditional  2 taken 22
       22: 1405:			char opt_str[MAX_BOOL] = "";
       22: 1406:			ret = sscanf(line, "CaseSensitivePathComp=%5s\n", opt_str);
      22*: 1407:			if (ret == -1)
       22: 1407-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 22
    #####: 1408:				continue;
    %%%%%: 1408-block  0
unconditional  0 never executed
       22: 1409:			if (strncmp(opt_str, "true", 4) == 0)
       22: 1409-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 18
        4: 1410:				case_sens_path_comp = 1;
        4: 1410-block  0
unconditional  0 taken 4
       18: 1411:			else if (strncmp(opt_str, "false", 5) == 0)
       18: 1411-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18: 1412:				case_sens_path_comp = 0;
       18: 1412-block  0
unconditional  0 taken 18
        -: 1413:		}
        -: 1414:
     1283: 1415:		else if (xargs.cd_list_auto == UNSET && *line == 'C'
     1283: 1415-block  0
branch  0 taken 1283 (fallthrough)
branch  1 taken 0
     1283: 1415-block  1
branch  2 taken 118 (fallthrough)
branch  3 taken 1165
      142: 1416:		&& strncmp(line, "CdListsAutomatically=", 21) == 0) {
      118: 1416-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 94
       24: 1416-block  1
unconditional  2 taken 24
       24: 1417:			char opt_str[MAX_BOOL] = "";
       24: 1418:			ret = sscanf(line, "CdListsAutomatically=%5s\n",
        -: 1419:			    opt_str);
      24*: 1420:			if (ret == -1)
       24: 1420-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1421:				continue;
    %%%%%: 1421-block  0
unconditional  0 never executed
       24: 1422:			if (strncmp(opt_str, "true", 4) == 0)
       24: 1422-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 1423:				cd_lists_on_the_fly = 1;
       24: 1423-block  0
unconditional  0 taken 24
    #####: 1424:			else if (strncmp(opt_str, "false", 5) == 0)
    %%%%%: 1424-block  0
branch  0 never executed
branch  1 never executed
    #####: 1425:				cd_lists_on_the_fly = 0;
    %%%%%: 1425-block  0
unconditional  0 never executed
        -: 1426:		}
        -: 1427:
     1259: 1428:		else if (xargs.cd_on_quit == UNSET && *line == 'C'
     1259: 1428-block  0
branch  0 taken 1259 (fallthrough)
branch  1 taken 0
     1259: 1428-block  1
branch  2 taken 94 (fallthrough)
branch  3 taken 1165
      117: 1429:		&& strncmp(line, "CdOnQuit=", 9) == 0) {
       94: 1429-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 71
       23: 1429-block  1
unconditional  2 taken 23
       23: 1430:			char opt_str[MAX_BOOL] = "";
       23: 1431:			ret = sscanf(line, "CdOnQuit=%5s\n", opt_str);
      23*: 1432:			if (ret == -1)
       23: 1432-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1433:				continue;
    %%%%%: 1433-block  0
unconditional  0 never executed
       23: 1434:			if (strncmp(opt_str, "true", 4) == 0)
       23: 1434-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1435:				cd_on_quit = 1;
    %%%%%: 1435-block  0
unconditional  0 never executed
       23: 1436:			else if (strncmp(opt_str, "false", 5) == 0)
       23: 1436-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1437:				cd_on_quit = 0;
       23: 1437-block  0
unconditional  0 taken 23
        -: 1438:		}
        -: 1439:
     1236: 1440:		else if (xargs.classify == UNSET && *line == 'C'
     1236: 1440-block  0
branch  0 taken 1236 (fallthrough)
branch  1 taken 0
     1236: 1440-block  1
branch  2 taken 71 (fallthrough)
branch  3 taken 1165
       94: 1441:		&& strncmp(line, "Classify=", 9) == 0) {
       71: 1441-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 48
       23: 1441-block  1
unconditional  2 taken 23
       23: 1442:			char opt_str[MAX_BOOL] = "";
       23: 1443:			ret = sscanf(line, "Classify=%5s\n", opt_str);
      23*: 1444:			if (ret == -1)
       23: 1444-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1445:				continue;
    %%%%%: 1445-block  0
unconditional  0 never executed
       23: 1446:			if (strncmp(opt_str, "true", 4) == 0)
       23: 1446-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1447:				classify = 1;
       23: 1447-block  0
unconditional  0 taken 23
    #####: 1448:			else if (strncmp(opt_str, "false", 5) == 0)
    %%%%%: 1448-block  0
branch  0 never executed
branch  1 never executed
    #####: 1449:				classify = 0;
    %%%%%: 1449-block  0
unconditional  0 never executed
        -: 1450:		}
        -: 1451:
     1213: 1452:		else if (xargs.clear_screen == UNSET && *line == 'C'
     1213: 1452-block  0
branch  0 taken 1213 (fallthrough)
branch  1 taken 0
     1213: 1452-block  1
branch  2 taken 48 (fallthrough)
branch  3 taken 1165
       72: 1453:		&& strncmp(line, "ClearScreen=", 12) == 0) {
       48: 1453-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 24
       24: 1453-block  1
unconditional  2 taken 24
       24: 1454:			char opt_str[MAX_BOOL] = "";
       24: 1455:			ret = sscanf(line, "ClearScreen=%5s\n",
        -: 1456:			    opt_str);
      24*: 1457:			if (ret == -1)
       24: 1457-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1458:				continue;
    %%%%%: 1458-block  0
unconditional  0 never executed
       24: 1459:			if (strncmp(opt_str, "true", 4) == 0)
       24: 1459-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 18
        6: 1460:				clear_screen = 1;
        6: 1460-block  0
unconditional  0 taken 6
       18: 1461:			else if (strncmp(opt_str, "false", 5) == 0)
       18: 1461-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18: 1462:				clear_screen = 0;
       18: 1462-block  0
unconditional  0 taken 18
        -: 1463:		}
        -: 1464:
     1189: 1465:		else if (!usr_cscheme && *line == 'C' && strncmp(line, "ColorScheme=", 12) == 0) {
     1189: 1465-block  0
branch  0 taken 168 (fallthrough)
branch  1 taken 1021
      168: 1465-block  1
branch  2 taken 24 (fallthrough)
branch  3 taken 144
       24: 1465-block  2
branch  4 taken 24 (fallthrough)
branch  5 taken 0
       24: 1466:			char *opt = strchr(line, '=');
      24*: 1467:			if (!opt)
       24: 1467-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1468:				continue;
    %%%%%: 1468-block  0
unconditional  0 never executed
        -: 1469:
       24: 1470:			size_t len = strlen(opt);
       24: 1471:			if (opt[len - 1] == '\n')
       24: 1471-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 1472:				opt[len - 1] = '\0';
       24: 1472-block  0
unconditional  0 taken 24
        -: 1473:
       24: 1474:			if (!*(++opt))
       24: 1474-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 23
        1: 1475:				continue;
        1: 1475-block  0
unconditional  0 taken 1
        -: 1476:
       23: 1477:			usr_cscheme = savestring(opt, len);
       23: 1477-block  0
call    0 returned 23
unconditional  1 taken 23
        -: 1478:		}
        -: 1479:
     1188: 1480:		else if (*line == 'c' && strncmp(line, "cpCmd=", 6) == 0) {
     1165: 1480-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 1142
       23: 1480-block  1
branch  2 taken 23 (fallthrough)
branch  3 taken 0
       23: 1480-block  2
unconditional  4 taken 23
       23: 1481:			int opt_num = 0;
       23: 1482:			ret = sscanf(line, "cpCmd=%d\n", &opt_num);
      23*: 1483:			if (ret == -1)
       23: 1483-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1484:				continue;
    %%%%%: 1484-block  0
unconditional  0 never executed
       23: 1485:			if (opt_num >= 0 && opt_num <= 2)
       23: 1485-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1485-block  1
branch  2 taken 23 (fallthrough)
branch  3 taken 0
       23: 1486:				cp_cmd = opt_num;
       23: 1486-block  0
unconditional  0 taken 23
        -: 1487:			else /* default (sort by name) */
    #####: 1488:				cp_cmd = DEF_CP_CMD;
    %%%%%: 1488-block  0
unconditional  0 never executed
        -: 1489:		}
        -: 1490:
     1142: 1491:		else if (xargs.dirmap == UNSET && *line == 'D'
     1142: 1491-block  0
branch  0 taken 1142 (fallthrough)
branch  1 taken 0
     1142: 1491-block  1
branch  2 taken 71 (fallthrough)
branch  3 taken 1071
       94: 1492:		&& strncmp(line, "DirhistMap=", 11) == 0) {
       71: 1492-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 48
       23: 1492-block  1
unconditional  2 taken 23
       23: 1493:			char opt_str[MAX_BOOL] = "";
       23: 1494:			ret = sscanf(line, "DirhistMap=%5s\n", opt_str);
      23*: 1495:			if (ret == -1)
       23: 1495-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1496:				continue;
    %%%%%: 1496-block  0
unconditional  0 never executed
       23: 1497:			if (strncmp(opt_str, "true", 4) == 0)
       23: 1497-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1498:				dirhist_map = 1;
    %%%%%: 1498-block  0
unconditional  0 never executed
       23: 1499:			else if (strncmp(opt_str, "false", 5) == 0)
       23: 1499-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1500:				dirhist_map = 0;
       23: 1500-block  0
unconditional  0 taken 23
        -: 1501:		}
        -: 1502:
     1119: 1503:		else if (xargs.disk_usage == UNSET && *line == 'D'
     1119: 1503-block  0
branch  0 taken 1119 (fallthrough)
branch  1 taken 0
     1119: 1503-block  1
branch  2 taken 48 (fallthrough)
branch  3 taken 1071
       71: 1504:		&& strncmp(line, "DiskUsage=", 10) == 0) {
       48: 1504-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 25
       23: 1504-block  1
unconditional  2 taken 23
       23: 1505:			char opt_str[MAX_BOOL] = "";
       23: 1506:			ret = sscanf(line, "DiskUsage=%5s\n", opt_str);
      23*: 1507:			if (ret == -1)
       23: 1507-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1508:				continue;
    %%%%%: 1508-block  0
unconditional  0 never executed
       23: 1509:			if (strncmp(opt_str, "true", 4) == 0)
       23: 1509-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1510:				disk_usage = 1;
    %%%%%: 1510-block  0
unconditional  0 never executed
       23: 1511:			else if (strncmp(opt_str, "false", 5) == 0)
       23: 1511-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1512:				disk_usage = 0;
       23: 1512-block  0
unconditional  0 taken 23
        -: 1513:		}
        -: 1514:
     1120: 1515:		else if (*line == 'D' && strncmp(line, "DividingLineChar=", 17) == 0) {
     1096: 1515-block  0
branch  0 taken 25 (fallthrough)
branch  1 taken 1071
       25: 1515-block  1
branch  2 taken 24 (fallthrough)
branch  3 taken 1
       24: 1515-block  2
unconditional  4 taken 24
       24: 1516:			char *opt = strchr(line, '=');
       24: 1517:			if (!opt || !*opt || !*(++opt)) {
       24: 1517-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 1517-block  1
branch  2 taken 24 (fallthrough)
branch  3 taken 0
       24: 1517-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 24
    #####: 1518:				div_line_char[0] = DEF_DIV_LINE_CHAR;
    #####: 1519:				div_line_char[1] = '\0';
    %%%%%: 1519-block  0
unconditional  0 never executed
        -: 1520:			} else {
       24: 1521:				char *tmp = remove_quotes(opt);
       24: 1521-block  0
call    0 returned 24
      24*: 1522:				xstrsncpy(div_line_char, tmp ? tmp : opt, NAME_MAX);
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 1522-block  0
unconditional  2 taken 24
    %%%%%: 1522-block  1
unconditional  3 never executed
       24: 1522-block  2
call    4 returned 24
unconditional  5 taken 24
        -: 1523:			}
        -: 1524:		}
        -: 1525:
     1072: 1526:		else if (xargs.expand_bookmarks == UNSET && *line == 'E'
     1072: 1526-block  0
branch  0 taken 1072 (fallthrough)
branch  1 taken 0
     1072: 1526-block  1
branch  2 taken 47 (fallthrough)
branch  3 taken 1025
       70: 1527:		&& strncmp(line, "ExpandBookmarks=", 16) == 0) {
       47: 1527-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 24
       23: 1527-block  1
unconditional  2 taken 23
       23: 1528:			char opt_str[MAX_BOOL] = "";
       23: 1529:			ret = sscanf(line, "ExpandBookmarks=%5s\n",
        -: 1530:			    opt_str);
      23*: 1531:			if (ret == -1)
       23: 1531-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1532:				continue;
    %%%%%: 1532-block  0
unconditional  0 never executed
       23: 1533:			if (strncmp(opt_str, "true", 4) == 0)
       23: 1533-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1534:				expand_bookmarks = 1;
    %%%%%: 1534-block  0
unconditional  0 never executed
       23: 1535:			else if (strncmp(opt_str, "false", 5) == 0)
       23: 1535-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1536:				expand_bookmarks = 0;
       23: 1536-block  0
unconditional  0 taken 23
        -: 1537:		}
        -: 1538:
     1049: 1539:		else if (xargs.ext == UNSET && *line == 'E'
     1049: 1539-block  0
branch  0 taken 1049 (fallthrough)
branch  1 taken 0
     1049: 1539-block  1
branch  2 taken 24 (fallthrough)
branch  3 taken 1025
       48: 1540:		&& strncmp(line, "ExternalCommands=", 17) == 0) {
       24: 1540-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 1540-block  1
unconditional  2 taken 24
       24: 1541:			char opt_str[MAX_BOOL] = "";
       24: 1542:			ret = sscanf(line, "ExternalCommands=%5s\n",
        -: 1543:			    opt_str);
      24*: 1544:			if (ret == -1)
       24: 1544-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1545:				continue;
    %%%%%: 1545-block  0
unconditional  0 never executed
       24: 1546:			if (strncmp(opt_str, "true", 4) == 0)
       24: 1546-block  0
branch  0 taken 22 (fallthrough)
branch  1 taken 2
       22: 1547:				ext_cmd_ok = 1;
       22: 1547-block  0
unconditional  0 taken 22
        2: 1548:			else if (strncmp(opt_str, "false", 5) == 0)
        2: 1548-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1549:				ext_cmd_ok = 0;
        2: 1549-block  0
unconditional  0 taken 2
        -: 1550:		}
        -: 1551:
     1025: 1552:		else if (xargs.files_counter == UNSET && *line == 'F'
     1025: 1552-block  0
branch  0 taken 1025 (fallthrough)
branch  1 taken 0
     1025: 1552-block  1
branch  2 taken 46 (fallthrough)
branch  3 taken 979
       69: 1553:		&& strncmp(line, "FilesCounter=", 13) == 0) {
       46: 1553-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 23
       23: 1553-block  1
unconditional  2 taken 23
       23: 1554:			char opt_str[MAX_BOOL] = "";
       23: 1555:			ret = sscanf(line, "FilesCounter=%5s\n", opt_str);
      23*: 1556:			if (ret == -1)
       23: 1556-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1557:				continue;
    %%%%%: 1557-block  0
unconditional  0 never executed
       23: 1558:			if (strncmp(opt_str, "true", 4) == 0)
       23: 1558-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1559:				files_counter = 1;
       23: 1559-block  0
unconditional  0 taken 23
    #####: 1560:			else if (strncmp(opt_str, "false", 5) == 0)
    %%%%%: 1560-block  0
branch  0 never executed
branch  1 never executed
    #####: 1561:				files_counter = 0;
    %%%%%: 1561-block  0
unconditional  0 never executed
        -: 1562:		}
        -: 1563:
    1002*: 1564:		else if (!filter && *line == 'F' && strncmp(line, "Filter=", 7) == 0) {
     1002: 1564-block  0
branch  0 taken 1002 (fallthrough)
branch  1 taken 0
     1002: 1564-block  1
branch  2 taken 23 (fallthrough)
branch  3 taken 979
       23: 1564-block  2
branch  4 taken 23 (fallthrough)
branch  5 taken 0
       23: 1565:			char *opt_str = strchr(line, '=');
      23*: 1566:			if (!opt_str)
       23: 1566-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1567:				continue;
    %%%%%: 1567-block  0
unconditional  0 never executed
       23: 1568:			size_t len = strlen(opt_str);
       23: 1569:			if (opt_str[len - 1] == '\n')
       23: 1569-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1570:				opt_str[len - 1] = '\0';
       23: 1570-block  0
unconditional  0 taken 23
        -: 1571:
       23: 1572:			if (!*(++opt_str))
       23: 1572-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1573:				continue;
       23: 1573-block  0
unconditional  0 taken 23
        -: 1574:
    #####: 1575:			if (*opt_str == '!') {
    %%%%%: 1575-block  0
branch  0 never executed
branch  1 never executed
    #####: 1576:				filter_rev = 1;
    #####: 1577:				opt_str++;
    #####: 1578:				len--;
    %%%%%: 1578-block  0
unconditional  0 never executed
        -: 1579:			} else {
    #####: 1580:				filter_rev = 0;
    %%%%%: 1580-block  0
unconditional  0 never executed
        -: 1581:			}
        -: 1582:
    #####: 1583:			filter = savestring(opt_str, len);
    %%%%%: 1583-block  0
call    0 never executed
unconditional  1 never executed
        -: 1584:		}
        -: 1585:
        -: 1586:#ifndef _NO_HIGHLIGHT
      979: 1587:		else if (xargs.highlight == UNSET && *line == 'S'
      979: 1587-block  0
branch  0 taken 979 (fallthrough)
branch  1 taken 0
      979: 1587-block  1
branch  2 taken 254 (fallthrough)
branch  3 taken 725
      271: 1588:		&& strncmp(line, "SyntaxHighlighting=", 19) == 0) {
      254: 1588-block  0
branch  0 taken 17 (fallthrough)
branch  1 taken 237
       17: 1588-block  1
unconditional  2 taken 17
       17: 1589:			char opt_str[MAX_BOOL] = "";
       17: 1590:			ret = sscanf(line, "SyntaxHighlighting=%5s\n", opt_str);
      17*: 1591:			if (ret == -1)
       17: 1591-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 17
    #####: 1592:				continue;
    %%%%%: 1592-block  0
unconditional  0 never executed
       17: 1593:			if (strncmp(opt_str, "true", 4) == 0)
       17: 1593-block  0
branch  0 taken 17 (fallthrough)
branch  1 taken 0
       17: 1594:				highlight = 1;
       17: 1594-block  0
unconditional  0 taken 17
    #####: 1595:			else if (strncmp(opt_str, "false", 5) == 0)
    %%%%%: 1595-block  0
branch  0 never executed
branch  1 never executed
    #####: 1596:				highlight = 0;
    %%%%%: 1596-block  0
unconditional  0 never executed
        -: 1597:		}
        -: 1598:#endif
        -: 1599:
      962: 1600:		else if (xargs.light == UNSET && *line == 'L'
      962: 1600-block  0
branch  0 taken 962 (fallthrough)
branch  1 taken 0
      962: 1600-block  1
branch  2 taken 95 (fallthrough)
branch  3 taken 867
      118: 1601:		&& strncmp(line, "LightMode=", 10) == 0) {
       95: 1601-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 72
       23: 1601-block  1
unconditional  2 taken 23
       23: 1602:			char opt_str[MAX_BOOL] = "";
       23: 1603:			ret = sscanf(line, "LightMode=%5s\n", opt_str);
      23*: 1604:			if (ret == -1)
       23: 1604-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1605:				continue;
    %%%%%: 1605-block  0
unconditional  0 never executed
       23: 1606:			if (strncmp(opt_str, "true", 4) == 0)
       23: 1606-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1607:				light_mode = 1;
    %%%%%: 1607-block  0
unconditional  0 never executed
       23: 1608:			else if (strncmp(opt_str, "false", 5) == 0)
       23: 1608-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1609:				light_mode = 0;
       23: 1609-block  0
unconditional  0 taken 23
        -: 1610:		}
        -: 1611:
      939: 1612:		else if (xargs.ffirst == UNSET && *line == 'L'
      939: 1612-block  0
branch  0 taken 939 (fallthrough)
branch  1 taken 0
      939: 1612-block  1
branch  2 taken 72 (fallthrough)
branch  3 taken 867
       96: 1613:		&& strncmp(line, "ListFoldersFirst=", 17) == 0) {
       72: 1613-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 48
       24: 1613-block  1
unconditional  2 taken 24
       24: 1614:			char opt_str[MAX_BOOL] = "";
       24: 1615:			ret = sscanf(line, "ListFoldersFirst=%5s\n",
        -: 1616:			    opt_str);
      24*: 1617:			if (ret == -1)
       24: 1617-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1618:				continue;
    %%%%%: 1618-block  0
unconditional  0 never executed
       24: 1619:			if (strncmp(opt_str, "true", 4) == 0)
       24: 1619-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 1620:				list_folders_first = 1;
       24: 1620-block  0
unconditional  0 taken 24
    #####: 1621:			else if (strncmp(opt_str, "false", 5) == 0)
    %%%%%: 1621-block  0
branch  0 never executed
branch  1 never executed
    #####: 1622:				list_folders_first = 0;
    %%%%%: 1622-block  0
unconditional  0 never executed
        -: 1623:		}
        -: 1624:
      915: 1625:		else if (xargs.longview == UNSET && *line == 'L'
      915: 1625-block  0
branch  0 taken 915 (fallthrough)
branch  1 taken 0
      915: 1625-block  1
branch  2 taken 48 (fallthrough)
branch  3 taken 867
       72: 1626:		&& strncmp(line, "LongViewMode=", 13) == 0) {
       48: 1626-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 24
       24: 1626-block  1
unconditional  2 taken 24
       24: 1627:			char opt_str[MAX_BOOL] = "";
       24: 1628:			ret = sscanf(line, "LongViewMode=%5s\n",
        -: 1629:			    opt_str);
      24*: 1630:			if (ret == -1)
       24: 1630-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1631:				continue;
    %%%%%: 1631-block  0
unconditional  0 never executed
       24: 1632:			if (strncmp(opt_str, "true", 4) == 0)
       24: 1632-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1633:				long_view = 1;
    %%%%%: 1633-block  0
unconditional  0 never executed
       24: 1634:			else if (strncmp(opt_str, "false", 5) == 0)
       24: 1634-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 1635:				long_view = 0;
       24: 1635-block  0
unconditional  0 taken 24
        -: 1636:		}
        -: 1637:
      891: 1638:		else if (xargs.logs == UNSET && *line == 'L'
      891: 1638-block  0
branch  0 taken 891 (fallthrough)
branch  1 taken 0
      891: 1638-block  1
branch  2 taken 24 (fallthrough)
branch  3 taken 867
       48: 1639:		&& strncmp(line, "LogCmds=", 8) == 0) {
       24: 1639-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 1639-block  1
unconditional  2 taken 24
       24: 1640:			char opt_str[MAX_BOOL] = "";
       24: 1641:			ret = sscanf(line, "LogCmds=%5s\n", opt_str);
      24*: 1642:			if (ret == -1)
       24: 1642-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1643:				continue;
    %%%%%: 1643-block  0
unconditional  0 never executed
       24: 1644:			if (strncmp(opt_str, "true", 4) == 0)
       24: 1644-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1645:				logs_enabled = 1;
    %%%%%: 1645-block  0
unconditional  0 never executed
       24: 1646:			else if (strncmp(opt_str, "false", 5) == 0)
       24: 1646-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 1647:				logs_enabled = 0;
       24: 1647-block  0
unconditional  0 taken 24
        -: 1648:		}
        -: 1649:
      867: 1650:		else if (xargs.max_dirhist == UNSET && *line == 'M'
      867: 1650-block  0
branch  0 taken 867 (fallthrough)
branch  1 taken 0
      867: 1650-block  1
branch  2 taken 182 (fallthrough)
branch  3 taken 685
      206: 1651:		&& strncmp(line, "MaxDirhist=", 11) == 0) {
      182: 1651-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 158
       24: 1651-block  1
unconditional  2 taken 24
       24: 1652:			int opt_num = 0;
       24: 1653:			ret = sscanf(line, "MaxDirhist=%d\n", &opt_num);
      24*: 1654:			if (ret == -1)
       24: 1654-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1655:				continue;
    %%%%%: 1655-block  0
unconditional  0 never executed
       24: 1656:			if (opt_num >= 0)
       24: 1656-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 1657:				max_dirhist = opt_num;
       24: 1657-block  0
unconditional  0 taken 24
        -: 1658:			else /* default */
    #####: 1659:				max_dirhist = DEF_MAX_DIRHIST;
    %%%%%: 1659-block  0
unconditional  0 never executed
        -: 1660:		}
        -: 1661:
      843: 1662:		else if (*line == 'M' && strncmp(line, "MaxHistory=", 11) == 0) {
      843: 1662-block  0
branch  0 taken 158 (fallthrough)
branch  1 taken 685
      158: 1662-block  1
branch  2 taken 24 (fallthrough)
branch  3 taken 134
       24: 1663:			int opt_num = 0;
       24: 1664:			sscanf(line, "MaxHistory=%d\n", &opt_num);
      24*: 1665:			if (opt_num <= 0)
       24: 1665-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1666:				continue;
    %%%%%: 1666-block  0
unconditional  0 never executed
       24: 1667:			max_hist = opt_num;
       24: 1667-block  0
unconditional  0 taken 24
        -: 1668:		}
        -: 1669:
      819: 1670:		else if (*line == 'M' && strncmp(line, "MaxJumpTotalRank=", 17) == 0) {
      819: 1670-block  0
branch  0 taken 134 (fallthrough)
branch  1 taken 685
      134: 1670-block  1
branch  2 taken 22 (fallthrough)
branch  3 taken 112
       22: 1671:			int opt_num = 0;
       22: 1672:			ret = sscanf(line, "MaxJumpTotalRank=%d\n", &opt_num);
      22*: 1673:			if (ret == -1 || opt_num < INT_MIN || opt_num > INT_MAX)
       22: 1673-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 22
    #####: 1674:				continue;
    %%%%%: 1674-block  0
unconditional  0 never executed
       22: 1675:			max_jump_total_rank = opt_num;
       22: 1675-block  0
unconditional  0 taken 22
        -: 1676:		}
        -: 1677:
      797: 1678:		else if (*line == 'M' && strncmp(line, "MaxLog=", 7) == 0) {
      797: 1678-block  0
branch  0 taken 112 (fallthrough)
branch  1 taken 685
      112: 1678-block  1
branch  2 taken 24 (fallthrough)
branch  3 taken 88
       24: 1679:			int opt_num = 0;
       24: 1680:			sscanf(line, "MaxLog=%d\n", &opt_num);
      24*: 1681:			if (opt_num <= 0)
       24: 1681-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1682:				continue;
    %%%%%: 1682-block  0
unconditional  0 never executed
       24: 1683:			max_log = opt_num;
       24: 1683-block  0
unconditional  0 taken 24
        -: 1684:		}
        -: 1685:
      773: 1686:		else if (xargs.max_path == UNSET && *line == 'M'
      773: 1686-block  0
branch  0 taken 773 (fallthrough)
branch  1 taken 0
      773: 1686-block  1
branch  2 taken 88 (fallthrough)
branch  3 taken 685
       88: 1687:		&& strncmp(line, "MaxPath=", 8) == 0) {
       88: 1687-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 64
       24: 1688:			int opt_num = 0;
       24: 1689:			sscanf(line, "MaxPath=%d\n", &opt_num);
      24*: 1690:			if (opt_num <= 0)
       24: 1690-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1691:				continue;
    %%%%%: 1691-block  0
unconditional  0 never executed
       24: 1692:			max_path = opt_num;
       24: 1692-block  0
unconditional  0 taken 24
        -: 1693:		}
        -: 1694:
      749: 1695:		else if (*line == 'M' && strncmp(line, "MaxPrintSelfiles=", 17) == 0) {
      749: 1695-block  0
branch  0 taken 64 (fallthrough)
branch  1 taken 685
       64: 1695-block  1
branch  2 taken 19 (fallthrough)
branch  3 taken 45
       19: 1696:			int opt_num = 0;
       19: 1697:			ret = sscanf(line, "MaxPrintSelfiles=%d\n", &opt_num);
      19*: 1698:			if (ret == -1)
       19: 1698-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 19
    #####: 1699:				continue;
    %%%%%: 1699-block  0
unconditional  0 never executed
       19: 1700:			max_printselfiles = opt_num;
       19: 1700-block  0
unconditional  0 taken 19
        -: 1701:		}
        -: 1702:
      753: 1703:		else if (*line == 'M' && strncmp(line, "MinFilenameTrim=", 16) == 0) {
      730: 1703-block  0
branch  0 taken 45 (fallthrough)
branch  1 taken 685
       45: 1703-block  1
branch  2 taken 23 (fallthrough)
branch  3 taken 22
       23: 1703-block  2
unconditional  4 taken 23
       23: 1704:			int opt_num = 0;
       23: 1705:			ret = sscanf(line, "MinFilenameTrim=%d\n", &opt_num);
      23*: 1706:			if (ret == -1)
       23: 1706-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1707:				continue;
    %%%%%: 1707-block  0
unconditional  0 never executed
       23: 1708:			if (opt_num > 0)
       23: 1708-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1709:				min_name_trim = opt_num;
       23: 1709-block  0
unconditional  0 taken 23
        -: 1710:			else /* default */
    #####: 1711:				min_name_trim = DEF_MIN_NAME_TRIM;
    %%%%%: 1711-block  0
unconditional  0 never executed
        -: 1712:		}
        -: 1713:
      707: 1714:		else if (*line == 'M' && strncmp(line, "MinJumpRank=", 12) == 0) {
      707: 1714-block  0
branch  0 taken 22 (fallthrough)
branch  1 taken 685
       22: 1714-block  1
branch  2 taken 22 (fallthrough)
branch  3 taken 0
       22: 1715:			int opt_num = 0;
       22: 1716:			ret = sscanf(line, "MinJumpRank=%d\n", &opt_num);
      22*: 1717:			if (ret == -1 || opt_num < INT_MIN || opt_num > INT_MAX)
       22: 1717-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 22
    #####: 1718:				continue;
    %%%%%: 1718-block  0
unconditional  0 never executed
       22: 1719:			min_jump_rank = opt_num;
       22: 1719-block  0
unconditional  0 taken 22
        -: 1720:		}
        -: 1721:
      708: 1722:		else if (*line == 'm' && strncmp(line, "mvCmd=", 6) == 0) {
      685: 1722-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 662
       23: 1722-block  1
branch  2 taken 23 (fallthrough)
branch  3 taken 0
       23: 1722-block  2
unconditional  4 taken 23
       23: 1723:			int opt_num = 0;
       23: 1724:			ret = sscanf(line, "mvCmd=%d\n", &opt_num);
      23*: 1725:			if (ret == -1)
       23: 1725-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1726:				continue;
    %%%%%: 1726-block  0
unconditional  0 never executed
      23*: 1727:			if (opt_num == 0 || opt_num == 1)
       23: 1727-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    %%%%%: 1727-block  1
branch  2 never executed
branch  3 never executed
       23: 1728:				mv_cmd = opt_num;
       23: 1728-block  0
unconditional  0 taken 23
        -: 1729:			else /* default (sort by name) */
    #####: 1730:				mv_cmd = DEF_MV_CMD;
    %%%%%: 1730-block  0
unconditional  0 never executed
        -: 1731:		}
        -: 1732:
     662*: 1733:		else if (!opener && *line == 'O' && strncmp(line, "Opener=", 7) == 0) {
      662: 1733-block  0
branch  0 taken 662 (fallthrough)
branch  1 taken 0
      662: 1733-block  1
branch  2 taken 23 (fallthrough)
branch  3 taken 639
       23: 1733-block  2
branch  4 taken 23 (fallthrough)
branch  5 taken 0
       23: 1734:			char *opt = strchr(line, '=');
      23*: 1735:			if (!opt || !*opt || !*(++opt))
       23: 1735-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1735-block  1
branch  2 taken 23 (fallthrough)
branch  3 taken 0
       23: 1735-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 23
    #####: 1736:				continue;
    %%%%%: 1736-block  0
unconditional  0 never executed
       23: 1737:			char *tmp = remove_quotes(opt);
       23: 1737-block  0
call    0 returned 23
       23: 1738:			if (!tmp)
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1739:				continue;
       23: 1739-block  0
unconditional  0 taken 23
    #####: 1740:			opener = savestring(tmp, strlen(tmp));
    %%%%%: 1740-block  0
call    0 never executed
unconditional  1 never executed
        -: 1741:		}
        -: 1742:
      639: 1743:		else if (xargs.pager == UNSET && *line == 'P'
      639: 1743-block  0
branch  0 taken 639 (fallthrough)
branch  1 taken 0
      639: 1743-block  1
branch  2 taken 85 (fallthrough)
branch  3 taken 554
      109: 1744:		&& strncmp(line, "Pager=", 6) == 0) {
       85: 1744-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 61
       24: 1744-block  1
unconditional  2 taken 24
       24: 1745:			char opt_str[MAX_BOOL] = "";
       24: 1746:			ret = sscanf(line, "Pager=%5s\n", opt_str);
      24*: 1747:			if (ret == -1)
       24: 1747-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1748:				continue;
    %%%%%: 1748-block  0
unconditional  0 never executed
       24: 1749:			if (strncmp(opt_str, "true", 4) == 0)
       24: 1749-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1750:				pager = 1;
    %%%%%: 1750-block  0
unconditional  0 never executed
       24: 1751:			else if (strncmp(opt_str, "false", 5) == 0)
       24: 1751-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 1752:				pager = 0;
       24: 1752-block  0
unconditional  0 taken 24
        -: 1753:		}
        -: 1754:
      615: 1755:		else if (xargs.printsel == UNSET && *line == 'P'
      615: 1755-block  0
branch  0 taken 615 (fallthrough)
branch  1 taken 0
      615: 1755-block  1
branch  2 taken 61 (fallthrough)
branch  3 taken 554
       80: 1756:		&& strncmp(line, "PrintSelfiles=", 14) == 0) {
       61: 1756-block  0
branch  0 taken 19 (fallthrough)
branch  1 taken 42
       19: 1756-block  1
unconditional  2 taken 19
       19: 1757:			char opt_str[MAX_BOOL] = "";
       19: 1758:			ret = sscanf(line, "PrintSelfiles=%5s\n", opt_str);
      19*: 1759:			if (ret == -1)
       19: 1759-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 19
    #####: 1760:				continue;
    %%%%%: 1760-block  0
unconditional  0 never executed
       19: 1761:			if (strncmp(opt_str, "true", 4) == 0)
       19: 1761-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 19
    #####: 1762:				print_selfiles = 1;
    %%%%%: 1762-block  0
unconditional  0 never executed
       19: 1763:			else if (strncmp(opt_str, "false", 5) == 0)
       19: 1763-block  0
branch  0 taken 19 (fallthrough)
branch  1 taken 0
       19: 1764:				print_selfiles = 0;
       19: 1764-block  0
unconditional  0 taken 19
        -: 1765:		}
        -: 1766:
      596: 1767:		else if (*line == 'P' && strncmp(line, "Prompt=", 7) == 0) {
      596: 1767-block  0
branch  0 taken 42 (fallthrough)
branch  1 taken 554
       42: 1767-block  1
branch  2 taken 24 (fallthrough)
branch  3 taken 18
       24: 1768:			if (encoded_prompt)
       24: 1768-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1769:				free(encoded_prompt);
    %%%%%: 1769-block  0
unconditional  0 never executed
       24: 1770:			encoded_prompt = straft(line, '=');
       24: 1770-block  0
call    0 returned 24
unconditional  1 taken 24
        -: 1771:		}
        -: 1772:
      590: 1773:		else if (*line == 'P' && strncmp(line, "PromptStyle=", 12) == 0) {
      572: 1773-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 554
       18: 1773-block  1
branch  2 taken 18 (fallthrough)
branch  3 taken 0
       18: 1773-block  2
unconditional  4 taken 18
       18: 1774:			char opt_str[8] = "";
       18: 1775:			ret = sscanf(line, "PromptStyle=%7s\n", opt_str);
      18*: 1776:			if (ret == -1)
       18: 1776-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 18
    #####: 1777:				continue;
    %%%%%: 1777-block  0
unconditional  0 never executed
       18: 1778:			if (strncmp(opt_str, "default", 7) == 0)
       18: 1778-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18: 1779:				prompt_style = DEF_PROMPT_STYLE;
       18: 1779-block  0
unconditional  0 taken 18
    #####: 1780:			else if (strncmp(opt_str, "custom", 6) == 0)
    %%%%%: 1780-block  0
branch  0 never executed
branch  1 never executed
    #####: 1781:				prompt_style = CUSTOM_PROMPT_STYLE;
    %%%%%: 1781-block  0
unconditional  0 never executed
        -: 1782:			else
    #####: 1783:				prompt_style = DEF_PROMPT_STYLE;
    %%%%%: 1783-block  0
unconditional  0 never executed
        -: 1784:		}
        -: 1785:
      554: 1786:		else if (xargs.restore_last_path == UNSET && *line == 'R'
      554: 1786-block  0
branch  0 taken 554 (fallthrough)
branch  1 taken 0
      554: 1786-block  1
branch  2 taken 47 (fallthrough)
branch  3 taken 507
       71: 1787:		&& strncmp(line, "RestoreLastPath=", 16) == 0) {
       47: 1787-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 23
       24: 1787-block  1
unconditional  2 taken 24
       24: 1788:			char opt_str[MAX_BOOL] = "";
       24: 1789:			ret = sscanf(line, "RestoreLastPath=%5s\n", opt_str);
      24*: 1790:			if (ret == -1)
       24: 1790-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1791:				continue;
    %%%%%: 1791-block  0
unconditional  0 never executed
       24: 1792:			if (strncmp(opt_str, "true", 4) == 0)
       24: 1792-block  0
branch  0 taken 19 (fallthrough)
branch  1 taken 5
       19: 1793:				restore_last_path = 1;
       19: 1793-block  0
unconditional  0 taken 19
        5: 1794:			else if (strncmp(opt_str, "false", 5) == 0)
        5: 1794-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5: 1795:				restore_last_path = 0;
        5: 1795-block  0
unconditional  0 taken 5
        -: 1796:		}
        -: 1797:
      530: 1798:		else if (*line == 'R' && strncmp(line, "RlEditMode=0", 12) == 0) {
      530: 1798-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 507
       23: 1798-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 23
    #####: 1799:			rl_vi_editing_mode(1, 0);
    %%%%%: 1799-block  0
call    0 never executed
unconditional  1 never executed
        -: 1800:			/* By default, readline uses emacs editing
        -: 1801:			 * mode */
        -: 1802:		}
        -: 1803:
      530: 1804:		else if (xargs.share_selbox == UNSET && *line == 'S'
      530: 1804-block  0
branch  0 taken 530 (fallthrough)
branch  1 taken 0
      530: 1804-block  1
branch  2 taken 237 (fallthrough)
branch  3 taken 293
      261: 1805:		&& strncmp(line, "ShareSelbox=", 12) == 0) {
      237: 1805-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 213
       24: 1805-block  1
unconditional  2 taken 24
       24: 1806:			char opt_str[MAX_BOOL] = "";
       24: 1807:			ret = sscanf(line, "ShareSelbox=%5s\n", opt_str);
      24*: 1808:			if (ret == -1)
       24: 1808-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1809:				continue;
    %%%%%: 1809-block  0
unconditional  0 never executed
       24: 1810:			if (strncmp(opt_str, "true", 4) == 0)
       24: 1810-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1811:				share_selbox = 1;
    %%%%%: 1811-block  0
unconditional  0 never executed
       24: 1812:			else if (strncmp(opt_str, "false", 5) == 0)
       24: 1812-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 1813:				share_selbox = 0;
       24: 1813-block  0
unconditional  0 taken 24
        -: 1814:		}
        -: 1815:
      506: 1816:		else if (xargs.hidden == UNSET && *line == 'S'
      506: 1816-block  0
branch  0 taken 506 (fallthrough)
branch  1 taken 0
      506: 1816-block  1
branch  2 taken 213 (fallthrough)
branch  3 taken 293
      237: 1817:		&& strncmp(line, "ShowHiddenFiles=", 16) == 0) {
      213: 1817-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 189
       24: 1817-block  1
unconditional  2 taken 24
       24: 1818:			char opt_str[MAX_BOOL] = "";
       24: 1819:			ret = sscanf(line, "ShowHiddenFiles=%5s\n",
        -: 1820:			    opt_str);
      24*: 1821:			if (ret == -1)
       24: 1821-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1822:				continue;
    %%%%%: 1822-block  0
unconditional  0 never executed
       24: 1823:			if (strncmp(opt_str, "true", 4) == 0)
       24: 1823-block  0
branch  0 taken 19 (fallthrough)
branch  1 taken 5
       19: 1824:				show_hidden = 1;
       19: 1824-block  0
unconditional  0 taken 19
        5: 1825:			else if (strncmp(opt_str, "false", 5) == 0)
        5: 1825-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5: 1826:				show_hidden = 0;
        5: 1826-block  0
unconditional  0 taken 5
        -: 1827:		}
        -: 1828:
      505: 1829:		else if (xargs.sort == UNSET && *line == 'S' && strncmp(line, "Sort=", 5) == 0) {
      482: 1829-block  0
branch  0 taken 482 (fallthrough)
branch  1 taken 0
      482: 1829-block  1
branch  2 taken 189 (fallthrough)
branch  3 taken 293
      189: 1829-block  2
branch  4 taken 23 (fallthrough)
branch  5 taken 166
       23: 1829-block  3
unconditional  6 taken 23
       23: 1830:			int opt_num = 0;
       23: 1831:			ret = sscanf(line, "Sort=%d\n", &opt_num);
      23*: 1832:			if (ret == -1)
       23: 1832-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1833:				continue;
    %%%%%: 1833-block  0
unconditional  0 never executed
       23: 1834:			if (opt_num >= 0 && opt_num <= SORT_TYPES)
       23: 1834-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1834-block  1
branch  2 taken 23 (fallthrough)
branch  3 taken 0
       23: 1835:				sort = opt_num;
       23: 1835-block  0
unconditional  0 taken 23
        -: 1836:			else /* default (sort by name) */
    #####: 1837:				sort = DEF_SORT;
    %%%%%: 1837-block  0
unconditional  0 never executed
        -: 1838:		}
        -: 1839:
      459: 1840:		else if (xargs.sort_reverse == UNSET && *line == 'S'
      459: 1840-block  0
branch  0 taken 459 (fallthrough)
branch  1 taken 0
      459: 1840-block  1
branch  2 taken 166 (fallthrough)
branch  3 taken 293
      189: 1841:		&& strncmp(line, "SortReverse=", 12) == 0) {
      166: 1841-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 143
       23: 1841-block  1
unconditional  2 taken 23
       23: 1842:			char opt_str[MAX_BOOL] = "";
       23: 1843:			ret = sscanf(line, "SortReverse=%5s\n", opt_str);
      23*: 1844:			if (ret == -1)
       23: 1844-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1845:				continue;
    %%%%%: 1845-block  0
unconditional  0 never executed
       23: 1846:			if (strncmp(opt_str, "true", 4) == 0)
       23: 1846-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1847:				sort_reverse = 1;
    %%%%%: 1847-block  0
unconditional  0 never executed
       23: 1848:			else if (strncmp(opt_str, "false", 5) == 0)
       23: 1848-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1849:				sort_reverse = 0;
       23: 1849-block  0
unconditional  0 taken 23
        -: 1850:		}
        -: 1851:
        -: 1852:		/* Check for the xargs.splash flag. If -1, it was
        -: 1853:		 * not set via command line, so that it must be
        -: 1854:		 * set here */
      436: 1855:		else if (xargs.splash == UNSET && *line == 'S'
      436: 1855-block  0
branch  0 taken 436 (fallthrough)
branch  1 taken 0
      436: 1855-block  1
branch  2 taken 143 (fallthrough)
branch  3 taken 293
      167: 1856:		&& strncmp(line, "SplashScreen=", 13) == 0) {
      143: 1856-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 119
       24: 1856-block  1
unconditional  2 taken 24
       24: 1857:			char opt_str[MAX_BOOL] = "";
       24: 1858:			ret = sscanf(line, "SplashScreen=%5s\n", opt_str);
        -: 1859:			/* According to cppcheck: "sscanf() without field
        -: 1860:			 * width limits can crash with huge input data".
        -: 1861:			 * Field width limits = %5s */
      24*: 1862:			if (ret == -1)
       24: 1862-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1863:				continue;
    %%%%%: 1863-block  0
unconditional  0 never executed
        -: 1864:
       24: 1865:			if (strncmp(opt_str, "true", 4) == 0)
       24: 1865-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1866:				splash_screen = 1;
    %%%%%: 1866-block  0
unconditional  0 never executed
       24: 1867:			else if (strncmp(opt_str, "false", 5) == 0)
       24: 1867-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 1868:				splash_screen = 0;
       24: 1868-block  0
unconditional  0 taken 24
        -: 1869:		}
        -: 1870:
      412: 1871:		else if (xargs.path == UNSET && cur_ws == UNSET && *line == 'S'
      412: 1871-block  0
branch  0 taken 380 (fallthrough)
branch  1 taken 32
      380: 1871-block  1
branch  2 taken 38 (fallthrough)
branch  3 taken 342
       38: 1871-block  2
branch  4 taken 12 (fallthrough)
branch  5 taken 26
      12*: 1872:		&& strncmp(line, "StartingPath=", 13) == 0) {
       12: 1872-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 10
    %%%%%: 1872-block  1
unconditional  2 never executed
        2: 1873:			char *opt = strchr(line, '=');
       2*: 1874:			if (!opt || !*opt || !*(++opt) )
        2: 1874-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1874-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 1874-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
    #####: 1875:				continue;
    %%%%%: 1875-block  0
unconditional  0 never executed
        -: 1876:
        2: 1877:			char *tmp = remove_quotes(opt);
        2: 1877-block  0
call    0 returned 2
        2: 1878:			if (!tmp)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1879:				continue;
        2: 1879-block  0
unconditional  0 taken 2
        -: 1880:
        -: 1881:			/* If starting path is not NULL, and exists, and is a
        -: 1882:			 * directory, and the user has appropriate permissions,
        -: 1883:			 * set path to starting path. If any of these conditions
        -: 1884:			 * is false, path will be set to default, that is, CWD */
    #####: 1885:			if (xchdir(tmp, SET_TITLE) == 0) {
    %%%%%: 1885-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1886:				free(ws[cur_ws].path);
    #####: 1887:				ws[cur_ws].path = savestring(tmp, strlen(tmp));
    %%%%%: 1887-block  0
call    0 never executed
unconditional  1 never executed
        -: 1888:			} else {
    #####: 1889:				_err('w', PRINT_PROMPT, _("%s: '%s': %s. Using the "
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1890:					"current working directory as starting path\n"),
    #####: 1891:					PROGRAM_NAME, tmp, strerror(errno));
    %%%%%: 1891-block  0
call    0 never executed
        -: 1892:			}
        -: 1893:		}
        -: 1894:
        -: 1895:#ifndef _NO_SUGGESTIONS
      428: 1896:		else if (*line == 'S' && strncmp(line, "SuggestFiletypeColor=", 21) == 0) {
      410: 1896-block  0
branch  0 taken 117 (fallthrough)
branch  1 taken 293
      117: 1896-block  1
branch  2 taken 18 (fallthrough)
branch  3 taken 99
       18: 1896-block  2
unconditional  4 taken 18
       18: 1897:			char opt_str[MAX_BOOL] = "";
       18: 1898:			ret = sscanf(line, "SuggestFiletypeColor=%5s\n", opt_str);
      18*: 1899:			if (ret == -1)
       18: 1899-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 18
    #####: 1900:				continue;
    %%%%%: 1900-block  0
unconditional  0 never executed
       18: 1901:			if (strncmp(opt_str, "true", 4) == 0)
       18: 1901-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 18
    #####: 1902:				suggest_filetype_color = 1;
    %%%%%: 1902-block  0
unconditional  0 never executed
       18: 1903:			else if (strncmp(opt_str, "false", 5) == 0)
       18: 1903-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18: 1904:				suggest_filetype_color = 0;
       18: 1904-block  0
unconditional  0 taken 18
        -: 1905:		}
        -: 1906:
      392: 1907:		else if (*line == 'S'
      392: 1907-block  0
branch  0 taken 99 (fallthrough)
branch  1 taken 293
       99: 1908:		&& strncmp(line, "SuggestionStrategy=", 19) == 0) {
       99: 1908-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 81
       18: 1909:			char opt_str[SUG_STRATS + 1] = "";
       18: 1910:			ret = sscanf(line, "SuggestionStrategy=%7s\n", opt_str);
      18*: 1911:			if (ret == -1)
       18: 1911-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 18
    #####: 1912:				continue;
    %%%%%: 1912-block  0
unconditional  0 never executed
    %%%%%: 1912-block  1
unconditional  1 never executed
       18: 1913:			int fail = 0;
       18: 1914:			size_t s = 0;
      144: 1915:			for (; opt_str[s]; s++) {
       18: 1915-block  0
unconditional  0 taken 18
      126: 1915-block  1
unconditional  1 taken 126
      144: 1915-block  2
branch  2 taken 126
branch  3 taken 18 (fallthrough)
      126: 1916:				if (opt_str[s] != 'a' && opt_str[s] != 'b'
      126: 1916-block  0
branch  0 taken 108 (fallthrough)
branch  1 taken 18
      108: 1916-block  1
branch  2 taken 90 (fallthrough)
branch  3 taken 18
       90: 1917:				&& opt_str[s] != 'c' && opt_str[s] != 'e'
       90: 1917-block  0
branch  0 taken 72 (fallthrough)
branch  1 taken 18
       72: 1917-block  1
branch  2 taken 54 (fallthrough)
branch  3 taken 18
       54: 1918:				&& opt_str[s] != 'f' && opt_str[s] != 'h'
       54: 1918-block  0
branch  0 taken 36 (fallthrough)
branch  1 taken 18
       36: 1918-block  1
branch  2 taken 18 (fallthrough)
branch  3 taken 18
      18*: 1919:				&& opt_str[s] != 'j' && opt_str[s] != '-') {
       18: 1919-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 18
    %%%%%: 1919-block  1
branch  2 never executed
branch  3 never executed
    #####: 1920:					fail = 1;
    #####: 1921:					break;
    %%%%%: 1921-block  0
unconditional  0 never executed
        -: 1922:				}
        -: 1923:			}
      18*: 1924:			if (fail || s != SUG_STRATS)
       18: 1924-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18: 1924-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 18
    #####: 1925:				continue;
    %%%%%: 1925-block  0
unconditional  0 never executed
       18: 1926:			suggestion_strategy = savestring(opt_str, strlen(opt_str));
       18: 1926-block  0
call    0 returned 18
unconditional  1 taken 18
        -: 1927:		}
        -: 1928:#endif /* !_NO_SUGGESTIONS */
        -: 1929:
      391: 1930:		else if (*line == 'S' && strncmp(line, "SystemShell=", 12) == 0) {
      374: 1930-block  0
branch  0 taken 81 (fallthrough)
branch  1 taken 293
       81: 1930-block  1
branch  2 taken 24 (fallthrough)
branch  3 taken 57
       17: 1930-block  2
unconditional  4 taken 17
       24: 1931:			free(user.shell);
       24: 1932:			user.shell = (char *)NULL;
       24: 1933:			char *opt = strchr(line, '=');
      24*: 1934:			if (!opt || !*opt || !*(++opt))
       24: 1934-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 1934-block  1
branch  2 taken 24 (fallthrough)
branch  3 taken 0
       24: 1934-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 24
    #####: 1935:				continue;
    %%%%%: 1935-block  0
unconditional  0 never executed
        -: 1936:
       24: 1937:			char *tmp = remove_quotes(opt);
       24: 1937-block  0
call    0 returned 24
       24: 1938:			if (!tmp)
branch  0 taken 7 (fallthrough)
branch  1 taken 17
        7: 1939:				continue;
        7: 1939-block  0
unconditional  0 taken 7
        -: 1940:
       17: 1941:			if (*tmp == '/') {
       17: 1941-block  0
branch  0 taken 17 (fallthrough)
branch  1 taken 0
      17*: 1942:				if (access(tmp, F_OK | X_OK) != 0)
       17: 1942-block  0
call    0 returned 17
branch  1 taken 0 (fallthrough)
branch  2 taken 17
    #####: 1943:					continue;
    %%%%%: 1943-block  0
unconditional  0 never executed
       17: 1944:				user.shell = savestring(tmp, strlen(tmp));
       17: 1944-block  0
call    0 returned 17
unconditional  1 taken 17
        -: 1945:			} else {
    #####: 1946:				char *shell_path = get_cmd_path(tmp);
    %%%%%: 1946-block  0
call    0 never executed
    #####: 1947:				if (!shell_path)
branch  0 never executed
branch  1 never executed
    #####: 1948:					continue;
    %%%%%: 1948-block  0
unconditional  0 never executed
        -: 1949:
    #####: 1950:				user.shell = savestring(shell_path, strlen(shell_path));
    %%%%%: 1950-block  0
call    0 never executed
    #####: 1951:				free(shell_path);
unconditional  0 never executed
        -: 1952:			}
        -: 1953:		}
        -: 1954:
      350: 1955:		else if (*line == 'T' && strncmp(line, "TerminalCmd=", 12) == 0) {
      350: 1955-block  0
branch  0 taken 70 (fallthrough)
branch  1 taken 280
       70: 1955-block  1
branch  2 taken 24 (fallthrough)
branch  3 taken 46
       24: 1956:			if (term) {
       24: 1956-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1957:				free(term);
    #####: 1958:				term = (char *)NULL;
    %%%%%: 1958-block  0
unconditional  0 never executed
        -: 1959:			}
        -: 1960:
       24: 1961:			char *opt = strchr(line, '=');
      24*: 1962:			if (!opt || !*opt || !*(++opt))
       24: 1962-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 1962-block  1
branch  2 taken 24 (fallthrough)
branch  3 taken 0
       24: 1962-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 24
    #####: 1963:				continue;
    %%%%%: 1963-block  0
unconditional  0 never executed
        -: 1964:
       24: 1965:			char *tmp = remove_quotes(opt);
       24: 1965-block  0
call    0 returned 24
      24*: 1966:			if (!tmp)
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 1967:				continue;
    %%%%%: 1967-block  0
unconditional  0 never executed
        -: 1968:
       24: 1969:			term = savestring(tmp, strlen(tmp));
       24: 1969-block  0
call    0 returned 24
unconditional  1 taken 24
        -: 1970:		}
        -: 1971:
      349: 1972:		else if (xargs.tips == UNSET && *line == 'T' && strncmp(line, "Tips=", 5) == 0) {
      326: 1972-block  0
branch  0 taken 326 (fallthrough)
branch  1 taken 0
      326: 1972-block  1
branch  2 taken 46 (fallthrough)
branch  3 taken 280
       46: 1972-block  2
branch  4 taken 23 (fallthrough)
branch  5 taken 23
       23: 1972-block  3
unconditional  6 taken 23
       23: 1973:			char opt_str[MAX_BOOL] = "";
       23: 1974:			ret = sscanf(line, "Tips=%5s\n", opt_str);
      23*: 1975:			if (ret == -1)
       23: 1975-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1976:				continue;
    %%%%%: 1976-block  0
unconditional  0 never executed
       23: 1977:			if (strncmp(opt_str, "false", 5) == 0)
       23: 1977-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1978:				tips = 0;
    %%%%%: 1978-block  0
unconditional  0 never executed
       23: 1979:			else if (strncmp(opt_str, "true", 4) == 0)
       23: 1979-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1980:				tips = 1;
       23: 1980-block  0
unconditional  0 taken 23
        -: 1981:		}
        -: 1982:
        -: 1983:#ifndef _NO_TRASH
      303: 1984:		else if (xargs.trasrm == UNSET && *line == 'T'
      303: 1984-block  0
branch  0 taken 303 (fallthrough)
branch  1 taken 0
      303: 1984-block  1
branch  2 taken 23 (fallthrough)
branch  3 taken 280
       46: 1985:		&& strncmp(line, "TrashAsRm=", 10) == 0) {
       23: 1985-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1985-block  1
unconditional  2 taken 23
       23: 1986:			char opt_str[MAX_BOOL] = "";
       23: 1987:			ret = sscanf(line, "TrashAsRm=%5s\n", opt_str);
      23*: 1988:			if (ret == -1)
       23: 1988-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1989:				continue;
    %%%%%: 1989-block  0
unconditional  0 never executed
       23: 1990:			if (strncmp(opt_str, "true", 4) == 0)
       23: 1990-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 1991:				tr_as_rm = 1;
    %%%%%: 1991-block  0
unconditional  0 never executed
       23: 1992:			else if (strncmp(opt_str, "false", 5) == 0)
       23: 1992-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 1993:				tr_as_rm = 0;
       23: 1993-block  0
unconditional  0 taken 23
        -: 1994:		}
        -: 1995:#endif
        -: 1996:
      280: 1997:		else if (xargs.unicode == UNSET && *line == 'U'
      280: 1997-block  0
branch  0 taken 280 (fallthrough)
branch  1 taken 0
      280: 1997-block  1
branch  2 taken 24 (fallthrough)
branch  3 taken 256
       48: 1998:		&& strncmp(line, "Unicode=", 8) == 0) {
       24: 1998-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 1998-block  1
unconditional  2 taken 24
       24: 1999:			char opt_str[MAX_BOOL] = "";
       24: 2000:			ret = sscanf(line, "Unicode=%5s\n", opt_str);
      24*: 2001:			if (ret == -1)
       24: 2001-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2002:				continue;
    %%%%%: 2002-block  0
unconditional  0 never executed
       24: 2003:			if (strncmp(opt_str, "true", 4) == 0)
       24: 2003-block  0
branch  0 taken 21 (fallthrough)
branch  1 taken 3
       21: 2004:				unicode = 1;
       21: 2004-block  0
unconditional  0 taken 21
        3: 2005:			else if (strncmp(opt_str, "false", 5) == 0)
        3: 2005-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 2006:				unicode = 0;
        3: 2006-block  0
unconditional  0 taken 3
        -: 2007:		}
        -: 2008:
      256: 2009:		else if (xargs.welcome_message == UNSET && *line == 'W'
      256: 2009-block  0
branch  0 taken 256 (fallthrough)
branch  1 taken 0
      256: 2009-block  1
branch  2 taken 41 (fallthrough)
branch  3 taken 215
       41: 2010:		&& strncmp(line, "WelcomeMessage=", 15) == 0) {
       41: 2010-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 17
       24: 2011:			char opt_str[MAX_BOOL] = "";
       24: 2012:			ret = sscanf(line, "WelcomeMessage=%5s\n",
        -: 2013:			    opt_str);
      24*: 2014:			if (ret == -1)
       24: 2014-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2015:				continue;
    %%%%%: 2015-block  0
unconditional  0 never executed
       24: 2016:			if (strncmp(opt_str, "true", 4) == 0)
       24: 2016-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 2017:				welcome_message = 1;
       24: 2017-block  0
unconditional  0 taken 24
    #####: 2018:			else if (strncmp(opt_str, "false", 5) == 0)
    %%%%%: 2018-block  0
branch  0 never executed
branch  1 never executed
    #####: 2019:				welcome_message = 0;
    %%%%%: 2019-block  0
unconditional  0 never executed
        -: 2020:		}
        -: 2021:	}
        -: 2022:
       24: 2023:	close_fstream(config_fp, fd);
       24: 2023-block  0
call    0 returned 24
        -: 2024:
       24: 2025:	if (filter) {
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2026:		ret = regcomp(&regex_exp, filter, REG_NOSUB | REG_EXTENDED);
    %%%%%: 2026-block  0
call    0 never executed
    #####: 2027:		if (ret != EXIT_SUCCESS) {
branch  0 never executed
branch  1 never executed
    #####: 2028:			_err('w', PRINT_PROMPT, _("%s: '%s': Invalid regular "
    %%%%%: 2028-block  0
call    0 never executed
call    1 never executed
        -: 2029:				  "expression\n"), PROGRAM_NAME, filter);
    #####: 2030:			free(filter);
    #####: 2031:			filter = (char *)NULL;
    #####: 2032:			regfree(&regex_exp);
call    0 never executed
unconditional  1 never executed
        -: 2033:		}
        -: 2034:	}
        -: 2035:
       24: 2036:	return;
       24: 2036-block  0
unconditional  0 taken 24
        -: 2037:}
        -: 2038:
        -: 2039:/* Set up CliFM directories and config files. Load the user's
        -: 2040: * configuration from clifmrc */
        -: 2041:void
function init_config called 24 returned 100% blocks executed 75%
       24: 2042:init_config(void)
        -: 2043:{
       24: 2044:	if (xargs.stealth_mode == 1) {
       24: 2044-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2045:		_err(0, PRINT_PROMPT, _("%s: Running in stealth mode: trash, "
    %%%%%: 2045-block  0
call    0 never executed
call    1 never executed
        -: 2046:			"persistent selection and directory history, just as bookmarks, "
        -: 2047:			"logs and configuration files, are disabled.\n"),
        -: 2048:		    PROGRAM_NAME);
    #####: 2049:		config_ok = 0;
    #####: 2050:		return;
unconditional  0 never executed
        -: 2051:	}
        -: 2052:
        -: 2053:	/* Store a pointer to the current LS_COLORS value to be used by
        -: 2054:	 * external commands */
       24: 2055:	ls_colors_bk = getenv("LS_COLORS");
       24: 2055-block  0
call    0 returned 24
        -: 2056:
       24: 2057:	if (!home_ok)
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 2058:		return;
    %%%%%: 2058-block  0
unconditional  0 never executed
        -: 2059:
       24: 2060:	define_config_file_names();
       24: 2060-block  0
call    0 returned 24
       24: 2061:	create_config_files();
call    0 returned 24
        -: 2062:
       24: 2063:	if (config_ok)
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 2064:		read_config();
       24: 2064-block  0
call    0 returned 24
unconditional  1 taken 24
        -: 2065:
       24: 2066:	if ((flags & GUI) && getenv("XTERM_VERSION")) {
       24: 2066-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24: 2066-block  1
call    2 returned 24
branch  3 taken 23 (fallthrough)
branch  4 taken 1
        -: 2067:		/* If running Xterm, instruct it to send an escape code (27)
        -: 2068:		 * for Meta (Alt) key sequences. Otherwise, Alt keybindings won't
        -: 2069:		 * work */
       23: 2070:		printf("\x1b[?1036h"); /* metaSendsEscape = true */
       23: 2070-block  0
call    0 returned 23
unconditional  1 taken 23
        -: 2071:/*		printf("\x1b[?1034l"); // eightBitInput = false
        -: 2072:		printf("\x1b[>1;1m"); // modifyCursorKeys = 1
        -: 2073:		printf("\x1b[>2;1m"); // modifyFunctionKeys = 1
        -: 2074:		("\x1b[>1m" and "\x1b[>2m", reset to initial value) */
        -: 2075:	}
        -: 2076:}
        -: 2077:
        -: 2078:static void
function reset_variables called 20 returned 100% blocks executed 67%
       20: 2079:reset_variables(void)
        -: 2080:{
        -: 2081:	/* Free everything */
       20: 2082:	free(config_dir_gral);
       20: 2083:	free(config_dir);
       20: 2084:	config_dir = config_dir_gral = (char *)NULL;
        -: 2085:
        -: 2086:#ifndef _NO_TRASH
       20: 2087:	free(trash_dir);
       20: 2088:	free(trash_files_dir);
       20: 2089:	free(trash_info_dir);
       20: 2090:	trash_dir = trash_files_dir = trash_info_dir = (char *)NULL;
        -: 2091:#endif
        -: 2092:
       20: 2093:	free(bm_file);
       20: 2094:	free(log_file);
       20: 2095:	free(hist_file);
       20: 2096:	free(dirhist_file);
       20: 2097:	bm_file = log_file = hist_file = dirhist_file = (char *)NULL;
        -: 2098:
       20: 2099:	free(config_file);
       20: 2100:	free(profile_file);
       20: 2101:	free(msg_log_file);
       20: 2102:	config_file = profile_file = msg_log_file = (char *)NULL;
        -: 2103:
       20: 2104:	free(mime_file);
       20: 2105:	free(plugins_dir);
       20: 2106:	free(actions_file);
       20: 2107:	free(kbinds_file);
       20: 2108:	mime_file = plugins_dir = actions_file = kbinds_file = (char *)NULL;
        -: 2109:
       20: 2110:	free(colors_dir);
       20: 2111:	free(tmp_dir);
       20: 2112:	free(sel_file);
       20: 2113:	free(remotes_file);
       20: 2114:	tmp_dir = colors_dir = sel_file = remotes_file = (char *)NULL;
        -: 2115:
        -: 2116:#ifndef _NO_SUGGESTIONS
       20: 2117:	free(suggestion_buf);
       20: 2118:	suggestion_buf = (char *)NULL;
        -: 2119:
       20: 2120:	free(suggestion_strategy);
       20: 2121:	suggestion_strategy = (char *)NULL;
        -: 2122:#endif
        -: 2123:
       20: 2124:	free_remotes(0);
       20: 2124-block  0
call    0 returned 20
        -: 2125:
       20: 2126:	if (filter) {
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2127:		regfree(&regex_exp);
    %%%%%: 2127-block  0
call    0 never executed
    #####: 2128:		free(filter);
    #####: 2129:		filter = (char *)NULL;
unconditional  0 never executed
        -: 2130:	}
        -: 2131:
       20: 2132:	free(opener);
       20: 2133:	opener = (char *)NULL;
        -: 2134:
       20: 2135:	free(encoded_prompt);
       20: 2136:	encoded_prompt = (char *)NULL;
        -: 2137:
       20: 2138:	free(term);
       20: 2139:	term = (char *)NULL;
        -: 2140:
       20: 2141:	free(user.shell);
       20: 2142:	user.shell = (char *)NULL;
        -: 2143:
        -: 2144:	/* Reset all variables */
       20: 2145:	auto_open = UNSET;
       20: 2146:	autocd = UNSET;
       20: 2147:	autojump = UNSET;
       20: 2148:	case_sens_dirjump = UNSET;
       20: 2149:	case_sens_path_comp = UNSET;
       20: 2150:	case_sensitive = UNSET;
       20: 2151:	cd_lists_on_the_fly = UNSET;
       20: 2152:	cd_on_quit = UNSET;
       20: 2153:	check_cap = UNSET;
       20: 2154:	check_ext = UNSET;
       20: 2155:	classify = UNSET;
       20: 2156:	clear_screen = UNSET;
       20: 2157:	columned = UNSET;
       20: 2158:	dirhist_map = UNSET;
       20: 2159:	disk_usage = UNSET;
       20: 2160:	ext_cmd_ok = UNSET;
       20: 2161:	files_counter = UNSET;
       20: 2162:	follow_symlinks = UNSET;
        -: 2163:#ifndef _NO_HIGHLIGHT
       20: 2164:	highlight = UNSET;
        -: 2165:#endif
       20: 2166:	light_mode = UNSET;
       20: 2167:	list_folders_first = UNSET;
       20: 2168:	logs_enabled = UNSET;
       20: 2169:	long_view = UNSET;
       20: 2170:	max_jump_total_rank = UNSET;
       20: 2171:	max_printselfiles = UNSET;
       20: 2172:	min_name_trim = UNSET;
       20: 2173:	min_jump_rank = UNSET;
       20: 2174:	no_eln = UNSET;
       20: 2175:	pager = UNSET;
       20: 2176:	print_selfiles = UNSET;
       20: 2177:	prompt_style = UNSET;
       20: 2178:	restore_last_path = UNSET;
       20: 2179:	share_selbox = UNSET;
       20: 2180:	show_hidden = UNSET;
       20: 2181:	sort = UNSET;
       20: 2182:	splash_screen = UNSET;
       20: 2183:	tips = UNSET;
       20: 2184:	unicode = UNSET;
       20: 2185:	welcome_message = UNSET;
        -: 2186:
        -: 2187:#ifndef _NO_SUGGESTIONS
       20: 2188:	suggestions = suggest_filetype_color = UNSET;
        -: 2189:#endif
        -: 2190:
        -: 2191:#ifndef _NO_TRASH
       20: 2192:	tr_as_rm = UNSET;
       20: 2193:	trash_ok = 1;
        -: 2194:#endif
        -: 2195:
       20: 2196:	dequoted = 0;
       20: 2197:	internal_cmd = 0;
       20: 2198:	is_sel = 0;
       20: 2199:	kbind_busy = 0;
       20: 2200:	mime_match = 0;
       20: 2201:	no_log = 0;
       20: 2202:	print_msg = 0;
       20: 2203:	recur_perm_error_flag = 0;
       20: 2204:	sel_is_last = 0;
       20: 2205:	shell_is_interactive = 0;
       20: 2206:	shell_terminal = 0;
       20: 2207:	sort_reverse = 0;
       20: 2208:	sort_switch = 0;
        -: 2209:
       20: 2210:	config_ok = 1;
       20: 2211:	home_ok = 1;
       20: 2212:	selfile_ok = 1;
        -: 2213:
       20: 2214:	pmsg = NOMSG;
        -: 2215:
       20: 2216:	return;
       20: 2216-block  0
unconditional  0 taken 20
        -: 2217:}
        -: 2218:
        -: 2219:static void
function check_cmd_line_options called 20 returned 100% blocks executed 51%
       20: 2220:check_cmd_line_options(void)
        -: 2221:{
        -: 2222:#ifndef _NO_SUGGESTIONS
       20: 2223:	if (xargs.suggestions != UNSET)
       20: 2223-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2224:		suggestions = xargs.suggestions;
    %%%%%: 2224-block  0
unconditional  0 never executed
        -: 2225:#endif
        -: 2226:
        -: 2227:#ifndef _NO_TRASH
       20: 2228:	if (xargs.trasrm != UNSET)
       20: 2228-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2229:		tr_as_rm = xargs.trasrm;
    %%%%%: 2229-block  0
unconditional  0 never executed
        -: 2230:#endif
        -: 2231:
        -: 2232:#ifndef _NO_ICONS
       20: 2233:	if (xargs.icons != UNSET)
       20: 2233-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2234:		icons = xargs.icons;
    %%%%%: 2234-block  0
unconditional  0 never executed
        -: 2235:#endif
        -: 2236:
       20: 2237:	if (xargs.auto_open != UNSET)
       20: 2237-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2238:		auto_open = xargs.auto_open;
    %%%%%: 2238-block  0
unconditional  0 never executed
        -: 2239:
       20: 2240:	if (xargs.autocd != UNSET)
       20: 2240-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2241:		autocd = xargs.autocd;
    %%%%%: 2241-block  0
unconditional  0 never executed
        -: 2242:
       20: 2243:	if (xargs.autojump != UNSET)
       20: 2243-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2244:		autojump = xargs.autojump;
    %%%%%: 2244-block  0
unconditional  0 never executed
       20: 2245:	if (autojump)
       20: 2245-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2246:		autocd = 1;
    %%%%%: 2246-block  0
unconditional  0 never executed
        -: 2247:
       20: 2248:	if (xargs.case_sens_dirjump != UNSET)
       20: 2248-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2249:		case_sens_dirjump = xargs.case_sens_dirjump;
    %%%%%: 2249-block  0
unconditional  0 never executed
        -: 2250:
       20: 2251:	if (xargs.case_sens_path_comp != UNSET)
       20: 2251-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2252:		case_sens_path_comp = xargs.case_sens_path_comp;
    %%%%%: 2252-block  0
unconditional  0 never executed
        -: 2253:
       20: 2254:	if (xargs.cd_list_auto != UNSET)
       20: 2254-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2255:		cd_lists_on_the_fly = xargs.cd_list_auto;
    %%%%%: 2255-block  0
unconditional  0 never executed
        -: 2256:
       20: 2257:	if (xargs.cd_on_quit != UNSET)
       20: 2257-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2258:		cd_on_quit = xargs.cd_on_quit;
    %%%%%: 2258-block  0
unconditional  0 never executed
        -: 2259:
       20: 2260:	if (xargs.classify != UNSET)
       20: 2260-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2261:		classify = xargs.classify;
    %%%%%: 2261-block  0
unconditional  0 never executed
        -: 2262:
       20: 2263:	if (xargs.clear_screen != UNSET)
       20: 2263-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2264:		clear_screen = xargs.clear_screen;
    %%%%%: 2264-block  0
unconditional  0 never executed
        -: 2265:
       20: 2266:	if (xargs.dirmap != UNSET)
       20: 2266-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2267:		dirhist_map = xargs.dirmap;
    %%%%%: 2267-block  0
unconditional  0 never executed
        -: 2268:
       20: 2269:	if (xargs.disk_usage != UNSET)
       20: 2269-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2270:		disk_usage = xargs.disk_usage;
    %%%%%: 2270-block  0
unconditional  0 never executed
        -: 2271:
       20: 2272:	if (xargs.expand_bookmarks != UNSET)
       20: 2272-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2273:		expand_bookmarks = xargs.expand_bookmarks;
    %%%%%: 2273-block  0
unconditional  0 never executed
        -: 2274:
       20: 2275:	if (xargs.ext != UNSET)
       20: 2275-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2276:		ext_cmd_ok = xargs.ext;
    %%%%%: 2276-block  0
unconditional  0 never executed
        -: 2277:
       20: 2278:	if (xargs.ffirst != UNSET)
       20: 2278-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2279:		list_folders_first = xargs.ffirst;
    %%%%%: 2279-block  0
unconditional  0 never executed
        -: 2280:
       20: 2281:	if (xargs.files_counter != UNSET)
       20: 2281-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2282:		files_counter = xargs.files_counter;
    %%%%%: 2282-block  0
unconditional  0 never executed
        -: 2283:
       20: 2284:	if (xargs.hidden != UNSET)
       20: 2284-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2285:		show_hidden = xargs.hidden;
    %%%%%: 2285-block  0
unconditional  0 never executed
        -: 2286:
       20: 2287:	if (xargs.light != UNSET)
       20: 2287-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2288:		light_mode = xargs.light;
    %%%%%: 2288-block  0
unconditional  0 never executed
        -: 2289:
       20: 2290:	if (xargs.logs != UNSET)
       20: 2290-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2291:		logs_enabled = xargs.logs;
    %%%%%: 2291-block  0
unconditional  0 never executed
        -: 2292:
       20: 2293:	if (xargs.longview != UNSET)
       20: 2293-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2294:		long_view = xargs.longview;
    %%%%%: 2294-block  0
unconditional  0 never executed
        -: 2295:
       20: 2296:	if (xargs.max_dirhist != UNSET)
       20: 2296-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2297:		max_dirhist = xargs.max_dirhist;
    %%%%%: 2297-block  0
unconditional  0 never executed
        -: 2298:
       20: 2299:	if (xargs.max_path != UNSET)
       20: 2299-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2300:		max_path = xargs.max_path;
    %%%%%: 2300-block  0
unconditional  0 never executed
        -: 2301:
       20: 2302:	if (xargs.no_colors != UNSET)
       20: 2302-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2303:		colorize = xargs.no_colors;
    %%%%%: 2303-block  0
unconditional  0 never executed
        -: 2304:
       20: 2305:	if (xargs.no_columns != UNSET)
       20: 2305-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2306:		columned = xargs.no_columns;
    %%%%%: 2306-block  0
unconditional  0 never executed
        -: 2307:
       20: 2308:	if (xargs.noeln != UNSET)
       20: 2308-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2309:		no_eln = xargs.noeln;
    %%%%%: 2309-block  0
unconditional  0 never executed
        -: 2310:
       20: 2311:	if (xargs.only_dirs != UNSET)
       20: 2311-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2312:		only_dirs = xargs.only_dirs;
    %%%%%: 2312-block  0
unconditional  0 never executed
        -: 2313:
       20: 2314:	if (xargs.pager != UNSET)
       20: 2314-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2315:		pager = xargs.pager;
    %%%%%: 2315-block  0
unconditional  0 never executed
        -: 2316:
       20: 2317:	if (xargs.printsel != UNSET)
       20: 2317-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2318:		print_selfiles = xargs.printsel;
    %%%%%: 2318-block  0
unconditional  0 never executed
        -: 2319:
       20: 2320:	if (xargs.restore_last_path != UNSET)
       20: 2320-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2321:		restore_last_path = xargs.restore_last_path;
    %%%%%: 2321-block  0
unconditional  0 never executed
        -: 2322:
       20: 2323:	if (xargs.sensitive != UNSET)
       20: 2323-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2324:		case_sensitive = xargs.sensitive;
    %%%%%: 2324-block  0
unconditional  0 never executed
        -: 2325:
       20: 2326:	if (xargs.share_selbox != UNSET)
       20: 2326-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2327:		share_selbox = xargs.share_selbox;
    %%%%%: 2327-block  0
unconditional  0 never executed
        -: 2328:
       20: 2329:	if (xargs.sort != UNSET)
       20: 2329-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2330:		sort = xargs.sort;
    %%%%%: 2330-block  0
unconditional  0 never executed
        -: 2331:
       20: 2332:	if (xargs.sort_reverse != UNSET)
       20: 2332-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2333:		sort_reverse = xargs.sort_reverse;
    %%%%%: 2333-block  0
unconditional  0 never executed
        -: 2334:
       20: 2335:	if (xargs.splash != UNSET)
       20: 2335-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2336:		splash_screen = xargs.splash;
    %%%%%: 2336-block  0
unconditional  0 never executed
        -: 2337:
       20: 2338:	if (xargs.tips != UNSET)
       20: 2338-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2339:		tips = xargs.tips;
    %%%%%: 2339-block  0
unconditional  0 never executed
        -: 2340:
       20: 2341:	if (xargs.unicode != UNSET)
       20: 2341-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2342:		unicode = xargs.unicode;
    %%%%%: 2342-block  0
unconditional  0 never executed
        -: 2343:
       20: 2344:	if (xargs.welcome_message != UNSET)
       20: 2344-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 2345:		welcome_message = xargs.welcome_message;
    %%%%%: 2345-block  0
unconditional  0 never executed
        -: 2346:
       20: 2347:	return;
       20: 2347-block  0
unconditional  0 taken 20
        -: 2348:}
        -: 2349:
        -: 2350:int
function reload_config called 20 returned 100% blocks executed 97%
       20: 2351:reload_config(void)
        -: 2352:{
       20: 2353:	reset_variables();
       20: 2353-block  0
call    0 returned 20
        -: 2354:
        -: 2355:	/* Set up config files and options */
       20: 2356:	init_config();
call    0 returned 20
        -: 2357:
        -: 2358:	/* If some option was not set, set it to the default value*/
       20: 2359:	check_options();
call    0 returned 20
       20: 2360:	set_sel_file();
call    0 returned 20
       20: 2361:	create_tmp_files();
call    0 returned 20
      20*: 2362:	set_colors(usr_cscheme ? usr_cscheme : "default", 1);
branch  0 taken 20 (fallthrough)
branch  1 taken 0
       20: 2362-block  0
unconditional  2 taken 20
    %%%%%: 2362-block  1
unconditional  3 never executed
       20: 2362-block  2
call    4 returned 20
       20: 2363:	free(usr_cscheme);
       20: 2364:	usr_cscheme = (char *)NULL;
        -: 2365:
        -: 2366:	/* If some option was set via command line, keep that value
        -: 2367:	 * for any profile */
       20: 2368:	check_cmd_line_options();
call    0 returned 20
        -: 2369:
        -: 2370:	/* Free the aliases and prompt_cmds arrays to be allocated again */
       20: 2371:	int i = dirhist_total_index;
     1662: 2372:	while (--i >= 0)
unconditional  0 taken 20
     1662: 2372-block  0
branch  1 taken 1642
branch  2 taken 20 (fallthrough)
     1642: 2373:		free(old_pwd[i]);
     1642: 2373-block  0
unconditional  0 taken 1642
        -: 2374:
       20: 2375:	free(old_pwd);
       20: 2376:	old_pwd = (char **)NULL;
        -: 2377:
       20: 2378:	if (jump_db) {
       20: 2378-block  0
branch  0 taken 16 (fallthrough)
branch  1 taken 4
      685: 2379:		for (i = 0; jump_db[i].path; i++)
       16: 2379-block  0
unconditional  0 taken 16
      685: 2379-block  1
branch  1 taken 669
branch  2 taken 16 (fallthrough)
      669: 2380:			free(jump_db[i].path);
      669: 2380-block  0
unconditional  0 taken 669
        -: 2381:
       16: 2382:		free(jump_db);
       16: 2383:		jump_db = (struct jump_t *)NULL;
       16: 2383-block  0
unconditional  0 taken 16
        -: 2384:	}
        -: 2385:
       20: 2386:	jump_n = 0;
       20: 2387:	i = (int)aliases_n;
       90: 2388:	while (--i >= 0)
       20: 2388-block  0
unconditional  0 taken 20
       90: 2388-block  1
branch  1 taken 70
branch  2 taken 20 (fallthrough)
       70: 2389:		free(aliases[i]);
       70: 2389-block  0
unconditional  0 taken 70
        -: 2390:
       20: 2391:	i = (int)prompt_cmds_n;
       74: 2392:	while (--i >= 0)
       20: 2392-block  0
unconditional  0 taken 20
       74: 2392-block  1
branch  1 taken 54
branch  2 taken 20 (fallthrough)
       54: 2393:		free(prompt_cmds[i]);
       54: 2393-block  0
unconditional  0 taken 54
        -: 2394:
       20: 2395:	aliases_n = 0;
       20: 2396:	dirhist_total_index = 0;
       20: 2397:	prompt_cmds_n = 0;
        -: 2398:
       20: 2399:	get_aliases();
       20: 2399-block  0
call    0 returned 20
       20: 2400:	get_prompt_cmds();
call    0 returned 20
       20: 2401:	load_dirhist();
call    0 returned 20
       20: 2402:	load_jumpdb();
call    0 returned 20
       20: 2403:	load_remotes();
call    0 returned 20
        -: 2404:
        -: 2405:	/* Set the current poistion of the dirhist index to the last
        -: 2406:	 * entry */
       20: 2407:	dirhist_cur_index = dirhist_total_index - 1;
        -: 2408:
       20: 2409:	set_env();
call    0 returned 20
       20: 2410:	return EXIT_SUCCESS;
unconditional  0 taken 20
        -: 2411:}
