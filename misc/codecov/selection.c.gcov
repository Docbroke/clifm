        -:    0:Source:selection.c
        -:    1:/* selection.c -- files selection functions */
        -:    2:
        -:    3:/*
        -:    4: * This file is part of CliFM
        -:    5: * 
        -:    6: * Copyright (C) 2016-2021, L. Abramovich <johndoe.arch@outlook.com>
        -:    7: * All rights reserved.
        -:    8:
        -:    9: * CliFM is free software; you can redistribute it and/or modify
        -:   10: * it under the terms of the GNU General Public License as published by
        -:   11: * the Free Software Foundation; either version 2 of the License, or
        -:   12: * (at your option) any later version.
        -:   13: *
        -:   14: * CliFM is distributed in the hope that it will be useful,
        -:   15: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   16: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   17: * GNU General Public License for more details.
        -:   18: *
        -:   19: * You should have received a copy of the GNU General Public License
        -:   20: * along with this program; if not, write to the Free Software
        -:   21: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
        -:   22: * MA 02110-1301, USA.
        -:   23:*/
        -:   24:
        -:   25:#include "helpers.h"
        -:   26:
        -:   27:#include <dirent.h>
        -:   28:#include <errno.h>
        -:   29:#include <fcntl.h>
        -:   30:#include <glob.h>
        -:   31:#include <stdio.h>
        -:   32:#include <readline/readline.h>
        -:   33:#include <string.h>
        -:   34:#include <sys/stat.h>
        -:   35:#include <unistd.h>
        -:   36:#ifdef __linux__
        -:   37:#include <sys/ioctl.h>
        -:   38:#endif
        -:   39:
        -:   40:#include "aux.h"
        -:   41:#include "checks.h"
        -:   42:#include "colors.h"
        -:   43:#include "listing.h"
        -:   44:#include "misc.h"
        -:   45:#include "navigation.h"
        -:   46:#include "readline.h"
        -:   47:#include "selection.h"
        -:   48:#include "sort.h"
        -:   49:
        -:   50:/* Save selected elements into a tmp file. Returns 1 if success and 0
        -:   51: * if error. This function allows the user to work with multiple
        -:   52: * instances of the program: he/she can select some files in the
        -:   53: * first instance and then execute a second one to operate on those
        -:   54: * files as he/she whises. */
        -:   55:int
function save_sel called 4 returned 100% blocks executed 70%
        4:   56:save_sel(void)
        -:   57:{
        4:   58:	if (!selfile_ok || !config_ok)
        4:   58-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   58-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    #####:   59:		return EXIT_FAILURE;
    %%%%%:   59-block  0
unconditional  0 never executed
        -:   60:
        4:   61:	if (sel_n == 0) {
        4:   61-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:   62:		if (unlink(SEL_FILE) == -1) {
        2:   62-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:   63:			fprintf(stderr, "%s: sel: %s: %s\n", PROGRAM_NAME,
call    0 never executed
    #####:   64:			    SEL_FILE, strerror(errno));
    %%%%%:   64-block  0
call    0 never executed
    #####:   65:			return EXIT_FAILURE;
unconditional  0 never executed
        -:   66:		} else
        2:   67:			return EXIT_SUCCESS;
        2:   67-block  0
unconditional  0 taken 2
        -:   68:	}
        -:   69:
        2:   70:	FILE *sel_fp = fopen(SEL_FILE, "w");
        2:   70-block  0
call    0 returned 2
        -:   71:
        2:   72:	if (!sel_fp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   73:		_err(0, NOPRINT_PROMPT, "%s: sel: %s: %s\n", PROGRAM_NAME,
call    0 never executed
    #####:   74:		    SEL_FILE, strerror(errno));
    %%%%%:   74-block  0
call    0 never executed
    #####:   75:		return EXIT_FAILURE;
unconditional  0 never executed
        -:   76:	}
        -:   77:
        -:   78:	size_t i;
        8:   79:	for (i = 0; i < sel_n; i++) {
        2:   79-block  0
unconditional  0 taken 2
unconditional  1 taken 6
        8:   79-block  1
branch  2 taken 6
branch  3 taken 2 (fallthrough)
        6:   80:		fputs(sel_elements[i], sel_fp);
        6:   80-block  0
call    0 returned 6
        6:   81:		fputc('\n', sel_fp);
call    0 returned 6
        -:   82:	}
        -:   83:
        2:   84:	fclose(sel_fp);
        2:   84-block  0
call    0 returned 2
        -:   85:
        2:   86:	return EXIT_SUCCESS;
unconditional  0 taken 2
        -:   87:}
        -:   88:
        -:   89:int
function select_file called 6 returned 100% blocks executed 80%
        6:   90:select_file(char *file)
        -:   91:{
        6:   92:	if (!file || !*file)
        6:   92-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:   92-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 6
    #####:   93:		return 0;
    %%%%%:   93-block  0
unconditional  0 never executed
        -:   94:
        -:   95:	/* Check if the selected element is already in the selection
        -:   96:	 * box */
        6:   97:	int exists = 0, new_sel = 0, j;
        -:   98:
        6:   99:	j = (int)sel_n;
       12:  100:	while (--j >= 0) {
        6:  100-block  0
unconditional  0 taken 6
       12:  100-block  1
branch  1 taken 6
branch  2 taken 6 (fallthrough)
        6:  101:		if (*file == *sel_elements[j] && strcmp(sel_elements[j], file) == 0) {
        6:  101-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:  101-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 6
    #####:  102:			exists = 1;
    #####:  103:			break;
    %%%%%:  103-block  0
unconditional  0 never executed
        -:  104:		}
        -:  105:	}
        -:  106:
        6:  107:	if (!exists) {
        6:  107-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:  108:		sel_elements = (char **)xrealloc(sel_elements, (sel_n + 2)
        6:  108-block  0
call    0 returned 6
        -:  109:											* sizeof(char *));
        6:  110:		sel_elements[sel_n++] = savestring(file, strlen(file));
call    0 returned 6
        6:  111:		sel_elements[sel_n] = (char *)NULL;
        6:  112:		new_sel++;
unconditional  0 taken 6
        -:  113:	}
        -:  114:
        -:  115:	else
    #####:  116:		fprintf(stderr, _("%s: sel: %s: Already selected\n"),
    %%%%%:  116-block  0
call    0 never executed
unconditional  1 never executed
        -:  117:		    PROGRAM_NAME, file);
        -:  118:
        6:  119:	return new_sel;
        6:  119-block  0
unconditional  0 taken 6
        -:  120:}
        -:  121:
        -:  122:int
function sel_function called 2 returned 100% blocks executed 37%
        2:  123:sel_function(char **args)
        -:  124:{
        2:  125:	if (!args)
        2:  125-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  126:		return EXIT_FAILURE;
    %%%%%:  126-block  0
unconditional  0 never executed
        -:  127:
       2*:  128:	if (!args[1] || (*args[1] == '-' && args[1][1] == '-'
        2:  128-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  128-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    %%%%%:  128-block  2
branch  4 never executed
branch  5 never executed
    #####:  129:	&& strcmp(args[1], "--help") == 0)) {
    %%%%%:  129-block  0
branch  0 never executed
branch  1 never executed
    #####:  130:		puts(_("Usage: s, sel ELN/FILE... [[!]PATTERN] [-FILETYPE] "
    %%%%%:  130-block  0
call    0 never executed
        -:  131:		       "[:PATH]"));
    #####:  132:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  133:	}
        -:  134:
        2:  135:	char *sel_path = (char *)NULL;
        2:  136:	mode_t filetype = 0;
        2:  137:	int i, ifiletype = 0, isel_path = 0, new_sel = 0;
        -:  138:
        8:  139:	for (i = 1; args[i]; i++) {
        2:  139-block  0
unconditional  0 taken 2
        6:  139-block  1
unconditional  1 taken 6
        8:  139-block  2
branch  2 taken 6
branch  3 taken 2 (fallthrough)
        -:  140:
        6:  141:		if (*args[i] == '-') {
        6:  141-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:  142:			ifiletype = i;
    #####:  143:			filetype = (mode_t) * (args[i] + 1);
    %%%%%:  143-block  0
unconditional  0 never executed
        -:  144:		}
        -:  145:
        6:  146:		if (*args[i] == ':') {
        6:  146-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:  147:			isel_path = i;
    #####:  148:			sel_path = args[i] + 1;
    %%%%%:  148-block  0
unconditional  0 never executed
        -:  149:		}
        -:  150:
        6:  151:		if (*args[i] == '~') {
        6:  151-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:  152:			char *exp_path = tilde_expand(args[i]);
    %%%%%:  152-block  0
call    0 never executed
        -:  153:
    #####:  154:			if (!exp_path) {
branch  0 never executed
branch  1 never executed
    #####:  155:				fprintf(stderr, "%s: %s: %s\n", PROGRAM_NAME, args[i],
call    0 never executed
    #####:  156:				    strerror(errno));
    %%%%%:  156-block  0
call    0 never executed
    #####:  157:				return EXIT_FAILURE;
unconditional  0 never executed
        -:  158:			}
        -:  159:
    #####:  160:			args[i] = (char *)xrealloc(args[i], (strlen(exp_path) + 1) *
    %%%%%:  160-block  0
call    0 never executed
        -:  161:								sizeof(char));
    #####:  162:			strcpy(args[i], exp_path);
    #####:  163:			free(exp_path);
unconditional  0 never executed
        -:  164:		}
        -:  165:	}
        -:  166:
        2:  167:	if (filetype) {
        2:  167-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:  168:		/* Convert filetype into a macro that can be decoded by stat().
        -:  169:		 * If file type is specified, matches will be checked against
        -:  170:		 * this value */
    #####:  171:		switch (filetype) {
    %%%%%:  171-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  172:		case 'd':
    #####:  173:			filetype = DT_DIR;
    #####:  174:			break;
    %%%%%:  174-block  0
unconditional  0 never executed
    #####:  175:		case 'r':
    #####:  176:			filetype = DT_REG;
    #####:  177:			break;
    %%%%%:  177-block  0
unconditional  0 never executed
    #####:  178:		case 'l':
    #####:  179:			filetype = DT_LNK;
    #####:  180:			break;
    %%%%%:  180-block  0
unconditional  0 never executed
    #####:  181:		case 's':
    #####:  182:			filetype = DT_SOCK;
    #####:  183:			break;
    %%%%%:  183-block  0
unconditional  0 never executed
    #####:  184:		case 'f':
    #####:  185:			filetype = DT_FIFO;
    #####:  186:			break;
    %%%%%:  186-block  0
unconditional  0 never executed
    #####:  187:		case 'b':
    #####:  188:			filetype = DT_BLK;
    #####:  189:			break;
    %%%%%:  189-block  0
unconditional  0 never executed
    #####:  190:		case 'c':
    #####:  191:			filetype = DT_CHR;
    #####:  192:			break;
    %%%%%:  192-block  0
unconditional  0 never executed
        -:  193:
    #####:  194:		default:
    #####:  195:			fprintf(stderr, _("%s: '%c': Unrecognized filetype\n"),
    #####:  196:			    PROGRAM_NAME, (char)filetype);
    %%%%%:  196-block  0
call    0 never executed
    #####:  197:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  198:		}
        -:  199:	}
        -:  200:
        -:  201:	char dir[PATH_MAX];
        -:  202:
        2:  203:	if (sel_path) {
        2:  203-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:  204:
    #####:  205:		size_t sel_path_len = strlen(sel_path);
    #####:  206:		if (sel_path[sel_path_len - 1] == '/')
    %%%%%:  206-block  0
branch  0 never executed
branch  1 never executed
    #####:  207:			sel_path[sel_path_len - 1] = '\0';
    %%%%%:  207-block  0
unconditional  0 never executed
        -:  208:
    #####:  209:		char *tmp_dir = xnmalloc(PATH_MAX + 1, sizeof(char));
    %%%%%:  209-block  0
call    0 never executed
        -:  210:
    #####:  211:		if (strchr(sel_path, '\\')) {
branch  0 never executed
branch  1 never executed
    #####:  212:			char *deq_str = dequote_str(sel_path, 0);
    %%%%%:  212-block  0
call    0 never executed
    #####:  213:			if (deq_str) {
branch  0 never executed
branch  1 never executed
    #####:  214:				strcpy(sel_path, deq_str);
    #####:  215:				free(deq_str);
    %%%%%:  215-block  0
unconditional  0 never executed
        -:  216:			}
        -:  217:		}
        -:  218:
    #####:  219:		strcpy(tmp_dir, sel_path);
        -:  220:
    #####:  221:		if (*sel_path == '.')
    %%%%%:  221-block  0
branch  0 never executed
branch  1 never executed
    #####:  222:			realpath(sel_path, tmp_dir);
    %%%%%:  222-block  0
call    0 never executed
unconditional  1 never executed
        -:  223:
    #####:  224:		if (*sel_path == '~') {
    %%%%%:  224-block  0
branch  0 never executed
branch  1 never executed
    #####:  225:			char *exp_path = tilde_expand(sel_path);
    %%%%%:  225-block  0
call    0 never executed
    #####:  226:			if (!exp_path) {
branch  0 never executed
branch  1 never executed
    #####:  227:				fprintf(stderr, _("%s: Error expanding path\n"), PROGRAM_NAME);
    %%%%%:  227-block  0
call    0 never executed
    #####:  228:				free(tmp_dir);
    #####:  229:				return EXIT_FAILURE;
unconditional  0 never executed
        -:  230:			}
    #####:  231:			strcpy(tmp_dir, exp_path);
    #####:  232:			free(exp_path);
    %%%%%:  232-block  0
unconditional  0 never executed
        -:  233:		}
        -:  234:
    #####:  235:		if (*tmp_dir != '/') {
    %%%%%:  235-block  0
branch  0 never executed
branch  1 never executed
    #####:  236:			snprintf(dir, PATH_MAX, "%s/%s", ws[cur_ws].path, tmp_dir);
    %%%%%:  236-block  0
unconditional  0 never executed
        -:  237:		} else
    #####:  238:			strcpy(dir, tmp_dir);
    %%%%%:  238-block  0
unconditional  0 never executed
        -:  239:
    #####:  240:		free(tmp_dir);
        -:  241:
    #####:  242:		if (access(dir, X_OK) == -1) {
    %%%%%:  242-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  243:			fprintf(stderr, "%s: %s: %s\n", PROGRAM_NAME, dir,
call    0 never executed
    #####:  244:			    strerror(errno));
    %%%%%:  244-block  0
call    0 never executed
    #####:  245:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  246:		}
        -:  247:
    #####:  248:		if (xchdir(dir, NO_TITLE) == -1) {
    %%%%%:  248-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  249:			fprintf(stderr, "%s: %s: %s\n", PROGRAM_NAME, dir,
call    0 never executed
    #####:  250:			    strerror(errno));
    %%%%%:  250-block  0
call    0 never executed
    #####:  251:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  252:		}
        -:  253:	}
        -:  254:
        2:  255:	char *pattern = (char *)NULL;
        -:  256:
        8:  257:	for (i = 1; args[i]; i++) {
        2:  257-block  0
unconditional  0 taken 2
        6:  257-block  1
unconditional  1 taken 6
        8:  257-block  2
branch  2 taken 6
branch  3 taken 2 (fallthrough)
        -:  258:
       6*:  259:		if (i == ifiletype || i == isel_path)
        6:  259-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:  259-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 6
    #####:  260:			continue;
    %%%%%:  260-block  0
unconditional  0 never executed
        -:  261:
        -:  262:		/*      int invert = 0; */
        -:  263:
        6:  264:		if (check_regex(args[i]) == EXIT_SUCCESS) {
        6:  264-block  0
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
    #####:  265:			pattern = args[i];
        -:  266:
    #####:  267:			if (*pattern == '!') {
    %%%%%:  267-block  0
branch  0 never executed
branch  1 never executed
    #####:  268:				pattern++;
    %%%%%:  268-block  0
unconditional  0 never executed
        -:  269:				/*  invert = 1; */
        -:  270:			}
        -:  271:		}
        -:  272:
        6:  273:		if (!pattern) {
        6:  273-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        -:  274:
        6:  275:			if (strchr(args[i], '\\')) {
        6:  275-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:  276:				char *deq_str = dequote_str(args[i], 0);
    %%%%%:  276-block  0
call    0 never executed
    #####:  277:				if (deq_str) {
branch  0 never executed
branch  1 never executed
    #####:  278:					strcpy(args[i], deq_str);
    #####:  279:					free(deq_str);
    %%%%%:  279-block  0
unconditional  0 never executed
        -:  280:				}
        -:  281:			}
        -:  282:
        6:  283:			char *tmp = (char *)NULL;
        -:  284:
        6:  285:			if (*args[i] != '/') {
        6:  285-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:  286:				if (!sel_path) {
        6:  286-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:  287:					tmp = (char *)xnmalloc(strlen(ws[cur_ws].path)
        6:  288:								+ strlen(args[i]) + 2, sizeof(char));
        6:  288-block  0
call    0 returned 6
        6:  289:					sprintf(tmp, "%s/%s", ws[cur_ws].path, args[i]);
unconditional  0 taken 6
        -:  290:				}
        -:  291:
        -:  292:				else {
    #####:  293:					tmp = (char *)xnmalloc(strlen(dir) + strlen(args[i])
    %%%%%:  293-block  0
call    0 never executed
        -:  294:													+ 2, sizeof(char));
    #####:  295:					sprintf(tmp, "%s/%s", dir, args[i]);
unconditional  0 never executed
        -:  296:				}
        -:  297:
        -:  298:				struct stat fattr;
        6:  299:				if (lstat(tmp, &fattr) == -1) {
        6:  299-block  0
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
    #####:  300:					fprintf(stderr, "%s: %s: %s\n", PROGRAM_NAME,
    #####:  301:					    args[i], strerror(errno));
    %%%%%:  301-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  302:				} else
        6:  303:					new_sel += select_file(tmp);
        6:  303-block  0
call    0 returned 6
unconditional  1 taken 6
        6:  304:				free(tmp);
        6:  304-block  0
unconditional  0 taken 6
        -:  305:			}
        -:  306:
        -:  307:			else {
        -:  308:				struct stat fattr;
    #####:  309:				if (lstat(args[i], &fattr) == -1) {
    %%%%%:  309-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  310:					fprintf(stderr, "%s: %s: %s\n", PROGRAM_NAME,
    #####:  311:					    args[i], strerror(errno));
    %%%%%:  311-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  312:				} else
    #####:  313:					new_sel += select_file(args[i]);
    %%%%%:  313-block  0
call    0 never executed
unconditional  1 never executed
        -:  314:			}
        -:  315:		}
        -:  316:
        -:  317:		else {
        -:  318:			/* We have a pattern */
        -:  319:			/* GLOB */
    #####:  320:			int ret = -1;
    #####:  321:			ret = sel_glob(args[i], sel_path ? dir : NULL,
    %%%%%:  321-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  321-block  1
unconditional  2 never executed
    %%%%%:  321-block  2
unconditional  3 never executed
    %%%%%:  321-block  3
call    4 never executed
        -:  322:			    filetype ? filetype : 0);
        -:  323:
        -:  324:			/* If glob failed, try REGEX */
    #####:  325:			if (ret <= 0) {
branch  0 never executed
branch  1 never executed
    #####:  326:				ret = sel_regex(args[i], sel_path ? dir : NULL,
    %%%%%:  326-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  326-block  1
unconditional  2 never executed
    %%%%%:  326-block  2
unconditional  3 never executed
    %%%%%:  326-block  3
call    4 never executed
        -:  327:				    filetype);
    #####:  328:				if (ret > 0)
branch  0 never executed
branch  1 never executed
    #####:  329:					new_sel += ret;
    %%%%%:  329-block  0
unconditional  0 never executed
        -:  330:			} else
    #####:  331:				new_sel += ret;
    %%%%%:  331-block  0
unconditional  0 never executed
        -:  332:		}
        -:  333:	}
        -:  334:
        2:  335:	if (new_sel > 0) {
        2:  335-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  336:		if (save_sel() != EXIT_SUCCESS) {
        2:  336-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:  337:			_err('e', PRINT_PROMPT, _("%s: Error writing selected files "
    %%%%%:  337-block  0
call    0 never executed
unconditional  1 never executed
        -:  338:				"to the selections file\n"), PROGRAM_NAME);
        -:  339:		}
        -:  340:	}
        -:  341:
       2*:  342:	if (sel_path && xchdir(ws[cur_ws].path, NO_TITLE) == -1) {
        2:  342-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:  342-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  343:		fprintf(stderr, "%s: %s: %s\n", PROGRAM_NAME, ws[cur_ws].path,
call    0 never executed
    #####:  344:		    strerror(errno));
    %%%%%:  344-block  0
call    0 never executed
    #####:  345:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  346:	}
        -:  347:
        2:  348:	if (new_sel <= 0) {
        2:  348-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  349:		if (pattern)
    %%%%%:  349-block  0
branch  0 never executed
branch  1 never executed
    #####:  350:			fprintf(stderr, _("%s: No matches found\n"), PROGRAM_NAME);
    %%%%%:  350-block  0
call    0 never executed
unconditional  1 never executed
    #####:  351:		return EXIT_FAILURE;
    %%%%%:  351-block  0
unconditional  0 never executed
        -:  352:	}
        -:  353:
        -:  354:	/* Get total size of sel files */
        -:  355:	struct stat sattr;
        -:  356:
        2:  357:	i = (int)sel_n;
        8:  358:	while (--i >= 0) {
        2:  358-block  0
unconditional  0 taken 2
        8:  358-block  1
branch  1 taken 6
branch  2 taken 2 (fallthrough)
        -:  359:
        6:  360:		if (lstat(sel_elements[i], &sattr) != -1) {
        6:  360-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0
        -:  361:
        -:  362:			/*          if ((sattr.st_mode & S_IFMT) == S_IFDIR) {
        -:  363:				off_t dsize = dir_size(sel_elements[i]);
        -:  364:				total_sel_size += dsize;
        -:  365:			}
        -:  366:			else */
        6:  367:			total_sel_size += sattr.st_size;
        6:  367-block  0
unconditional  0 taken 6
        -:  368:		}
        -:  369:	}
        -:  370:
        -:  371:	/* Print entries */
        2:  372:	if (sel_n > 10)
        2:  372-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  373:		printf(_("%zu files are now in the Selection Box\n"),
    %%%%%:  373-block  0
call    0 never executed
unconditional  1 never executed
        -:  374:		    sel_n);
        -:  375:
        2:  376:	else if (sel_n > 0) {
        2:  376-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
       4*:  377:		printf(_("%zu selected %s:\n\n"), sel_n, (sel_n == 1) ? _("file")
        2:  377-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:  377-block  1
unconditional  2 never executed
        2:  377-block  2
call    3 returned 2
        2:  378:				: _("files"));
        2:  378-block  0
unconditional  0 taken 2
        -:  379:
        8:  380:		for (i = 0; i < (int)sel_n; i++)
unconditional  0 taken 2
unconditional  1 taken 6
        8:  380-block  0
branch  2 taken 6
branch  3 taken 2 (fallthrough)
        6:  381:			colors_list(sel_elements[i], (int)i + 1, NO_PAD,
        6:  381-block  0
call    0 returned 6
        -:  382:			    PRINT_NEWLINE);
        -:  383:	}
        -:  384:
        -:  385:	/* Print total size */
        2:  386:	char *human_size = get_size_unit(total_sel_size);
        2:  386-block  0
call    0 returned 2
        -:  387:
        2:  388:	if (sel_n > 10)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  389:		printf(_("Total size: %s\n"), human_size);
    %%%%%:  389-block  0
call    0 never executed
unconditional  1 never executed
        -:  390:
        2:  391:	else if (sel_n > 0)
        2:  391-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  392:		printf(_("\n%s%sTotal size%s: %s\n"), df_c, bold, df_c, human_size);
        2:  392-block  0
call    0 returned 2
unconditional  1 taken 2
        -:  393:
        2:  394:	free(human_size);
        -:  395:
        2:  396:	return EXIT_SUCCESS;
        2:  396-block  0
unconditional  0 taken 2
        -:  397:}
        -:  398:
        -:  399:void
function show_sel_files called 0 returned 0% blocks executed 0%
    #####:  400:show_sel_files(void)
        -:  401:{
    #####:  402:	if (clear_screen)
    %%%%%:  402-block  0
branch  0 never executed
branch  1 never executed
    #####:  403:		CLEAR;
    %%%%%:  403-block  0
call    0 never executed
unconditional  1 never executed
        -:  404:
    #####:  405:	printf(_("%s%sSelection Box%s\n"), df_c, bold, df_c);
    %%%%%:  405-block  0
call    0 never executed
        -:  406:
    #####:  407:	int reset_pager = 0;
        -:  408:
    #####:  409:	if (sel_n == 0)
branch  0 never executed
branch  1 never executed
    #####:  410:		puts(_("Empty"));
    %%%%%:  410-block  0
call    0 never executed
unconditional  1 never executed
        -:  411:
        -:  412:	else {
    #####:  413:		putchar('\n');
    %%%%%:  413-block  0
call    0 never executed
        -:  414:		struct winsize w;
    #####:  415:		ioctl(STDOUT_FILENO, TIOCGWINSZ, &w);
call    0 never executed
        -:  416:		int c;
    #####:  417:		size_t counter = 0;
    #####:  418:		unsigned short term_rows = w.ws_row;
    #####:  419:		term_rows -= 2;
        -:  420:		size_t i;
        -:  421:
    #####:  422:		for (i = 0; i < sel_n; i++) {
unconditional  0 never executed
    %%%%%:  422-block  0
unconditional  1 never executed
    %%%%%:  422-block  1
branch  2 never executed
branch  3 never executed
        -:  423:			/*          if (pager && counter > (term_rows-2)) { */
        -:  424:
    #####:  425:			if (pager && counter > (size_t)term_rows) {
    %%%%%:  425-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  425-block  1
branch  2 never executed
branch  3 never executed
    #####:  426:				switch (c = xgetchar()) {
    %%%%%:  426-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  427:				/* Advance one line at a time */
    #####:  428:				case 66: /* fallthrough */ /* Down arrow */
        -:  429:				case 10: /* fallthrough */ /* Enter */
        -:  430:				case 32:		   /* Space */
    #####:  431:					break;
    %%%%%:  431-block  0
unconditional  0 never executed
        -:  432:				/* Advance one page at a time */
    #####:  433:				case 126:
    #####:  434:					counter = 0; /* Page Down */
    #####:  435:					break;
    %%%%%:  435-block  0
unconditional  0 never executed
        -:  436:				/* Stop paging (and set a flag to reenable the pager
        -:  437:				 * later) */
    #####:  438:				case 99: /* fallthrough */  /* 'c' */
        -:  439:				case 112: /* fallthrough */ /* 'p' */
        -:  440:				case 113:
    #####:  441:					pager = 0, reset_pager = 1; /* 'q' */
    #####:  442:					break;
    %%%%%:  442-block  0
unconditional  0 never executed
        -:  443:				/* If another key is pressed, go back one position.
        -:  444:				 * Otherwise, some filenames won't be listed.*/
    #####:  445:				default:
    #####:  446:					i--;
    #####:  447:					continue;
    %%%%%:  447-block  0
unconditional  0 never executed
        -:  448:					break;
        -:  449:				}
        -:  450:			}
        -:  451:
    #####:  452:			counter++;
    #####:  453:			colors_list(sel_elements[i], (int)i + 1, NO_PAD,
    %%%%%:  453-block  0
call    0 never executed
unconditional  1 never executed
        -:  454:			    PRINT_NEWLINE);
        -:  455:		}
        -:  456:
    #####:  457:		char *human_size = get_size_unit(total_sel_size);
    %%%%%:  457-block  0
call    0 never executed
        -:  458:
    #####:  459:		printf(_("\n%s%sTotal size%s: %s\n"), df_c, bold, df_c, human_size);
call    0 never executed
        -:  460:
    #####:  461:		free(human_size);
unconditional  0 never executed
        -:  462:	}
        -:  463:
    #####:  464:	if (reset_pager)
    %%%%%:  464-block  0
branch  0 never executed
branch  1 never executed
    #####:  465:		pager = 1;
    %%%%%:  465-block  0
unconditional  0 never executed
    #####:  466:}
        -:  467:
        -:  468:int
function deselect called 2 returned 100% blocks executed 9%
        2:  469:deselect(char **comm)
        -:  470:{
        2:  471:	if (!comm)
        2:  471-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  472:		return EXIT_FAILURE;
    %%%%%:  472-block  0
unconditional  0 never executed
        -:  473:
       2*:  474:	if (comm[1] && (strcmp(comm[1], "*") == 0 || strcmp(comm[1], "a") == 0
        2:  474-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  474-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    %%%%%:  474-block  2
branch  4 never executed
branch  5 never executed
    #####:  475:	|| strcmp(comm[1], "all") == 0)) {
    %%%%%:  475-block  0
branch  0 never executed
branch  1 never executed
        -:  476:
        2:  477:		if (sel_n > 0) {
        2:  477-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  478:			int i = (int)sel_n;
        -:  479:
        8:  480:			while (--i >= 0)
        2:  480-block  0
unconditional  0 taken 2
        8:  480-block  1
branch  1 taken 6
branch  2 taken 2 (fallthrough)
        6:  481:				free(sel_elements[i]);
        6:  481-block  0
unconditional  0 taken 6
        -:  482:
        2:  483:			sel_n = total_sel_size = 0;
        -:  484:
        2:  485:			if (save_sel() != 0)
        2:  485-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:  486:				return EXIT_FAILURE;
    %%%%%:  486-block  0
unconditional  0 never executed
        -:  487:			else
        2:  488:				return EXIT_SUCCESS;
        2:  488-block  0
unconditional  0 taken 2
        -:  489:		} else {
    #####:  490:			puts(_("desel: There are no selected files"));
    %%%%%:  490-block  0
call    0 never executed
    #####:  491:			return EXIT_SUCCESS;
unconditional  0 never executed
        -:  492:		}
        -:  493:	}
        -:  494:
        -:  495:	register int i;
        -:  496:
    #####:  497:	if (clear_screen)
    %%%%%:  497-block  0
branch  0 never executed
branch  1 never executed
    #####:  498:		CLEAR;
    %%%%%:  498-block  0
call    0 never executed
unconditional  1 never executed
        -:  499:
    #####:  500:	printf(_("%sSelection Box%s\n"), bold, df_c);
    %%%%%:  500-block  0
call    0 never executed
        -:  501:
    #####:  502:	if (sel_n == 0) {
branch  0 never executed
branch  1 never executed
    #####:  503:		puts(_("Empty"));
    %%%%%:  503-block  0
call    0 never executed
    #####:  504:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  505:	}
        -:  506:
    #####:  507:	putchar('\0');
    %%%%%:  507-block  0
call    0 never executed
        -:  508:
    #####:  509:	for (i = 0; i < (int)sel_n; i++)
unconditional  0 never executed
unconditional  1 never executed
    %%%%%:  509-block  0
branch  2 never executed
branch  3 never executed
    #####:  510:		colors_list(sel_elements[i], (int)i + 1, NO_PAD, PRINT_NEWLINE);
    %%%%%:  510-block  0
call    0 never executed
        -:  511:
    #####:  512:	char *human_size = get_size_unit(total_sel_size);
    %%%%%:  512-block  0
call    0 never executed
    #####:  513:	printf(_("\n%s%sTotal size%s: %s\n"), df_c, bold, df_c, human_size);
call    0 never executed
    #####:  514:	free(human_size);
        -:  515:
    #####:  516:	printf(_("\n%sEnter '%c' to quit.\n"), df_c, 'q');
call    0 never executed
    #####:  517:	size_t desel_n = 0;
    #####:  518:	char *line = NULL, **desel_elements = (char **)NULL;
        -:  519:
    #####:  520:	while (!line)
unconditional  0 never executed
    %%%%%:  520-block  0
branch  1 never executed
branch  2 never executed
    #####:  521:		line = rl_no_hist(_("File(s) to be deselected (ex: 1 2-6, or *): "));
    %%%%%:  521-block  0
call    0 never executed
unconditional  1 never executed
        -:  522:
    #####:  523:	desel_elements = get_substr(line, ' ');
    %%%%%:  523-block  0
call    0 never executed
    #####:  524:	free(line);
        -:  525:
    #####:  526:	if (!desel_elements)
branch  0 never executed
branch  1 never executed
    #####:  527:		return EXIT_FAILURE;
    %%%%%:  527-block  0
unconditional  0 never executed
        -:  528:
    #####:  529:	for (i = 0; desel_elements[i]; i++)
    %%%%%:  529-block  0
unconditional  0 never executed
    %%%%%:  529-block  1
branch  1 never executed
branch  2 never executed
    #####:  530:		desel_n++;
    %%%%%:  530-block  0
unconditional  0 never executed
        -:  531:
    #####:  532:	i = (int)desel_n;
    #####:  533:	while (--i >= 0) { /* Validation */
    %%%%%:  533-block  0
unconditional  0 never executed
    %%%%%:  533-block  1
branch  1 never executed
branch  2 never executed
        -:  534:
        -:  535:		/* If not a number */
    #####:  536:		if (!is_number(desel_elements[i])) {
    %%%%%:  536-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  537:
    #####:  538:			if (strcmp(desel_elements[i], "q") == 0) {
    %%%%%:  538-block  0
branch  0 never executed
branch  1 never executed
        -:  539:
    #####:  540:				i = (int)desel_n;
    #####:  541:				while (--i >= 0)
    %%%%%:  541-block  0
unconditional  0 never executed
    %%%%%:  541-block  1
branch  1 never executed
branch  2 never executed
    #####:  542:					free(desel_elements[i]);
    %%%%%:  542-block  0
unconditional  0 never executed
        -:  543:
    #####:  544:				free(desel_elements);
        -:  545:
    #####:  546:				return EXIT_SUCCESS;
    %%%%%:  546-block  0
unconditional  0 never executed
        -:  547:			}
        -:  548:
    #####:  549:			else if (strcmp(desel_elements[i], "*") == 0) {
    %%%%%:  549-block  0
branch  0 never executed
branch  1 never executed
        -:  550:
        -:  551:				/* Clear the sel array */
    #####:  552:				i = (int)sel_n;
    #####:  553:				while (--i >= 0)
    %%%%%:  553-block  0
unconditional  0 never executed
    %%%%%:  553-block  1
branch  1 never executed
branch  2 never executed
    #####:  554:					free(sel_elements[i]);
    %%%%%:  554-block  0
unconditional  0 never executed
        -:  555:
    #####:  556:				sel_n = total_sel_size = 0;
        -:  557:
    #####:  558:				i = (int)desel_n;
    #####:  559:				while (--i >= 0)
    %%%%%:  559-block  0
unconditional  0 never executed
    %%%%%:  559-block  1
branch  1 never executed
branch  2 never executed
    #####:  560:					free(desel_elements[i]);
    %%%%%:  560-block  0
unconditional  0 never executed
        -:  561:
    #####:  562:				int exit_status = EXIT_SUCCESS;
        -:  563:
    #####:  564:				if (save_sel() != 0)
    %%%%%:  564-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  565:					exit_status = EXIT_FAILURE;
    %%%%%:  565-block  0
unconditional  0 never executed
        -:  566:
    #####:  567:				free(desel_elements);
        -:  568:
    #####:  569:				if (cd_lists_on_the_fly) {
    %%%%%:  569-block  0
branch  0 never executed
branch  1 never executed
    #####:  570:					free_dirlist();
    %%%%%:  570-block  0
call    0 never executed
    #####:  571:					if (list_dir() != EXIT_SUCCESS)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  572:						exit_status = EXIT_FAILURE;
    %%%%%:  572-block  0
unconditional  0 never executed
        -:  573:				}
        -:  574:
    #####:  575:				return exit_status;
    %%%%%:  575-block  0
unconditional  0 never executed
        -:  576:			}
        -:  577:
        -:  578:			else {
    #####:  579:				printf(_("desel: '%s': Invalid element\n"), desel_elements[i]);
    %%%%%:  579-block  0
call    0 never executed
    #####:  580:				int j = (int)desel_n;
        -:  581:
    #####:  582:				while (--j >= 0)
unconditional  0 never executed
    %%%%%:  582-block  0
branch  1 never executed
branch  2 never executed
    #####:  583:					free(desel_elements[j]);
    %%%%%:  583-block  0
unconditional  0 never executed
        -:  584:
    #####:  585:				free(desel_elements);
        -:  586:
    #####:  587:				return EXIT_FAILURE;
    %%%%%:  587-block  0
unconditional  0 never executed
        -:  588:			}
        -:  589:		}
        -:  590:
        -:  591:		/* If a number, check it's a valid ELN */
        -:  592:		else {
    #####:  593:			int atoi_desel = atoi(desel_elements[i]);
        -:  594:
    #####:  595:			if (atoi_desel == 0 || (size_t)atoi_desel > sel_n) {
    %%%%%:  595-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  595-block  1
branch  2 never executed
branch  3 never executed
    #####:  596:				printf(_("desel: '%s': Invalid ELN\n"), desel_elements[i]);
    %%%%%:  596-block  0
call    0 never executed
        -:  597:
    #####:  598:				int j = (int)desel_n;
    #####:  599:				while (--j >= 0)
unconditional  0 never executed
    %%%%%:  599-block  0
branch  1 never executed
branch  2 never executed
    #####:  600:					free(desel_elements[j]);
    %%%%%:  600-block  0
unconditional  0 never executed
        -:  601:
    #####:  602:				free(desel_elements);
        -:  603:
    #####:  604:				return EXIT_FAILURE;
    %%%%%:  604-block  0
unconditional  0 never executed
        -:  605:			}
        -:  606:		}
        -:  607:	}
        -:  608:
        -:  609:	/* If a valid ELN and not asterisk... */
        -:  610:	/* Store the full path of all the elements to be deselected in a new
        -:  611:	 * array (desel_path). I need to do this because after the first
        -:  612:	 * rearragement of the sel array, that is, after the removal of the
        -:  613:	 * first element, the index of the next elements changed, and cannot
        -:  614:	 * thereby be found by their index. The only way to find them is to
        -:  615:	 * compare string by string */
    #####:  616:	char **desel_path = (char **)NULL;
    #####:  617:	desel_path = (char **)xnmalloc(desel_n, sizeof(char *));
    %%%%%:  617-block  0
call    0 never executed
        -:  618:
    #####:  619:	i = (int)desel_n;
    #####:  620:	while (--i >= 0) {
unconditional  0 never executed
    %%%%%:  620-block  0
branch  1 never executed
branch  2 never executed
    #####:  621:		int desel_int = atoi(desel_elements[i]);
    #####:  622:		desel_path[i] = savestring(sel_elements[desel_int - 1],
unconditional  0 never executed
    #####:  623:		    strlen(sel_elements[desel_int - 1]));
    %%%%%:  623-block  0
call    0 never executed
        -:  624:	}
        -:  625:
        -:  626:	/* Search the sel array for the path of the element to deselect and
        -:  627:	 * store its index */
        -:  628:	struct stat desel_attrib;
        -:  629:
    #####:  630:	i = (int)desel_n;
    #####:  631:	while (--i >= 0) {
    %%%%%:  631-block  0
unconditional  0 never executed
    %%%%%:  631-block  1
branch  1 never executed
branch  2 never executed
    #####:  632:		int j, k, desel_index = 0;
        -:  633:
    #####:  634:		k = (int)sel_n;
    #####:  635:		while (--k >= 0) {
    %%%%%:  635-block  0
unconditional  0 never executed
    %%%%%:  635-block  1
branch  1 never executed
branch  2 never executed
        -:  636:
    #####:  637:			if (strcmp(sel_elements[k], desel_path[i]) == 0) {
    %%%%%:  637-block  0
branch  0 never executed
branch  1 never executed
        -:  638:
        -:  639:				/* Sustract size from total size */
    #####:  640:				if (lstat(sel_elements[k], &desel_attrib) != -1) {
    %%%%%:  640-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  641:
    #####:  642:					if ((desel_attrib.st_mode & S_IFMT) == S_IFDIR)
    %%%%%:  642-block  0
branch  0 never executed
branch  1 never executed
    #####:  643:						total_sel_size -= dir_size(sel_elements[k]);
    %%%%%:  643-block  0
call    0 never executed
unconditional  1 never executed
        -:  644:					else
    #####:  645:						total_sel_size -= desel_attrib.st_size;
    %%%%%:  645-block  0
unconditional  0 never executed
        -:  646:				}
        -:  647:
    #####:  648:				desel_index = k;
    #####:  649:				break;
    %%%%%:  649-block  0
unconditional  0 never executed
        -:  650:			}
        -:  651:		}
        -:  652:
        -:  653:		/* Once the index was found, rearrange the sel array removing the
        -:  654:		 * deselected element (actually, moving each string after it to
        -:  655:		 * the previous position) */
    #####:  656:		for (j = desel_index; j < (int)(sel_n - 1); j++) {
    %%%%%:  656-block  0
unconditional  0 never executed
    %%%%%:  656-block  1
branch  1 never executed
branch  2 never executed
    #####:  657:			sel_elements[j] = (char *)xrealloc(sel_elements[j],
    #####:  658:			    (strlen(sel_elements[j + 1]) + 1) * sizeof(char));
    %%%%%:  658-block  0
call    0 never executed
    #####:  659:			strcpy(sel_elements[j], sel_elements[j + 1]);
unconditional  0 never executed
        -:  660:		}
        -:  661:	}
        -:  662:
        -:  663:	/* Free the last DESEL_N elements from the old sel array. They won't
        -:  664:	 * be used anymore, for they contain the same value as the last
        -:  665:	 * non-deselected element due to the above array rearrangement */
    #####:  666:	for (i = 1; i <= (int)desel_n; i++)
    %%%%%:  666-block  0
unconditional  0 never executed
    %%%%%:  666-block  1
unconditional  1 never executed
    %%%%%:  666-block  2
branch  2 never executed
branch  3 never executed
    #####:  667:		if ((int)(sel_n - i) >= 0 && sel_elements[sel_n - i])
    %%%%%:  667-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  667-block  1
branch  2 never executed
branch  3 never executed
    #####:  668:			free(sel_elements[sel_n - i]);
    %%%%%:  668-block  0
unconditional  0 never executed
        -:  669:
        -:  670:	/* Reallocate the sel array according to the new size */
    #####:  671:	sel_n = (sel_n - desel_n);
        -:  672:
    #####:  673:	if ((int)sel_n < 0)
    %%%%%:  673-block  0
branch  0 never executed
branch  1 never executed
    #####:  674:		sel_n = total_sel_size = 0;
    %%%%%:  674-block  0
unconditional  0 never executed
        -:  675:
    #####:  676:	if (sel_n)
    %%%%%:  676-block  0
branch  0 never executed
branch  1 never executed
    #####:  677:		sel_elements = (char **)xrealloc(sel_elements, sel_n * sizeof(char *));
    %%%%%:  677-block  0
call    0 never executed
unconditional  1 never executed
        -:  678:
        -:  679:	/* Deallocate local arrays */
    #####:  680:	i = (int)desel_n;
    #####:  681:	while (--i >= 0) {
    %%%%%:  681-block  0
unconditional  0 never executed
    %%%%%:  681-block  1
branch  1 never executed
branch  2 never executed
    #####:  682:		free(desel_path[i]);
    #####:  683:		free(desel_elements[i]);
    %%%%%:  683-block  0
unconditional  0 never executed
        -:  684:	}
        -:  685:
    #####:  686:	free(desel_path);
    #####:  687:	free(desel_elements);
        -:  688:
    #####:  689:	if (args_n > 0) {
    %%%%%:  689-block  0
branch  0 never executed
branch  1 never executed
        -:  690:
    #####:  691:		for (i = 1; i <= (int)args_n; i++)
    %%%%%:  691-block  0
unconditional  0 never executed
    %%%%%:  691-block  1
branch  1 never executed
branch  2 never executed
    #####:  692:			free(comm[i]);
    %%%%%:  692-block  0
unconditional  0 never executed
        -:  693:
    #####:  694:		comm = (char **)xrealloc(comm, 1 * sizeof(char *));
    %%%%%:  694-block  0
call    0 never executed
    #####:  695:		args_n = 0;
unconditional  0 never executed
        -:  696:	}
        -:  697:
    #####:  698:	int exit_status = EXIT_SUCCESS;
        -:  699:
    #####:  700:	if (save_sel() != 0)
    %%%%%:  700-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  701:		exit_status = EXIT_FAILURE;
    %%%%%:  701-block  0
unconditional  0 never executed
        -:  702:
        -:  703:	/* If there is still some selected file, reload the desel screen */
    #####:  704:	if (sel_n)
    %%%%%:  704-block  0
branch  0 never executed
branch  1 never executed
    #####:  705:		if (deselect(comm) != 0)
    %%%%%:  705-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  706:			exit_status = EXIT_FAILURE;
    %%%%%:  706-block  0
unconditional  0 never executed
        -:  707:
    #####:  708:	return exit_status;
    %%%%%:  708-block  0
unconditional  0 never executed
        -:  709:}
        -:  710:
        -:  711:int
function sel_glob called 0 returned 0% blocks executed 0%
    #####:  712:sel_glob(char *str, const char *sel_path, mode_t filetype)
        -:  713:{
    #####:  714:	if (!str || !*str)
    %%%%%:  714-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  714-block  1
branch  2 never executed
branch  3 never executed
    #####:  715:		return -1;
    %%%%%:  715-block  0
unconditional  0 never executed
        -:  716:
        -:  717:	glob_t gbuf;
    #####:  718:	char *pattern = str;
    #####:  719:	int invert = 0, ret = -1;
        -:  720:
    #####:  721:	if (*pattern == '!') {
    %%%%%:  721-block  0
branch  0 never executed
branch  1 never executed
    #####:  722:		pattern++;
    #####:  723:		invert = 1;
    %%%%%:  723-block  0
unconditional  0 never executed
        -:  724:	}
        -:  725:
    #####:  726:	ret = glob(pattern, 0, NULL, &gbuf);
    %%%%%:  726-block  0
call    0 never executed
        -:  727:
    #####:  728:	if (ret == GLOB_NOSPACE || ret == GLOB_ABORTED) {
branch  0 never executed
branch  1 never executed
    %%%%%:  728-block  0
branch  2 never executed
branch  3 never executed
    #####:  729:		globfree(&gbuf);
    %%%%%:  729-block  0
call    0 never executed
    #####:  730:		return -1;
unconditional  0 never executed
        -:  731:	}
        -:  732:
    #####:  733:	if (ret == GLOB_NOMATCH) {
    %%%%%:  733-block  0
branch  0 never executed
branch  1 never executed
    #####:  734:		globfree(&gbuf);
    %%%%%:  734-block  0
call    0 never executed
    #####:  735:		return 0;
unconditional  0 never executed
        -:  736:	}
        -:  737:
    #####:  738:	char **matches = (char **)NULL;
    #####:  739:	int i, j = 0, k = 0;
    #####:  740:	struct dirent **ent = (struct dirent **)NULL;
        -:  741:
    #####:  742:	if (invert) {
    %%%%%:  742-block  0
branch  0 never executed
branch  1 never executed
    #####:  743:		if (!sel_path) {
    %%%%%:  743-block  0
branch  0 never executed
branch  1 never executed
    #####:  744:			matches = (char **)xnmalloc(files + 2, sizeof(char *));
    %%%%%:  744-block  0
call    0 never executed
        -:  745:
    #####:  746:			i = (int)files;
    #####:  747:			while (--i >= 0) {
unconditional  0 never executed
    %%%%%:  747-block  0
branch  1 never executed
branch  2 never executed
        -:  748:
    #####:  749:				if (filetype && file_info[i].type != filetype)
    %%%%%:  749-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  749-block  1
branch  2 never executed
branch  3 never executed
    #####:  750:					continue;
    %%%%%:  750-block  0
unconditional  0 never executed
        -:  751:
    #####:  752:				int found = 0;
    #####:  753:				j = (int)gbuf.gl_pathc;
    #####:  754:				while (--j >= 0) {
    %%%%%:  754-block  0
unconditional  0 never executed
    %%%%%:  754-block  1
branch  1 never executed
branch  2 never executed
    #####:  755:					if (*file_info[i].name == *gbuf.gl_pathv[j]
    %%%%%:  755-block  0
branch  0 never executed
branch  1 never executed
    #####:  756:					&& strcmp(file_info[i].name, gbuf.gl_pathv[j]) == 0) {
    %%%%%:  756-block  0
branch  0 never executed
branch  1 never executed
    #####:  757:						found = 1;
    #####:  758:						break;
    %%%%%:  758-block  0
unconditional  0 never executed
        -:  759:					}
        -:  760:				}
        -:  761:
    #####:  762:				if (!found)
    %%%%%:  762-block  0
branch  0 never executed
branch  1 never executed
    #####:  763:					matches[k++] = file_info[i].name;
    %%%%%:  763-block  0
unconditional  0 never executed
        -:  764:			}
        -:  765:		}
        -:  766:
        -:  767:		else {
    #####:  768:			ret = scandir(sel_path, &ent, skip_files, xalphasort);
    %%%%%:  768-block  0
call    0 never executed
        -:  769:
    #####:  770:			if (ret == -1) {
branch  0 never executed
branch  1 never executed
    #####:  771:				fprintf(stderr, "%s: %s: %s\n", PROGRAM_NAME,
call    0 never executed
    #####:  772:				    sel_path, strerror(errno));
    %%%%%:  772-block  0
call    0 never executed
    #####:  773:				globfree(&gbuf);
call    0 never executed
    #####:  774:				return -1;
unconditional  0 never executed
        -:  775:			}
        -:  776:
    #####:  777:			matches = (char **)xnmalloc((size_t)ret + 2, sizeof(char *));
    %%%%%:  777-block  0
call    0 never executed
        -:  778:
    #####:  779:			i = ret;
    #####:  780:			while (--i >= 0) {
unconditional  0 never executed
    %%%%%:  780-block  0
branch  1 never executed
branch  2 never executed
    #####:  781:				if (filetype && ent[i]->d_type != filetype)
    %%%%%:  781-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  781-block  1
branch  2 never executed
branch  3 never executed
    #####:  782:					continue;
    %%%%%:  782-block  0
unconditional  0 never executed
        -:  783:
    #####:  784:				j = (int)gbuf.gl_pathc;
    #####:  785:				while (--j >= 0) {
    %%%%%:  785-block  0
unconditional  0 never executed
    %%%%%:  785-block  1
branch  1 never executed
branch  2 never executed
    #####:  786:					if (*ent[i]->d_name == *gbuf.gl_pathv[j]
    %%%%%:  786-block  0
branch  0 never executed
branch  1 never executed
    #####:  787:					&& strcmp(ent[i]->d_name, gbuf.gl_pathv[j]) == 0)
    %%%%%:  787-block  0
branch  0 never executed
branch  1 never executed
    #####:  788:						break;
    %%%%%:  788-block  0
unconditional  0 never executed
        -:  789:				}
        -:  790:
    #####:  791:				if (!gbuf.gl_pathv[j])
    %%%%%:  791-block  0
branch  0 never executed
branch  1 never executed
    #####:  792:					matches[k++] = ent[i]->d_name;
    %%%%%:  792-block  0
unconditional  0 never executed
        -:  793:			}
        -:  794:		}
        -:  795:	}
        -:  796:
        -:  797:	else {
    #####:  798:		matches = (char **)xnmalloc(gbuf.gl_pathc + 2,
    %%%%%:  798-block  0
call    0 never executed
        -:  799:		    sizeof(char *));
    #####:  800:		mode_t t = 0;
    #####:  801:		if (filetype) {
branch  0 never executed
branch  1 never executed
        -:  802:
    #####:  803:			switch (filetype) {
    %%%%%:  803-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  804:			case DT_DIR:
    #####:  805:				t = S_IFDIR;
    #####:  806:				break;
    %%%%%:  806-block  0
unconditional  0 never executed
    #####:  807:			case DT_REG:
    #####:  808:				t = S_IFREG;
    #####:  809:				break;
    %%%%%:  809-block  0
unconditional  0 never executed
    #####:  810:			case DT_LNK:
    #####:  811:				t = S_IFLNK;
    #####:  812:				break;
    %%%%%:  812-block  0
unconditional  0 never executed
    #####:  813:			case DT_SOCK:
    #####:  814:				t = S_IFSOCK;
    #####:  815:				break;
    %%%%%:  815-block  0
unconditional  0 never executed
    #####:  816:			case DT_FIFO:
    #####:  817:				t = S_IFIFO;
    #####:  818:				break;
    %%%%%:  818-block  0
unconditional  0 never executed
    #####:  819:			case DT_BLK:
    #####:  820:				t = S_IFBLK;
    #####:  821:				break;
    %%%%%:  821-block  0
unconditional  0 never executed
    #####:  822:			case DT_CHR:
    #####:  823:				t = S_IFCHR;
    #####:  824:				break;
    %%%%%:  824-block  0
unconditional  0 never executed
        -:  825:			}
        -:  826:		}
        -:  827:
    #####:  828:		i = (int)gbuf.gl_pathc;
    #####:  829:		while (--i >= 0) {
    %%%%%:  829-block  0
unconditional  0 never executed
    %%%%%:  829-block  1
branch  1 never executed
branch  2 never executed
        -:  830:
        -:  831:			/* We need to run stat(3) here, so that the d_type macros
        -:  832:			 * won't work: convert them into st_mode macros */
    #####:  833:			if (filetype) {
    %%%%%:  833-block  0
branch  0 never executed
branch  1 never executed
        -:  834:				struct stat attr;
    #####:  835:				if (lstat(gbuf.gl_pathv[i], &attr) == -1)
    %%%%%:  835-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  836:					continue;
    %%%%%:  836-block  0
unconditional  0 never executed
    %%%%%:  836-block  1
unconditional  1 never executed
        -:  837:
    #####:  838:				if ((attr.st_mode & S_IFMT) != t)
    %%%%%:  838-block  0
branch  0 never executed
branch  1 never executed
    #####:  839:					continue;
    %%%%%:  839-block  0
unconditional  0 never executed
        -:  840:			}
        -:  841:
    #####:  842:			if (*gbuf.gl_pathv[i] == '.' && (!gbuf.gl_pathv[i][1]
    %%%%%:  842-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  842-block  1
branch  2 never executed
branch  3 never executed
    #####:  843:			|| (gbuf.gl_pathv[i][1] == '.' && !gbuf.gl_pathv[i][2])))
    %%%%%:  843-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  843-block  1
branch  2 never executed
branch  3 never executed
    #####:  844:				continue;
    %%%%%:  844-block  0
unconditional  0 never executed
        -:  845:
    #####:  846:			matches[k++] = gbuf.gl_pathv[i];
    %%%%%:  846-block  0
unconditional  0 never executed
        -:  847:		}
        -:  848:	}
        -:  849:
    #####:  850:	matches[k] = (char *)NULL;
    #####:  851:	int new_sel = 0;
        -:  852:
    #####:  853:	i = k;
    #####:  854:	while (--i >= 0) {
    %%%%%:  854-block  0
unconditional  0 never executed
    %%%%%:  854-block  1
branch  1 never executed
branch  2 never executed
        -:  855:
    #####:  856:		if (!matches[i])
    %%%%%:  856-block  0
branch  0 never executed
branch  1 never executed
    #####:  857:			continue;
    %%%%%:  857-block  0
unconditional  0 never executed
        -:  858:
    #####:  859:		if (!sel_path) {
    %%%%%:  859-block  0
branch  0 never executed
branch  1 never executed
        -:  860:
    #####:  861:			if (*matches[i] == '/')
    %%%%%:  861-block  0
branch  0 never executed
branch  1 never executed
    #####:  862:				new_sel += select_file(matches[i]);
    %%%%%:  862-block  0
call    0 never executed
unconditional  1 never executed
        -:  863:
        -:  864:			else {
    #####:  865:				char *tmp = (char *)xnmalloc(strlen(ws[cur_ws].path)
    #####:  866:							+ strlen(matches[i]) + 2, sizeof(char));
    %%%%%:  866-block  0
call    0 never executed
    #####:  867:				sprintf(tmp, "%s/%s", ws[cur_ws].path, matches[i]);
    #####:  868:				new_sel += select_file(tmp);
call    0 never executed
    #####:  869:				free(tmp);
unconditional  0 never executed
        -:  870:			}
        -:  871:		}
        -:  872:
        -:  873:		else {
    #####:  874:			char *tmp = (char *)xnmalloc(strlen(sel_path)
    #####:  875:						+ strlen(matches[i]) + 2, sizeof(char));
    %%%%%:  875-block  0
call    0 never executed
    #####:  876:			sprintf(tmp, "%s/%s", sel_path, matches[i]);
    #####:  877:			new_sel += select_file(tmp);
call    0 never executed
    #####:  878:			free(tmp);
unconditional  0 never executed
        -:  879:		}
        -:  880:	}
        -:  881:
    #####:  882:	free(matches);
    #####:  883:	globfree(&gbuf);
    %%%%%:  883-block  0
call    0 never executed
        -:  884:
    #####:  885:	if (invert && sel_path) {
branch  0 never executed
branch  1 never executed
    %%%%%:  885-block  0
branch  2 never executed
branch  3 never executed
    #####:  886:		i = ret;
    #####:  887:		while (--i >= 0)
    %%%%%:  887-block  0
unconditional  0 never executed
    %%%%%:  887-block  1
branch  1 never executed
branch  2 never executed
    #####:  888:			free(ent[i]);
    %%%%%:  888-block  0
unconditional  0 never executed
    #####:  889:		free(ent);
    %%%%%:  889-block  0
unconditional  0 never executed
        -:  890:	}
        -:  891:
    #####:  892:	return new_sel;
    %%%%%:  892-block  0
unconditional  0 never executed
        -:  893:}
        -:  894:
        -:  895:int
function sel_regex called 0 returned 0% blocks executed 0%
    #####:  896:sel_regex(char *str, const char *sel_path, mode_t filetype)
        -:  897:{
    #####:  898:	if (!str || !*str)
    %%%%%:  898-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  898-block  1
branch  2 never executed
branch  3 never executed
    #####:  899:		return -1;
    %%%%%:  899-block  0
unconditional  0 never executed
        -:  900:
    #####:  901:	char *pattern = str;
        -:  902:
    #####:  903:	int invert = 0;
    #####:  904:	if (*pattern == '!') {
    %%%%%:  904-block  0
branch  0 never executed
branch  1 never executed
    #####:  905:		pattern++;
    #####:  906:		invert = 1;
    %%%%%:  906-block  0
unconditional  0 never executed
        -:  907:	}
        -:  908:
        -:  909:	regex_t regex;
    #####:  910:	if (regcomp(&regex, pattern, REG_NOSUB | REG_EXTENDED) != EXIT_SUCCESS) {
    %%%%%:  910-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  911:		fprintf(stderr, _("%s: sel: %s: Invalid regular "
    %%%%%:  911-block  0
call    0 never executed
        -:  912:				"expression\n"), PROGRAM_NAME, str);
        -:  913:
    #####:  914:		regfree(&regex);
call    0 never executed
    #####:  915:		return -1;
unconditional  0 never executed
        -:  916:	}
        -:  917:
    #####:  918:	int new_sel = 0, i;
        -:  919:
    #####:  920:	if (!sel_path) { /* Check pattern (STR) against files in CWD */
    %%%%%:  920-block  0
branch  0 never executed
branch  1 never executed
    #####:  921:		i = (int)files;
    #####:  922:		while (--i >= 0) {
    %%%%%:  922-block  0
unconditional  0 never executed
    %%%%%:  922-block  1
branch  1 never executed
branch  2 never executed
        -:  923:
    #####:  924:			if (filetype && file_info[i].type != filetype)
    %%%%%:  924-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  924-block  1
branch  2 never executed
branch  3 never executed
    #####:  925:				continue;
    %%%%%:  925-block  0
unconditional  0 never executed
        -:  926:
        -:  927:			char tmp_path[PATH_MAX];
    #####:  928:			sprintf(tmp_path, "%s/%s", ws[cur_ws].path, file_info[i].name);
        -:  929:
    #####:  930:			if (regexec(&regex, file_info[i].name, 0, NULL, 0) == EXIT_SUCCESS) {
    %%%%%:  930-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  931:				if (!invert)
    %%%%%:  931-block  0
branch  0 never executed
branch  1 never executed
    #####:  932:					new_sel += select_file(tmp_path);
    %%%%%:  932-block  0
call    0 never executed
unconditional  1 never executed
    #####:  933:			} else if (invert)
    %%%%%:  933-block  0
branch  0 never executed
branch  1 never executed
    #####:  934:				new_sel += select_file(tmp_path);
    %%%%%:  934-block  0
call    0 never executed
unconditional  1 never executed
        -:  935:		}
        -:  936:	}
        -:  937:
        -:  938:	else { /* Check pattern against files in SEL_PATH */
        -:  939:
    #####:  940:		struct dirent **list = (struct dirent **)NULL;
    #####:  941:		int filesn = scandir(sel_path, &list, skip_files, xalphasort);
    %%%%%:  941-block  0
call    0 never executed
        -:  942:
    #####:  943:		if (filesn == -1) {
branch  0 never executed
branch  1 never executed
    #####:  944:			fprintf(stderr, "sel: %s: %s\n", sel_path, strerror(errno));
    %%%%%:  944-block  0
call    0 never executed
call    1 never executed
    #####:  945:			return -1;
unconditional  0 never executed
        -:  946:		}
        -:  947:
    #####:  948:		mode_t t = 0;
    #####:  949:		if (filetype) {
    %%%%%:  949-block  0
branch  0 never executed
branch  1 never executed
        -:  950:
    #####:  951:			switch (filetype) {
    %%%%%:  951-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  952:			case DT_DIR:
    #####:  953:				t = S_IFDIR;
    #####:  954:				break;
    %%%%%:  954-block  0
unconditional  0 never executed
    #####:  955:			case DT_REG:
    #####:  956:				t = S_IFREG;
    #####:  957:				break;
    %%%%%:  957-block  0
unconditional  0 never executed
    #####:  958:			case DT_LNK:
    #####:  959:				t = S_IFLNK;
    #####:  960:				break;
    %%%%%:  960-block  0
unconditional  0 never executed
    #####:  961:			case DT_SOCK:
    #####:  962:				t = S_IFSOCK;
    #####:  963:				break;
    %%%%%:  963-block  0
unconditional  0 never executed
    #####:  964:			case DT_FIFO:
    #####:  965:				t = S_IFIFO;
    #####:  966:				break;
    %%%%%:  966-block  0
unconditional  0 never executed
    #####:  967:			case DT_BLK:
    #####:  968:				t = S_IFBLK;
    #####:  969:				break;
    %%%%%:  969-block  0
unconditional  0 never executed
    #####:  970:			case DT_CHR:
    #####:  971:				t = S_IFCHR;
    #####:  972:				break;
    %%%%%:  972-block  0
unconditional  0 never executed
        -:  973:			}
        -:  974:		}
        -:  975:
    #####:  976:		i = (int)filesn;
    #####:  977:		while (--i >= 0) {
    %%%%%:  977-block  0
unconditional  0 never executed
    %%%%%:  977-block  1
branch  1 never executed
branch  2 never executed
        -:  978:
    #####:  979:			if (filetype) {
    %%%%%:  979-block  0
branch  0 never executed
branch  1 never executed
        -:  980:				struct stat attr;
        -:  981:
    #####:  982:				if (lstat(list[i]->d_name, &attr) != -1) {
    %%%%%:  982-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  983:					if ((attr.st_mode & S_IFMT) != t) {
    %%%%%:  983-block  0
branch  0 never executed
branch  1 never executed
    #####:  984:						free(list[i]);
    #####:  985:						continue;
    %%%%%:  985-block  0
unconditional  0 never executed
        -:  986:					}
        -:  987:				}
        -:  988:			}
        -:  989:
    #####:  990:			char *tmp_path = (char *)xnmalloc(strlen(sel_path)
    #####:  991:							+ strlen(list[i]->d_name) + 2, sizeof(char));
    %%%%%:  991-block  0
call    0 never executed
    #####:  992:			sprintf(tmp_path, "%s/%s", sel_path, list[i]->d_name);
        -:  993:
    #####:  994:			if (regexec(&regex, list[i]->d_name, 0, NULL, 0) == EXIT_SUCCESS) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  995:				if (!invert)
    %%%%%:  995-block  0
branch  0 never executed
branch  1 never executed
    #####:  996:					new_sel += select_file(tmp_path);
    %%%%%:  996-block  0
call    0 never executed
unconditional  1 never executed
        -:  997:			}
        -:  998:
    #####:  999:			else if (invert)
    %%%%%:  999-block  0
branch  0 never executed
branch  1 never executed
    #####: 1000:				new_sel += select_file(tmp_path);
    %%%%%: 1000-block  0
call    0 never executed
unconditional  1 never executed
        -: 1001:
    #####: 1002:			free(tmp_path);
    #####: 1003:			free(list[i]);
    %%%%%: 1003-block  0
unconditional  0 never executed
        -: 1004:		}
        -: 1005:
    #####: 1006:		free(list);
    %%%%%: 1006-block  0
unconditional  0 never executed
        -: 1007:	}
        -: 1008:
    #####: 1009:	regfree(&regex);
    %%%%%: 1009-block  0
call    0 never executed
        -: 1010:
    #####: 1011:	return new_sel;
unconditional  0 never executed
        -: 1012:}
