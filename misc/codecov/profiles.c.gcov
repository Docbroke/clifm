        -:    0:Source:profiles.c
        -:    1:/* profiles.c -- functions controlling user profiles */
        -:    2:
        -:    3:/*
        -:    4: * This file is part of CliFM
        -:    5: * 
        -:    6: * Copyright (C) 2016-2021, L. Abramovich <johndoe.arch@outlook.com>
        -:    7: * All rights reserved.
        -:    8:
        -:    9: * CliFM is free software; you can redistribute it and/or modify
        -:   10: * it under the terms of the GNU General Public License as published by
        -:   11: * the Free Software Foundation; either version 2 of the License, or
        -:   12: * (at your option) any later version.
        -:   13: *
        -:   14: * CliFM is distributed in the hope that it will be useful,
        -:   15: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   16: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   17: * GNU General Public License for more details.
        -:   18: *
        -:   19: * You should have received a copy of the GNU General Public License
        -:   20: * along with this program; if not, write to the Free Software
        -:   21: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
        -:   22: * MA 02110-1301, USA.
        -:   23:*/
        -:   24:
        -:   25:#include "helpers.h"
        -:   26:
        -:   27:#include <errno.h>
        -:   28:#include <stdio.h>
        -:   29:#include <string.h>
        -:   30:#include <unistd.h>
        -:   31:#include <sys/stat.h>
        -:   32:#include <readline/history.h>
        -:   33:
        -:   34:#include "actions.h"
        -:   35:#include "aux.h"
        -:   36:#include "bookmarks.h"
        -:   37:#include "checks.h"
        -:   38:#include "config.h"
        -:   39:#include "exec.h"
        -:   40:#include "history.h"
        -:   41:#include "init.h"
        -:   42:#include "listing.h"
        -:   43:#include "mime.h"
        -:   44:#include "misc.h"
        -:   45:#include "navigation.h"
        -:   46:#include "profiles.h"
        -:   47:#include "sort.h"
        -:   48:#include "messages.h"
        -:   49:
        -:   50:int
function get_profile_names called 6 returned 100% blocks executed 89%
        6:   51:get_profile_names(void)
        -:   52:{
        6:   53:	if (!config_dir_gral)
        6:   53-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:   54:		return EXIT_FAILURE;
    %%%%%:   54-block  0
unconditional  0 never executed
        -:   55:
        6:   56:	char *pf_dir = (char *)xnmalloc(strlen(config_dir_gral) + 10, sizeof(char));
        6:   56-block  0
call    0 returned 6
        6:   57:	sprintf(pf_dir, "%s/profiles", config_dir_gral);
        -:   58:
        6:   59:	struct dirent **profs = (struct dirent **)NULL;
        6:   60:	int files_n = scandir(pf_dir, &profs, NULL, xalphasort);
call    0 returned 6
        -:   61:
        6:   62:	if (files_n == -1) {
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:   63:		free(pf_dir);
    #####:   64:		return EXIT_FAILURE;
    %%%%%:   64-block  0
unconditional  0 never executed
        -:   65:	}
        -:   66:
        6:   67:	size_t i, pf_n = 0;
        -:   68:#if !defined(_DIRENT_HAVE_D_TYPE)
        -:   69:	struct stat attr;
        -:   70:#endif
        -:   71:
       45:   72:	for (i = 0; i < (size_t)files_n; i++) {
        6:   72-block  0
unconditional  0 taken 6
       45:   72-block  1
branch  1 taken 39
branch  2 taken 6 (fallthrough)
        -:   73:
        -:   74:#if !defined(_DIRENT_HAVE_D_TYPE)
        -:   75:		char tmp[PATH_MAX];
        -:   76:		snprintf(tmp, PATH_MAX - 1, "%s/%s", pf_dir,profs[i]->d_name);
        -:   77:		if (lstat(tmp, &attr) == -1)
        -:   78:			continue;
        -:   79:		if ((attr.st_mode & S_IFMT) == S_IFDIR
        -:   80:#else
       39:   81:		if (profs[i]->d_type == DT_DIR
       39:   81-block  0
branch  0 taken 39 (fallthrough)
branch  1 taken 0
        -:   82:#endif
        -:   83:		    /* Discard ".", "..", and hidden dirs */
       39:   84:		    && *profs[i]->d_name != '.') {
       39:   84-block  0
branch  0 taken 27 (fallthrough)
branch  1 taken 12
       27:   85:			profile_names = (char **)xrealloc(profile_names, (pf_n + 1)
       27:   85-block  0
call    0 returned 27
        -:   86:												* sizeof(char *));
       27:   87:			profile_names[pf_n++] = savestring(profs[i]->d_name,
unconditional  0 taken 27
       27:   88:			    strlen(profs[i]->d_name));
call    0 returned 27
        -:   89:		}
        -:   90:
       39:   91:		free(profs[i]);
       39:   91-block  0
unconditional  0 taken 39
        -:   92:	}
        -:   93:
        6:   94:	free(pf_dir);
        6:   95:	free(profs);
        -:   96:
        6:   97:	profile_names = (char **)xrealloc(profile_names, (pf_n + 1) * sizeof(char *));
        6:   97-block  0
call    0 returned 6
        6:   98:	profile_names[pf_n] = (char *)NULL;
        -:   99:
        6:  100:	return EXIT_SUCCESS;
unconditional  0 taken 6
        -:  101:}
        -:  102:
        -:  103:int
function profile_function called 4 returned 100% blocks executed 51%
        4:  104:profile_function(char **comm)
        -:  105:{
        4:  106:	if (xargs.stealth_mode == 1) {
        4:  106-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  107:		printf("%s: The profile function is disabled in stealth mode\n",
    %%%%%:  107-block  0
call    0 never executed
        -:  108:		    PROGRAM_NAME);
    #####:  109:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  110:	}
        -:  111:
        4:  112:	int exit_status = EXIT_SUCCESS;
        -:  113:
        4:  114:	if (comm[1]) {
        4:  114-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
       4*:  115:		if (*comm[1] == '-' && strcmp(comm[1], "--help") == 0)
        4:  115-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%:  115-block  1
branch  2 never executed
branch  3 never executed
    #####:  116:			puts(_(PROFILES_USAGE));
    %%%%%:  116-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  117:
        -:  118:		/* List profiles */
        4:  119:		else if (comm[1] && (strcmp(comm[1], "ls") == 0
        4:  119-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  119-block  1
branch  2 taken 4 (fallthrough)
branch  3 taken 0
       4*:  120:		|| strcmp(comm[1], "list") == 0)) {
        4:  120-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%:  120-block  1
unconditional  2 never executed
        -:  121:			size_t i;
        -:  122:
    #####:  123:			for (i = 0; profile_names[i]; i++)
    %%%%%:  123-block  0
unconditional  0 never executed
unconditional  1 never executed
    %%%%%:  123-block  1
branch  2 never executed
branch  3 never executed
    #####:  124:				printf("%s\n", profile_names[i]);
    %%%%%:  124-block  0
call    0 never executed
        -:  125:		}
        -:  126:
        -:  127:		/* Create a new profile */
        4:  128:		else if (strcmp(comm[1], "add") == 0)
        4:  128-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -:  129:
        1:  130:			if (comm[2]) {
        1:  130-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  131:				exit_status = profile_add(comm[2]);
        1:  131-block  0
call    0 returned 1
unconditional  1 taken 1
        -:  132:			}
        -:  133:
        -:  134:			else {
    #####:  135:				fprintf(stderr, "%s\n", PROFILES_USAGE);
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:				exit_status = EXIT_FAILURE;
unconditional  0 never executed
        -:  137:			}
        -:  138:
        -:  139:		/* Delete a profile */
        3:  140:		else if (*comm[1] == 'd' && strcmp(comm[1], "del") == 0)
        3:  140-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  140-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  141:			if (comm[2])
        1:  141-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  142:				exit_status = profile_del(comm[2]);
        1:  142-block  0
call    0 returned 1
unconditional  1 taken 1
        -:  143:			else {
    #####:  144:				fprintf(stderr, "%s\n", PROFILES_USAGE);
    %%%%%:  144-block  0
call    0 never executed
    #####:  145:				exit_status = EXIT_FAILURE;
unconditional  0 never executed
        -:  146:			}
        -:  147:
        -:  148:		/* Switch to another profile */
        2:  149:		else if (*comm[1] == 's' && strcmp(comm[1], "set") == 0) {
        2:  149-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  149-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        -:  150:
        2:  151:			if (comm[2])
        2:  151-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  152:				exit_status = profile_set(comm[2]);
        2:  152-block  0
call    0 returned 2
unconditional  1 taken 2
        -:  153:
        -:  154:			else {
    #####:  155:				fprintf(stderr, "%s\n", PROFILES_USAGE);
    %%%%%:  155-block  0
call    0 never executed
    #####:  156:				exit_status = EXIT_FAILURE;
unconditional  0 never executed
        -:  157:			}
        -:  158:		}
        -:  159:
        -:  160:		/* None of the above == error */
        -:  161:		else {
    #####:  162:			fprintf(stderr, "%s\n", PROFILES_USAGE);
    %%%%%:  162-block  0
call    0 never executed
    #####:  163:			exit_status = EXIT_FAILURE;
unconditional  0 never executed
        -:  164:		}
        -:  165:	}
        -:  166:
        -:  167:	/* If only "pr" print the current profile name */
    #####:  168:	else if (!alt_profile)
    %%%%%:  168-block  0
branch  0 never executed
branch  1 never executed
    #####:  169:		printf("%s: profile: default\n", PROGRAM_NAME);
    %%%%%:  169-block  0
call    0 never executed
unconditional  1 never executed
        -:  170:
        -:  171:	else
    #####:  172:		printf("%s: profile: '%s'\n", PROGRAM_NAME, alt_profile);
    %%%%%:  172-block  0
call    0 never executed
unconditional  1 never executed
        -:  173:
        4:  174:	return exit_status;
        4:  174-block  0
unconditional  0 taken 4
        -:  175:}
        -:  176:
        -:  177:/* Switch profile to PROF */
        -:  178:int
function profile_set called 9 returned 100% blocks executed 73%
        9:  179:profile_set(const char *prof)
        -:  180:{
        9:  181:	if (xargs.stealth_mode == 1) {
        9:  181-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    #####:  182:		printf("%s: The profile function is disabled in stealth mode\n",
    %%%%%:  182-block  0
call    0 never executed
        -:  183:		    PROGRAM_NAME);
    #####:  184:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  185:	}
        -:  186:
        9:  187:	if (!prof)
        9:  187-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    #####:  188:		return EXIT_FAILURE;
    %%%%%:  188-block  0
unconditional  0 never executed
        -:  189:
        -:  190:	/* Check if prof is a valid profile */
        9:  191:	int found = 0;
        -:  192:	int i;
        -:  193:
       21:  194:	for (i = 0; profile_names[i]; i++) {
        9:  194-block  0
unconditional  0 taken 9
       12:  194-block  1
unconditional  1 taken 12
       21:  194-block  2
branch  2 taken 21
branch  3 taken 0 (fallthrough)
        -:  195:
       21:  196:		if (*prof == *profile_names[i] && strcmp(prof, profile_names[i]) == 0) {
       21:  196-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 9
       12:  196-block  1
branch  2 taken 9 (fallthrough)
branch  3 taken 3
        9:  197:			found = 1;
        9:  198:			break;
        9:  198-block  0
unconditional  0 taken 9
        -:  199:		}
        -:  200:	}
        -:  201:
        9:  202:	if (!found) {
        9:  202-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    #####:  203:		fprintf(stderr, _("%s: %s: No such profile\nTo add a new "
    %%%%%:  203-block  0
call    0 never executed
call    1 never executed
        -:  204:				  "profile enter 'pf add PROFILE'\n"),
        -:  205:		    PROGRAM_NAME, prof);
        -:  206:
    #####:  207:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  208:	}
        -:  209:
        -:  210:	/* If changing to the current profile, do nothing */
       9*:  211:	if ((!alt_profile && *prof == 'd' && strcmp(prof, "default") == 0)
        9:  211-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 6
        3:  211-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 3
    %%%%%:  211-block  2
branch  4 never executed
branch  5 never executed
        9:  212:	|| (alt_profile && *prof == *alt_profile && strcmp(prof, alt_profile) == 0)) {
        9:  212-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 3
        6:  212-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 4
        2:  212-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
        -:  213:
    #####:  214:		printf(_("%s: '%s' is the current profile\n"), PROGRAM_NAME,
    %%%%%:  214-block  0
call    0 never executed
call    1 never executed
        -:  215:		    prof);
        -:  216:
    #####:  217:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  218:	}
        -:  219:
        9:  220:	if (restore_last_path)
        9:  220-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 4
        5:  221:		save_last_path();
        5:  221-block  0
call    0 returned 5
unconditional  1 taken 5
        -:  222:
        9:  223:	if (alt_profile) {
        9:  223-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 3
        6:  224:		free(alt_profile);
        6:  225:		alt_profile = (char *)NULL;
        6:  225-block  0
unconditional  0 taken 6
        -:  226:	}
        -:  227:
        -:  228:	/* Set the new profile value */
        -:  229:	/* Default profile == (alt_profile == NULL) */
        9:  230:	if (*prof != 'd' || strcmp(prof, "default") != 0)
        9:  230-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 6
        3:  230-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 3
        6:  231:		alt_profile = savestring(prof, strlen(prof));
        6:  231-block  0
call    0 returned 6
unconditional  1 taken 6
        -:  232:
        -:  233:	/* Reset everything */
        9:  234:	reload_config();
        9:  234-block  0
call    0 returned 9
        -:  235:
        -:  236:	/* Check whether we have a working shell */
        9:  237:	if (access(user.shell, X_OK) == -1) {
call    0 returned 9
branch  1 taken 0 (fallthrough)
branch  2 taken 9
    #####:  238:		_err('w', PRINT_PROMPT, _("%s: %s: System shell not found. Please "
    %%%%%:  238-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  239:				  "edit the configuration file to specify a working shell.\n"),
        -:  240:				PROGRAM_NAME, user.shell);
        -:  241:	}
        -:  242:
        9:  243:	i = (int)usrvar_n;
        9:  244:	while (--i >= 0) {
        9:  244-block  0
unconditional  0 taken 9
        9:  244-block  1
branch  1 taken 0
branch  2 taken 9 (fallthrough)
    #####:  245:		free(usr_var[i].name);
    #####:  246:		free(usr_var[i].value);
    %%%%%:  246-block  0
unconditional  0 never executed
        -:  247:	}
        9:  248:	usrvar_n = 0;
        -:  249:
        9:  250:	i = (int)kbinds_n;
       80:  251:	while (--i >= 0) {
        9:  251-block  0
unconditional  0 taken 9
       80:  251-block  1
branch  1 taken 71
branch  2 taken 9 (fallthrough)
       71:  252:		free(kbinds[i].function);
       71:  253:		free(kbinds[i].key);
       71:  253-block  0
unconditional  0 taken 71
        -:  254:	}
        9:  255:	kbinds_n = 0;
        -:  256:
        9:  257:	i = (int)actions_n;
      144:  258:	while (--i >= 0) {
        9:  258-block  0
unconditional  0 taken 9
      144:  258-block  1
branch  1 taken 135
branch  2 taken 9 (fallthrough)
      135:  259:		free(usr_actions[i].name);
      135:  260:		free(usr_actions[i].value);
      135:  260-block  0
unconditional  0 taken 135
        -:  261:	}
        9:  262:	actions_n = 0;
        -:  263:
        -:  264:	/*  my_rl_unbind_functions();
        -:  265:
        -:  266:	create_kbinds_file();
        -:  267:
        -:  268:	load_keybinds();
        -:  269:
        -:  270:	rl_unbind_function_in_map(rl_hidden, rl_get_keymap());
        -:  271:	rl_bind_keyseq(find_key("toggle-hidden"), rl_hidden);
        -:  272:	my_rl_bind_functions(); */
        -:  273:
        9:  274:	exec_profile();
        9:  274-block  0
call    0 returned 9
        -:  275:
        9:  276:	if (msgs_n) {
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    #####:  277:		i = (int)msgs_n;
    #####:  278:		while (--i >= 0)
    %%%%%:  278-block  0
unconditional  0 never executed
    %%%%%:  278-block  1
branch  1 never executed
branch  2 never executed
    #####:  279:			free(messages[i]);
    %%%%%:  279-block  0
unconditional  0 never executed
        -:  280:	}
        9:  281:	msgs_n = 0;
        -:  282:
        9:  283:	if (config_ok) {
        9:  283-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        -:  284:		/* Limit the log files size */
        9:  285:		check_file_size(log_file, max_log);
        9:  285-block  0
call    0 returned 9
        9:  286:		check_file_size(msg_log_file, max_log);
call    0 returned 9
        -:  287:
        -:  288:		/* Reset history */
        9:  289:		if (access(hist_file, F_OK | W_OK) == 0) {
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0
        9:  290:			clear_history(); /* This is for readline */
        9:  290-block  0
call    0 returned 9
        9:  291:			read_history(hist_file);
call    0 returned 9
        9:  292:			history_truncate_file(hist_file, max_hist);
call    0 returned 9
unconditional  1 taken 9
        -:  293:		}
        -:  294:
        -:  295:		else {
    #####:  296:			FILE *hist_fp = fopen(hist_file, "w");
    %%%%%:  296-block  0
call    0 never executed
        -:  297:
    #####:  298:			if (hist_fp) {
branch  0 never executed
branch  1 never executed
    #####:  299:				fputs("edit\n", hist_fp);
    %%%%%:  299-block  0
call    0 never executed
    #####:  300:				fclose(hist_fp);
call    0 never executed
unconditional  1 never executed
        -:  301:			}
        -:  302:
        -:  303:			else {
    #####:  304:				_err('w', PRINT_PROMPT, _("%s: Error opening the "
    %%%%%:  304-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  305:						"history file\n"), PROGRAM_NAME);
        -:  306:			}
        -:  307:		}
        -:  308:
        9:  309:		get_history(); /* This is only for us */
        9:  309-block  0
call    0 returned 9
unconditional  1 taken 9
        -:  310:	}
        -:  311:
        9:  312:	free_bookmarks();
        9:  312-block  0
call    0 returned 9
        9:  313:	load_bookmarks();
call    0 returned 9
        -:  314:
        9:  315:	load_actions();
call    0 returned 9
        -:  316:
        -:  317:	/* Reload PATH commands (actions are profile specific) */
        9:  318:	if (bin_commands) {
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        -:  319:
    26284:  320:		for (i = 0; bin_commands[i]; i++)
        9:  320-block  0
unconditional  0 taken 9
    26284:  320-block  1
branch  1 taken 26275
branch  2 taken 9 (fallthrough)
    26275:  321:			free(bin_commands[i]);
    26275:  321-block  0
unconditional  0 taken 26275
        -:  322:
        9:  323:		free(bin_commands);
        9:  324:		bin_commands = (char **)NULL;
        9:  324-block  0
unconditional  0 taken 9
        -:  325:	}
        -:  326:
        9:  327:	if (paths) {
        9:  327-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        -:  328:
        9:  329:		i = (int)path_n;
       63:  330:		while (--i >= 0)
        9:  330-block  0
unconditional  0 taken 9
       63:  330-block  1
branch  1 taken 54
branch  2 taken 9 (fallthrough)
       54:  331:			free(paths[i]);
       54:  331-block  0
unconditional  0 taken 54
        -:  332:	}
        -:  333:
        9:  334:	path_n = (size_t)get_path_env();
        9:  334-block  0
call    0 returned 9
        -:  335:
        9:  336:	get_path_programs();
call    0 returned 9
        -:  337:
        9:  338:	i = MAX_WS;
       81:  339:	while (--i >= 0) {
unconditional  0 taken 9
       81:  339-block  0
branch  1 taken 72
branch  2 taken 9 (fallthrough)
       72:  340:		free(ws[i].path);
       72:  341:		ws[i].path = (char *)NULL;
       72:  341-block  0
unconditional  0 taken 72
        -:  342:	}
        -:  343:
        9:  344:	cur_ws = UNSET;
        -:  345:
        9:  346:	if (restore_last_path)
        9:  346-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 4
        5:  347:		get_last_path();
        5:  347-block  0
call    0 returned 5
unconditional  1 taken 5
        -:  348:
        9:  349:	if (cur_ws == UNSET)
        9:  349-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 4
        5:  350:		cur_ws = DEF_CUR_WS;
        5:  350-block  0
unconditional  0 taken 5
        -:  351:
        9:  352:	if (!ws[cur_ws].path) {
        9:  352-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 4
        5:  353:		char cwd[PATH_MAX] = "";
        5:  354:		if (getcwd(cwd, sizeof(cwd)) == NULL) {}
        5:  354-block  0
call    0 returned 5
        5:  355:		if (!*cwd) {
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:  356:			fprintf(stderr, "%s: %s\n", PROGRAM_NAME, strerror(errno));
    %%%%%:  356-block  0
call    0 never executed
call    1 never executed
    #####:  357:			exit(EXIT_FAILURE);
call    0 never executed
        -:  358:		}
        5:  359:		ws[cur_ws].path = savestring(cwd, strlen(cwd));
        5:  359-block  0
call    0 returned 5
unconditional  1 taken 5
        -:  360:	}
        -:  361:
        9:  362:	if (xchdir(ws[cur_ws].path, SET_TITLE) == -1) {
        9:  362-block  0
call    0 returned 9
branch  1 taken 0 (fallthrough)
branch  2 taken 9
    #####:  363:		fprintf(stderr, "%s: %s: %s\n", PROGRAM_NAME, ws[cur_ws].path,
call    0 never executed
    #####:  364:		    strerror(errno));
    %%%%%:  364-block  0
call    0 never executed
    #####:  365:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  366:	}
        -:  367:
        9:  368:	int exit_status = EXIT_SUCCESS;
        -:  369:
        9:  370:	if (cd_lists_on_the_fly) {
        9:  370-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        9:  371:		free_dirlist();
        9:  371-block  0
call    0 returned 9
        9:  372:		exit_status = list_dir();
call    0 returned 9
unconditional  1 taken 9
        -:  373:	}
        -:  374:
        9:  375:	return exit_status;
        9:  375-block  0
unconditional  0 taken 9
        -:  376:}
        -:  377:
        -:  378:int
function profile_add called 1 returned 100% blocks executed 62%
        1:  379:profile_add(const char *prof)
        -:  380:{
        1:  381:	if (!prof)
        1:  381-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  382:		return EXIT_FAILURE;
    %%%%%:  382-block  0
unconditional  0 never executed
        -:  383:
        1:  384:	int found = 0;
        -:  385:	size_t i;
        -:  386:
        6:  387:	for (i = 0; profile_names[i]; i++) {
        1:  387-block  0
unconditional  0 taken 1
        5:  387-block  1
unconditional  1 taken 5
        6:  387-block  2
branch  2 taken 5
branch  3 taken 1 (fallthrough)
        -:  388:
       5*:  389:		if (*prof == *profile_names[i] && strcmp(prof, profile_names[i]) == 0) {
        5:  389-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    %%%%%:  389-block  1
branch  2 never executed
branch  3 never executed
    #####:  390:			found = 1;
    #####:  391:			break;
    %%%%%:  391-block  0
unconditional  0 never executed
        -:  392:		}
        -:  393:	}
        -:  394:
        1:  395:	if (found) {
        1:  395-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  396:		fprintf(stderr, _("%s: %s: Profile already exists\n"), PROGRAM_NAME, prof);
    %%%%%:  396-block  0
call    0 never executed
call    1 never executed
    #####:  397:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  398:	}
        -:  399:
        1:  400:	if (!home_ok) {
        1:  400-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  401:		fprintf(stderr, _("%s: %s: Cannot create profile: Home "
    %%%%%:  401-block  0
call    0 never executed
call    1 never executed
        -:  402:				"directory not found\n"), PROGRAM_NAME, prof);
    #####:  403:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  404:	}
        -:  405:
        1:  406:	size_t pnl_len = strlen(PNL);
        -:  407:	/* ### GENERATE PROGRAM'S CONFIG DIRECTORY NAME ### */
        1:  408:	char *nconfig_dir = (char *)xnmalloc(strlen(config_dir_gral) + strlen(prof) + 11, sizeof(char));
        1:  408-block  0
call    0 returned 1
        1:  409:	sprintf(nconfig_dir, "%s/profiles/%s", config_dir_gral, prof);
        -:  410:
        -:  411:	/* #### CREATE THE CONFIG DIR #### */
        1:  412:	char *tmp_cmd[] = {"mkdir", "-p", nconfig_dir, NULL};
        1:  413:	int ret = launch_execve(tmp_cmd, FOREGROUND, E_NOFLAG);
call    0 returned 1
        -:  414:
        1:  415:	if (ret != EXIT_SUCCESS) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  416:		fprintf(stderr, _("%s: mkdir: %s: Error creating "
    %%%%%:  416-block  0
call    0 never executed
call    1 never executed
        -:  417:			"configuration directory\n"), PROGRAM_NAME, nconfig_dir);
        -:  418:
    #####:  419:		free(nconfig_dir);
        -:  420:
    #####:  421:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  422:	}
        -:  423:
        -:  424:	/* If the config dir is fine, generate config file names */
        1:  425:	int exit_status = EXIT_SUCCESS;
        1:  426:	size_t config_len = strlen(nconfig_dir);
        -:  427:
        1:  428:	char *nconfig_file = (char *)xnmalloc(config_len + pnl_len + 4,
        1:  428-block  0
call    0 returned 1
        -:  429:	    sizeof(char));
        1:  430:	sprintf(nconfig_file, "%s/%src", nconfig_dir, PNL);
        1:  431:	char *nhist_file = (char *)xnmalloc(config_len + 13, sizeof(char));
call    0 returned 1
        1:  432:	sprintf(nhist_file, "%s/history.cfm", nconfig_dir);
        1:  433:	char *nmime_file = (char *)xnmalloc(config_len + 14, sizeof(char));
call    0 returned 1
        1:  434:	sprintf(nmime_file, "%s/mimelist.cfm", nconfig_dir);
        -:  435:
        -:  436:	/* Create config files */
        -:  437:
        -:  438:	/* #### CREATE THE HISTORY FILE #### */
        1:  439:	FILE *hist_fp = fopen(nhist_file, "w+");
call    0 returned 1
        -:  440:
        1:  441:	if (!hist_fp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  442:		fprintf(stderr, "%s: fopen: %s: %s\n", PROGRAM_NAME,
call    0 never executed
    #####:  443:		    nhist_file, strerror(errno));
    %%%%%:  443-block  0
call    0 never executed
    #####:  444:		exit_status = EXIT_FAILURE;
unconditional  0 never executed
        -:  445:	} else {
        -:  446:		/* To avoid malloc errors in read_history(), do not create
        -:  447:		 * an empty file */
        1:  448:		fputs("edit\n", hist_fp);
        1:  448-block  0
call    0 returned 1
        1:  449:		fclose(hist_fp);
call    0 returned 1
unconditional  1 taken 1
        -:  450:	}
        -:  451:
        -:  452:	/* #### CREATE THE MIME CONFIG FILE #### */
        1:  453:	if (create_mime_file(nmime_file, 1) != EXIT_SUCCESS)
        1:  453-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  454:		exit_status = EXIT_FAILURE;
    %%%%%:  454-block  0
unconditional  0 never executed
        -:  455:
        -:  456:	/* #### CREATE THE CONFIG FILE #### */
        1:  457:	if (create_config(nconfig_file) != EXIT_SUCCESS)
        1:  457-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  458:		exit_status = EXIT_FAILURE;
    %%%%%:  458-block  0
unconditional  0 never executed
        -:  459:
        -:  460:	/* Free stuff */
        1:  461:	free(nconfig_dir);
        1:  462:	free(nconfig_file);
        1:  463:	free(nhist_file);
        1:  464:	free(nmime_file);
        -:  465:
        1:  466:	if (exit_status == EXIT_SUCCESS) {
        1:  466-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  467:		printf(_("%s: '%s': Profile succesfully created\n"), PROGRAM_NAME, prof);
        1:  467-block  0
call    0 returned 1
call    1 returned 1
        -:  468:
        6:  469:		for (i = 0; profile_names[i]; i++)
unconditional  0 taken 1
        6:  469-block  0
branch  1 taken 5
branch  2 taken 1 (fallthrough)
        5:  470:			free(profile_names[i]);
        5:  470-block  0
unconditional  0 taken 5
        -:  471:
        1:  472:		get_profile_names();
        1:  472-block  0
call    0 returned 1
unconditional  1 taken 1
        -:  473:	} else {
    #####:  474:		fprintf(stderr, _("%s: %s: Error creating profile\n"),
    %%%%%:  474-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  475:		    PROGRAM_NAME, prof);
        -:  476:	}
        -:  477:
        1:  478:	return exit_status;
        1:  478-block  0
unconditional  0 taken 1
        -:  479:}
        -:  480:
        -:  481:int
function profile_del called 1 returned 100% blocks executed 70%
        1:  482:profile_del(const char *prof)
        -:  483:{
        1:  484:	if (xargs.stealth_mode == 1) {
        1:  484-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  485:		printf("%s: The profile function is disabled in stealth mode\n",
    %%%%%:  485-block  0
call    0 never executed
        -:  486:		    PROGRAM_NAME);
    #####:  487:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  488:	}
        -:  489:
        1:  490:	if (!prof)
        1:  490-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  491:		return EXIT_FAILURE;
    %%%%%:  491-block  0
unconditional  0 never executed
        -:  492:
        -:  493:	/* Check if prof is a valid profile */
        1:  494:	int found = 0;
        -:  495:	size_t i;
        2:  496:	for (i = 0; profile_names[i]; i++) {
        1:  496-block  0
unconditional  0 taken 1
        1:  496-block  1
unconditional  1 taken 1
        2:  496-block  2
branch  2 taken 2
branch  3 taken 0 (fallthrough)
        2:  497:		if (*prof == *profile_names[i] && strcmp(prof, profile_names[i]) == 0) {
        2:  497-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  497-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  498:			found = 1;
        1:  499:			break;
        1:  499-block  0
unconditional  0 taken 1
        -:  500:		}
        -:  501:	}
        -:  502:
        1:  503:	if (!found) {
        1:  503-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  504:		fprintf(stderr, _("%s: %s: No such profile\n"), PROGRAM_NAME, prof);
    %%%%%:  504-block  0
call    0 never executed
call    1 never executed
    #####:  505:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  506:	}
        -:  507:
        1:  508:	char *tmp = (char *)xnmalloc(strlen(config_dir_gral) + strlen(prof) + 11,
        1:  508-block  0
call    0 returned 1
        -:  509:															sizeof(char));
        1:  510:	sprintf(tmp, "%s/profiles/%s", config_dir_gral, prof);
        -:  511:
        1:  512:	char *cmd[] = {"rm", "-r", tmp, NULL};
        1:  513:	int ret = launch_execve(cmd, FOREGROUND, E_NOFLAG);
call    0 returned 1
        1:  514:	free(tmp);
        -:  515:
        1:  516:	if (ret == EXIT_SUCCESS) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  517:		printf(_("%s: '%s': Profile successfully removed\n"), PROGRAM_NAME, prof);
        1:  517-block  0
call    0 returned 1
call    1 returned 1
        -:  518:
        7:  519:		for (i = 0; profile_names[i]; i++)
unconditional  0 taken 1
        7:  519-block  0
branch  1 taken 6
branch  2 taken 1 (fallthrough)
        6:  520:			free(profile_names[i]);
        6:  520-block  0
unconditional  0 taken 6
        -:  521:
        1:  522:		get_profile_names();
        1:  522-block  0
call    0 returned 1
        -:  523:
        1:  524:		return EXIT_SUCCESS;
unconditional  0 taken 1
        -:  525:	}
        -:  526:
    #####:  527:	fprintf(stderr, _("%s: %s: Error removing profile\n"), PROGRAM_NAME, prof);
    %%%%%:  527-block  0
call    0 never executed
call    1 never executed
    #####:  528:	return EXIT_FAILURE;
unconditional  0 never executed
        -:  529:}
