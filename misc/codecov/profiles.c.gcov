        -:    0:Source:profiles.c
        -:    1:/* profiles.c -- functions controlling user profiles */
        -:    2:
        -:    3:/*
        -:    4: * This file is part of CliFM
        -:    5: * 
        -:    6: * Copyright (C) 2016-2021, L. Abramovich <johndoe.arch@outlook.com>
        -:    7: * All rights reserved.
        -:    8:
        -:    9: * CliFM is free software; you can redistribute it and/or modify
        -:   10: * it under the terms of the GNU General Public License as published by
        -:   11: * the Free Software Foundation; either version 2 of the License, or
        -:   12: * (at your option) any later version.
        -:   13: *
        -:   14: * CliFM is distributed in the hope that it will be useful,
        -:   15: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   16: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   17: * GNU General Public License for more details.
        -:   18: *
        -:   19: * You should have received a copy of the GNU General Public License
        -:   20: * along with this program; if not, write to the Free Software
        -:   21: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
        -:   22: * MA 02110-1301, USA.
        -:   23:*/
        -:   24:
        -:   25:#include "helpers.h"
        -:   26:
        -:   27:#include <errno.h>
        -:   28:#include <stdio.h>
        -:   29:#include <string.h>
        -:   30:#include <unistd.h>
        -:   31:#include <sys/stat.h>
        -:   32:#include <readline/history.h>
        -:   33:
        -:   34:#include "actions.h"
        -:   35:#include "aux.h"
        -:   36:#include "bookmarks.h"
        -:   37:#include "checks.h"
        -:   38:#include "config.h"
        -:   39:#include "exec.h"
        -:   40:#include "history.h"
        -:   41:#include "init.h"
        -:   42:#include "listing.h"
        -:   43:#include "mime.h"
        -:   44:#include "misc.h"
        -:   45:#include "navigation.h"
        -:   46:#include "profiles.h"
        -:   47:#include "sort.h"
        -:   48:
        -:   49:int
function get_profile_names called 1 returned 100% blocks executed 89%
        1:   50:get_profile_names(void)
        -:   51:{
        1:   52:	if (!CONFIG_DIR_GRAL)
        1:   52-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   53:		return EXIT_FAILURE;
    %%%%%:   53-block  0
unconditional  0 never executed
        -:   54:
        1:   55:	char *pf_dir = (char *)xnmalloc(strlen(CONFIG_DIR_GRAL) + 10, sizeof(char));
        1:   55-block  0
call    0 returned 1
        1:   56:	sprintf(pf_dir, "%s/profiles", CONFIG_DIR_GRAL);
        -:   57:
        1:   58:	struct dirent **profs = (struct dirent **)NULL;
        1:   59:	int files_n = scandir(pf_dir, &profs, NULL, xalphasort);
call    0 returned 1
        -:   60:
        1:   61:	free(pf_dir);
        1:   62:	pf_dir = (char *)NULL;
        -:   63:
        1:   64:	if (files_n == -1)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   65:		return EXIT_FAILURE;
    %%%%%:   65-block  0
unconditional  0 never executed
        -:   66:
        1:   67:	size_t i, pf_n = 0;
        -:   68:
        8:   69:	for (i = 0; i < (size_t)files_n; i++) {
        1:   69-block  0
unconditional  0 taken 1
        8:   69-block  1
branch  1 taken 7
branch  2 taken 1 (fallthrough)
        -:   70:
        7:   71:		if (profs[i]->d_type == DT_DIR
        7:   71-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        -:   72:		    /* Discard ".", "..", and hidden dirs */
        7:   73:		    && *profs[i]->d_name != '.') {
        7:   73-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 2
        5:   74:			profile_names = (char **)xrealloc(profile_names, (pf_n + 1)
        5:   74-block  0
call    0 returned 5
        -:   75:												* sizeof(char *));
        5:   76:			profile_names[pf_n++] = savestring(profs[i]->d_name,
unconditional  0 taken 5
        5:   77:			    strlen(profs[i]->d_name));
call    0 returned 5
        -:   78:		}
        -:   79:
        7:   80:		free(profs[i]);
        7:   80-block  0
unconditional  0 taken 7
        -:   81:	}
        -:   82:
        1:   83:	free(profs);
        1:   84:	profs = (struct dirent **)NULL;
        -:   85:
        1:   86:	profile_names = (char **)xrealloc(profile_names, (pf_n + 1) * sizeof(char *));
        1:   86-block  0
call    0 returned 1
        1:   87:	profile_names[pf_n] = (char *)NULL;
        -:   88:
        1:   89:	return EXIT_SUCCESS;
unconditional  0 taken 1
        -:   90:}
        -:   91:
        -:   92:int
function profile_function called 0 returned 0% blocks executed 0%
    #####:   93:profile_function(char **comm)
        -:   94:{
    #####:   95:	if (xargs.stealth_mode == 1) {
    %%%%%:   95-block  0
branch  0 never executed
branch  1 never executed
    #####:   96:		printf("%s: The profile function is disabled in stealth mode\n",
    %%%%%:   96-block  0
call    0 never executed
        -:   97:		    PROGRAM_NAME);
    #####:   98:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:   99:	}
        -:  100:
    #####:  101:	int exit_status = EXIT_SUCCESS;
        -:  102:
    #####:  103:	if (comm[1]) {
    %%%%%:  103-block  0
branch  0 never executed
branch  1 never executed
    #####:  104:		if (*comm[1] == '-' && strcmp(comm[1], "--help") == 0)
    %%%%%:  104-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  104-block  1
branch  2 never executed
branch  3 never executed
    #####:  105:			puts(_("Usage: pf, prof, profile [ls, list] [set, add, del PROFILE]"));
    %%%%%:  105-block  0
call    0 never executed
unconditional  1 never executed
        -:  106:
        -:  107:		/* List profiles */
    #####:  108:		else if (comm[1] && (strcmp(comm[1], "ls") == 0
    %%%%%:  108-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  108-block  1
branch  2 never executed
branch  3 never executed
    #####:  109:		|| strcmp(comm[1], "list") == 0)) {
    %%%%%:  109-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  109-block  1
unconditional  2 never executed
        -:  110:			size_t i;
        -:  111:
    #####:  112:			for (i = 0; profile_names[i]; i++)
    %%%%%:  112-block  0
unconditional  0 never executed
unconditional  1 never executed
    %%%%%:  112-block  1
branch  2 never executed
branch  3 never executed
    #####:  113:				printf("%s\n", profile_names[i]);
    %%%%%:  113-block  0
call    0 never executed
        -:  114:		}
        -:  115:
        -:  116:		/* Create a new profile */
    #####:  117:		else if (strcmp(comm[1], "add") == 0)
    %%%%%:  117-block  0
branch  0 never executed
branch  1 never executed
        -:  118:
    #####:  119:			if (comm[2]) {
    %%%%%:  119-block  0
branch  0 never executed
branch  1 never executed
    #####:  120:				exit_status = profile_add(comm[2]);
    %%%%%:  120-block  0
call    0 never executed
unconditional  1 never executed
        -:  121:			}
        -:  122:
        -:  123:			else {
    #####:  124:				fputs("Usage: pf, prof, profile add PROFILE\n", stderr);
    %%%%%:  124-block  0
call    0 never executed
    #####:  125:				exit_status = EXIT_FAILURE;
unconditional  0 never executed
        -:  126:			}
        -:  127:
        -:  128:		/* Delete a profile */
    #####:  129:		else if (*comm[1] == 'd' && strcmp(comm[1], "del") == 0)
    %%%%%:  129-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  129-block  1
branch  2 never executed
branch  3 never executed
    #####:  130:			if (comm[2])
    %%%%%:  130-block  0
branch  0 never executed
branch  1 never executed
    #####:  131:				exit_status = profile_del(comm[2]);
    %%%%%:  131-block  0
call    0 never executed
unconditional  1 never executed
        -:  132:			else {
    #####:  133:				fputs("Usage: pf, prof, profile del PROFILE\n", stderr);
    %%%%%:  133-block  0
call    0 never executed
    #####:  134:				exit_status = EXIT_FAILURE;
unconditional  0 never executed
        -:  135:			}
        -:  136:
        -:  137:		/* Switch to another profile */
    #####:  138:		else if (*comm[1] == 's' && strcmp(comm[1], "set") == 0) {
    %%%%%:  138-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  138-block  1
branch  2 never executed
branch  3 never executed
        -:  139:
    #####:  140:			if (comm[2])
    %%%%%:  140-block  0
branch  0 never executed
branch  1 never executed
    #####:  141:				exit_status = profile_set(comm[2]);
    %%%%%:  141-block  0
call    0 never executed
unconditional  1 never executed
        -:  142:
        -:  143:			else {
    #####:  144:				fputs("Usage: pf, prof, profile set PROFILE\n", stderr);
    %%%%%:  144-block  0
call    0 never executed
    #####:  145:				exit_status = EXIT_FAILURE;
unconditional  0 never executed
        -:  146:			}
        -:  147:		}
        -:  148:
        -:  149:		/* None of the above == error */
        -:  150:		else {
        -:  151:
    #####:  152:			fputs(_("Usage: pf, prof, profile [set, add, del PROFILE]\n"),
    %%%%%:  152-block  0
call    0 never executed
        -:  153:			    stderr);
        -:  154:
    #####:  155:			exit_status = EXIT_FAILURE;
unconditional  0 never executed
        -:  156:		}
        -:  157:	}
        -:  158:
        -:  159:	/* If only "pr" print the current profile name */
    #####:  160:	else if (!alt_profile)
    %%%%%:  160-block  0
branch  0 never executed
branch  1 never executed
    #####:  161:		printf("%s: profile: default\n", PROGRAM_NAME);
    %%%%%:  161-block  0
call    0 never executed
unconditional  1 never executed
        -:  162:
        -:  163:	else
    #####:  164:		printf("%s: profile: '%s'\n", PROGRAM_NAME, alt_profile);
    %%%%%:  164-block  0
call    0 never executed
unconditional  1 never executed
        -:  165:
    #####:  166:	return exit_status;
    %%%%%:  166-block  0
unconditional  0 never executed
        -:  167:}
        -:  168:
        -:  169:/* Switch profile to PROF */
        -:  170:int
function profile_set called 0 returned 0% blocks executed 0%
    #####:  171:profile_set(const char *prof)
        -:  172:{
    #####:  173:	if (xargs.stealth_mode == 1) {
    %%%%%:  173-block  0
branch  0 never executed
branch  1 never executed
    #####:  174:		printf("%s: The profile function is disabled in stealth mode\n",
    %%%%%:  174-block  0
call    0 never executed
        -:  175:		    PROGRAM_NAME);
    #####:  176:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  177:	}
        -:  178:
    #####:  179:	if (!prof)
    %%%%%:  179-block  0
branch  0 never executed
branch  1 never executed
    #####:  180:		return EXIT_FAILURE;
    %%%%%:  180-block  0
unconditional  0 never executed
        -:  181:
        -:  182:	/* Check if prof is a valid profile */
    #####:  183:	int found = 0;
        -:  184:	int i;
        -:  185:
    #####:  186:	for (i = 0; profile_names[i]; i++) {
    %%%%%:  186-block  0
unconditional  0 never executed
    %%%%%:  186-block  1
unconditional  1 never executed
    %%%%%:  186-block  2
branch  2 never executed
branch  3 never executed
        -:  187:
    #####:  188:		if (*prof == *profile_names[i] && strcmp(prof, profile_names[i]) == 0) {
    %%%%%:  188-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  188-block  1
branch  2 never executed
branch  3 never executed
    #####:  189:			found = 1;
    #####:  190:			break;
    %%%%%:  190-block  0
unconditional  0 never executed
        -:  191:		}
        -:  192:	}
        -:  193:
    #####:  194:	if (!found) {
    %%%%%:  194-block  0
branch  0 never executed
branch  1 never executed
    #####:  195:		fprintf(stderr, _("%s: %s: No such profile\nTo add a new "
    %%%%%:  195-block  0
call    0 never executed
        -:  196:				  "profile enter 'pf add PROFILE'\n"),
        -:  197:		    PROGRAM_NAME, prof);
        -:  198:
    #####:  199:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  200:	}
        -:  201:
        -:  202:	/* If changing to the current profile, do nothing */
    #####:  203:	if ((!alt_profile && *prof == 'd' && strcmp(prof, "default") == 0)
    %%%%%:  203-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  203-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  203-block  2
branch  4 never executed
branch  5 never executed
    #####:  204:	|| (alt_profile && *prof == *alt_profile && strcmp(prof, alt_profile) == 0)) {
    %%%%%:  204-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  204-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  204-block  2
branch  4 never executed
branch  5 never executed
        -:  205:
    #####:  206:		printf(_("%s: '%s' is the current profile\n"), PROGRAM_NAME,
    %%%%%:  206-block  0
call    0 never executed
        -:  207:		    prof);
        -:  208:
    #####:  209:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  210:	}
        -:  211:
    #####:  212:	if (restore_last_path)
    %%%%%:  212-block  0
branch  0 never executed
branch  1 never executed
    #####:  213:		save_last_path();
    %%%%%:  213-block  0
call    0 never executed
unconditional  1 never executed
        -:  214:
    #####:  215:	if (alt_profile) {
    %%%%%:  215-block  0
branch  0 never executed
branch  1 never executed
    #####:  216:		free(alt_profile);
    #####:  217:		alt_profile = (char *)NULL;
    %%%%%:  217-block  0
unconditional  0 never executed
        -:  218:	}
        -:  219:
        -:  220:	/* Set the new profile value */
        -:  221:	/* Default profile == (alt_profile == NULL) */
    #####:  222:	if (*prof != 'd' || strcmp(prof, "default") != 0)
    %%%%%:  222-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  222-block  1
branch  2 never executed
branch  3 never executed
    #####:  223:		alt_profile = savestring(prof, strlen(prof));
    %%%%%:  223-block  0
call    0 never executed
unconditional  1 never executed
        -:  224:
        -:  225:	/* Reset everything */
    #####:  226:	reload_config();
    %%%%%:  226-block  0
call    0 never executed
        -:  227:
        -:  228:	/* Check whether we have a working shell */
    #####:  229:	if (access(user.shell, X_OK) == -1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  230:		_err('w', PRINT_PROMPT, _("%s: %s: System shell not found. Please "
    %%%%%:  230-block  0
call    0 never executed
unconditional  1 never executed
        -:  231:				  "edit the configuration file to specify a working shell.\n"),
        -:  232:				PROGRAM_NAME, user.shell);
        -:  233:	}
        -:  234:
    #####:  235:	i = (int)usrvar_n;
    #####:  236:	while (--i >= 0) {
    %%%%%:  236-block  0
unconditional  0 never executed
    %%%%%:  236-block  1
branch  1 never executed
branch  2 never executed
    #####:  237:		free(usr_var[i].name);
    #####:  238:		free(usr_var[i].value);
    %%%%%:  238-block  0
unconditional  0 never executed
        -:  239:	}
    #####:  240:	usrvar_n = 0;
        -:  241:
    #####:  242:	i = (int)kbinds_n;
    #####:  243:	while (--i >= 0) {
    %%%%%:  243-block  0
unconditional  0 never executed
    %%%%%:  243-block  1
branch  1 never executed
branch  2 never executed
    #####:  244:		free(kbinds[i].function);
    #####:  245:		free(kbinds[i].key);
    %%%%%:  245-block  0
unconditional  0 never executed
        -:  246:	}
    #####:  247:	kbinds_n = 0;
        -:  248:
    #####:  249:	i = (int)actions_n;
    #####:  250:	while (--i >= 0) {
    %%%%%:  250-block  0
unconditional  0 never executed
    %%%%%:  250-block  1
branch  1 never executed
branch  2 never executed
    #####:  251:		free(usr_actions[i].name);
    #####:  252:		free(usr_actions[i].value);
    %%%%%:  252-block  0
unconditional  0 never executed
        -:  253:	}
    #####:  254:	actions_n = 0;
        -:  255:
        -:  256:	/*  my_rl_unbind_functions();
        -:  257:
        -:  258:	create_kbinds_file();
        -:  259:
        -:  260:	load_keybinds();
        -:  261:
        -:  262:	rl_unbind_function_in_map(rl_hidden, rl_get_keymap());
        -:  263:	rl_bind_keyseq(find_key("toggle-hidden"), rl_hidden);
        -:  264:	my_rl_bind_functions(); */
        -:  265:
    #####:  266:	exec_profile();
    %%%%%:  266-block  0
call    0 never executed
        -:  267:
    #####:  268:	if (msgs_n) {
branch  0 never executed
branch  1 never executed
    #####:  269:		i = (int)msgs_n;
    #####:  270:		while (--i >= 0)
    %%%%%:  270-block  0
unconditional  0 never executed
    %%%%%:  270-block  1
branch  1 never executed
branch  2 never executed
    #####:  271:			free(messages[i]);
    %%%%%:  271-block  0
unconditional  0 never executed
        -:  272:	}
    #####:  273:	msgs_n = 0;
        -:  274:
    #####:  275:	if (config_ok) {
    %%%%%:  275-block  0
branch  0 never executed
branch  1 never executed
        -:  276:		/* Limit the log files size */
    #####:  277:		check_file_size(LOG_FILE, max_log);
    %%%%%:  277-block  0
call    0 never executed
    #####:  278:		check_file_size(MSG_LOG_FILE, max_log);
call    0 never executed
        -:  279:
        -:  280:		/* Reset history */
    #####:  281:		if (access(HIST_FILE, F_OK | W_OK) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  282:			clear_history(); /* This is for readline */
    %%%%%:  282-block  0
call    0 never executed
    #####:  283:			read_history(HIST_FILE);
call    0 never executed
    #####:  284:			history_truncate_file(HIST_FILE, max_hist);
call    0 never executed
unconditional  1 never executed
        -:  285:		}
        -:  286:
        -:  287:		else {
    #####:  288:			FILE *hist_fp = fopen(HIST_FILE, "w");
    %%%%%:  288-block  0
call    0 never executed
        -:  289:
    #####:  290:			if (hist_fp) {
branch  0 never executed
branch  1 never executed
    #####:  291:				fputs("edit\n", hist_fp);
    %%%%%:  291-block  0
call    0 never executed
    #####:  292:				fclose(hist_fp);
call    0 never executed
unconditional  1 never executed
        -:  293:			}
        -:  294:
        -:  295:			else {
    #####:  296:				_err('w', PRINT_PROMPT, _("%s: Error opening the "
    %%%%%:  296-block  0
call    0 never executed
unconditional  1 never executed
        -:  297:						"history file\n"), PROGRAM_NAME);
        -:  298:			}
        -:  299:		}
        -:  300:
    #####:  301:		get_history(); /* This is only for us */
    %%%%%:  301-block  0
call    0 never executed
unconditional  1 never executed
        -:  302:	}
        -:  303:
    #####:  304:	free_bookmarks();
    %%%%%:  304-block  0
call    0 never executed
    #####:  305:	load_bookmarks();
call    0 never executed
        -:  306:
    #####:  307:	load_actions();
call    0 never executed
        -:  308:
        -:  309:	/* Reload PATH commands (actions are profile specific) */
    #####:  310:	if (bin_commands) {
branch  0 never executed
branch  1 never executed
        -:  311:
    #####:  312:		for (i = 0; bin_commands[i]; i++)
    %%%%%:  312-block  0
unconditional  0 never executed
    %%%%%:  312-block  1
branch  1 never executed
branch  2 never executed
    #####:  313:			free(bin_commands[i]);
    %%%%%:  313-block  0
unconditional  0 never executed
        -:  314:
    #####:  315:		free(bin_commands);
    #####:  316:		bin_commands = (char **)NULL;
    %%%%%:  316-block  0
unconditional  0 never executed
        -:  317:	}
        -:  318:
    #####:  319:	if (paths) {
    %%%%%:  319-block  0
branch  0 never executed
branch  1 never executed
        -:  320:
    #####:  321:		i = (int)path_n;
    #####:  322:		while (--i >= 0)
    %%%%%:  322-block  0
unconditional  0 never executed
    %%%%%:  322-block  1
branch  1 never executed
branch  2 never executed
    #####:  323:			free(paths[i]);
    %%%%%:  323-block  0
unconditional  0 never executed
        -:  324:	}
        -:  325:
    #####:  326:	path_n = (size_t)get_path_env();
    %%%%%:  326-block  0
call    0 never executed
        -:  327:
    #####:  328:	get_path_programs();
call    0 never executed
        -:  329:
    #####:  330:	i = MAX_WS;
    #####:  331:	while (--i >= 0) {
unconditional  0 never executed
    %%%%%:  331-block  0
branch  1 never executed
branch  2 never executed
    #####:  332:		free(ws[i].path);
    #####:  333:		ws[i].path = (char *)NULL;
    %%%%%:  333-block  0
unconditional  0 never executed
        -:  334:	}
        -:  335:
    #####:  336:	cur_ws = UNSET;
        -:  337:
    #####:  338:	if (restore_last_path)
    %%%%%:  338-block  0
branch  0 never executed
branch  1 never executed
    #####:  339:		get_last_path();
    %%%%%:  339-block  0
call    0 never executed
unconditional  1 never executed
        -:  340:
    #####:  341:	if (cur_ws == UNSET)
    %%%%%:  341-block  0
branch  0 never executed
branch  1 never executed
    #####:  342:		cur_ws = DEF_CUR_WS;
    %%%%%:  342-block  0
unconditional  0 never executed
        -:  343:
    #####:  344:	if (!ws[cur_ws].path) {
    %%%%%:  344-block  0
branch  0 never executed
branch  1 never executed
    #####:  345:		char cwd[PATH_MAX] = "";
    #####:  346:		getcwd(cwd, sizeof(cwd));
    %%%%%:  346-block  0
call    0 never executed
    #####:  347:		if (!*cwd) {
branch  0 never executed
branch  1 never executed
    #####:  348:			fprintf(stderr, "%s: %s\n", PROGRAM_NAME, strerror(errno));
    %%%%%:  348-block  0
call    0 never executed
call    1 never executed
    #####:  349:			exit(EXIT_FAILURE);
call    0 never executed
        -:  350:		}
    #####:  351:		ws[cur_ws].path = savestring(cwd, strlen(cwd));
    %%%%%:  351-block  0
call    0 never executed
unconditional  1 never executed
        -:  352:	}
        -:  353:
    #####:  354:	if (xchdir(ws[cur_ws].path, SET_TITLE) == -1) {
    %%%%%:  354-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  355:		fprintf(stderr, "%s: %s: %s\n", PROGRAM_NAME, ws[cur_ws].path,
call    0 never executed
    #####:  356:		    strerror(errno));
    %%%%%:  356-block  0
call    0 never executed
    #####:  357:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  358:	}
        -:  359:
    #####:  360:	int exit_status = EXIT_SUCCESS;
        -:  361:
    #####:  362:	if (cd_lists_on_the_fly) {
    %%%%%:  362-block  0
branch  0 never executed
branch  1 never executed
    #####:  363:		free_dirlist();
    %%%%%:  363-block  0
call    0 never executed
    #####:  364:		exit_status = list_dir();
call    0 never executed
unconditional  1 never executed
        -:  365:	}
        -:  366:
    #####:  367:	return exit_status;
    %%%%%:  367-block  0
unconditional  0 never executed
        -:  368:}
        -:  369:
        -:  370:int
function profile_add called 0 returned 0% blocks executed 0%
    #####:  371:profile_add(const char *prof)
        -:  372:{
    #####:  373:	if (!prof)
    %%%%%:  373-block  0
branch  0 never executed
branch  1 never executed
    #####:  374:		return EXIT_FAILURE;
    %%%%%:  374-block  0
unconditional  0 never executed
        -:  375:
    #####:  376:	int found = 0;
        -:  377:	size_t i;
        -:  378:
    #####:  379:	for (i = 0; profile_names[i]; i++) {
    %%%%%:  379-block  0
unconditional  0 never executed
    %%%%%:  379-block  1
unconditional  1 never executed
    %%%%%:  379-block  2
branch  2 never executed
branch  3 never executed
        -:  380:
    #####:  381:		if (*prof == *profile_names[i] && strcmp(prof, profile_names[i]) == 0) {
    %%%%%:  381-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  381-block  1
branch  2 never executed
branch  3 never executed
    #####:  382:			found = 1;
    #####:  383:			break;
    %%%%%:  383-block  0
unconditional  0 never executed
        -:  384:		}
        -:  385:	}
        -:  386:
    #####:  387:	if (found) {
    %%%%%:  387-block  0
branch  0 never executed
branch  1 never executed
    #####:  388:		fprintf(stderr, _("%s: %s: Profile already exists\n"), PROGRAM_NAME, prof);
    %%%%%:  388-block  0
call    0 never executed
    #####:  389:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  390:	}
        -:  391:
    #####:  392:	if (!home_ok) {
    %%%%%:  392-block  0
branch  0 never executed
branch  1 never executed
    #####:  393:		fprintf(stderr, _("%s: %s: Cannot create profile: Home "
    %%%%%:  393-block  0
call    0 never executed
        -:  394:				"directory not found\n"), PROGRAM_NAME, prof);
    #####:  395:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  396:	}
        -:  397:
    #####:  398:	size_t pnl_len = strlen(PNL);
        -:  399:	/* ### GENERATE PROGRAM'S CONFIG DIRECTORY NAME ### */
    #####:  400:	char *NCONFIG_DIR = (char *)xnmalloc(strlen(CONFIG_DIR_GRAL) + strlen(prof) + 11, sizeof(char));
    %%%%%:  400-block  0
call    0 never executed
    #####:  401:	sprintf(NCONFIG_DIR, "%s/profiles/%s", CONFIG_DIR_GRAL, prof);
        -:  402:
        -:  403:	/* #### CREATE THE CONFIG DIR #### */
    #####:  404:	char *tmp_cmd[] = {"mkdir", "-p", NCONFIG_DIR, NULL};
    #####:  405:	int ret = launch_execve(tmp_cmd, FOREGROUND, E_NOFLAG);
call    0 never executed
        -:  406:
    #####:  407:	if (ret != EXIT_SUCCESS) {
branch  0 never executed
branch  1 never executed
    #####:  408:		fprintf(stderr, _("%s: mkdir: %s: Error creating "
    %%%%%:  408-block  0
call    0 never executed
        -:  409:			"configuration directory\n"), PROGRAM_NAME, NCONFIG_DIR);
        -:  410:
    #####:  411:		free(NCONFIG_DIR);
        -:  412:
    #####:  413:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  414:	}
        -:  415:
        -:  416:	/* If the config dir is fine, generate config file names */
    #####:  417:	int error_code = 0;
    #####:  418:	size_t config_len = strlen(NCONFIG_DIR);
        -:  419:
    #####:  420:	char *NCONFIG_FILE = (char *)xcalloc(config_len + pnl_len + 4,
    %%%%%:  420-block  0
call    0 never executed
        -:  421:	    sizeof(char));
    #####:  422:	sprintf(NCONFIG_FILE, "%s/%src", NCONFIG_DIR, PNL);
    #####:  423:	char *NHIST_FILE = (char *)xcalloc(config_len + 13, sizeof(char));
call    0 never executed
    #####:  424:	sprintf(NHIST_FILE, "%s/history.cfm", NCONFIG_DIR);
    #####:  425:	char *NPROFILE_FILE = (char *)xcalloc(config_len + pnl_len + 10,
call    0 never executed
        -:  426:	    sizeof(char));
    #####:  427:	sprintf(NPROFILE_FILE, "%s/%s_profile", NCONFIG_DIR, PNL);
    #####:  428:	char *NMIME_FILE = (char *)xcalloc(config_len + 14, sizeof(char));
call    0 never executed
    #####:  429:	sprintf(NMIME_FILE, "%s/mimelist.cfm", NCONFIG_DIR);
        -:  430:
        -:  431:	/*  char *NMSG_LOG_FILE = (char *)xcalloc(config_len + 14, sizeof(char));
        -:  432:	sprintf(NMSG_LOG_FILE, "%s/messages.cfm", NCONFIG_DIR);
        -:  433:	char *NBM_FILE = (char *)xcalloc(config_len + 15, sizeof(char));
        -:  434:	sprintf(NBM_FILE, "%s/bookmarks.cfm", NCONFIG_DIR);
        -:  435:	char *NLOG_FILE = (char *)xcalloc(config_len + 9, sizeof(char));
        -:  436:	sprintf(NLOG_FILE, "%s/log.cfm", NCONFIG_DIR);
        -:  437:	char *NLOG_FILE_TMP = (char *)xcalloc(config_len + 13, sizeof(char));
        -:  438:	sprintf(NLOG_FILE_TMP, "%s/log_tmp.cfm", NCONFIG_DIR); */
        -:  439:
        -:  440:	/* Create config files */
        -:  441:
        -:  442:	/* #### CREATE THE HISTORY FILE #### */
    #####:  443:	FILE *hist_fp = fopen(NHIST_FILE, "w+");
call    0 never executed
        -:  444:
    #####:  445:	if (!hist_fp) {
branch  0 never executed
branch  1 never executed
    #####:  446:		fprintf(stderr, "%s: fopen: %s: %s\n", PROGRAM_NAME,
call    0 never executed
    #####:  447:		    NHIST_FILE, strerror(errno));
    %%%%%:  447-block  0
call    0 never executed
    #####:  448:		error_code = EXIT_FAILURE;
unconditional  0 never executed
        -:  449:	}
        -:  450:
        -:  451:	else {
        -:  452:		/* To avoid malloc errors in read_history(), do not create
        -:  453:		 * an empty file */
    #####:  454:		fputs("edit\n", hist_fp);
    %%%%%:  454-block  0
call    0 never executed
    #####:  455:		fclose(hist_fp);
call    0 never executed
unconditional  1 never executed
        -:  456:	}
        -:  457:
        -:  458:	/* #### CREATE THE MIME CONFIG FILE #### */
        -:  459:	/* Try importing MIME associations from the system, and in case
        -:  460:	 * nothing can be imported, create an empty MIME associations
        -:  461:	 * file */
    #####:  462:	ret = mime_import(NMIME_FILE);
    %%%%%:  462-block  0
call    0 never executed
        -:  463:
    #####:  464:	if (ret != EXIT_SUCCESS) {
branch  0 never executed
branch  1 never executed
    #####:  465:		FILE *mime_fp = fopen(NMIME_FILE, "w");
    %%%%%:  465-block  0
call    0 never executed
        -:  466:
    #####:  467:		if (!mime_fp) {
branch  0 never executed
branch  1 never executed
    #####:  468:			fprintf(stderr, "%s: fopen: %s: %s\n", PROGRAM_NAME,
call    0 never executed
    #####:  469:									NMIME_FILE, strerror(errno));
    %%%%%:  469-block  0
call    0 never executed
    #####:  470:			error_code = EXIT_FAILURE;
unconditional  0 never executed
        -:  471:		}
        -:  472:
        -:  473:		else {
    #####:  474:			char sys_mimelist[] = "/usr/share/clifm/mimelist.cfm";
        -:  475:
        -:  476:			struct stat attr;
    #####:  477:			if (stat(sys_mimelist, &attr) == -1) {
    %%%%%:  477-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  478:				_err('e', PRINT_PROMPT, "%s: %s: %s\n", PROGRAM_NAME,
call    0 never executed
    #####:  479:						sys_mimelist, strerror(errno));
    %%%%%:  479-block  0
call    0 never executed
    #####:  480:				error_code = EXIT_FAILURE;
unconditional  0 never executed
        -:  481:			}
        -:  482:
        -:  483:			else {
        -:  484:
    #####:  485:				char *cmd[] = {"cp", "-f", sys_mimelist, NMIME_FILE, NULL};
    #####:  486:				launch_execve(cmd, FOREGROUND, E_NOFLAG);
    %%%%%:  486-block  0
call    0 never executed
        -:  487:			}
        -:  488:
    #####:  489:			fclose(mime_fp);
    %%%%%:  489-block  0
call    0 never executed
        -:  490:		}
        -:  491:	}
        -:  492:
        -:  493:	/* #### CREATE THE PROFILE FILE #### */
    #####:  494:	FILE *profile_fp = fopen(NPROFILE_FILE, "w");
    %%%%%:  494-block  0
call    0 never executed
        -:  495:
    #####:  496:	if (!profile_fp) {
branch  0 never executed
branch  1 never executed
    #####:  497:		fprintf(stderr, _("%s: Error creating the profile file\n"),
    %%%%%:  497-block  0
call    0 never executed
        -:  498:		    PROGRAM_NAME);
    #####:  499:		error_code = EXIT_FAILURE;
unconditional  0 never executed
        -:  500:	}
        -:  501:
        -:  502:	else {
    #####:  503:		fprintf(profile_fp, _("#%s profile\n"
    %%%%%:  503-block  0
call    0 never executed
        -:  504:				"#Write here the commands you want to be executed at "
        -:  505:				"startup\n#Ex:\n#echo -e \"%s, the anti-eye-candy/KISS "
        -:  506:				"file manager\"\n"), PROGRAM_NAME, PROGRAM_NAME);
    #####:  507:		fclose(profile_fp);
call    0 never executed
unconditional  1 never executed
        -:  508:	}
        -:  509:
        -:  510:	/* #### CREATE THE CONFIG FILE #### */
    #####:  511:	error_code = create_config(NCONFIG_FILE);
    %%%%%:  511-block  0
call    0 never executed
        -:  512:
        -:  513:	/* Free stuff */
        -:  514:
    #####:  515:	free(NCONFIG_DIR);
    #####:  516:	free(NCONFIG_FILE);
        -:  517:	/*  free(NBM_FILE);
        -:  518:	free(NLOG_FILE);
        -:  519:	free(NMSG_LOG_FILE);
        -:  520:	free(NLOG_FILE_TMP); */
    #####:  521:	free(NHIST_FILE);
    #####:  522:	free(NPROFILE_FILE);
    #####:  523:	free(NMIME_FILE);
        -:  524:
    #####:  525:	if (error_code == EXIT_SUCCESS) {
branch  0 never executed
branch  1 never executed
    #####:  526:		printf(_("%s: '%s': Profile succesfully created\n"), PROGRAM_NAME, prof);
    %%%%%:  526-block  0
call    0 never executed
        -:  527:
    #####:  528:		for (i = 0; profile_names[i]; i++)
unconditional  0 never executed
    %%%%%:  528-block  0
branch  1 never executed
branch  2 never executed
    #####:  529:			free(profile_names[i]);
    %%%%%:  529-block  0
unconditional  0 never executed
        -:  530:
    #####:  531:		get_profile_names();
    %%%%%:  531-block  0
call    0 never executed
unconditional  1 never executed
        -:  532:	}
        -:  533:
        -:  534:	else
    #####:  535:		fprintf(stderr, _("%s: %s: Error creating profile\n"),
    %%%%%:  535-block  0
call    0 never executed
unconditional  1 never executed
        -:  536:		    PROGRAM_NAME, prof);
        -:  537:
    #####:  538:	return error_code;
    %%%%%:  538-block  0
unconditional  0 never executed
        -:  539:}
        -:  540:
        -:  541:int
function profile_del called 0 returned 0% blocks executed 0%
    #####:  542:profile_del(const char *prof)
        -:  543:{
    #####:  544:	if (xargs.stealth_mode == 1) {
    %%%%%:  544-block  0
branch  0 never executed
branch  1 never executed
    #####:  545:		printf("%s: The profile function is disabled in stealth mode\n",
    %%%%%:  545-block  0
call    0 never executed
        -:  546:		    PROGRAM_NAME);
    #####:  547:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  548:	}
        -:  549:
    #####:  550:	if (!prof)
    %%%%%:  550-block  0
branch  0 never executed
branch  1 never executed
    #####:  551:		return EXIT_FAILURE;
    %%%%%:  551-block  0
unconditional  0 never executed
        -:  552:
        -:  553:	/* Check if prof is a valid profile */
    #####:  554:	int found = 0;
        -:  555:	size_t i;
    #####:  556:	for (i = 0; profile_names[i]; i++) {
    %%%%%:  556-block  0
unconditional  0 never executed
    %%%%%:  556-block  1
unconditional  1 never executed
    %%%%%:  556-block  2
branch  2 never executed
branch  3 never executed
    #####:  557:		if (*prof == *profile_names[i] && strcmp(prof, profile_names[i]) == 0) {
    %%%%%:  557-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  557-block  1
branch  2 never executed
branch  3 never executed
    #####:  558:			found = 1;
    #####:  559:			break;
    %%%%%:  559-block  0
unconditional  0 never executed
        -:  560:		}
        -:  561:	}
        -:  562:
    #####:  563:	if (!found) {
    %%%%%:  563-block  0
branch  0 never executed
branch  1 never executed
    #####:  564:		fprintf(stderr, _("%s: %s: No such profile\n"), PROGRAM_NAME, prof);
    %%%%%:  564-block  0
call    0 never executed
    #####:  565:		return EXIT_FAILURE;
unconditional  0 never executed
        -:  566:	}
        -:  567:
    #####:  568:	char *tmp = (char *)xnmalloc(strlen(CONFIG_DIR_GRAL) + strlen(prof) + 11,
    %%%%%:  568-block  0
call    0 never executed
        -:  569:															sizeof(char));
    #####:  570:	sprintf(tmp, "%s/profiles/%s", CONFIG_DIR_GRAL, prof);
        -:  571:
    #####:  572:	char *cmd[] = {"rm", "-r", tmp, NULL};
    #####:  573:	int ret = launch_execve(cmd, FOREGROUND, E_NOFLAG);
call    0 never executed
    #####:  574:	free(tmp);
        -:  575:
    #####:  576:	if (ret == EXIT_SUCCESS) {
branch  0 never executed
branch  1 never executed
    #####:  577:		printf(_("%s: '%s': Profile successfully removed\n"), PROGRAM_NAME, prof);
    %%%%%:  577-block  0
call    0 never executed
        -:  578:
    #####:  579:		for (i = 0; profile_names[i]; i++)
unconditional  0 never executed
    %%%%%:  579-block  0
branch  1 never executed
branch  2 never executed
    #####:  580:			free(profile_names[i]);
    %%%%%:  580-block  0
unconditional  0 never executed
        -:  581:
    #####:  582:		get_profile_names();
    %%%%%:  582-block  0
call    0 never executed
        -:  583:
    #####:  584:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  585:	}
        -:  586:
    #####:  587:	fprintf(stderr, _("%s: %s: Error removing profile\n"), PROGRAM_NAME, prof);
    %%%%%:  587-block  0
call    0 never executed
    #####:  588:	return EXIT_FAILURE;
unconditional  0 never executed
        -:  589:}
