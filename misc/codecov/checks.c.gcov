        -:    0:Source:checks.c
        -:    1:/* checks.c -- misc check functions */
        -:    2:
        -:    3:/*
        -:    4: * This file is part of CliFM
        -:    5: * 
        -:    6: * Copyright (C) 2016-2021, L. Abramovich <johndoe.arch@outlook.com>
        -:    7: * All rights reserved.
        -:    8:
        -:    9: * CliFM is free software; you can redistribute it and/or modify
        -:   10: * it under the terms of the GNU General Public License as published by
        -:   11: * the Free Software Foundation; either version 2 of the License, or
        -:   12: * (at your option) any later version.
        -:   13: *
        -:   14: * CliFM is distributed in the hope that it will be useful,
        -:   15: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   16: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   17: * GNU General Public License for more details.
        -:   18: *
        -:   19: * You should have received a copy of the GNU General Public License
        -:   20: * along with this program; if not, write to the Free Software
        -:   21: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
        -:   22: * MA 02110-1301, USA.
        -:   23:*/
        -:   24:
        -:   25:#include "helpers.h"
        -:   26:
        -:   27:#include <errno.h>
        -:   28:#include <stdio.h>
        -:   29:#include <string.h>
        -:   30:
        -:   31:#ifdef __NetBSD__
        -:   32:# include <sys/param.h>
        -:   33:# if __NetBSD_Prereq__(9,99,63)
        -:   34:#  include <sys/acl.h>
        -:   35:#  define _ACL_OK
        -:   36:# endif /* __NetBSD_Prereq__ */
        -:   37:#elif !defined(__HAIKU__) && !defined(__OpenBSD__)
        -:   38:# include <sys/acl.h>
        -:   39:# define _ACL_OK
        -:   40:#endif /* __NetBSD__ */
        -:   41:
        -:   42:#include <sys/stat.h>
        -:   43:#include <sys/types.h>
        -:   44:#include <unistd.h>
        -:   45:
        -:   46:#include "aux.h"
        -:   47:#include "misc.h"
        -:   48:
        -:   49:/* Terminals known not to be able to handle escape sequences */
        -:   50:static const char *UNSUPPORTED_TERM[] = {"dumb", /*"cons25",*/ "emacs", NULL};
        -:   51:
        -:   52:void
function check_term called 4 returned 100% blocks executed 53%
        4:   53:check_term(void)
        -:   54:{
        4:   55:	char *_term = getenv("TERM");
        4:   55-block  0
call    0 returned 4
        4:   56:	if (!_term) {
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:   57:		fprintf(stderr, _("%s: Error getting terminal type\n"), PROGRAM_NAME);
    %%%%%:   57-block  0
call    0 never executed
call    1 never executed
    #####:   58:		exit(EXIT_FAILURE);
call    0 never executed
        -:   59:	}
        -:   60:
        -:   61:	int i;
       12:   62:	for (i = 0; UNSUPPORTED_TERM[i]; i++) {
        4:   62-block  0
unconditional  0 taken 4
        8:   62-block  1
unconditional  1 taken 8
       12:   62-block  2
branch  2 taken 8
branch  3 taken 4 (fallthrough)
        8:   63:		if (*_term == *UNSUPPORTED_TERM[i]
        8:   63-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####:   64:		&& strcmp(_term, UNSUPPORTED_TERM[i]) == 0) {
    %%%%%:   64-block  0
branch  0 never executed
branch  1 never executed
    #####:   65:			fprintf(stderr, _("%s: '%s': Unsupported terminal. This "
    %%%%%:   65-block  0
call    0 never executed
call    1 never executed
        -:   66:					"terminal cannot understand escape sequences\n"),
        -:   67:					PROGRAM_NAME, UNSUPPORTED_TERM[i]);
    #####:   68:			exit(EXIT_FAILURE);
call    0 never executed
        -:   69:		}
        -:   70:	}
        -:   71:
        4:   72:	return;
        4:   72-block  0
unconditional  0 taken 4
        -:   73:}
        -:   74:
        -:   75:/* Return 1 if current user has access to FILE. Otherwise, return zero */
        -:   76:int
function check_file_access called 33188 returned 100% blocks executed 76%
    33188:   77:check_file_access(const struct fileinfo file)
        -:   78:{
    33188:   79:	int f = 0; /* Hold file ownership flags */
        -:   80:
    33188:   81:	mode_t val = (file.mode & (mode_t)~S_IFMT);
    33188:   82:	if (val & S_IRUSR) f |= R_USR;
    33188:   82-block  0
branch  0 taken 33188 (fallthrough)
branch  1 taken 0
    33188:   82-block  1
unconditional  2 taken 33188
    33188:   83:	if (val & S_IXUSR) f |= X_USR;
    33188:   83-block  0
branch  0 taken 28281 (fallthrough)
branch  1 taken 4907
    28281:   83-block  1
unconditional  2 taken 28281
        -:   84:
    33188:   85:	if (val & S_IRGRP) f |= R_GRP;
    33188:   85-block  0
branch  0 taken 28728 (fallthrough)
branch  1 taken 4460
    28728:   85-block  1
unconditional  2 taken 28728
    33188:   86:	if (val & S_IXGRP) f |= X_GRP;
    33188:   86-block  0
branch  0 taken 28245 (fallthrough)
branch  1 taken 4943
    28245:   86-block  1
unconditional  2 taken 28245
        -:   87:
    33188:   88:	if (val & S_IROTH) f |= R_OTH;
    33188:   88-block  0
branch  0 taken 28715 (fallthrough)
branch  1 taken 4473
    28715:   88-block  1
unconditional  2 taken 28715
    33188:   89:	if (val & S_IXOTH) f |= X_OTH;
    33188:   89-block  0
branch  0 taken 28236 (fallthrough)
branch  1 taken 4952
    28236:   89-block  1
unconditional  2 taken 28236
        -:   90:
    33188:   91:	if (file.dir) {
    33188:   91-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 33185
        3:   92:		if ((f & R_USR) && (f & X_USR) && file.uid == user.uid)
        3:   92-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:   92-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        3:   92-block  2
branch  4 taken 3 (fallthrough)
branch  5 taken 0
        3:   93:			return 1;
        3:   93-block  0
unconditional  0 taken 3
    #####:   94:		if ((f & R_GRP) && (f & X_GRP) && file.gid == user.gid)
    %%%%%:   94-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   94-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:   94-block  2
branch  4 never executed
branch  5 never executed
    #####:   95:			return 1;
    %%%%%:   95-block  0
unconditional  0 never executed
    #####:   96:		if ((f & R_OTH) && (f & X_OTH))
    %%%%%:   96-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   96-block  1
branch  2 never executed
branch  3 never executed
    #####:   97:			return 1;
    %%%%%:   97-block  0
unconditional  0 never executed
        -:   98:	} else {
    33185:   99:		if ((f & R_USR) && file.uid == user.uid)
    33185:   99-block  0
branch  0 taken 33185 (fallthrough)
branch  1 taken 0
    33185:   99-block  1
branch  2 taken 4988 (fallthrough)
branch  3 taken 28197
     4988:  100:			return 1;
     4988:  100-block  0
unconditional  0 taken 4988
    28197:  101:		if ((f & R_GRP) && file.gid == user.gid)
    28197:  101-block  0
branch  0 taken 28188 (fallthrough)
branch  1 taken 9
    28188:  101-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 28188
    #####:  102:			return 1;
    %%%%%:  102-block  0
unconditional  0 never executed
    28197:  103:		if (f & R_OTH)
    28197:  103-block  0
branch  0 taken 28179 (fallthrough)
branch  1 taken 18
    28179:  104:			return 1;
    28179:  104-block  0
unconditional  0 taken 28179
        -:  105:	}
        -:  106:
       18:  107:	return 0;
       18:  107-block  0
unconditional  0 taken 18
        -:  108:}
        -:  109:
        -:  110:char *
function get_sudo_path called 2 returned 100% blocks executed 50%
        2:  111:get_sudo_path(void)
        -:  112:{
        2:  113:	char *p = getenv("CLIFM_SUDO_CMD");
        2:  113-block  0
call    0 returned 2
       2*:  114:	char *sudo = get_cmd_path(p ? p : DEF_SUDO_CMD);
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:  114-block  0
unconditional  2 never executed
        2:  114-block  1
unconditional  3 taken 2
        2:  114-block  2
call    4 returned 2
        -:  115:
        2:  116:	if (!sudo) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  117:		fprintf(stderr, _("%s: %s: No such file or directory\n"),
    %%%%%:  117-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  117-block  1
unconditional  2 never executed
    %%%%%:  117-block  2
unconditional  3 never executed
    %%%%%:  117-block  3
call    4 never executed
call    5 never executed
        -:  118:				PROGRAM_NAME, p ? p : DEF_SUDO_CMD);
    #####:  119:		return (char *)NULL;
unconditional  0 never executed
        -:  120:	}
        -:  121:
        2:  122:	return sudo;
        2:  122-block  0
unconditional  0 taken 2
        -:  123:}
        -:  124:
        -:  125:/* Check a file's immutable bit. Returns 1 if true, zero if false, and
        -:  126: * -1 in case of error */
        -:  127:int
function check_immutable_bit called 9 returned 100% blocks executed 100%
        9:  128:check_immutable_bit(char *file)
        -:  129:{
        -:  130:#if !defined(FS_IOC_GETFLAGS) || !defined(FS_IMMUTABLE_FL)
        -:  131:	UNUSED(file);
        9:  132:	return 0;
        9:  132-block  0
unconditional  0 taken 9
        -:  133:#else
        -:  134:	int attr, fd, immut_flag = -1;
        -:  135:
        -:  136:	fd = open(file, O_RDONLY);
        -:  137:	if (fd == -1) {
        -:  138:		fprintf(stderr, "'%s': %s\n", file, strerror(errno));
        -:  139:		return -1;
        -:  140:	}
        -:  141:
        -:  142:	ioctl(fd, FS_IOC_GETFLAGS, &attr);
        -:  143:	if (attr & FS_IMMUTABLE_FL)
        -:  144:		immut_flag = 1;
        -:  145:	else
        -:  146:		immut_flag = 0;
        -:  147:
        -:  148:	close(fd);
        -:  149:
        -:  150:	if (immut_flag)
        -:  151:		return 1;
        -:  152:
        -:  153:	return 0;
        -:  154:#endif /* !defined(FS_IOC_GETFLAGS) || !defined(FS_IMMUTABLE_FL) */
        -:  155:}
        -:  156:
        -:  157:/* Return 1 if FILE has some ACL property and zero if none
        -:  158: * See: https://man7.org/tlpi/code/online/diff/acl/acl_view.c.html */
        -:  159:int
function is_acl called 217 returned 100% blocks executed 88%
      217:  160:is_acl(char *file)
        -:  161:{
        -:  162:#ifndef _ACL_OK
        -:  163:	UNUSED(file);
        -:  164:	return 0;
        -:  165:#else
      217:  166:	if (!file || !*file)
      217:  166-block  0
branch  0 taken 217 (fallthrough)
branch  1 taken 0
      217:  166-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 217
    #####:  167:		return 0;
    %%%%%:  167-block  0
unconditional  0 never executed
        -:  168:
        -:  169:	acl_t acl;
      217:  170:	acl = acl_get_file(file, ACL_TYPE_ACCESS);
      217:  170-block  0
call    0 returned 217
        -:  171:
      217:  172:	if (!acl)
branch  0 taken 3 (fallthrough)
branch  1 taken 214
        3:  173:		return 0;
        3:  173-block  0
unconditional  0 taken 3
        -:  174:
        -:  175:	acl_entry_t entry;
      214:  176:	int entryid, num = 0;
        -:  177:
      214:  178:	for (entryid = ACL_FIRST_ENTRY;; entryid = ACL_NEXT_ENTRY) {
      214:  178-block  0
unconditional  0 taken 214
      856:  179:		if (acl_get_entry(acl, entryid, &entry) != 1)
      856:  179-block  0
call    0 returned 856
branch  1 taken 214 (fallthrough)
branch  2 taken 642
      214:  180:			break;
      214:  180-block  0
unconditional  0 taken 214
      642:  181:		num++;
      642:  181-block  0
unconditional  0 taken 642
        -:  182:	}
        -:  183:
      214:  184:	acl_free(acl);
      214:  184-block  0
call    0 returned 214
        -:  185:
        -:  186:	/* If num > 3 we have something else besides owner, group, and others,
        -:  187:	 * that is, we have at least one ACL property */
      214:  188:	if (num > 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 214
    #####:  189:		return 1;
    %%%%%:  189-block  0
unconditional  0 never executed
        -:  190:
      214:  191:	return 0;
      214:  191-block  0
unconditional  0 taken 214
        -:  192:#endif /* _ACL_OK */
        -:  193:}
        -:  194:
        -:  195:/* Check whether a given string contains only digits. Returns 1 if true
        -:  196: * and 0 if false. It does not work with negative numbers */
        -:  197:int
function is_number called 3363 returned 100% blocks executed 100%
     3363:  198:is_number(const char *restrict str)
        -:  199:{
    20924:  200:	for (; *str; str++)
     3363:  200-block  0
unconditional  0 taken 3363
    17561:  200-block  1
unconditional  1 taken 17561
    20924:  200-block  2
branch  2 taken 18196
branch  3 taken 2728 (fallthrough)
    18196:  201:		if (*str > '9' || *str < '0')
    18196:  201-block  0
branch  0 taken 17667 (fallthrough)
branch  1 taken 529
    17667:  201-block  1
branch  2 taken 106 (fallthrough)
branch  3 taken 17561
      635:  202:			return 0;
      635:  202-block  0
unconditional  0 taken 635
        -:  203:
     2728:  204:	return 1;
     2728:  204-block  0
unconditional  0 taken 2728
        -:  205:}
        -:  206:
        -:  207:/* Check CMD against a list of internal commands */
        -:  208:int
function is_internal_c called 190 returned 100% blocks executed 79%
      190:  209:is_internal_c(const char *restrict cmd)
        -:  210:{
      190:  211:	const char *int_cmds[] = {
        -:  212:	    "?", "help",
        -:  213:	    "ac", "ad",
        -:  214:	    "acd", "autocd",
        -:  215:	    "actions",
        -:  216:	    "alias",
        -:  217:	    "ao", "auto-open",
        -:  218:	    "b", "back",
        -:  219:	    "bh", "fh",
        -:  220:	    "bm", "bookmarks",
        -:  221:	    "br", "bulk",
        -:  222:	    "c", "cp",
        -:  223:	    "cc", "colors",
        -:  224:	    "cd",
        -:  225:	    "cl", "columns",
        -:  226:	    "cmd", "commands",
        -:  227:	    "cs", "colorschemes",
        -:  228:		"d", "dup",
        -:  229:	    "ds", "desel",
        -:  230:	    "edit",
        -:  231:	    "exp", "export",
        -:  232:	    "ext",
        -:  233:	    "f", "forth",
        -:  234:	    "fc",
        -:  235:	    "ff", "folders-first",
        -:  236:	    "fs",
        -:  237:	    "ft", "filter",
        -:  238:	    "history",
        -:  239:	    "hf", "hidden",
        -:  240:	    "icons",
        -:  241:	    "jump", "je", "jc", "jp", "jo",
        -:  242:	    "kb", "keybinds",
        -:  243:	    "l", "ln", "le",
        -:  244:	    "lm",
        -:  245:	    "log",
        -:  246:	    "m", "mv",
        -:  247:	    "md", "mkdir",
        -:  248:	    "mf",
        -:  249:	    "mm", "mime",
        -:  250:	    "mp", "mountpoints",
        -:  251:	    "msg", "messages",
        -:  252:	    "n", "new",
        -:  253:	    "net",
        -:  254:	    "o", "open",
        -:  255:	    "opener",
        -:  256:	    "p", "pp", "pr", "prop",
        -:  257:	    "path", "cwd",
        -:  258:		"paste",
        -:  259:	    "pf", "prof", "profile",
        -:  260:	    "pg", "pager",
        -:  261:	    "pin", "unpin",
        -:  262:		"quit",
        -:  263:	    "r", "rm",
        -:  264:	    "rf", "refresh",
        -:  265:	    "rl", "reload",
        -:  266:	    "s", "sel",
        -:  267:	    "sb", "selbox",
        -:  268:	    "shell",
        -:  269:	    "splash",
        -:  270:	    "st", "sort",
        -:  271:	    "t", "tr", "trash",
        -:  272:	    "te",
        -:  273:	    "tips",
        -:  274:	    "touch",
        -:  275:	    "u", "undel", "untrash",
        -:  276:	    "uc", "unicode",
        -:  277:	    "unlink",
        -:  278:		"v",
        -:  279:	    "ver", "version",
        -:  280:	    "ws",
        -:  281:	    "x", "X",
        -:  282:	    NULL};
        -:  283:
      190:  284:	int found = 0;
      190:  285:	int i = (int)(sizeof(int_cmds) / sizeof(char *)) - 1;
        -:  286:
    21591:  287:	while (--i >= 0) {
      190:  287-block  0
unconditional  0 taken 190
    21591:  287-block  1
branch  1 taken 21435
branch  2 taken 156 (fallthrough)
    21435:  288:		if (*cmd == *int_cmds[i] && strcmp(cmd, int_cmds[i]) == 0) {
    21435:  288-block  0
branch  0 taken 1100 (fallthrough)
branch  1 taken 20335
     1100:  288-block  1
branch  2 taken 34 (fallthrough)
branch  3 taken 1066
       34:  289:			found = 1;
       34:  290:			break;
       34:  290-block  0
unconditional  0 taken 34
        -:  291:		}
        -:  292:	}
        -:  293:
      190:  294:	if (found)
      190:  294-block  0
branch  0 taken 34 (fallthrough)
branch  1 taken 156
       34:  295:		return 1;
       34:  295-block  0
unconditional  0 taken 34
        -:  296:
        -:  297:	/* Check for the search and history functions as well */
      156:  298:	else if ((*cmd == '/' && access(cmd, F_OK) != 0) || (*cmd == '!'
      156:  298-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 155
        1:  298-block  1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
      155:  298-block  2
branch  5 taken 0 (fallthrough)
branch  6 taken 155
    #####:  299:	&& (_ISDIGIT(cmd[1]) || (cmd[1] == '-' && _ISDIGIT(cmd[2]))
    %%%%%:  299-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  299-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  299-block  2
branch  4 never executed
branch  5 never executed
    #####:  300:	|| cmd[1] == '!')))
    %%%%%:  300-block  0
branch  0 never executed
branch  1 never executed
        1:  301:		return 1;
        1:  301-block  0
unconditional  0 taken 1
        -:  302:
      155:  303:	return 0;
      155:  303-block  0
unconditional  0 taken 155
        -:  304:}
        -:  305:
        -:  306:/* Check cmd against a list of internal commands. Used by parse_input_str()
        -:  307: * to know if it should perform additional expansions, like glob, regex,
        -:  308: * tilde, and so on. Only internal commands dealing with file names
        -:  309: * should be checked here */
        -:  310:int
function is_internal called 500 returned 100% blocks executed 100%
      500:  311:is_internal(const char *cmd)
        -:  312:{
      500:  313:	const char *int_cmds[] = {
        -:  314:	    "cd",
        -:  315:	    "o", "open",
        -:  316:	    "s", "sel",
        -:  317:	    "p", "pr", "prop",
        -:  318:	    "r",
        -:  319:	    "t", "tr", "trash",
        -:  320:	    "mm", "mime",
        -:  321:	    "n", "new",
        -:  322:	    "bm", "bookmarks",
        -:  323:	    "br", "bulk",
        -:  324:	    "ac", "ad",
        -:  325:	    "exp", "export",
        -:  326:	    "pin",
        -:  327:	    "jc", "jp",
        -:  328:	    "bl", "le",
        -:  329:	    "te",
        -:  330:	    NULL};
        -:  331:
      500:  332:	int found = 0;
      500:  333:	int i = (int)(sizeof(int_cmds) / sizeof(char *)) - 1;
        -:  334:
    14626:  335:	while (--i >= 0) {
      500:  335-block  0
unconditional  0 taken 500
    14626:  335-block  1
branch  1 taken 14195
branch  2 taken 431 (fallthrough)
    14195:  336:		if (*cmd == *int_cmds[i] && strcmp(cmd, int_cmds[i]) == 0) {
    14195:  336-block  0
branch  0 taken 703 (fallthrough)
branch  1 taken 13492
      703:  336-block  1
branch  2 taken 69 (fallthrough)
branch  3 taken 634
       69:  337:			found = 1;
       69:  338:			break;
       69:  338-block  0
unconditional  0 taken 69
        -:  339:		}
        -:  340:	}
        -:  341:
      500:  342:	if (found)
      500:  342-block  0
branch  0 taken 69 (fallthrough)
branch  1 taken 431
       69:  343:		return 1;
       69:  343-block  0
unconditional  0 taken 69
        -:  344:
        -:  345:	/* Check for the search function as well */
      431:  346:	else if (*cmd == '/' && access(cmd, F_OK) != 0)
      431:  346-block  0
branch  0 taken 22 (fallthrough)
branch  1 taken 409
       22:  346-block  1
call    2 returned 22
branch  3 taken 5 (fallthrough)
branch  4 taken 17
        5:  347:		return 1;
        5:  347-block  0
unconditional  0 taken 5
        -:  348:
      426:  349:	return 0;
      426:  349-block  0
unconditional  0 taken 426
        -:  350:}
        -:  351:
        -:  352:/* Return one if STR is a command in PATH or zero if not */
        -:  353:int
function is_bin_cmd called 15 returned 100% blocks executed 94%
       15:  354:is_bin_cmd(const char *str)
        -:  355:{
       15:  356:	char *p = (char *)str, *q = (char *)str;
       15:  357:	int index = 0, space_index = -1;
        -:  358:
       85:  359:	while (*p) {
       15:  359-block  0
unconditional  0 taken 15
       85:  359-block  1
branch  1 taken 78
branch  2 taken 7 (fallthrough)
       78:  360:		if (*p == ' ') {
       78:  360-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 70
        8:  361:			*p = '\0';
        8:  362:			space_index = index;
        8:  363:			break;
        8:  363-block  0
unconditional  0 taken 8
        -:  364:		}
       70:  365:		p++;
       70:  366:		index++;
       70:  366-block  0
unconditional  0 taken 70
        -:  367:	}
        -:  368:
        -:  369:	size_t i;
    52503:  370:	for (i = 0; bin_commands[i]; i++) {
       15:  370-block  0
unconditional  0 taken 15
    52488:  370-block  1
unconditional  1 taken 52488
    52503:  370-block  2
branch  2 taken 52489
branch  3 taken 14 (fallthrough)
    52489:  371:		if (*q == *bin_commands[i] && q[1] == bin_commands[i][1] && strcmp(q, bin_commands[i]) == 0) {
    52489:  371-block  0
branch  0 taken 1970 (fallthrough)
branch  1 taken 50519
     1970:  371-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 1967
        3:  371-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 2
        1:  372:			if (space_index != -1)
        1:  372-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  373:				q[space_index] = ' ';
    %%%%%:  373-block  0
unconditional  0 never executed
        1:  374:			return 1;
        1:  374-block  0
unconditional  0 taken 1
        -:  375:		}
        -:  376:	}
        -:  377:
       14:  378:	if (space_index != -1)
       14:  378-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 6
        8:  379:		q[space_index] = ' ';
        8:  379-block  0
unconditional  0 taken 8
        -:  380:
       14:  381:	return 0;
       14:  381-block  0
unconditional  0 taken 14
        -:  382:}
        -:  383:
        -:  384:/* Returns 0 if digit is found and preceded by a letter in STR, or one if not */
        -:  385:int
function digit_found called 503 returned 100% blocks executed 100%
      503:  386:digit_found(const char *str)
        -:  387:{
      503:  388:	char *p = (char *)str;
      503:  389:	int c = 0;
        -:  390:
     2458:  391:	while (*p) {
      503:  391-block  0
unconditional  0 taken 503
     2458:  391-block  1
branch  1 taken 1970
branch  2 taken 488 (fallthrough)
     1970:  392:		if (c++ && _ISDIGIT(*p) && _ISALPHA(*(p - 1)))
     1970:  392-block  0
branch  0 taken 1467 (fallthrough)
branch  1 taken 503
     1467:  392-block  1
branch  2 taken 83 (fallthrough)
branch  3 taken 1384
       83:  392-block  2
branch  4 taken 15 (fallthrough)
branch  5 taken 68
       15:  392-block  3
branch  6 taken 15 (fallthrough)
branch  7 taken 0
       15:  393:			return 1;
       15:  393-block  0
unconditional  0 taken 15
     1955:  394:		p++;
     1955:  394-block  0
unconditional  0 taken 1955
        -:  395:	}
        -:  396:
      488:  397:	return 0;
      488:  397-block  0
unconditional  0 taken 488
        -:  398:}
        -:  399:
        -:  400:/* Check if the 'file' command is available: it is needed by the mime
        -:  401: * function */
        -:  402:/*
        -:  403:void
        -:  404:file_cmd_check(void)
        -:  405:{
        -:  406:	file_cmd_path = get_cmd_path("file");
        -:  407:
        -:  408:	if (!file_cmd_path) {
        -:  409:		flags &= ~FILE_CMD_OK;
        -:  410:		_err('n', PRINT_PROMPT, _("%s: 'file' command not found. "
        -:  411:				  "Specify an application when opening files. Ex: 'o 12 nano' "
        -:  412:				  "or just 'nano 12'\n"), PROGRAM_NAME);
        -:  413:	}
        -:  414:
        -:  415:	else
        -:  416:		flags |= FILE_CMD_OK;
        -:  417:} */
        -:  418:
        -:  419:int
function check_regex called 141 returned 100% blocks executed 95%
      141:  420:check_regex(char *str)
        -:  421:{
      141:  422:	if (!str || !*str)
      141:  422-block  0
branch  0 taken 141 (fallthrough)
branch  1 taken 0
      141:  422-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 141
    #####:  423:		return EXIT_FAILURE;
    %%%%%:  423-block  0
unconditional  0 never executed
        -:  424:
      141:  425:	int char_found = 0;
      141:  426:	char *p = str;
        -:  427:
     1191:  428:	while (*p) {
      141:  428-block  0
unconditional  0 taken 141
     1191:  428-block  1
branch  1 taken 1069
branch  2 taken 122 (fallthrough)
        -:  429:		/* If STR contains at least one of the following chars */
     1069:  430:		if (*p == '*' || *p == '?' || *p == '[' || *p == '{' || *p == '^'
     1069:  430-block  0
branch  0 taken 1063 (fallthrough)
branch  1 taken 6
     1063:  430-block  1
branch  2 taken 1063 (fallthrough)
branch  3 taken 0
     1063:  430-block  2
branch  4 taken 1063 (fallthrough)
branch  5 taken 0
     1063:  430-block  3
branch  6 taken 1063 (fallthrough)
branch  7 taken 0
     1063:  430-block  4
branch  8 taken 1062 (fallthrough)
branch  9 taken 1
     1062:  431:		|| *p == '.' || *p == '|' || *p == '+' || *p == '$') {
     1062:  431-block  0
branch  0 taken 1050 (fallthrough)
branch  1 taken 12
     1050:  431-block  1
branch  2 taken 1050 (fallthrough)
branch  3 taken 0
     1050:  431-block  2
branch  4 taken 1050 (fallthrough)
branch  5 taken 0
     1050:  431-block  3
branch  6 taken 0 (fallthrough)
branch  7 taken 1050
       19:  432:			char_found = 1;
       19:  433:			break;
       19:  433-block  0
unconditional  0 taken 19
        -:  434:		}
        -:  435:
     1050:  436:		p++;
     1050:  436-block  0
unconditional  0 taken 1050
        -:  437:	}
        -:  438:
        -:  439:	/* And if STR is not a file name, take it as a possible regex */
      141:  440:	if (char_found)
      141:  440-block  0
branch  0 taken 19 (fallthrough)
branch  1 taken 122
       19:  441:		if (access(str, F_OK) == -1)
       19:  441-block  0
call    0 returned 19
branch  1 taken 9 (fallthrough)
branch  2 taken 10
        9:  442:			return EXIT_SUCCESS;
        9:  442-block  0
unconditional  0 taken 9
        -:  443:
      132:  444:	return EXIT_FAILURE;
      132:  444-block  0
unconditional  0 taken 132
        -:  445:}
        -:  446:
        -:  447:/* Returns the parsed aliased command in an array of strings, if
        -:  448: * matching alias is found, or NULL if not. */
        -:  449:char **
function check_for_alias called 406 returned 100% blocks executed 38%
      406:  450:check_for_alias(char **args)
        -:  451:{
      406:  452:	if (!aliases_n || !aliases || !args)
      406:  452-block  0
branch  0 taken 404 (fallthrough)
branch  1 taken 2
      404:  452-block  1
branch  2 taken 404 (fallthrough)
branch  3 taken 0
      404:  452-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 404
        2:  453:		return (char **)NULL;
        2:  453-block  0
unconditional  0 taken 2
        -:  454:
      404:  455:	char *aliased_cmd = (char *)NULL;
      404:  456:	size_t cmd_len = strlen(args[0]);
        -:  457:	char tmp_cmd[PATH_MAX * 2 + 1];
      404:  458:	snprintf(tmp_cmd, sizeof(tmp_cmd), "%s=", args[0]);
        -:  459:
      404:  460:	register int i = (int)aliases_n;
     2424:  461:	while (--i >= 0) {
      404:  461-block  0
unconditional  0 taken 404
     2424:  461-block  1
branch  1 taken 2020
branch  2 taken 404 (fallthrough)
        -:  462:
    2020*:  463:		if (!aliases[i])
     2020:  463-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2020
    #####:  464:			continue;
    %%%%%:  464-block  0
unconditional  0 never executed
        -:  465:		/* Look for this string: "command=", in the aliases file */
        -:  466:		/* If a match is found */
        -:  467:
     2020:  468:		if (*aliases[i] != *args[0] ||
     2020:  468-block  0
branch  0 taken 81 (fallthrough)
branch  1 taken 1939
       81:  469:		    strncmp(tmp_cmd, aliases[i], cmd_len + 1) != 0)
       81:  469-block  0
branch  0 taken 81 (fallthrough)
branch  1 taken 0
     2020:  470:			continue;
     2020:  470-block  0
unconditional  0 taken 2020
        -:  471:
        -:  472:		/* Get the aliased command */
    #####:  473:		aliased_cmd = strbtw(aliases[i], '\'', '\'');
    %%%%%:  473-block  0
call    0 never executed
        -:  474:
    #####:  475:		if (!aliased_cmd)
branch  0 never executed
branch  1 never executed
    #####:  476:			return (char **)NULL;
    %%%%%:  476-block  0
unconditional  0 never executed
        -:  477:
    #####:  478:		if (!*aliased_cmd) { /* zero length */
    %%%%%:  478-block  0
branch  0 never executed
branch  1 never executed
    #####:  479:			free(aliased_cmd);
    #####:  480:			return (char **)NULL;
    %%%%%:  480-block  0
unconditional  0 never executed
        -:  481:		}
        -:  482:
    #####:  483:		args_n = 0; /* Reset args_n to be used by parse_input_str() */
        -:  484:
        -:  485:		/* Parse the aliased cmd */
    #####:  486:		char **alias_comm = parse_input_str(aliased_cmd);
    %%%%%:  486-block  0
call    0 never executed
    #####:  487:		free(aliased_cmd);
        -:  488:
    #####:  489:		if (!alias_comm) {
branch  0 never executed
branch  1 never executed
    #####:  490:			args_n = 0;
    #####:  491:			fprintf(stderr, _("%s: Error parsing aliased command\n"), PROGRAM_NAME);
    %%%%%:  491-block  0
call    0 never executed
call    1 never executed
    #####:  492:			return (char **)NULL;
unconditional  0 never executed
        -:  493:		}
        -:  494:
        -:  495:		register size_t j;
        -:  496:
        -:  497:		/* Add input parameters, if any, to alias_comm */
    #####:  498:		if (args[1]) {
    %%%%%:  498-block  0
branch  0 never executed
branch  1 never executed
    #####:  499:			for (j = 1; args[j]; j++) {
    %%%%%:  499-block  0
unconditional  0 never executed
    %%%%%:  499-block  1
branch  1 never executed
branch  2 never executed
    #####:  500:				alias_comm = (char **)xrealloc(alias_comm,
    #####:  501:				    (++args_n + 2) * sizeof(char *));
    %%%%%:  501-block  0
call    0 never executed
    #####:  502:				alias_comm[args_n] = savestring(args[j],
unconditional  0 never executed
    #####:  503:				    strlen(args[j]));
call    0 never executed
        -:  504:			}
        -:  505:		}
        -:  506:
        -:  507:		/* Add a terminating NULL string */
    #####:  508:		alias_comm[args_n + 1] = (char *)NULL;
        -:  509:
        -:  510:		/* Free original command */
    #####:  511:		for (j = 0; args[j]; j++)
    %%%%%:  511-block  0
unconditional  0 never executed
    %%%%%:  511-block  1
branch  1 never executed
branch  2 never executed
    #####:  512:			free(args[j]);
    %%%%%:  512-block  0
unconditional  0 never executed
    #####:  513:		free(args);
        -:  514:
    #####:  515:		return alias_comm;
    %%%%%:  515-block  0
unconditional  0 never executed
        -:  516:	}
        -:  517:
      404:  518:	return (char **)NULL;
      404:  518-block  0
unconditional  0 taken 404
        -:  519:}
        -:  520:
        -:  521:/* Keep only the last MAX records in FILE */
        -:  522:void
function check_file_size called 30 returned 100% blocks executed 74%
       30:  523:check_file_size(char *file, int max)
        -:  524:{
       30:  525:	if (!config_ok)
       30:  525-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 30
    #####:  526:		return;
    %%%%%:  526-block  0
unconditional  0 never executed
        -:  527:
        -:  528:	/* Create the file, if it doesn't exist */
       30:  529:	FILE *fp = (FILE *)NULL;
        -:  530:	struct stat attr;
        -:  531:
        -:  532:	int fd;
       30:  533:	if (stat(file, &attr) == -1) {
       30:  533-block  0
call    0 returned 30
branch  1 taken 2 (fallthrough)
branch  2 taken 28
        2:  534:		fp = open_fstream_w(file, &fd);
        2:  534-block  0
call    0 returned 2
        2:  535:		if (!fp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  536:			_err(0, NOPRINT_PROMPT, "%s: '%s': %s\n", PROGRAM_NAME,
call    0 never executed
unconditional  1 never executed
    #####:  537:			    file, strerror(errno));
    %%%%%:  537-block  0
call    0 never executed
        -:  538:		} else {
        2:  539:			close_fstream(fp, fd);
        2:  539-block  0
call    0 returned 2
unconditional  1 taken 2
        -:  540:		}
        -:  541:
        2:  542:		return; /* Return anyway, for, being a new empty file, there's
        2:  542-block  0
unconditional  0 taken 2
        -:  543:		no need to truncate it */
        -:  544:	}
        -:  545:
        -:  546:	/* Once we know the files exists, keep only MAX entries */
       28:  547:	fp = open_fstream_r(file, &fd);
       28:  547-block  0
call    0 returned 28
       28:  548:	if (!fp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 28
    #####:  549:		_err(0, NOPRINT_PROMPT, "%s: log: %s: %s\n", PROGRAM_NAME,
call    0 never executed
    #####:  550:		    file, strerror(errno));
    %%%%%:  550-block  0
call    0 never executed
    #####:  551:		return;
unconditional  0 never executed
        -:  552:	}
        -:  553:
       28:  554:	int n = 0, c;
        -:  555:
        -:  556:	/* Count newline chars to get amount of lines in the file */
   292651:  557:	while ((c = fgetc(fp)) != EOF) {
       28:  557-block  0
unconditional  0 taken 28
   292651:  557-block  1
call    1 returned 292651
branch  2 taken 292623
branch  3 taken 28 (fallthrough)
   292623:  558:		if (c == '\n')
   292623:  558-block  0
branch  0 taken 4248 (fallthrough)
branch  1 taken 288375
     4248:  559:			n++;
     4248:  559-block  0
unconditional  0 taken 4248
        -:  560:	}
        -:  561:
       28:  562:	if (n <= max) {
       28:  562-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 2
       26:  563:		close_fstream(fp, fd);
       26:  563-block  0
call    0 returned 26
       26:  564:		return;
unconditional  0 taken 26
        -:  565:	}
        -:  566:
        -:  567:	/* Set the file pointer to the beginning of the log file */
        2:  568:	fseek(fp, 0, SEEK_SET);
        2:  568-block  0
call    0 returned 2
        -:  569:
        -:  570:	/* Create a temp file to store only newest logs */
        2:  571:	char *rand_ext = gen_rand_str(6);
call    0 returned 2
        2:  572:	if (!rand_ext) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  573:		close_fstream(fp, fd);
    %%%%%:  573-block  0
call    0 never executed
    #####:  574:		return;
unconditional  0 never executed
        -:  575:	}
        -:  576:
        2:  577:	char *tmp = (char *)xnmalloc(strlen(config_dir) + 12, sizeof(char));
        2:  577-block  0
call    0 returned 2
        2:  578:	sprintf(tmp, "%s/log.%s", config_dir, rand_ext);
        2:  579:	free(rand_ext);
        -:  580:
        -:  581:	int fdd;
        2:  582:	FILE *fpp = open_fstream_w(tmp, &fdd);
call    0 returned 2
        2:  583:	if (!fpp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  584:		fprintf(stderr, "log: %s: %s", tmp, strerror(errno));
    %%%%%:  584-block  0
call    0 never executed
call    1 never executed
    #####:  585:		close_fstream(fp, fd);
call    0 never executed
    #####:  586:		free(tmp);
    #####:  587:		return;
unconditional  0 never executed
        -:  588:	}
        -:  589:
        2:  590:	int i = 1;
        2:  591:	size_t line_size = 0;
        2:  592:	char *line = (char *)NULL;
        -:  593:
      522:  594:	while (getline(&line, &line_size, fp) > 0) {
        2:  594-block  0
unconditional  0 taken 2
      522:  594-block  1
call    1 returned 522
branch  2 taken 520
branch  3 taken 2 (fallthrough)
        -:  595:		/* Delete old entries = copy only new ones */
      520:  596:		if (i++ >= n - (max - 1))
      520:  596-block  0
branch  0 taken 200 (fallthrough)
branch  1 taken 320
      200:  597:			fprintf(fpp, "%s", line);
      200:  597-block  0
call    0 returned 200
unconditional  1 taken 200
        -:  598:	}
        -:  599:
        2:  600:	free(line);
        2:  601:	unlinkat(fd, file, 0);
        2:  601-block  0
call    0 returned 2
        2:  602:	renameat(fdd, tmp, fd, file);
call    0 returned 2
        2:  603:	close_fstream(fpp, fdd);
call    0 returned 2
        2:  604:	close_fstream(fp, fd);
call    0 returned 2
        2:  605:	free(tmp);
        -:  606:
        2:  607:	return;
unconditional  0 taken 2
        -:  608:}
