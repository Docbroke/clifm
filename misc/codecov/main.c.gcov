        -:    0:Source:main.c
        -:    1:
        -:    2:			/*  ########################################
        -:    3:			 *  #               CliFM                  #
        -:    4:			 *  # 	The KISS/non-curses file manager   #
        -:    5:			 *  ######################################## */
        -:    6:
        -:    7:/* GPL2+ License 
        -:    8: * Copyright (C) 2016-2021, L. Abramovich <johndoe.arch@outlook.com>
        -:    9: * All rights reserved.
        -:   10:
        -:   11: * This program is free software; you can redistribute it and/or modify
        -:   12: * it under the terms of the GNU General Public License as published by
        -:   13: * the Free Software Foundation; either version 2 of the License, or
        -:   14: * (at your option) any later version.
        -:   15: *
        -:   16: * This program is distributed in the hope that it will be useful,
        -:   17: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   18: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   19: * GNU General Public License for more details.
        -:   20: *
        -:   21: * You should have received a copy of the GNU General Public License
        -:   22: * along with this program; if not, write to the Free Software
        -:   23: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
        -:   24: * MA 02110-1301, USA.
        -:   25: *
        -:   26: */
        -:   27:
        -:   28:#include "helpers.h"
        -:   29:
        -:   30:#include <errno.h>
        -:   31:#include <libintl.h>
        -:   32:#include <locale.h>
        -:   33:#include <stdio.h>
        -:   34:#include <stdlib.h>
        -:   35:#include <string.h>
        -:   36:#include <sys/stat.h>
        -:   37:#include <termios.h>
        -:   38:#include <unistd.h>
        -:   39:#include <readline/readline.h>
        -:   40:#include <readline/history.h>
        -:   41:
        -:   42:#include "aux.h"
        -:   43:#include "checks.h"
        -:   44:#include "colors.h"
        -:   45:#include "config.h"
        -:   46:#include "exec.h"
        -:   47:#include "history.h"
        -:   48:#include "init.h"
        -:   49:#include "jump.h"
        -:   50:#include "keybinds.h"
        -:   51:#include "listing.h"
        -:   52:#include "misc.h"
        -:   53:#include "navigation.h"
        -:   54:#include "profiles.h"
        -:   55:#include "prompt.h"
        -:   56:#include "readline.h"
        -:   57:#include "strings.h"
        -:   58:#include "remotes.h"
        -:   59:
        -:   60:/* Globals */
        -:   61:
        -:   62:
        -:   63:
        -:   64:struct usrvar_t *usr_var = (struct usrvar_t *)NULL;
        -:   65:struct actions_t *usr_actions = (struct actions_t *)NULL;
        -:   66:struct ws_t *ws = (struct ws_t *)NULL;
        -:   67:struct kbinds_t *kbinds = (struct kbinds_t *)NULL;
        -:   68:struct jump_t *jump_db = (struct jump_t *)NULL;
        -:   69:struct bookmarks_t *bookmarks = (struct bookmarks_t *)NULL;
        -:   70:struct fileinfo *file_info = (struct fileinfo *)NULL;
        -:   71:struct remote_t *remotes = (struct remote_t *)NULL;
        -:   72:#ifndef _NO_SUGGESTIONS
        -:   73:struct suggestions_t suggestion;
        -:   74:#endif
        -:   75:/* pmsg holds the current program message type */
        -:   76:enum prog_msg pmsg = NOMSG;
        -:   77:struct param xargs;
        -:   78:unsigned short term_cols;
        -:   79:
        -:   80:int curcol = 0,
        -:   81:	currow = 0,
        -:   82:	flags;
        -:   83:
        -:   84:struct termios
        -:   85:	orig_termios,
        -:   86:	shell_tmodes;
        -:   87:
        -:   88:off_t total_sel_size = 0;
        -:   89:pid_t own_pid = 0;
        -:   90:
        -:   91:unsigned short
        -:   92:	term_cols = 0,
        -:   93:	term_rows = 0;
        -:   94:
        -:   95:regex_t regex_exp;
        -:   96:size_t *ext_colors_len = (size_t *)NULL;
        -:   97:
        -:   98:int
        -:   99:    auto_open = UNSET,
        -:  100:    autocd = UNSET,
        -:  101:	autojump = UNSET,
        -:  102:	bg_proc = 0,
        -:  103:    case_sens_dirjump = UNSET,
        -:  104:    case_sens_path_comp = UNSET,
        -:  105:    case_sensitive = UNSET,
        -:  106:    cd_lists_on_the_fly = UNSET,
        -:  107:    cd_on_quit = UNSET,
        -:  108:	check_cap = UNSET,
        -:  109:	check_ext = UNSET,
        -:  110:    classify = UNSET,
        -:  111:    clear_screen = UNSET,
        -:  112:    colorize = UNSET,
        -:  113:    columned = UNSET,
        -:  114:    config_ok = 1,
        -:  115:    copy_n_rename = 0,
        -:  116:    cp_cmd = UNSET,
        -:  117:    cur_ws = UNSET,
        -:  118:    dequoted = 0,
        -:  119:    dirhist_map = UNSET,
        -:  120:    disk_usage = UNSET,
        -:  121:    expand_bookmarks = UNSET,
        -:  122:    ext_cmd_ok = UNSET,
        -:  123:    files_counter = UNSET,
        -:  124:	filter_rev = 0,
        -:  125:	follow_symlinks = UNSET,
        -:  126:	highlight = UNSET,
        -:  127:    home_ok = 1,
        -:  128:#ifndef _NO_ICONS
        -:  129:    icons = 0,
        -:  130:#endif
        -:  131:    internal_cmd = 0,
        -:  132:    is_sel = 0,
        -:  133:    kb_shortcut = 0,
        -:  134:    kbind_busy = 0,
        -:  135:    light_mode = UNSET,
        -:  136:    list_folders_first = UNSET,
        -:  137:    logs_enabled = UNSET,
        -:  138:    long_view = UNSET,
        -:  139:    mime_match = 0,
        -:  140:    min_name_trim = UNSET,
        -:  141:    mv_cmd = UNSET,
        -:  142:    no_eln = UNSET,
        -:  143:    no_log = 0,
        -:  144:    only_dirs = UNSET,
        -:  145:    pager = UNSET,
        -:  146:    tips = UNSET,
        -:  147:    print_msg = 0,
        -:  148:	print_selfiles = UNSET,
        -:  149:	prompt_style = UNSET,
        -:  150:    recur_perm_error_flag = 0,
        -:  151:    restore_last_path = UNSET,
        -:  152:    sel_is_last = 0,
        -:  153:    selfile_ok = 1,
        -:  154:    share_selbox = UNSET,
        -:  155:    shell_terminal = 0,
        -:  156:    show_hidden = UNSET,
        -:  157:    sort = UNSET,
        -:  158:    sort_reverse = 0,
        -:  159:    sort_switch = 0,
        -:  160:    splash_screen = UNSET,
        -:  161:    suggestions = UNSET,
        -:  162:    suggest_filetype_color = UNSET,
        -:  163:    switch_cscheme = 0,
        -:  164:#ifndef _NO_TRASH
        -:  165:    tr_as_rm = UNSET,
        -:  166:    trash_ok = 1,
        -:  167:#endif
        -:  168:    unicode = UNSET,
        -:  169:    welcome_message = UNSET;
        -:  170:
        -:  171:int
        -:  172:    argc_bk = 0,
        -:  173:    dirhist_cur_index = 0,
        -:  174:    exit_code = 0,
        -:  175:    dirhist_total_index = 0,
        -:  176:    jump_total_rank = 0,
        -:  177:    max_dirhist = UNSET,
        -:  178:    max_files = UNSET,
        -:  179:    max_hist = UNSET,
        -:  180:    min_jump_rank = UNSET,
        -:  181:    max_jump_total_rank = UNSET,
        -:  182:    max_log = UNSET,
        -:  183:    max_path = UNSET,
        -:  184:	max_printselfiles = UNSET,
        -:  185:    shell_is_interactive = 0,
        -:  186:    trash_n = 0,
        -:  187:    *eln_as_file = (int *)0;
        -:  188:
        -:  189:size_t
        -:  190:    actions_n = 0,
        -:  191:    aliases_n = 0,
        -:  192:    args_n = 0,
        -:  193:    bm_n = 0,
        -:  194:	cdpath_n = 0,
        -:  195:    cschemes_n = 0,
        -:  196:    current_hist_n = 0,
        -:  197:    eln_as_file_n = 0,
        -:  198:    ext_colors_n = 0,
        -:  199:    files = 0,
        -:  200:    jump_n = 0,
        -:  201:    kbinds_n = 0,
        -:  202:    longest = 0,
        -:  203:    msgs_n = 0,
        -:  204:    path_n = 0,
        -:  205:    path_progsn = 0,
        -:  206:    prompt_cmds_n = 0,
        -:  207:    remotes_n = 0,
        -:  208:    sel_n = 0,
        -:  209:    user_home_len = 0,
        -:  210:    usrvar_n = 0;
        -:  211:
        -:  212:char
        -:  213:    div_line_char[NAME_MAX],
        -:  214:    hostname[HOST_NAME_MAX],
        -:  215:
        -:  216:    *actions_file = (char *)NULL,
        -:  217:    *alt_bm_file = (char *)NULL,
        -:  218:    *alt_config_dir = (char *)NULL,
        -:  219:    *alt_config_file = (char *)NULL,
        -:  220:    *alt_kbinds_file = (char *)NULL,
        -:  221:    *alt_profile = (char *)NULL,
        -:  222:    *bm_file = (char *)NULL,
        -:  223:    *colors_dir = (char *)NULL,
        -:  224:    *config_dir = (char *)NULL,
        -:  225:    *config_dir_gral = (char *)NULL,
        -:  226:    *config_file = (char *)NULL,
        -:  227:	*cur_color = (char *)NULL,
        -:  228:    *data_dir = (char *)NULL,
        -:  229:    *cur_cscheme = (char *)NULL,
        -:  230:    *dirhist_file = (char *)NULL,
        -:  231:    *encoded_prompt = (char *)NULL,
        -:  232:    *file_cmd_path = (char *)NULL,
        -:  233:    *filter = (char *)NULL,
        -:  234:    *hist_file = (char *)NULL,
        -:  235:    *jump_suggestion = (char *)NULL,
        -:  236:    *kbinds_file = (char *)NULL,
        -:  237:    *last_cmd = (char *)NULL,
        -:  238:    *log_file = (char *)NULL,
        -:  239:    *ls_colors_bk = (char *)NULL,
        -:  240:    *mime_file = (char *)NULL,
        -:  241:    *msg_log_file = (char *)NULL,
        -:  242:    *opener = (char *)NULL,
        -:  243:    *pinned_dir = (char *)NULL,
        -:  244:    *plugins_dir = (char *)NULL,
        -:  245:    *profile_file = (char *)NULL,
        -:  246:    *qc = (char *)NULL,
        -:  247:    *remotes_file = (char *)NULL,
        -:  248:    *sel_file = (char *)NULL,
        -:  249:    *stdin_tmp_dir = (char *)NULL,
        -:  250:#ifndef _NO_SUGGESTIONS
        -:  251:	*suggestion_buf = (char *)NULL,
        -:  252:    *suggestion_strategy = (char *)NULL,
        -:  253:#endif
        -:  254:    *sys_shell = (char *)NULL,
        -:  255:    *term = (char *)NULL,
        -:  256:    *tmp_dir = (char *)NULL,
        -:  257:#ifndef _NO_TRASH
        -:  258:    *trash_dir = (char *)NULL,
        -:  259:    *trash_files_dir = (char *)NULL,
        -:  260:    *trash_info_dir = (char *)NULL,
        -:  261:#endif
        -:  262:    *usr_cscheme = (char *)NULL,
        -:  263:    *user_home = (char *)NULL,
        -:  264:
        -:  265:    **aliases = (char **)NULL,
        -:  266:    **argv_bk = (char **)NULL,
        -:  267:    **bin_commands = (char **)NULL,
        -:  268:    **bookmark_names = (char **)NULL,
        -:  269:    **cdpaths = (char **)NULL,
        -:  270:    **color_schemes = (char **)NULL,
        -:  271:    **ext_colors = (char **)NULL,
        -:  272:    **history = (char **)NULL,
        -:  273:    **messages = (char **)NULL,
        -:  274:    **old_pwd = (char **)NULL,
        -:  275:    **paths = (char **)NULL,
        -:  276:    **profile_names = (char **)NULL,
        -:  277:    **prompt_cmds = (char **)NULL,
        -:  278:    **sel_elements = (char **)NULL;
        -:  279:
        -:  280:/* This is not a comprehensive list of commands. It only lists
        -:  281: * commands long version for TAB completion */
        -:  282:const char *internal_cmds[] = {
        -:  283:    "actions",
        -:  284:    "alias",
        -:  285:    "auto-open",
        -:  286:    "autocd",
        -:  287:    "back",
        -:  288:    "bookmarks",
        -:  289:    "colors",
        -:  290:    "colorschemes",
        -:  291:    "columns",
        -:  292:    "commands",
        -:  293:    "desel",
        -:  294:	"dup",
        -:  295:    "edit",
        -:  296:    "exit",
        -:  297:    "export",
        -:  298:    "filter",
        -:  299:    "folders-first",
        -:  300:    "forth",
        -:  301:    "help",
        -:  302:    "hidden",
        -:  303:    "history",
        -:  304:    "icons",
        -:  305:    "jump",
        -:  306:    "keybinds",
        -:  307:    "log",
        -:  308:    "messages",
        -:  309:    "mime",
        -:  310:    "mountpoints",
        -:  311:    "move",
        -:  312:	"new",
        -:  313:    "open",
        -:  314:    "opener",
        -:  315:    "pager",
        -:  316:    "paste",
        -:  317:    "path",
        -:  318:    "pin",
        -:  319:    "profile",
        -:  320:    "prop",
        -:  321:    "quit",
        -:  322:    "refresh",
        -:  323:    "reload",
        -:  324:    "sel",
        -:  325:    "selbox",
        -:  326:    "shell",
        -:  327:    "sort",
        -:  328:    "splash",
        -:  329:    "tips",
        -:  330:    "trash",
        -:  331:    "undel",
        -:  332:    "unicode",
        -:  333:    "unpin",
        -:  334:    "untrash",
        -:  335:    "version",
        -:  336:    NULL};
        -:  337:
        -:  338:/* Just a list of internal commands and fixed parameters for the
        -:  339: * auto-suggestions system */
        -:  340:const char *param_str[] = {
        -:  341:	"actions edit",
        -:  342:	"autocd on",
        -:  343:	"acd on",
        -:  344:	"autocd off",
        -:  345:	"acd off",
        -:  346:	"autocd status",
        -:  347:	"acd status",
        -:  348:	"alias import",
        -:  349:	"ao on",
        -:  350:	"auto-open on",
        -:  351:	"ao off",
        -:  352:	"auto-open off",
        -:  353:	"ao status",
        -:  354:	"auto-open status",
        -:  355:	"b hist",
        -:  356:	"b clear",
        -:  357:	"back hist",
        -:  358:	"back clear",
        -:  359:	"bm add",
        -:  360:	"bm del",
        -:  361:	"bm edit",
        -:  362:	"bookmarks add",
        -:  363:	"bookmarks del",
        -:  364:	"bookmarks edit",
        -:  365:	"cs edit",
        -:  366:	"colorscheme edit",
        -:  367:	"edit",
        -:  368:	"edit reset",
        -:  369:	"ext on",
        -:  370:	"ext off",
        -:  371:	"ext status",
        -:  372:	"f hist",
        -:  373:	"f clear",
        -:  374:	"forth hist",
        -:  375:	"forth clear",
        -:  376:	"fc on",
        -:  377:	"filescounter on",
        -:  378:	"fc off",
        -:  379:	"filescounter off",
        -:  380:	"fc status",
        -:  381:	"filescounter status",
        -:  382:	"ff on",
        -:  383:	"folders-first on",
        -:  384:	"ff off",
        -:  385:	"folders-first off",
        -:  386:	"ff status",
        -:  387:	"folders-first status",
        -:  388:	"ft unset",
        -:  389:	"filter unset",
        -:  390:	"hf on",
        -:  391:	"hf off",
        -:  392:	"hf status",
        -:  393:	"hidden on",
        -:  394:	"hidden off",
        -:  395:	"hidden status",
        -:  396:	"history clear",
        -:  397:	"icons on",
        -:  398:	"icons off",
        -:  399:	"kb edit",
        -:  400:	"keybinds edit",
        -:  401:	"kb reset",
        -:  402:	"keybinds reset",
        -:  403:	"kb readline",
        -:  404:	"keybinds readline",
        -:  405:	"l edit",
        -:  406:	"lm on",
        -:  407:	"lm off",
        -:  408:	"log clear",
        -:  409:	"mm info",
        -:  410:	"mm edit",
        -:  411:	"mm import",
        -:  412:	"mime info",
        -:  413:	"mime edit",
        -:  414:	"mime import",
        -:  415:	"msg clear",
        -:  416:	"messages clear",
        -:  417:	"net edit",
        -:  418:	"net mount",
        -:  419:	"net unmount",
        -:  420:	"pg on",
        -:  421:	"pager on",
        -:  422:	"pg off",
        -:  423:	"pager off",
        -:  424:	"pg status",
        -:  425:	"pager status",
        -:  426:	"pf set",
        -:  427:	"pf add",
        -:  428:	"pf del",
        -:  429:	"profile set",
        -:  430:	"profile add",
        -:  431:	"profile del",
        -:  432:	"st none",
        -:  433:	"st name",
        -:  434:	"st size",
        -:  435:	"st atime",
        -:  436:	"st btime",
        -:  437:	"st ctime",
        -:  438:	"st owner",
        -:  439:	"st group",
        -:  440:	"st ext",
        -:  441:	"st inode",
        -:  442:	"st version",
        -:  443:	"sort none",
        -:  444:	"sort name",
        -:  445:	"sort size",
        -:  446:	"sort atime",
        -:  447:	"sort btime",
        -:  448:	"sort ctime",
        -:  449:	"sort owner",
        -:  450:	"sort group",
        -:  451:	"sort ext",
        -:  452:	"sort inode",
        -:  453:	"sort version",
        -:  454:	"st rev",
        -:  455:	"sort rev",
        -:  456:	"t list",
        -:  457:	"t clear",
        -:  458:	"t del",
        -:  459:	"tr list",
        -:  460:	"tr clear",
        -:  461:	"tr del",
        -:  462:	"trash list",
        -:  463:	"trash clear",
        -:  464:	"trash del",
        -:  465:	"u all",
        -:  466:	"undel all",
        -:  467:	"untrash all",
        -:  468:	"uc on",
        -:  469:	"unicode on",
        -:  470:	"uc off",
        -:  471:	"unicode off",
        -:  472:	"uc status",
        -:  473:	"unicode status",
        -:  474:	NULL};
        -:  475:
        -:  476:/* To store all the 39 color variables I use, with 46 bytes each, I need
        -:  477: * a total of 1,8Kb. It's not much but it could be less if I'd use
        -:  478: * dynamically allocated arrays for them (which, on the other side,
        -:  479: * would make the whole thing slower and more tedious) */
        -:  480:
        -:  481:/* Colors */
        -:  482:char
        -:  483:	/* File types */
        -:  484:    bd_c[MAX_COLOR],  /* Block device */
        -:  485:    ca_c[MAX_COLOR],  /* Cap file */
        -:  486:    cd_c[MAX_COLOR],  /* Char device */
        -:  487:    di_c[MAX_COLOR],  /* Directory */
        -:  488:    ed_c[MAX_COLOR],  /* Empty dir */
        -:  489:    ee_c[MAX_COLOR],  /* Empty executable */
        -:  490:    ef_c[MAX_COLOR],  /* Empty reg file */
        -:  491:    ex_c[MAX_COLOR],  /* Executable */
        -:  492:    fi_c[MAX_COLOR],  /* Reg file */
        -:  493:    ln_c[MAX_COLOR],  /* Symlink */
        -:  494:    mh_c[MAX_COLOR],  /* Multi-hardlink file */
        -:  495:    nd_c[MAX_COLOR],  /* No read directory */
        -:  496:    ne_c[MAX_COLOR],  /* No read empty dir */
        -:  497:    nf_c[MAX_COLOR],  /* No read file */
        -:  498:    no_c[MAX_COLOR],  /* Unknown */
        -:  499:    or_c[MAX_COLOR],  /* Broken symlink */
        -:  500:    ow_c[MAX_COLOR],  /* Other writable */
        -:  501:    pi_c[MAX_COLOR],  /* FIFO, pipe */
        -:  502:    sg_c[MAX_COLOR],  /* SGID file */
        -:  503:    so_c[MAX_COLOR],  /* Socket */
        -:  504:    st_c[MAX_COLOR],  /* Sticky (not ow)*/
        -:  505:    su_c[MAX_COLOR],  /* SUID file */
        -:  506:    tw_c[MAX_COLOR],  /* Sticky other writable */
        -:  507:    uf_c[MAX_COLOR],  /* Non-'stat'able file */
        -:  508:
        -:  509:	/* Interface */
        -:  510:    bm_c[MAX_COLOR], /* Bookmarked directory */
        -:  511:    dc_c[MAX_COLOR], /* Files counter color */
        -:  512:    df_c[MAX_COLOR], /* Default color */
        -:  513:    dh_c[MAX_COLOR], /* Dirhist index color */
        -:  514:    dl_c[MAX_COLOR], /* Dividing line index color */
        -:  515:    el_c[MAX_COLOR], /* ELN color */
        -:  516:    mi_c[MAX_COLOR], /* Misc indicators color */
        -:  517:
        -:  518:	/* Suggestions */
        -:  519:    sc_c[MAX_COLOR], /* Auto-suggestions: external commands */
        -:  520:    sh_c[MAX_COLOR], /* Auto-suggestions: history */
        -:  521:    sf_c[MAX_COLOR], /* Auto-suggestions: filenames */
        -:  522:    sx_c[MAX_COLOR], /* Auto-suggestions: internal commands and params */
        -:  523:    wc_c[MAX_COLOR], /* Welcome message color */
        -:  524:
        -:  525:#ifndef _NO_ICONS
        -:  526:    dir_ico_c[MAX_COLOR], /* Directories icon color */
        -:  527:#endif
        -:  528:
        -:  529:	/* Syntax highlighting */
        -:  530:	hb_c[MAX_COLOR],		/* Brackets: () [] {} */
        -:  531:	hc_c[MAX_COLOR],		/* Comments */
        -:  532:	he_c[MAX_COLOR],		/* Expansion operators: * ~ */
        -:  533:	hn_c[MAX_COLOR],		/* Numbers */
        -:  534:	hp_c[MAX_COLOR],		/* Parameters: - */
        -:  535:	hq_c[MAX_COLOR],		/* Quoted strings */
        -:  536:	hr_c[MAX_COLOR],		/* Redirection: > */
        -:  537:	hs_c[MAX_COLOR],		/* Process separators: | & ; */
        -:  538:	hv_c[MAX_COLOR],		/* Variables: $ */
        -:  539:
        -:  540:    /* Colors used in the prompt, so that \001 and \002 needs to
        -:  541:	 * be added. This is why MAX_COLOR + 2 */
        -:  542:    em_c[MAX_COLOR + 2], /* Error msg color */
        -:  543:    li_c[MAX_COLOR + 2], /* Sel indicator color */
        -:  544:    nm_c[MAX_COLOR + 2], /* Notice msg color */
        -:  545:    wm_c[MAX_COLOR + 2], /* Warning msg color */
        -:  546:    si_c[MAX_COLOR + 2], /* stealth indicator color */
        -:  547:    ti_c[MAX_COLOR + 2], /* Trash indicator color */
        -:  548:    tx_c[MAX_COLOR + 2]; /* Text color */
        -:  549:
        -:  550:#ifdef LINUX_INOTIFY
        -:  551:int inotify_fd, inotify_wd = -1;
        -:  552:unsigned int INOTIFY_MASK = /*IN_ATTRIB |*/ IN_CREATE | IN_DELETE
        -:  553:	| IN_DELETE_SELF | /*IN_MODIFY |*/ IN_MOVE_SELF
        -:  554:	| IN_MOVED_FROM | IN_MOVED_TO | IN_EXCL_UNLINK ;
        -:  555:#elif defined(BSD_KQUEUE)
        -:  556:int kq, event_fd = -1;
        -:  557:struct kevent events_to_monitor[NUM_EVENT_FDS];
        -:  558:unsigned int KQUEUE_FFLAGS = NOTE_DELETE | NOTE_EXTEND| NOTE_LINK
        -:  559:	| NOTE_RENAME | NOTE_REVOKE | NOTE_WRITE;
        -:  560:struct timespec timeout;
        -:  561:#endif
        -:  562:int watch = -1;
        -:  563:
        -:  564:			/**
        -:  565:				 * #############################
        -:  566:				 * #           MAIN            #
        -:  567:				 * #############################
        -:  568:				 * */
        -:  569:
        -:  570:int
function main called 4 returned 0% blocks executed 85%
        4:  571:main(int argc, char *argv[])
        -:  572:{
        -:  573:	/* Though this program might perfectly work on other architectures,
        -:  574:	 * I just didn't test anything beyond x86 and ARM */
        -:  575:#if !defined(__x86_64__) && !defined(__i386__) && !defined(__ARM_ARCH)
        -:  576:	fprintf(stderr, "%s: Unsupported CPU architecture\n", PROGRAM_NAME);
        -:  577:	exit(EXIT_FAILURE);
        -:  578:#endif
        -:  579:
        -:  580:#if !defined(__linux__) && !defined(__FreeBSD__) \
        -:  581:&& !defined(__NetBSD__) && !defined(__OpenBSD__) && !defined(__HAIKU__)
        -:  582:	fprintf(stderr, _("%s: Unsupported operating system\n"), PROGRAM_NAME);
        -:  583:	exit(EXIT_FAILURE);
        -:  584:#endif
        -:  585:
        -:  586:	/* Make sure we are running on a supported terminal */
        4:  587:	check_term();
        4:  587-block  0
call    0 returned 4
        -:  588:
        -:  589:	/* Set the default color */
        -:  590:/*	fputs(DEF_DF_C, stdout);
        -:  591:	fflush(stdout); */
        -:  592:
        -:  593:	/* If running the program locally, that is, not from a path in PATH,
        -:  594:	 * remove the leading "./" to get the correct program invocation
        -:  595:	 * name */
        4:  596:	if (*argv[0] == '.' && *(argv[0] + 1) == '/')
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:  596-block  0
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2:  597:		argv[0] += 2;
        2:  597-block  0
unconditional  0 taken 2
        -:  598:
        -:  599:	/* Use the locale specified by the environment */
        4:  600:	setlocale(LC_ALL, "");
        4:  600-block  0
call    0 returned 4
        -:  601:
        4:  602:	unicode = DEF_UNICODE;
        -:  603:
        -:  604:	/* Store external arguments to be able to rerun external_arguments()
        -:  605:	 * in case the user edits the config file, in which case the program
        -:  606:	 * must rerun init_config(), get_aliases(), get_prompt_cmds(), and
        -:  607:	 * then external_arguments() */
        4:  608:	backup_argv(argc, argv);
call    0 returned 4
        -:  609:
        -:  610:	/* free_stuff does some cleaning */
        4:  611:	atexit(free_stuff);
call    0 returned 4
        -:  612:
        4:  613:	user = get_user();
call    0 returned 4
        4:  614:	get_home();
call    0 returned 4
        -:  615:
        4:  616:	if (geteuid() == 0)
call    0 returned 4
branch  1 taken 1 (fallthrough)
branch  2 taken 3
        1:  617:		flags |= ROOT_USR;
        1:  617-block  0
unconditional  0 taken 1
        -:  618:
        -:  619:	/* Running in a graphical environment? */
        -:  620:#if __linux__
        4:  621:	if (getenv("DISPLAY") != NULL && strncmp(getenv("TERM"), "linux", 5) != 0)
        4:  621-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0
        4:  621-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0
        -:  622:#else
        -:  623:	if (getenv("DISPLAY") != NULL)
        -:  624:#endif
        4:  625:		flags |= GUI;
        4:  625-block  0
unconditional  0 taken 4
        -:  626:
        -:  627:	/* Get paths from PATH environment variable. These paths will be
        -:  628:	 * used later by get_path_programs (for the autocomplete function)
        -:  629:	 * and get_cmd_path() */
        4:  630:	path_n = get_path_env();
        4:  630-block  0
call    0 returned 4
        4:  631:	cdpath_n = get_cdpath();
call    0 returned 4
        -:  632:
        4:  633:	init_workspaces();
call    0 returned 4
        -:  634:
        -:  635:	/* Set all external arguments flags to uninitialized state */
        4:  636:	unset_xargs();
call    0 returned 4
        -:  637:
        -:  638:	/* Manage external arguments, but only if any: argc == 1 equates to
        -:  639:	 * no argument, since this '1' is just the program invokation name.
        -:  640:	 * External arguments will override initialization values
        -:  641:	 * (init_config) */
        4:  642:	if (argc > 1)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  643:		external_arguments(argc, argv);
        4:  643-block  0
call    0 returned 4
unconditional  1 taken 4
        -:  644:	/* external_arguments is executed before init_config because, if
        -:  645:	 * specified (-P option), it sets the value of alt_profile, which
        -:  646:	 * is then checked by init_config */
        -:  647:
        4:  648:	check_env_filter();
        4:  648-block  0
call    0 returned 4
        4:  649:	get_data_dir();
call    0 returned 4
        -:  650:
        -:  651:	/* Initialize program paths and files, set options from the config
        -:  652:	 * file, if they were not already set via external arguments, and
        -:  653:	 * load sel elements, if any. All these configurations are made
        -:  654:	 * per user basis */
        -:  655:
        4:  656:	init_config();
call    0 returned 4
        4:  657:	check_options();
call    0 returned 4
        -:  658:
        4:  659:	set_sel_file();
call    0 returned 4
        4:  660:	create_tmp_files();
call    0 returned 4
        4:  661:	load_actions();
call    0 returned 4
        4:  662:	get_aliases();
call    0 returned 4
        -:  663:
        -:  664:	/* Get the list of available applications in PATH to be used by my
        -:  665:	 * custom TAB-completion function */
        4:  666:	get_path_programs();
call    0 returned 4
        -:  667:
        -:  668:	/* Initialize gettext() for translations */
        -:  669:#ifndef _NO_GETTEXT
        4:  670:	init_gettext();
call    0 returned 4
        -:  671:#endif
        -:  672:
        4:  673:	cschemes_n = get_colorschemes();
call    0 returned 4
       4*:  674:	set_colors(usr_cscheme ? usr_cscheme : "default", 1);
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  674-block  0
unconditional  2 taken 4
    %%%%%:  674-block  1
unconditional  3 never executed
        4:  674-block  2
call    4 returned 4
        4:  675:	free(usr_cscheme);
        4:  676:	usr_cscheme = (char *)NULL;
        -:  677:
        4:  678:	fputs(df_c, stdout);
call    0 returned 4
        4:  679:	fflush(stdout);
call    0 returned 4
        -:  680:
        4:  681:	if (flags & ROOT_USR) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  682:		_err(0, PRINT_PROMPT, _("%s%s: %sRunning as root%s\n"),
        1:  682-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        -:  683:			BOLD, PROGRAM_NAME, _RED, df_c);
        -:  684:	}
        -:  685:
        4:  686:	load_remotes();
        4:  686-block  0
call    0 returned 4
        4:  687:	automount_remotes();
call    0 returned 4
        -:  688:
        4:  689:	if (splash_screen) {
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  690:		splash();
    %%%%%:  690-block  0
call    0 never executed
    #####:  691:		splash_screen = 0;
    #####:  692:		CLEAR;
call    0 never executed
unconditional  1 never executed
        -:  693:	}
        -:  694:
        4:  695:	set_start_path();
        4:  695-block  0
call    0 returned 4
        -:  696:
        4:  697:	if (ws == (struct ws_t *)NULL || !ws[cur_ws].path || !*ws[cur_ws].path) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  697-block  0
branch  2 taken 4 (fallthrough)
branch  3 taken 0
        4:  697-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 4
    #####:  698:		_err(0, NOPRINT_PROMPT, _("%s: Fatal error! Failed "
    %%%%%:  698-block  0
call    0 never executed
call    1 never executed
        -:  699:			"retrieving current working directory\n"), PROGRAM_NAME);
    #####:  700:		exit(EXIT_FAILURE);
call    0 never executed
        -:  701:	}
        -:  702:
        -:  703:	/* Set terminal window title */
        4:  704:	if (flags & GUI) {
        4:  704-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  705:		if (xargs.cwd_in_title == 0) {
        4:  705-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:  706:			printf("\033]2;%s\007", PROGRAM_NAME);
        2:  706-block  0
call    0 returned 2
        2:  707:			fflush(stdout);
call    0 returned 2
unconditional  1 taken 2
        -:  708:		} else {
        2:  709:			set_term_title(ws[cur_ws].path);
        2:  709-block  0
call    0 returned 2
unconditional  1 taken 2
        -:  710:		}
        -:  711:	}
        -:  712:
        4:  713:	exec_profile();
        4:  713-block  0
call    0 returned 4
        4:  714:	load_dirhist();
call    0 returned 4
        4:  715:	add_to_dirhist(ws[cur_ws].path);
call    0 returned 4
        4:  716:	get_sel_files();
call    0 returned 4
        -:  717:
        -:  718:	/* Start listing as soon as possible to speed up startup time */
        4:  719:	if (cd_lists_on_the_fly && isatty(STDIN_FILENO)) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  719-block  0
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0
        -:  720:#ifdef LINUX_INOTIFY
        -:  721:		/* Initialize inotify */
        4:  722:		inotify_fd = inotify_init1(IN_NONBLOCK);
        4:  722-block  0
call    0 returned 4
        4:  723:		if (inotify_fd < 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  724:			_err('w', PRINT_PROMPT, "%s: inotify: %s\n", PROGRAM_NAME,
call    0 never executed
unconditional  1 never executed
    #####:  725:				strerror(errno));
    %%%%%:  725-block  0
call    0 never executed
        -:  726:		}
        -:  727:#elif defined(BSD_KQUEUE)
        -:  728:		kq = kqueue();
        -:  729:		if (kq < 0) {
        -:  730:			_err('w', PRINT_PROMPT, "%s: kqueue: %s\n", PROGRAM_NAME,
        -:  731:				strerror(errno));
        -:  732:		}
        -:  733:#endif
        4:  734:		list_dir();
        4:  734-block  0
call    0 returned 4
unconditional  1 taken 4
        -:  735:	}
        -:  736:
        4:  737:	create_kbinds_file();
        4:  737-block  0
call    0 returned 4
        4:  738:	load_bookmarks();
call    0 returned 4
        4:  739:	load_keybinds();
call    0 returned 4
        4:  740:	load_jumpdb();
call    0 returned 4
        4:  741:	if (!jump_db || xargs.path == 1)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  741-block  0
branch  2 taken 2 (fallthrough)
branch  3 taken 2
        2:  742:		add_to_jumpdb(ws[cur_ws].path);
        2:  742-block  0
call    0 returned 2
unconditional  1 taken 2
        -:  743:
        4:  744:	initialize_readline();
        4:  744-block  0
call    0 returned 4
        -:  745:
        -:  746:	/*Trim the directory history file if necessary */
        4:  747:	check_file_size(dirhist_file, max_dirhist);
call    0 returned 4
        -:  748:
        -:  749:	/* Check whether we have a working shell */
        4:  750:	if (access(user.shell, X_OK) == -1) {
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
    #####:  751:		_err('w', PRINT_PROMPT, _("%s: %s: System shell not found. "
    %%%%%:  751-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  752:				"Please edit the configuration file to specify a working "
        -:  753:				"shell.\n"), PROGRAM_NAME, user.shell);
        -:  754:	}
        -:  755:
        4:  756:	get_prompt_cmds();
        4:  756-block  0
call    0 returned 4
        -:  757:
        -:  758:#ifndef _NO_TRASH
        4:  759:	if (trash_ok) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  760:		trash_n = count_dir(trash_files_dir, NO_CPOP);
        4:  760-block  0
call    0 returned 4
        4:  761:		if (trash_n <= 2)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  762:			trash_n = 0;
        4:  762-block  0
unconditional  0 taken 4
        -:  763:	}
        -:  764:#endif
        -:  765:
        4:  766:	if (gethostname(hostname, sizeof(hostname)) == -1) {
        4:  766-block  0
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
    #####:  767:		hostname[0] = '?';
    #####:  768:		hostname[1] = '\0';
    #####:  769:		_err('e', PRINT_PROMPT, _("%s: Error getting hostname\n"),
    %%%%%:  769-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  770:			PROGRAM_NAME);
        -:  771:	}
        -:  772:
        4:  773:	init_shell();
        4:  773-block  0
call    0 returned 4
        -:  774:
        4:  775:	if (config_ok)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  776:		init_history();
        4:  776-block  0
call    0 returned 4
unconditional  1 taken 4
        -:  777:
        -:  778:	/* Store history into an array to be able to manipulate it */
        4:  779:	get_history();
        4:  779-block  0
call    0 returned 4
        -:  780:
        -:  781:	/* Check if the 'file' command is available: we need it for Lira */
        -:  782:/*	if (!opener)
        -:  783:		file_cmd_check(); */
        -:  784:
        4:  785:	get_profile_names();
call    0 returned 4
        4:  786:	load_pinned_dir();
call    0 returned 4
        4:  787:	set_env();
call    0 returned 4
unconditional  1 taken 4
        -:  788:
        -:  789:				/* ###########################
        -:  790:				 * #   2) MAIN PROGRAM LOOP  #
        -:  791:				 * ########################### */
        -:  792:
        -:  793:	/* This is the main structure of any basic shell
        -:  794:		 1 - Infinite loop
        -:  795:		 2 - Grab user input
        -:  796:		 3 - Parse user input
        -:  797:		 4 - Execute command
        -:  798:		 See https://brennan.io/2015/01/16/write-a-shell-in-c/
        -:  799:		 */
        -:  800:
        -:  801:	int i;
        -:  802:	/* 1) Infinite loop to keep the program running */
      401:  803:	while (1) {
        -:  804:		/* 2) Grab input string from the prompt */
      405:  805:		char *input = prompt();
      405:  805-block  0
call    0 returned 405
      405:  806:		if (!input)
branch  0 taken 1 (fallthrough)
branch  1 taken 404
        1:  807:			continue;
        1:  807-block  0
unconditional  0 taken 1
        -:  808:
        -:  809:		/* 3) Parse input string */
      404:  810:		char **cmd = parse_input_str(input);
      404:  810-block  0
call    0 returned 404
      404:  811:		free(input);
      404:  812:		input = (char *)NULL;
        -:  813:
     404*:  814:		if (!cmd)
branch  0 taken 0 (fallthrough)
branch  1 taken 404
    #####:  815:			continue;
    %%%%%:  815-block  0
unconditional  0 never executed
        -:  816:
        -:  817:		/* 4) Execute input string */
      404:  818:		char **alias_cmd = check_for_alias(cmd);
      404:  818-block  0
call    0 returned 404
      404:  819:		if (alias_cmd) {
branch  0 taken 0 (fallthrough)
branch  1 taken 404
        -:  820:			/* If an alias is found, check_for_alias() frees cmd
        -:  821:			 * and returns alias_cmd in its place to be executed by
        -:  822:			 * exec_cmd() */
    #####:  823:			exec_cmd(alias_cmd);
    %%%%%:  823-block  0
call    0 never executed
        -:  824:
    #####:  825:			for (i = 0; alias_cmd[i]; i++)
unconditional  0 never executed
    %%%%%:  825-block  0
branch  1 never executed
branch  2 never executed
    #####:  826:				free(alias_cmd[i]);
    %%%%%:  826-block  0
unconditional  0 never executed
        -:  827:
    #####:  828:			free(alias_cmd);
    #####:  829:			alias_cmd = (char **)NULL;
    %%%%%:  829-block  0
unconditional  0 never executed
        -:  830:		} else {
      404:  831:			exec_cmd(cmd);
      404:  831-block  0
call    0 returned 400
        -:  832:
      400:  833:			i = (int)args_n + 1;
      970:  834:			while (--i >= 0)
unconditional  0 taken 400
      970:  834-block  0
branch  1 taken 570
branch  2 taken 400 (fallthrough)
      570:  835:				free(cmd[i]);
      570:  835-block  0
unconditional  0 taken 570
        -:  836:
      400:  837:			free(cmd);
      400:  838:			cmd = (char **)NULL;
      400:  838-block  0
unconditional  0 taken 400
        -:  839:		}
        -:  840:	}
        -:  841:
        -:  842:	return exit_code; /* Never reached */
        -:  843:}
