        -:    0:Source:keybinds.c
        -:    1:/* keybinds.c -- functions keybindings configuration */
        -:    2:
        -:    3:/*
        -:    4: * This file is part of CliFM
        -:    5: *
        -:    6: * Copyright (C) 2016-2021, L. Abramovich <johndoe.arch@outlook.com>
        -:    7: * All rights reserved.
        -:    8:
        -:    9: * CliFM is free software; you can redistribute it and/or modify
        -:   10: * it under the terms of the GNU General Public License as published by
        -:   11: * the Free Software Foundation; either version 2 of the License, or
        -:   12: * (at your option) any later version.
        -:   13: *
        -:   14: * CliFM is distributed in the hope that it will be useful,
        -:   15: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   16: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   17: * GNU General Public License for more details.
        -:   18: *
        -:   19: * You should have received a copy of the GNU General Public License
        -:   20: * along with this program; if not, write to the Free Software
        -:   21: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
        -:   22: * MA 02110-1301, USA.
        -:   23:*/
        -:   24:
        -:   25:#include "helpers.h"
        -:   26:
        -:   27:#include <stdio.h>
        -:   28:#include <sys/stat.h>
        -:   29:#ifdef __OpenBSD__
        -:   30:typedef char *rl_cpvfunc_t;
        -:   31:#include <ereadline/readline/readline.h>
        -:   32:#else
        -:   33:#include <readline/readline.h>
        -:   34:#endif
        -:   35:#ifdef __TINYC__
        -:   36:/* Silence a tcc warning. We don't use CTRL anyway */
        -:   37:#undef CTRL
        -:   38:#endif
        -:   39:#include <termios.h>
        -:   40:#include <unistd.h>
        -:   41:#ifdef __NetBSD__
        -:   42:#include <string.h>
        -:   43:#endif
        -:   44:#include <dirent.h>
        -:   45:
        -:   46:#include "aux.h"
        -:   47:#include "config.h"
        -:   48:#include "exec.h"
        -:   49:#include "keybinds.h"
        -:   50:#include "listing.h"
        -:   51:#include "mime.h"
        -:   52:#include "misc.h"
        -:   53:#include "profiles.h"
        -:   54:#include "prompt.h"
        -:   55:#include "messages.h"
        -:   56:#include "strings.h"
        -:   57:#include "readline.h"
        -:   58:#include "file_operations.h"
        -:   59:
        -:   60:#ifndef _NO_SUGGESTIONS
        -:   61:#include "suggestions.h"
        -:   62:#endif
        -:   63:
        -:   64:int accept_first_word = 0;
        -:   65:
        -:   66:int
function kbinds_reset called 0 returned 0% blocks executed 0%
    #####:   67:kbinds_reset(void)
        -:   68:{
    #####:   69:	int exit_status = EXIT_SUCCESS;
        -:   70:	struct stat file_attrib;
        -:   71:
    #####:   72:	if (stat(kbinds_file, &file_attrib) == -1) {
    %%%%%:   72-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   73:		exit_status = create_kbinds_file();
    %%%%%:   73-block  0
call    0 never executed
unconditional  1 never executed
        -:   74:	} else {
    #####:   75:		char *cmd[] = {"rm", kbinds_file, NULL};
    #####:   76:		if (launch_execve(cmd, FOREGROUND, E_NOFLAG) == EXIT_SUCCESS)
    %%%%%:   76-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   77:			exit_status = create_kbinds_file();
    %%%%%:   77-block  0
call    0 never executed
unconditional  1 never executed
        -:   78:		else
    #####:   79:			exit_status = EXIT_FAILURE;
    %%%%%:   79-block  0
unconditional  0 never executed
        -:   80:	}
        -:   81:
    #####:   82:	if (exit_status == EXIT_SUCCESS)
    %%%%%:   82-block  0
branch  0 never executed
branch  1 never executed
    #####:   83:		_err('n', PRINT_PROMPT, _("%s: Restart the program for changes "
    %%%%%:   83-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:   84:			"to take effect\n"), PROGRAM_NAME);
        -:   85:
    #####:   86:	return exit_status;
    %%%%%:   86-block  0
unconditional  0 never executed
        -:   87:}
        -:   88:
        -:   89:static int
function kbinds_edit called 2 returned 100% blocks executed 70%
        2:   90:kbinds_edit(void)
        -:   91:{
        2:   92:	if (xargs.stealth_mode == 1) {
        2:   92-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   93:		printf("%s: Access to configuration files is not allowed in "
    %%%%%:   93-block  0
call    0 never executed
        -:   94:		       "stealth mode\n", PROGRAM_NAME);
    #####:   95:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:   96:	}
        -:   97:
        2:   98:	if (!kbinds_file)
        2:   98-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   99:		return EXIT_FAILURE;
    %%%%%:   99-block  0
unconditional  0 never executed
        -:  100:
        -:  101:	struct stat file_attrib;
        2:  102:	if (stat(kbinds_file, &file_attrib) == -1) {
        2:  102-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:  103:		create_kbinds_file();
    %%%%%:  103-block  0
call    0 never executed
    #####:  104:		stat(kbinds_file, &file_attrib);
call    0 never executed
unconditional  1 never executed
        -:  105:	}
        -:  106:
        2:  107:	time_t mtime_bfr = (time_t)file_attrib.st_mtime;
        -:  108:
        2:  109:	int ret = open_file(kbinds_file);
        2:  109-block  0
call    0 returned 2
        2:  110:	if (ret != EXIT_SUCCESS)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  111:		return EXIT_FAILURE;
    %%%%%:  111-block  0
unconditional  0 never executed
        -:  112:
        2:  113:	stat(kbinds_file, &file_attrib);
        2:  113-block  0
call    0 returned 2
        2:  114:	if (mtime_bfr == (time_t)file_attrib.st_mtime)
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  115:		return EXIT_SUCCESS;
        1:  115-block  0
unconditional  0 taken 1
        -:  116:
        1:  117:	_err('n', PRINT_PROMPT, _("%s: Restart the program for changes to "
        1:  117-block  0
call    0 returned 1
call    1 returned 1
        -:  118:				  "take effect\n"), PROGRAM_NAME);
        1:  119:	return EXIT_SUCCESS;
unconditional  0 taken 1
        -:  120:}
        -:  121:
        -:  122:int
function kbinds_function called 4 returned 100% blocks executed 66%
        4:  123:kbinds_function(char **args)
        -:  124:{
        4:  125:	if (!args)
        4:  125-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  126:		return EXIT_FAILURE;
    %%%%%:  126-block  0
unconditional  0 never executed
        -:  127:
        4:  128:	if (!args[1]) {
        4:  128-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -:  129:		size_t i;
       72:  130:		for (i = 0; i < kbinds_n; i++) {
        1:  130-block  0
unconditional  0 taken 1
unconditional  1 taken 71
       72:  130-block  1
branch  2 taken 71
branch  3 taken 1 (fallthrough)
       71:  131:			printf("%s: %s\n", kbinds[i].key, kbinds[i].function);
       71:  131-block  0
call    0 returned 71
        -:  132:		}
        -:  133:
        1:  134:		return EXIT_SUCCESS;
        1:  134-block  0
unconditional  0 taken 1
        -:  135:	}
        -:  136:
       3*:  137:	if (*args[1] == '-' && strcmp(args[1], "--help") == 0) {
        3:  137-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%:  137-block  1
branch  2 never executed
branch  3 never executed
    #####:  138:		puts(_(KB_USAGE));
    %%%%%:  138-block  0
call    0 never executed
call    1 never executed
    #####:  139:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  140:	}
        -:  141:
        3:  142:	if (*args[1] == 'e' && strcmp(args[1], "edit") == 0)
        3:  142-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  142-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2:  143:		return kbinds_edit();
        2:  143-block  0
call    0 returned 2
unconditional  1 taken 2
        -:  144:
        1:  145:	if (*args[1] == 'r' && strcmp(args[1], "reset") == 0)
        1:  145-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  145-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:  146:		return kbinds_reset();
    %%%%%:  146-block  0
call    0 never executed
unconditional  1 never executed
        -:  147:
        1:  148:	if (*args[1] == 'r' && strcmp(args[1], "readline") == 0) {
        1:  148-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  148-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  149:		rl_function_dumper(1);
        1:  149-block  0
call    0 returned 1
        1:  150:		return EXIT_SUCCESS;
unconditional  0 taken 1
        -:  151:	}
        -:  152:
    #####:  153:	fprintf(stderr, "%s\n", _(KB_USAGE));
    %%%%%:  153-block  0
call    0 never executed
call    1 never executed
    #####:  154:	return EXIT_FAILURE;
unconditional  0 never executed
        -:  155:}
        -:  156:
        -:  157:/* Store keybinds from the keybinds file into a struct */
        -:  158:int
function load_keybinds called 4 returned 100% blocks executed 77%
        4:  159:load_keybinds(void)
        -:  160:{
        4:  161:	if (!config_ok)
        4:  161-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  162:		return EXIT_FAILURE;
    %%%%%:  162-block  0
unconditional  0 never executed
        -:  163:
        -:  164:	/* Free the keybinds struct array */
        4:  165:	if (kbinds_n) {
        4:  165-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  166:		int i = (int)kbinds_n;
        -:  167:
    #####:  168:		while (--i >= 0) {
    %%%%%:  168-block  0
unconditional  0 never executed
    %%%%%:  168-block  1
branch  1 never executed
branch  2 never executed
    #####:  169:			free(kbinds[i].function);
    #####:  170:			free(kbinds[i].key);
    %%%%%:  170-block  0
unconditional  0 never executed
        -:  171:		}
        -:  172:
    #####:  173:		free(kbinds);
    #####:  174:		kbinds = (struct kbinds_t *)xnmalloc(1, sizeof(struct kbinds_t));
    %%%%%:  174-block  0
call    0 never executed
    #####:  175:		kbinds_n = 0;
unconditional  0 never executed
        -:  176:	}
        -:  177:
        -:  178:	/* Open the keybinds file */
        4:  179:	FILE *fp = fopen(kbinds_file, "r");
        4:  179-block  0
call    0 returned 4
        4:  180:	if (!fp)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  181:		return EXIT_FAILURE;
    %%%%%:  181-block  0
unconditional  0 never executed
        -:  182:
        4:  183:	size_t line_size = 0;
        4:  184:	char *line = (char *)NULL;
        4:  185:	ssize_t line_len = 0;
        -:  186:
      530:  187:	while ((line_len = getline(&line, &line_size, fp)) > 0) {
        4:  187-block  0
unconditional  0 taken 4
      530:  187-block  1
call    1 returned 530
branch  2 taken 526
branch  3 taken 4 (fallthrough)
      526:  188:		if (!line || !*line || *line == '#' || *line == '\n')
      526:  188-block  0
branch  0 taken 526 (fallthrough)
branch  1 taken 0
      526:  188-block  1
branch  2 taken 526 (fallthrough)
branch  3 taken 0
      526:  188-block  2
branch  4 taken 323 (fallthrough)
branch  5 taken 203
      323:  188-block  3
branch  6 taken 44 (fallthrough)
branch  7 taken 279
      247:  189:			continue;
      247:  189-block  0
unconditional  0 taken 247
        -:  190:
      279:  191:		if (line[line_len - 1] == '\n')
      279:  191-block  0
branch  0 taken 279 (fallthrough)
branch  1 taken 0
      279:  192:			line[line_len - 1] = '\0';
      279:  192-block  0
unconditional  0 taken 279
        -:  193:
      279:  194:		char *tmp = (char *)NULL;
      279:  195:		tmp = strchr(line, ':');
      279:  196:		if (!tmp || !*(tmp + 1))
      279:  196-block  0
branch  0 taken 279 (fallthrough)
branch  1 taken 0
      279:  196-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 278
        1:  197:			continue;
        1:  197-block  0
unconditional  0 taken 1
        -:  198:
        -:  199:		/* Now copy left and right value of each keybind into the
        -:  200:		 * keybinds struct */
      278:  201:		kbinds = xrealloc(kbinds, (kbinds_n + 1) * sizeof(struct kbinds_t));
      278:  201-block  0
call    0 returned 278
      278:  202:		kbinds[kbinds_n].key = savestring(tmp + 1, strlen(tmp + 1));
call    0 returned 278
        -:  203:
      278:  204:		*tmp = '\0';
        -:  205:
      278:  206:		kbinds[kbinds_n++].function = savestring(line, strlen(line));
call    0 returned 278
unconditional  1 taken 278
        -:  207:	}
        -:  208:
        4:  209:	free(line);
        4:  210:	return EXIT_SUCCESS;
        4:  210-block  0
unconditional  0 taken 4
        -:  211:}
        -:  212:
        -:  213:/* Runs any command recognized by CliFM via a keybind. Example:
        -:  214: * keybind_exec_cmd("sel *") */
        -:  215:static int
function keybind_exec_cmd called 97 returned 100% blocks executed 81%
       97:  216:keybind_exec_cmd(char *str)
        -:  217:{
       97:  218:	size_t old_args = args_n;
       97:  219:	args_n = 0;
        -:  220:
        -:  221:#ifndef _NO_SUGGESTIONS
      97*:  222:	if (suggestion.printed && suggestion_buf)
       97:  222-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 97
    %%%%%:  222-block  1
branch  2 never executed
branch  3 never executed
    #####:  223:		free_suggestion();
    %%%%%:  223-block  0
call    0 never executed
unconditional  1 never executed
        -:  224:#endif
        -:  225:
       97:  226:	int exit_status = EXIT_FAILURE;
       97:  227:	char **cmd = parse_input_str(str);
       97:  227-block  0
call    0 returned 97
       97:  228:	putchar('\n');
call    0 returned 97
        -:  229:
       97:  230:	if (cmd) {
branch  0 taken 97 (fallthrough)
branch  1 taken 0
       97:  231:		exit_status = exec_cmd(cmd);
       97:  231-block  0
call    0 returned 97
        -:  232:
        -:  233:		/* While in the bookmarks or mountpoints screen, the kbind_busy
        -:  234:		 * flag will be set to 1 and no keybinding will work. Once the
        -:  235:		 * corresponding function exited, set the kbind_busy flag to zero,
        -:  236:		 * so that keybindings work again */
       97:  237:		if (kbind_busy)
branch  0 taken 0 (fallthrough)
branch  1 taken 97
    #####:  238:			kbind_busy = 0;
    %%%%%:  238-block  0
unconditional  0 never executed
        -:  239:
       97:  240:		int i = (int)args_n + 1;
      248:  241:		while (--i >= 0)
       97:  241-block  0
unconditional  0 taken 97
      248:  241-block  1
branch  1 taken 151
branch  2 taken 97 (fallthrough)
      151:  242:			free(cmd[i]);
      151:  242-block  0
unconditional  0 taken 151
       97:  243:		free(cmd);
        -:  244:
        -:  245:		/* This call to prompt() just updates the prompt in case it was
        -:  246:		 * modified, for example, in case of chdir, files selection, and
        -:  247:		 * so on */
       97:  248:		char *buf = prompt();
       97:  248-block  0
call    0 returned 97
       97:  249:		free(buf);
unconditional  0 taken 97
        -:  250:	}
        -:  251:
       97:  252:	args_n = old_args;
       97:  253:	return exit_status;
       97:  253-block  0
unconditional  0 taken 97
        -:  254:}
        -:  255:
        -:  256:static int
function run_kb_cmd called 74 returned 100% blocks executed 78%
       74:  257:run_kb_cmd(char *cmd)
        -:  258:{
       74:  259:	if (!cmd || !*cmd)
       74:  259-block  0
branch  0 taken 74 (fallthrough)
branch  1 taken 0
       74:  259-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 74
    #####:  260:		return EXIT_FAILURE;
    %%%%%:  260-block  0
unconditional  0 never executed
        -:  261:
       74:  262:	if (kbind_busy)
       74:  262-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 74
    #####:  263:		return EXIT_SUCCESS;
    %%%%%:  263-block  0
unconditional  0 never executed
        -:  264:
       74:  265:	keybind_exec_cmd(cmd);
       74:  265-block  0
call    0 returned 74
       74:  266:	rl_reset_line_state();
call    0 returned 74
       74:  267:	return EXIT_SUCCESS;
unconditional  0 taken 74
        -:  268:}
        -:  269:
        -:  270:/* Retrieve the key sequence associated to FUNCTION */
        -:  271:static char *
function find_key called 308 returned 100% blocks executed 90%
      308:  272:find_key(char *function)
        -:  273:{
      308:  274:	if (!kbinds_n)
      308:  274-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 308
    #####:  275:		return (char *)NULL;
    %%%%%:  275-block  0
unconditional  0 never executed
        -:  276:
      308:  277:	int n = (int)kbinds_n;
    11623:  278:	while (--n >= 0) {
      308:  278-block  0
unconditional  0 taken 308
    11623:  278-block  1
branch  1 taken 11597
branch  2 taken 26 (fallthrough)
    11597:  279:		if (*function != *kbinds[n].function)
    11597:  279-block  0
branch  0 taken 10322 (fallthrough)
branch  1 taken 1275
    10322:  280:			continue;
    10322:  280-block  0
unconditional  0 taken 10322
     1275:  281:		if (strcmp(function, kbinds[n].function) == 0)
     1275:  281-block  0
branch  0 taken 282 (fallthrough)
branch  1 taken 993
      282:  282:			return kbinds[n].key;
      282:  282-block  0
unconditional  0 taken 282
        -:  283:	}
        -:  284:
       26:  285:	return (char *)NULL;
       26:  285-block  0
unconditional  0 taken 26
        -:  286:}
        -:  287:
        -:  288:/* Prepend sudo/doas to the current input string */
        -:  289:static int
function rl_prepend_sudo called 2 returned 100% blocks executed 82%
        2:  290:rl_prepend_sudo(int count, int key)
        -:  291:{
        -:  292:	UNUSED(count); UNUSED(key);
        2:  293:	int free_s = 1;
        2:  294:	size_t len = 0;
        2:  295:	char *t = getenv("CLIFM_SUDO_CMD"),
        2:  295-block  0
call    0 returned 2
        2:  296:		 *s = (char *)NULL;
        -:  297:
        2:  298:	if (t) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  299:		len = strlen(t);
    #####:  300:		if (t[len - 1] != ' ') {
    %%%%%:  300-block  0
branch  0 never executed
branch  1 never executed
    #####:  301:			s = (char *)xnmalloc(len + 2, sizeof(char));
    %%%%%:  301-block  0
call    0 never executed
    #####:  302:			sprintf(s, "%s ", t);
    #####:  303:			len++;
unconditional  0 never executed
        -:  304:		} else {
    #####:  305:			s = t;
    #####:  306:			free_s = 0;
    %%%%%:  306-block  0
unconditional  0 never executed
        -:  307:		}
        -:  308:	} else {
        2:  309:		len = strlen(DEF_SUDO_CMD) + 1;
        2:  310:		s = (char *)xnmalloc(len + 1, sizeof(char));
        2:  310-block  0
call    0 returned 2
        2:  311:		sprintf(s, "%s ", DEF_SUDO_CMD);
unconditional  0 taken 2
        -:  312:	}
        -:  313:	
        2:  314:	int p = rl_point;
        2:  315:	if (*rl_line_buffer == *s
        2:  315-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  316:	&& strncmp(rl_line_buffer, s, len) == 0) {
        1:  316-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  317:		rl_delete_text(0, (int)len);
        1:  317-block  0
call    0 returned 1
        1:  318:		rl_point = p - (int)len;
unconditional  0 taken 1
        -:  319:	} else {
        1:  320:		rl_point = 0;
        1:  321:		rl_insert_text(s);
        1:  321-block  0
call    0 returned 1
        1:  322:		rl_point = p + (int)len;
unconditional  0 taken 1
        -:  323:	}
        -:  324:
        2:  325:	if (free_s)
        2:  325-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  326:		free(s);
        2:  326-block  0
unconditional  0 taken 2
        -:  327:
        -:  328:#ifndef _NO_SUGGESTIONS
        2:  329:	if (suggestion.offset == 0 && suggestion_buf) {
        2:  329-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  329-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1:  330:		int r = rl_point;
        1:  331:		rl_point = rl_end;
        1:  332:		clear_suggestion();
        1:  332-block  0
call    0 returned 1
        1:  333:		free(suggestion_buf);
        1:  334:		suggestion_buf = (char *)NULL;
        1:  335:		rl_point = r;
unconditional  0 taken 1
        -:  336:	}
        -:  337:#endif
        2:  338:	return EXIT_SUCCESS;
        2:  338-block  0
unconditional  0 taken 2
        -:  339:}
        -:  340:
        -:  341:static int
function rl_create_file called 0 returned 0% blocks executed 0%
    #####:  342:rl_create_file(int count, int key)
        -:  343:{
        -:  344:	UNUSED(count); UNUSED(key);
    #####:  345:	return run_kb_cmd("n");
    %%%%%:  345-block  0
call    0 never executed
        -:  346:}
        -:  347:
        -:  348:#ifndef _NO_SUGGESTIONS
        -:  349:static int
function rl_accept_suggestion called 45 returned 100% blocks executed 72%
       45:  350:rl_accept_suggestion(int count, int key)
        -:  351:{
        -:  352:	UNUSED(count); UNUSED(key);
       45:  353:	if (kbind_busy) {
       45:  353-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 45
        -:  354:		/* If not at the end of the typed string, just move the cursor
        -:  355:		 * forward one column */
    #####:  356:		if (rl_point < rl_end)
    %%%%%:  356-block  0
branch  0 never executed
branch  1 never executed
    #####:  357:			rl_point++;
    %%%%%:  357-block  0
unconditional  0 never executed
    #####:  358:		return EXIT_SUCCESS;
    %%%%%:  358-block  0
unconditional  0 never executed
        -:  359:	}
        -:  360:
       45:  361:	fputs(df_c, stdout);
       45:  361-block  0
call    0 returned 45
        -:  362:	
        -:  363:	/* Only accept the current suggestion if the cursor is at the end
        -:  364:	 * of the line typed so far */
       45:  365:	if (!suggestions || rl_point != rl_end || !suggestion_buf) {
branch  0 taken 45 (fallthrough)
branch  1 taken 0
       45:  365-block  0
branch  2 taken 35 (fallthrough)
branch  3 taken 10
       35:  365-block  1
branch  4 taken 1 (fallthrough)
branch  5 taken 34
       11:  366:		if (rl_point < rl_end)
       11:  366-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 1
       10:  367:			rl_point++; /* Just move the cursor forward one column */
       10:  367-block  0
unconditional  0 taken 10
       11:  368:		return EXIT_SUCCESS;
       11:  368-block  0
unconditional  0 taken 11
        -:  369:	}
        -:  370:
        -:  371:	/* If accepting the first suggested word, accept only up to next
        -:  372:	 * slash or space */
       34:  373:	char *s = (char *)NULL, _s = 0;
       34:  374:	int slash = 0;
       34:  375:	if (accept_first_word) {
       34:  375-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 32
        2:  376:		size_t i = 0;
        2:  377:		char *p = suggestion_buf + (rl_point - suggestion.offset);
        -:  378:		/* Skip leading spaces */
        3:  379:		while (*(p + i) == ' ')
        2:  379-block  0
unconditional  0 taken 2
        3:  379-block  1
branch  1 taken 1
branch  2 taken 2 (fallthrough)
        1:  380:			i++;
        1:  380-block  0
unconditional  0 taken 1
        -:  381:
        -:  382:		/* Trim the suggestion up to first slash or space */
        2:  383:		s = strchr(p + i, '/');
        -:  384:		/* If the slash is immediately preceded by a space, move to
        -:  385:		 * the next slash */
       2*:  386:		if (s && s != p && *(s - 1) == ' ') {
        2:  386-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:  386-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  386-block  2
branch  4 never executed
branch  5 never executed
    #####:  387:			char *ss = strchr(s + 1, '/');
    #####:  388:			if (ss)
    %%%%%:  388-block  0
branch  0 never executed
branch  1 never executed
    #####:  389:				s = ss;
    %%%%%:  389-block  0
unconditional  0 never executed
        -:  390:		}
        2:  391:		char *sp = strchr(p + i, ' ');
        2:  392:		if (s) {
        2:  392-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:  393:			/* If there is a space somewhere before the slash */
    #####:  394:			if (sp && sp < s) {
    %%%%%:  394-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  394-block  1
branch  2 never executed
branch  3 never executed
    #####:  395:				s = sp;
    %%%%%:  395-block  0
unconditional  0 never executed
        -:  396:			} else {
        -:  397:				/* In case of slash, keep a copy of the next char, if any:
        -:  398:				 * we cannot know in advance what comes after the slash */
    #####:  399:				if (*(++s))
    %%%%%:  399-block  0
branch  0 never executed
branch  1 never executed
    #####:  400:					_s = *s;
    %%%%%:  400-block  0
unconditional  0 never executed
    #####:  401:				slash = 1;
    %%%%%:  401-block  0
unconditional  0 never executed
        -:  402:			}
        2:  403:		} else if (sp) {
        2:  403-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  404:			s = sp;
        1:  404-block  0
unconditional  0 taken 1
        -:  405:		}
        -:  406:
       2*:  407:		if (s && (slash ? *s : *(s + 1)) && s != p) {
        2:  407-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  407-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  407-block  2
branch  4 never executed
branch  5 never executed
        1:  407-block  3
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1:  407-block  4
branch  8 taken 1 (fallthrough)
branch  9 taken 0
        1:  408:			*s = '\0';
        1:  408-block  0
unconditional  0 taken 1
        -:  409:		} else {
        -:  410:			/* Last word: neither space nor slash */
        1:  411:			size_t len = strlen(suggestion_buf);
        1:  412:			if (suggestion_buf[len - 1] != '/'
        1:  412-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  413:			&& suggestion_buf[len - 1] != ' ')
        1:  413-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  414:				suggestion.type = NO_SUG;
        1:  414-block  0
unconditional  0 taken 1
        -:  415:/*			clear_suggestion(); */
        1:  416:			accept_first_word = 0;
        1:  416-block  0
unconditional  0 taken 1
        -:  417:		}
        -:  418:	}
        -:  419:
       34:  420:	rl_delete_text(suggestion.offset, rl_end);
       34:  420-block  0
call    0 returned 34
       34:  421:	rl_point = suggestion.offset;
        -:  422:
       34:  423:	if (!accept_first_word && (suggestion.type == BOOKMARK_SUG
branch  0 taken 33 (fallthrough)
branch  1 taken 1
       33:  423-block  0
branch  2 taken 33 (fallthrough)
branch  3 taken 0
       33:  424:	|| suggestion.type == ALIAS_SUG || suggestion.type == ELN_SUG
       33:  424-block  0
branch  0 taken 33 (fallthrough)
branch  1 taken 0
       33:  424-block  1
branch  2 taken 18 (fallthrough)
branch  3 taken 15
       18:  425:	|| suggestion.type == JCMD_SUG || suggestion.type == JCMD_SUG_NOACD))
       18:  425-block  0
branch  0 taken 16 (fallthrough)
branch  1 taken 2
       16:  425-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 16
       17:  426:		clear_suggestion();
       17:  426-block  0
call    0 returned 17
unconditional  1 taken 17
        -:  427:
        -:  428:/*
        -:  429:#ifndef _NO_HIGHLIGHT
        -:  430:	if (*suggestion_buf == '#')
        -:  431:		fputs(hc_c, stdout);
        -:  432:#endif */
        -:  433:
       34:  434:	switch(suggestion.type) {
       34:  434-block  0
branch  0 taken 17
branch  1 taken 3
branch  2 taken 0
branch  3 taken 14
        -:  435:
       17:  436:	case JCMD_SUG: /* fallthrough */
        -:  437:	case BOOKMARK_SUG: /* fallthrough */
        -:  438:	case COMP_SUG: /* fallthrough */
        -:  439:	case ELN_SUG: /* fallthrough */
        -:  440:	case FILE_SUG: {
       17:  441:		char *tmp = (char *)NULL;
       17:  442:		size_t i, isquote = 0;
      158:  443:		for (i = 0; suggestion_buf[i]; i++) {
       17:  443-block  0
unconditional  0 taken 17
      141:  443-block  1
unconditional  1 taken 141
      158:  443-block  2
branch  2 taken 141
branch  3 taken 17 (fallthrough)
      141:  444:			if (is_quote_char(suggestion_buf[i])) {
      141:  444-block  0
call    0 returned 141
branch  1 taken 0 (fallthrough)
branch  2 taken 141
    #####:  445:				isquote = 1;
    #####:  446:				break;
    %%%%%:  446-block  0
unconditional  0 never executed
        -:  447:			}
        -:  448:		}
       17:  449:		if (isquote)
       17:  449-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 17
    #####:  450:			tmp = escape_str(suggestion_buf);
    %%%%%:  450-block  0
call    0 never executed
unconditional  1 never executed
        -:  451:
       17:  452:		if (tmp) {
       17:  452-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 17
    #####:  453:			rl_insert_text(tmp);
    %%%%%:  453-block  0
call    0 never executed
    #####:  454:			free(tmp);
unconditional  0 never executed
        -:  455:		} else {
       17:  456:			rl_insert_text(suggestion_buf);
       17:  456-block  0
call    0 returned 17
unconditional  1 taken 17
        -:  457:		}
       17:  458:		if (suggestion.filetype != DT_DIR)
       17:  458-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 4
       13:  459:			rl_stuff_char(' ');
       13:  459-block  0
call    0 returned 13
unconditional  1 taken 13
       17:  460:		suggestion.type = NO_SUG;
        -:  461:		}
       17:  462:		break;
       17:  462-block  0
unconditional  0 taken 17
        -:  463:
        3:  464:	case FIRST_WORD: /* fallthrough */
        -:  465:	case JCMD_SUG_NOACD: /* fallthrough */
        -:  466:	case HIST_SUG:
        3:  467:		rl_insert_text(suggestion_buf);
        3:  467-block  0
call    0 returned 3
        3:  468:		break;
unconditional  0 taken 3
        -:  469:
    #####:  470:	case VAR_SUG:
        -:  471:/*
        -:  472:#ifndef _NO_HIGHLIGHT
        -:  473:		if (highlight)
        -:  474:			fputs(hv_c, stdout);
        -:  475:#endif */
    #####:  476:		rl_insert_text(suggestion_buf);
    %%%%%:  476-block  0
call    0 never executed
    #####:  477:		rl_stuff_char(' ');
call    0 never executed
    #####:  478:		break;
unconditional  0 never executed
        -:  479:
       14:  480:	default:
       14:  481:		rl_insert_text(suggestion_buf);
       14:  481-block  0
call    0 returned 14
       14:  482:		rl_stuff_char(' ');
call    0 returned 14
       14:  483:		break;
unconditional  0 taken 14
        -:  484:	}
        -:  485:
        -:  486:	/* Move the cursor to the end of the line */
       34:  487:	rl_point = rl_end;
       34:  488:	if (!accept_first_word) {
       34:  488-block  0
branch  0 taken 33 (fallthrough)
branch  1 taken 1
       33:  489:		suggestion.printed = 0;
       33:  490:		free(suggestion_buf);
       33:  491:		suggestion_buf = (char *)NULL;
       33:  491-block  0
unconditional  0 taken 33
        -:  492:	} else {
        1:  493:		if (s) {
        1:  493-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  494:			/* Reinsert the char we removed to print only the first word */
        1:  495:			if (slash)
        1:  495-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  496:				*s = _s;
    %%%%%:  496-block  0
unconditional  0 never executed
        -:  497:			else
        1:  498:				*s = ' ';
        1:  498-block  0
unconditional  0 taken 1
        -:  499:		}
        1:  500:		accept_first_word = 0;
        1:  500-block  0
unconditional  0 taken 1
        -:  501:	}
        -:  502:
       34:  503:	return EXIT_SUCCESS;
       34:  503-block  0
unconditional  0 taken 34
        -:  504:}
        -:  505:
        -:  506:static int
function rl_accept_first_word called 2 returned 100% blocks executed 100%
        2:  507:rl_accept_first_word(int count, int key)
        -:  508:{
        -:  509:	/* Accepting the first suggested word is not supported for ELN's,
        -:  510:	 * bookmarks and aliases names */
        2:  511:	if (suggestion.type != ELN_SUG && suggestion.type != BOOKMARK_SUG
        2:  511-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  511-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2:  512:	&& suggestion.type != ALIAS_SUG && suggestion.type != JCMD_SUG
        2:  512-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  512-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2:  513:	&& suggestion.type != JCMD_SUG_NOACD) {
        2:  513-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  514:		accept_first_word = 1;
        2:  515:		suggestion.type = FIRST_WORD;
        2:  515-block  0
unconditional  0 taken 2
        -:  516:	}
        2:  517:	return rl_accept_suggestion(count, key);
        2:  517-block  0
call    0 returned 2
        -:  518:}
        -:  519:#endif /* !_NO_SUGGESTIONS */
        -:  520:
        -:  521:static int
function rl_refresh called 1 returned 100% blocks executed 75%
        1:  522:rl_refresh(int count, int key)
        -:  523:{
        -:  524:	UNUSED(count); UNUSED(key);
        1:  525:	if (kbind_busy)
        1:  525-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  526:		return EXIT_SUCCESS;
    %%%%%:  526-block  0
unconditional  0 never executed
        -:  527:
        1:  528:	if (clear_screen)
        1:  528-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  529:		CLEAR;
    %%%%%:  529-block  0
call    0 never executed
unconditional  1 never executed
        1:  530:	keybind_exec_cmd("rf");
        1:  530-block  0
call    0 returned 1
        1:  531:	rl_reset_line_state();
call    0 returned 1
        1:  532:	return EXIT_SUCCESS;
unconditional  0 taken 1
        -:  533:}
        -:  534:
        -:  535:static int
function rl_parent_dir called 1 returned 100% blocks executed 80%
        1:  536:rl_parent_dir(int count, int key)
        -:  537:{
        -:  538:	UNUSED(count); UNUSED(key);
        -:  539:	/* If already root dir, do nothing */
        1:  540:	if (*ws[cur_ws].path == '/' && !ws[cur_ws].path[1])
        1:  540-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  540-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:  541:		return EXIT_SUCCESS;
    %%%%%:  541-block  0
unconditional  0 never executed
        1:  542:	return run_kb_cmd("cd ..");
        1:  542-block  0
call    0 returned 1
unconditional  1 taken 1
        -:  543:}
        -:  544:
        -:  545:static int
function rl_root_dir called 0 returned 0% blocks executed 0%
    #####:  546:rl_root_dir(int count, int key)
        -:  547:{
        -:  548:	UNUSED(count); UNUSED(key);
        -:  549:	/* If already root dir, do nothing */
    #####:  550:	if (*ws[cur_ws].path == '/' && !ws[cur_ws].path[1])
    %%%%%:  550-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  550-block  1
branch  2 never executed
branch  3 never executed
    #####:  551:		return EXIT_SUCCESS;
    %%%%%:  551-block  0
unconditional  0 never executed
    #####:  552:	return run_kb_cmd("cd /");
    %%%%%:  552-block  0
call    0 never executed
unconditional  1 never executed
        -:  553:}
        -:  554:
        -:  555:static int
function rl_home_dir called 1 returned 100% blocks executed 80%
        1:  556:rl_home_dir(int count, int key)
        -:  557:{
        -:  558:	UNUSED(count); UNUSED(key);
        -:  559:	/* If already in home, do nothing */
        1:  560:	if (*ws[cur_ws].path == *user.home && strcmp(ws[cur_ws].path, user.home) == 0)
        1:  560-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  560-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:  561:		return EXIT_SUCCESS;
    %%%%%:  561-block  0
unconditional  0 never executed
        1:  562:	return run_kb_cmd("cd");
        1:  562-block  0
call    0 returned 1
unconditional  1 taken 1
        -:  563:}
        -:  564:
        -:  565:static int
function rl_next_dir called 2 returned 100% blocks executed 75%
        2:  566:rl_next_dir(int count, int key)
        -:  567:{
        -:  568:	UNUSED(count); UNUSED(key);
        -:  569:	/* If already at the end of dir hist, do nothing */
        2:  570:	if (dirhist_cur_index + 1 == dirhist_total_index)
        2:  570-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  571:		return EXIT_SUCCESS;
    %%%%%:  571-block  0
unconditional  0 never executed
        2:  572:	return run_kb_cmd("f");
        2:  572-block  0
call    0 returned 2
unconditional  1 taken 2
        -:  573:}
        -:  574:
        -:  575:static int
function rl_first_dir called 1 returned 100% blocks executed 75%
        1:  576:rl_first_dir(int count, int key)
        -:  577:{
        -:  578:	UNUSED(count); UNUSED(key);
        -:  579:	/* If already at the beginning of dir hist, do nothing */
        1:  580:	if (dirhist_cur_index == 0)
        1:  580-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  581:		return EXIT_SUCCESS;
    %%%%%:  581-block  0
unconditional  0 never executed
        -:  582:
        1:  583:	return run_kb_cmd("b !1");
        1:  583-block  0
call    0 returned 1
unconditional  1 taken 1
        -:  584:}
        -:  585:
        -:  586:static int
function rl_last_dir called 1 returned 100% blocks executed 78%
        1:  587:rl_last_dir(int count, int key)
        -:  588:{
        -:  589:	UNUSED(count); UNUSED(key);
        1:  590:	if (kbind_busy)
        1:  590-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  591:		return EXIT_SUCCESS;
    %%%%%:  591-block  0
unconditional  0 never executed
        -:  592:
        -:  593:	/* If already at the end of dir hist, do nothing */
        1:  594:	if (dirhist_cur_index + 1 == dirhist_total_index)
        1:  594-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  595:		return EXIT_SUCCESS;
    %%%%%:  595-block  0
unconditional  0 never executed
        -:  596:
        -:  597:	char cmd[PATH_MAX + 4];
        1:  598:	sprintf(cmd, "b !%d", dirhist_total_index);
        1:  599:	keybind_exec_cmd(cmd);
        1:  599-block  0
call    0 returned 1
        1:  600:	rl_reset_line_state();
call    0 returned 1
        1:  601:	return EXIT_SUCCESS;
unconditional  0 taken 1
        -:  602:}
        -:  603:
        -:  604:static int
function rl_previous_dir called 22 returned 100% blocks executed 75%
       22:  605:rl_previous_dir(int count, int key)
        -:  606:{
        -:  607:	UNUSED(count); UNUSED(key);
        -:  608:	/* If already at the beginning of dir hist, do nothing */
       22:  609:	if (dirhist_cur_index == 0)
       22:  609-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 22
    #####:  610:		return EXIT_SUCCESS;
    %%%%%:  610-block  0
unconditional  0 never executed
       22:  611:	return run_kb_cmd("b");
       22:  611-block  0
call    0 returned 22
unconditional  1 taken 22
        -:  612:}
        -:  613:
        -:  614:static int
function rl_long called 4 returned 100% blocks executed 75%
        4:  615:rl_long(int count, int key)
        -:  616:{
        -:  617:	UNUSED(count); UNUSED(key);
        4:  618:	if (kbind_busy)
        4:  618-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  619:		return EXIT_SUCCESS;
    %%%%%:  619-block  0
unconditional  0 never executed
        -:  620:
        4:  621:	long_view = long_view ? 0 : 1;
        -:  622:
        4:  623:	if (clear_screen)
        4:  623-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  624:		CLEAR;
    %%%%%:  624-block  0
call    0 never executed
unconditional  1 never executed
        4:  625:	keybind_exec_cmd("rf");
        4:  625-block  0
call    0 returned 4
        4:  626:	rl_reset_line_state();
call    0 returned 4
        4:  627:	return EXIT_SUCCESS;
unconditional  0 taken 4
        -:  628:}
        -:  629:
        -:  630:static int
function rl_folders_first called 2 returned 100% blocks executed 71%
        2:  631:rl_folders_first(int count, int key)
        -:  632:{
        -:  633:	UNUSED(count); UNUSED(key);
        2:  634:	if (kbind_busy)
        2:  634-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  635:		return EXIT_SUCCESS;
    %%%%%:  635-block  0
unconditional  0 never executed
        -:  636:
        -:  637:#ifndef _NO_SUGGESTIONS
       2*:  638:	if (suggestion.printed && suggestion_buf)
        2:  638-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:  638-block  1
branch  2 never executed
branch  3 never executed
    #####:  639:		free_suggestion();
    %%%%%:  639-block  0
call    0 never executed
unconditional  1 never executed
        -:  640:#endif
        -:  641:
        2:  642:	list_folders_first = list_folders_first ? 0 : 1;
        -:  643:
        2:  644:	if (cd_lists_on_the_fly) {
        2:  644-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  645:		if (clear_screen)
        2:  645-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  646:			CLEAR;
    %%%%%:  646-block  0
call    0 never executed
unconditional  1 never executed
        2:  647:		free_dirlist();
        2:  647-block  0
call    0 returned 2
        -:  648:		/* Without this putchar(), the first entries of the directories
        -:  649:		 * list are printed in the prompt line */
        2:  650:		putchar('\n');
call    0 returned 2
        2:  651:		list_dir();
call    0 returned 2
unconditional  1 taken 2
        -:  652:	}
        -:  653:
        2:  654:	rl_reset_line_state();
        2:  654-block  0
call    0 returned 2
        2:  655:	return EXIT_SUCCESS;
unconditional  0 taken 2
        -:  656:}
        -:  657:
        -:  658:static int
function rl_light called 4 returned 100% blocks executed 75%
        4:  659:rl_light(int count, int key)
        -:  660:{
        -:  661:	UNUSED(count); UNUSED(key);
        4:  662:	if (kbind_busy)
        4:  662-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  663:		return EXIT_SUCCESS;
    %%%%%:  663-block  0
unconditional  0 never executed
        -:  664:
        4:  665:	light_mode = light_mode ? 0 : 1;
        -:  666:
        4:  667:	if (clear_screen)
        4:  667-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  668:		CLEAR;
    %%%%%:  668-block  0
call    0 never executed
unconditional  1 never executed
        4:  669:	keybind_exec_cmd("rf");
        4:  669-block  0
call    0 returned 4
        4:  670:	rl_reset_line_state();
call    0 returned 4
        4:  671:	return EXIT_SUCCESS;
unconditional  0 taken 4
        -:  672:}
        -:  673:
        -:  674:static int
function rl_hidden called 4 returned 100% blocks executed 71%
        4:  675:rl_hidden(int count, int key)
        -:  676:{
        -:  677:	UNUSED(count); UNUSED(key);
        4:  678:	if (kbind_busy)
        4:  678-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  679:		return EXIT_SUCCESS;
    %%%%%:  679-block  0
unconditional  0 never executed
        -:  680:#ifndef _NO_SUGGESTIONS
       4*:  681:	if (suggestion.printed && suggestion_buf)
        4:  681-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%:  681-block  1
branch  2 never executed
branch  3 never executed
    #####:  682:		free_suggestion();
    %%%%%:  682-block  0
call    0 never executed
unconditional  1 never executed
        -:  683:#endif
        4:  684:	show_hidden = show_hidden ? 0 : 1;
        -:  685:
        4:  686:	if (cd_lists_on_the_fly) {
        4:  686-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  687:		if (clear_screen)
        4:  687-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  688:			CLEAR;
    %%%%%:  688-block  0
call    0 never executed
unconditional  1 never executed
        4:  689:		free_dirlist();
        4:  689-block  0
call    0 returned 4
        4:  690:		putchar('\n');
call    0 returned 4
        4:  691:		list_dir();
call    0 returned 4
unconditional  1 taken 4
        -:  692:	}
        -:  693:
        4:  694:	rl_reset_line_state();
        4:  694-block  0
call    0 returned 4
        4:  695:	return EXIT_SUCCESS;
unconditional  0 taken 4
        -:  696:}
        -:  697:
        -:  698:static int
function rl_open_config called 9 returned 100% blocks executed 100%
        9:  699:rl_open_config(int count, int key)
        -:  700:{
        -:  701:	UNUSED(count); UNUSED(key);
        9:  702:	return run_kb_cmd("edit");
        9:  702-block  0
call    0 returned 9
        -:  703:}
        -:  704:
        -:  705:static int
function rl_open_keybinds called 1 returned 100% blocks executed 100%
        1:  706:rl_open_keybinds(int count, int key)
        -:  707:{
        -:  708:	UNUSED(count); UNUSED(key);
        1:  709:	return run_kb_cmd("kb edit");
        1:  709-block  0
call    0 returned 1
        -:  710:}
        -:  711:
        -:  712:static int
function rl_open_cscheme called 1 returned 100% blocks executed 100%
        1:  713:rl_open_cscheme(int count, int key)
        -:  714:{
        -:  715:	UNUSED(count); UNUSED(key);
        1:  716:	return run_kb_cmd("cs e");
        1:  716-block  0
call    0 returned 1
        -:  717:}
        -:  718:
        -:  719:static int
function rl_open_bm_file called 1 returned 100% blocks executed 100%
        1:  720:rl_open_bm_file(int count, int key)
        -:  721:{
        -:  722:	UNUSED(count); UNUSED(key);
        1:  723:	return run_kb_cmd("bm edit");
        1:  723-block  0
call    0 returned 1
        -:  724:}
        -:  725:
        -:  726:static int
function rl_open_jump_db called 1 returned 100% blocks executed 100%
        1:  727:rl_open_jump_db(int count, int key)
        -:  728:{
        -:  729:	UNUSED(count); UNUSED(key);
        1:  730:	return run_kb_cmd("je");
        1:  730-block  0
call    0 returned 1
        -:  731:}
        -:  732:
        -:  733:static int
function rl_open_mime called 0 returned 0% blocks executed 0%
    #####:  734:rl_open_mime(int count, int key)
        -:  735:{
        -:  736:	UNUSED(count); UNUSED(key);
    #####:  737:	return run_kb_cmd("mm edit");
    %%%%%:  737-block  0
call    0 never executed
        -:  738:}
        -:  739:
        -:  740:static int
function rl_mountpoints called 1 returned 100% blocks executed 100%
        1:  741:rl_mountpoints(int count, int key)
        -:  742:{
        -:  743:	UNUSED(count); UNUSED(key);
        -:  744:	/* Call the function only if it's not already running */
        1:  745:	kbind_busy = 1;
        1:  746:	keybind_exec_cmd("mp");
        1:  746-block  0
call    0 returned 1
        1:  747:	rl_reset_line_state();
call    0 returned 1
        1:  748:	return EXIT_SUCCESS;
unconditional  0 taken 1
        -:  749:}
        -:  750:
        -:  751:static int
function rl_select_all called 1 returned 100% blocks executed 100%
        1:  752:rl_select_all(int count, int key)
        -:  753:{
        -:  754:	UNUSED(count); UNUSED(key);
        1:  755:	return run_kb_cmd("s ^");
        1:  755-block  0
call    0 returned 1
        -:  756:}
        -:  757:
        -:  758:static int
function rl_deselect_all called 7 returned 100% blocks executed 100%
        7:  759:rl_deselect_all(int count, int key)
        -:  760:{
        -:  761:	UNUSED(count); UNUSED(key);
        7:  762:	return run_kb_cmd("ds *");
        7:  762-block  0
call    0 returned 7
        -:  763:}
        -:  764:
        -:  765:static int
function rl_bookmarks called 5 returned 100% blocks executed 83%
        5:  766:rl_bookmarks(int count, int key)
        -:  767:{
        -:  768:	UNUSED(count); UNUSED(key);
        5:  769:	if (kbind_busy)
        5:  769-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:  770:		return EXIT_SUCCESS;
    %%%%%:  770-block  0
unconditional  0 never executed
        -:  771:
        5:  772:	kbind_busy = 1;
        5:  773:	keybind_exec_cmd("bm");
        5:  773-block  0
call    0 returned 5
        5:  774:	rl_reset_line_state();
call    0 returned 5
        5:  775:	return EXIT_SUCCESS;
unconditional  0 taken 5
        -:  776:}
        -:  777:
        -:  778:static int
function rl_selbox called 1 returned 100% blocks executed 100%
        1:  779:rl_selbox(int count, int key)
        -:  780:{
        -:  781:	UNUSED(count); UNUSED(key);
        1:  782:	return run_kb_cmd("ds");
        1:  782-block  0
call    0 returned 1
        -:  783:}
        -:  784:
        -:  785:static int
function rl_clear_line called 2 returned 100% blocks executed 58%
        2:  786:rl_clear_line(int count, int key)
        -:  787:{
        -:  788:	UNUSED(count); UNUSED(key);
        2:  789:	if (kbind_busy)
        2:  789-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  790:		return EXIT_SUCCESS;
    %%%%%:  790-block  0
unconditional  0 never executed
        -:  791:#ifndef _NO_SUGGESTIONS
        2:  792:	if (suggestion.nlines > term_rows) {
        2:  792-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  793:		rl_on_new_line();
    %%%%%:  793-block  0
call    0 never executed
    #####:  794:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  795:	}
        -:  796:
        2:  797:	cur_color = df_c;
        2:  798:	fputs(cur_color, stdout);
        2:  798-block  0
call    0 returned 2
        -:  799:
        2:  800:	if (suggestion_buf) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  801:		clear_suggestion();
    %%%%%:  801-block  0
call    0 never executed
    #####:  802:		suggestion.printed = 0;
    #####:  803:		suggestion.nlines = 0;
    #####:  804:		free(suggestion_buf);
    #####:  805:		suggestion_buf = (char *)NULL;
unconditional  0 never executed
        -:  806:	}
        -:  807:#endif
        2:  808:	rl_point = 0;
        2:  809:	rl_delete_text(rl_point, rl_end);
        2:  809-block  0
call    0 returned 2
        2:  810:	rl_end = 0;
        2:  811:	return EXIT_SUCCESS;
unconditional  0 taken 2
        -:  812:}
        -:  813:
        -:  814:static int
function rl_sort_next called 2 returned 100% blocks executed 71%
        2:  815:rl_sort_next(int count, int key)
        -:  816:{
        -:  817:	UNUSED(count); UNUSED(key);
        2:  818:	if (kbind_busy)
        2:  818-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  819:		return EXIT_SUCCESS;
    %%%%%:  819-block  0
unconditional  0 never executed
        -:  820:#ifndef _NO_SUGGESTIONS
       2*:  821:	if (suggestion.printed && suggestion_buf)
        2:  821-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:  821-block  1
branch  2 never executed
branch  3 never executed
    #####:  822:		free_suggestion();
    %%%%%:  822-block  0
call    0 never executed
unconditional  1 never executed
        -:  823:#endif
        2:  824:	sort++;
        2:  825:	if (sort > SORT_TYPES)
        2:  825-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  826:		sort = 0;
    %%%%%:  826-block  0
unconditional  0 never executed
        -:  827:
        2:  828:	if (cd_lists_on_the_fly) {
        2:  828-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  829:		if (clear_screen)
        2:  829-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  830:			CLEAR;
    %%%%%:  830-block  0
call    0 never executed
unconditional  1 never executed
        2:  831:		sort_switch = 1;
        2:  832:		free_dirlist();
        2:  832-block  0
call    0 returned 2
        2:  833:		putchar('\n');
call    0 returned 2
        2:  834:		list_dir();
call    0 returned 2
        2:  835:		sort_switch = 0;
unconditional  0 taken 2
        -:  836:	}
        -:  837:
        2:  838:	rl_reset_line_state();
        2:  838-block  0
call    0 returned 2
        2:  839:	return EXIT_SUCCESS;
unconditional  0 taken 2
        -:  840:}
        -:  841:
        -:  842:static int
function rl_sort_previous called 14 returned 100% blocks executed 76%
       14:  843:rl_sort_previous(int count, int key)
        -:  844:{
        -:  845:	UNUSED(count); UNUSED(key);
       14:  846:	if (kbind_busy)
       14:  846-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 14
    #####:  847:		return EXIT_SUCCESS;
    %%%%%:  847-block  0
unconditional  0 never executed
        -:  848:#ifndef _NO_SUGGESTIONS
      14*:  849:	if (suggestion.printed && suggestion_buf)
       14:  849-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 14
    %%%%%:  849-block  1
branch  2 never executed
branch  3 never executed
    #####:  850:		free_suggestion();
    %%%%%:  850-block  0
call    0 never executed
unconditional  1 never executed
        -:  851:#endif
       14:  852:	sort--;
       14:  853:	if (sort < 0)
       14:  853-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 13
        1:  854:		sort = SORT_TYPES;
        1:  854-block  0
unconditional  0 taken 1
        -:  855:
       14:  856:	if (cd_lists_on_the_fly) {
       14:  856-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 0
       14:  857:		if (clear_screen)
       14:  857-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 14
    #####:  858:			CLEAR;
    %%%%%:  858-block  0
call    0 never executed
unconditional  1 never executed
       14:  859:		sort_switch = 1;
       14:  860:		free_dirlist();
       14:  860-block  0
call    0 returned 14
       14:  861:		putchar('\n');
call    0 returned 14
       14:  862:		list_dir();
call    0 returned 14
       14:  863:		sort_switch = 0;
unconditional  0 taken 14
        -:  864:	}
        -:  865:
       14:  866:	rl_reset_line_state();
       14:  866-block  0
call    0 returned 14
       14:  867:	return EXIT_SUCCESS;
unconditional  0 taken 14
        -:  868:}
        -:  869:
        -:  870:static int
function rl_lock called 1 returned 100% blocks executed 75%
        1:  871:rl_lock(int count, int key)
        -:  872:{
        -:  873:	UNUSED(count); UNUSED(key);
        1:  874:	int ret = EXIT_SUCCESS;
        -:  875:#ifndef _NO_SUGGESTIONS
       1*:  876:	if (suggestion.printed && suggestion_buf)
        1:  876-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  876-block  1
branch  2 never executed
branch  3 never executed
    #####:  877:		free_suggestion();
    %%%%%:  877-block  0
call    0 never executed
unconditional  1 never executed
        -:  878:#endif
        1:  879:	rl_deprep_terminal();
        1:  879-block  0
call    0 returned 1
        -:  880:
        -:  881:#if __FreeBSD__ || __NetBSD__ || __OpenBSD__
        -:  882:	char *cmd[] = {"lock", NULL};
        -:  883:#elif __APPLE__
        -:  884:	char *cmd[] = {"bashlock", NULL};
        -:  885:#elif __HAIKU__
        -:  886:	char *cmd[] = {"peaclock", NULL};
        -:  887:#else
        1:  888:	char *cmd[] = {"vlock", NULL};
        -:  889:#endif
        1:  890:	ret = launch_execve(cmd, FOREGROUND, E_NOFLAG);
call    0 returned 1
        -:  891:
        1:  892:	rl_prep_terminal(0);
call    0 returned 1
        1:  893:	rl_reset_line_state();
call    0 returned 1
        -:  894:
        1:  895:	if (ret != EXIT_SUCCESS)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  896:		return EXIT_FAILURE;
    %%%%%:  896-block  0
unconditional  0 never executed
        1:  897:	return EXIT_SUCCESS;
        1:  897-block  0
unconditional  0 taken 1
        -:  898:}
        -:  899:
        -:  900:static int
function rl_remove_sel called 1 returned 100% blocks executed 88%
        1:  901:rl_remove_sel(int count, int key)
        -:  902:{
        -:  903:	UNUSED(count); UNUSED(key);
        1:  904:	if (kbind_busy)
        1:  904-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  905:		return EXIT_SUCCESS;
    %%%%%:  905-block  0
unconditional  0 never executed
        -:  906:
        1:  907:	rl_deprep_terminal();
        1:  907-block  0
call    0 returned 1
        1:  908:	kb_shortcut = 1;
        1:  909:	keybind_exec_cmd("r sel");
call    0 returned 1
        1:  910:	kb_shortcut = 0;
        1:  911:	rl_prep_terminal(0);
call    0 returned 1
        1:  912:	rl_reset_line_state();
call    0 returned 1
        1:  913:	return EXIT_SUCCESS;
unconditional  0 taken 1
        -:  914:}
        -:  915:
        -:  916:static int
function rl_export_sel called 1 returned 100% blocks executed 83%
        1:  917:rl_export_sel(int count, int key)
        -:  918:{
        -:  919:	UNUSED(count); UNUSED(key);
        1:  920:	if (kbind_busy)
        1:  920-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  921:		return EXIT_SUCCESS;
    %%%%%:  921-block  0
unconditional  0 never executed
        -:  922:
        1:  923:	kb_shortcut = 1;
        1:  924:	keybind_exec_cmd("exp sel");
        1:  924-block  0
call    0 returned 1
        1:  925:	kb_shortcut = 0;
        1:  926:	rl_reset_line_state();
call    0 returned 1
        1:  927:	return EXIT_SUCCESS;
unconditional  0 taken 1
        -:  928:}
        -:  929:
        -:  930:static int
function rl_move_sel called 1 returned 100% blocks executed 83%
        1:  931:rl_move_sel(int count, int key)
        -:  932:{
        -:  933:	UNUSED(count); UNUSED(key);
        1:  934:	if (kbind_busy)
        1:  934-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  935:		return EXIT_SUCCESS;
    %%%%%:  935-block  0
unconditional  0 never executed
        -:  936:
        1:  937:	kb_shortcut = 1;
        1:  938:	keybind_exec_cmd("m sel");
        1:  938-block  0
call    0 returned 1
        1:  939:	kb_shortcut = 0;
        1:  940:	rl_reset_line_state();
call    0 returned 1
        1:  941:	return EXIT_SUCCESS;
unconditional  0 taken 1
        -:  942:}
        -:  943:
        -:  944:static int
function rl_rename_sel called 1 returned 100% blocks executed 83%
        1:  945:rl_rename_sel(int count, int key)
        -:  946:{
        -:  947:	UNUSED(count); UNUSED(key);
        1:  948:	if (kbind_busy)
        1:  948-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  949:		return EXIT_SUCCESS;
    %%%%%:  949-block  0
unconditional  0 never executed
        -:  950:
        1:  951:	kb_shortcut = 1;
        1:  952:	keybind_exec_cmd("br sel");
        1:  952-block  0
call    0 returned 1
        1:  953:	kb_shortcut = 0;
        1:  954:	rl_reset_line_state();
call    0 returned 1
        1:  955:	return EXIT_SUCCESS;
unconditional  0 taken 1
        -:  956:}
        -:  957:
        -:  958:static int
function rl_paste_sel called 1 returned 100% blocks executed 88%
        1:  959:rl_paste_sel(int count, int key)
        -:  960:{
        -:  961:	UNUSED(count); UNUSED(key);
        1:  962:	if (kbind_busy)
        1:  962-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  963:		return EXIT_SUCCESS;
    %%%%%:  963-block  0
unconditional  0 never executed
        -:  964:
        1:  965:	kb_shortcut = 1;
        1:  966:	rl_deprep_terminal();
        1:  966-block  0
call    0 returned 1
        1:  967:	keybind_exec_cmd("c sel");
call    0 returned 1
        1:  968:	rl_prep_terminal(0);
call    0 returned 1
        1:  969:	kb_shortcut = 0;
        1:  970:	rl_reset_line_state();
call    0 returned 1
        1:  971:	return EXIT_SUCCESS;
unconditional  0 taken 1
        -:  972:}
        -:  973:
        -:  974:static int
function rl_quit called 0 returned 0% blocks executed 0%
    #####:  975:rl_quit(int count, int key)
        -:  976:{
        -:  977:	UNUSED(count); UNUSED(key);
    #####:  978:	if (kbind_busy)
    %%%%%:  978-block  0
branch  0 never executed
branch  1 never executed
    #####:  979:		return EXIT_SUCCESS;
    %%%%%:  979-block  0
unconditional  0 never executed
        -:  980:
        -:  981:	/* Reset terminal attributes before exiting. Without this line, the program
        -:  982:	 * quits, but terminal input is not printed to STDOUT */
    #####:  983:	tcsetattr(STDIN_FILENO, TCSANOW, &shell_tmodes);
    %%%%%:  983-block  0
call    0 never executed
    #####:  984:	exit(EXIT_SUCCESS);
call    0 never executed
        -:  985:	return EXIT_SUCCESS;
        -:  986:}
        -:  987:
        -:  988:static int
function rl_previous_profile called 6 returned 100% blocks executed 88%
        6:  989:rl_previous_profile(int count, int key)
        -:  990:{
        -:  991:	UNUSED(count); UNUSED(key);
        6:  992:	if (kbind_busy)
        6:  992-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:  993:		return EXIT_SUCCESS;
    %%%%%:  993-block  0
unconditional  0 never executed
        -:  994:#ifndef _NO_SUGGESTIONS
       6*:  995:	if (suggestion.printed && suggestion_buf)
        6:  995-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    %%%%%:  995-block  1
branch  2 never executed
branch  3 never executed
    #####:  996:		free_suggestion();
    %%%%%:  996-block  0
call    0 never executed
unconditional  1 never executed
        -:  997:#endif
        6:  998:	int prev_prof, i, cur_prof = -1, total_profs = 0;
       36:  999:	for (i = 0; profile_names[i]; i++) {
        6:  999-block  0
unconditional  0 taken 6
       30:  999-block  1
unconditional  1 taken 30
       36:  999-block  2
branch  2 taken 30
branch  3 taken 6 (fallthrough)
       30: 1000:		total_profs++;
        -: 1001:
       30: 1002:		if (!alt_profile) {
       30: 1002-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 25
        5: 1003:			if (*profile_names[i] == 'd'
        5: 1003-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1: 1004:			&& strcmp(profile_names[i], "default") == 0) {
        1: 1004-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1005:				cur_prof = i;
        1: 1005-block  0
unconditional  0 taken 1
        -: 1006:			}
        -: 1007:		} else {
       25: 1008:			if (*alt_profile == *profile_names[i]
       25: 1008-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 14
       11: 1009:			&& strcmp(alt_profile, profile_names[i]) == 0) {
       11: 1009-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 6
        5: 1010:				cur_prof = i;
        5: 1010-block  0
unconditional  0 taken 5
        -: 1011:			}
        -: 1012:		}
        -: 1013:	}
        -: 1014:
        6: 1015:	if (cur_prof == -1 || !profile_names[cur_prof])
        6: 1015-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6: 1015-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 6
    #####: 1016:		return EXIT_FAILURE;
    %%%%%: 1016-block  0
unconditional  0 never executed
        -: 1017:
        6: 1018:	prev_prof = cur_prof - 1;
        6: 1019:	total_profs--;
        -: 1020:
        6: 1021:	if (prev_prof < 0 || !profile_names[prev_prof])
        6: 1021-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 1
        5: 1021-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 5
        1: 1022:		prev_prof = total_profs;
        1: 1022-block  0
unconditional  0 taken 1
        -: 1023:
        6: 1024:	if (clear_screen) {
        6: 1024-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        4: 1025:		CLEAR;
        4: 1025-block  0
call    0 returned 4
unconditional  1 taken 4
        -: 1026:	} else
        2: 1027:		putchar('\n');
        2: 1027-block  0
call    0 returned 2
unconditional  1 taken 2
        -: 1028:
        6: 1029:	if (profile_set(profile_names[prev_prof]) == EXIT_SUCCESS) {
        6: 1029-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0
        6: 1030:		printf(_("%s->%s Switched to profile '%s'\n"), mi_c, df_c,
call    0 returned 6
        6: 1031:		    profile_names[prev_prof]);
        6: 1031-block  0
call    0 returned 6
        6: 1032:		char *input = prompt();
call    0 returned 6
        6: 1033:		free(input);
unconditional  0 taken 6
        -: 1034:	}
        -: 1035:
        6: 1036:	return EXIT_SUCCESS;
        6: 1036-block  0
unconditional  0 taken 6
        -: 1037:}
        -: 1038:
        -: 1039:static int
function rl_next_profile called 1 returned 100% blocks executed 72%
        1: 1040:rl_next_profile(int count, int key)
        -: 1041:{
        -: 1042:	UNUSED(count); UNUSED(key);
        1: 1043:	if (kbind_busy)
        1: 1043-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1044:		return EXIT_SUCCESS;
    %%%%%: 1044-block  0
unconditional  0 never executed
        -: 1045:#ifndef _NO_SUGGESTIONS
       1*: 1046:	if (suggestion.printed && suggestion_buf)
        1: 1046-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 1046-block  1
branch  2 never executed
branch  3 never executed
    #####: 1047:		free_suggestion();
    %%%%%: 1047-block  0
call    0 never executed
unconditional  1 never executed
        -: 1048:#endif
        1: 1049:	int next_prof, i, cur_prof = -1, total_profs = 0;
        6: 1050:	for (i = 0; profile_names[i]; i++) {
        1: 1050-block  0
unconditional  0 taken 1
        5: 1050-block  1
unconditional  1 taken 5
        6: 1050-block  2
branch  2 taken 5
branch  3 taken 1 (fallthrough)
        5: 1051:		total_profs++;
        -: 1052:
        5: 1053:		if (!alt_profile) {
        5: 1053-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5: 1054:			if (*profile_names[i] == 'd'
        5: 1054-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1: 1055:			&& strcmp(profile_names[i], "default") == 0) {
        1: 1055-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1056:				cur_prof = i;
        1: 1056-block  0
unconditional  0 taken 1
        -: 1057:			}
        -: 1058:		} else {
    #####: 1059:			if (*alt_profile == *profile_names[i]
    %%%%%: 1059-block  0
branch  0 never executed
branch  1 never executed
    #####: 1060:			&& strcmp(alt_profile, profile_names[i]) == 0) {
    %%%%%: 1060-block  0
branch  0 never executed
branch  1 never executed
    #####: 1061:				cur_prof = i;
    %%%%%: 1061-block  0
unconditional  0 never executed
        -: 1062:			}
        -: 1063:		}
        -: 1064:	}
        -: 1065:
        1: 1066:	if (cur_prof == -1 || !profile_names[cur_prof])
        1: 1066-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1066-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 1067:		return EXIT_FAILURE;
    %%%%%: 1067-block  0
unconditional  0 never executed
        -: 1068:
        1: 1069:	next_prof = cur_prof + 1;
        1: 1070:	total_profs--;
        -: 1071:
        1: 1072:	if (next_prof > (int)total_profs || !profile_names[next_prof])
        1: 1072-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1072-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 1073:		next_prof = 0;
    %%%%%: 1073-block  0
unconditional  0 never executed
        -: 1074:
        1: 1075:	if (clear_screen) {
        1: 1075-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1076:		CLEAR;
    %%%%%: 1076-block  0
call    0 never executed
unconditional  1 never executed
        -: 1077:	} else
        1: 1078:		putchar('\n');
        1: 1078-block  0
call    0 returned 1
unconditional  1 taken 1
        -: 1079:
        1: 1080:	if (profile_set(profile_names[next_prof]) == EXIT_SUCCESS) {
        1: 1080-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 1081:		printf(_("%s->%s Switched to profile '%s'\n"), mi_c, df_c,
call    0 returned 1
        1: 1082:		    profile_names[next_prof]);
        1: 1082-block  0
call    0 returned 1
        1: 1083:		char *input = prompt();
call    0 returned 1
        1: 1084:		free(input);
unconditional  0 taken 1
        -: 1085:	}
        -: 1086:
        1: 1087:	return EXIT_SUCCESS;
        1: 1087-block  0
unconditional  0 taken 1
        -: 1088:}
        -: 1089:
        -: 1090:static int
function rl_dirhist called 1 returned 100% blocks executed 100%
        1: 1091:rl_dirhist(int count, int key)
        -: 1092:{
        -: 1093:	UNUSED(count); UNUSED(key);
        1: 1094:	return run_kb_cmd("bh");
        1: 1094-block  0
call    0 returned 1
        -: 1095:}
        -: 1096:
        -: 1097:static int
function rl_archive_sel called 1 returned 100% blocks executed 100%
        1: 1098:rl_archive_sel(int count, int key)
        -: 1099:{
        -: 1100:	UNUSED(count); UNUSED(key);
        1: 1101:	return run_kb_cmd("ac sel");
        1: 1101-block  0
call    0 returned 1
        -: 1102:}
        -: 1103:
        -: 1104:static int
function rl_new_instance called 2 returned 100% blocks executed 100%
        2: 1105:rl_new_instance(int count, int key)
        -: 1106:{
        -: 1107:	UNUSED(count); UNUSED(key);
        2: 1108:	return run_kb_cmd("x .");
        2: 1108-block  0
call    0 returned 2
        -: 1109:}
        -: 1110:
        -: 1111:static int
function rl_clear_msgs called 1 returned 100% blocks executed 100%
        1: 1112:rl_clear_msgs(int count, int key)
        -: 1113:{
        -: 1114:	UNUSED(count); UNUSED(key);
        1: 1115:	return run_kb_cmd("msg clear");
        1: 1115-block  0
call    0 returned 1
        -: 1116:}
        -: 1117:
        -: 1118:static int
function rl_trash_sel called 1 returned 100% blocks executed 100%
        1: 1119:rl_trash_sel(int count, int key)
        -: 1120:{
        -: 1121:	UNUSED(count); UNUSED(key);
        1: 1122:	return run_kb_cmd("t sel");
        1: 1122-block  0
call    0 returned 1
        -: 1123:}
        -: 1124:
        -: 1125:static int
function rl_untrash_all called 2 returned 100% blocks executed 100%
        2: 1126:rl_untrash_all(int count, int key)
        -: 1127:{
        -: 1128:	UNUSED(count); UNUSED(key);
        2: 1129:	return run_kb_cmd("u *");
        2: 1129-block  0
call    0 returned 2
        -: 1130:}
        -: 1131:
        -: 1132:static int
function rl_open_sel called 2 returned 100% blocks executed 92%
        2: 1133:rl_open_sel(int count, int key)
        -: 1134:{
        -: 1135:	UNUSED(count); UNUSED(key);
        2: 1136:	if (kbind_busy)
        2: 1136-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 1137:		return EXIT_SUCCESS;
    %%%%%: 1137-block  0
unconditional  0 never executed
        -: 1138:
        2: 1139:	if (sel_n == 0 || !sel_elements[sel_n - 1]) {
        2: 1139-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 1139-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        1: 1140:		fprintf(stderr, _("\n%s: No selected files\n"), PROGRAM_NAME);
        1: 1140-block  0
call    0 returned 1
call    1 returned 1
        1: 1141:		rl_reset_line_state();
call    0 returned 1
        1: 1142:		return EXIT_FAILURE;
unconditional  0 taken 1
        -: 1143:	}
        -: 1144:
        -: 1145:	char cmd[PATH_MAX + 3];
        1: 1146:	sprintf(cmd, "o %s", sel_elements[sel_n - 1]);
        -: 1147:
        1: 1148:	keybind_exec_cmd(cmd);
        1: 1148-block  0
call    0 returned 1
        1: 1149:	rl_reset_line_state();
call    0 returned 1
        1: 1150:	return EXIT_SUCCESS;
unconditional  0 taken 1
        -: 1151:}
        -: 1152:
        -: 1153:static int
function rl_bm_sel called 1 returned 100% blocks executed 62%
        1: 1154:rl_bm_sel(int count, int key)
        -: 1155:{
        -: 1156:	UNUSED(count); UNUSED(key);
        1: 1157:	if (kbind_busy)
        1: 1157-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1158:		return EXIT_SUCCESS;
    %%%%%: 1158-block  0
unconditional  0 never executed
        -: 1159:
        1: 1160:	if (sel_n == 0 || !sel_elements[sel_n - 1]) {
        1: 1160-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1160-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 1161:		fprintf(stderr, _("\n%s: No selected files\n"), PROGRAM_NAME);
    %%%%%: 1161-block  0
call    0 never executed
call    1 never executed
    #####: 1162:		rl_reset_line_state();
call    0 never executed
    #####: 1163:		return EXIT_FAILURE;
unconditional  0 never executed
        -: 1164:	}
        -: 1165:
        -: 1166:	char cmd[PATH_MAX + 6];
        1: 1167:	sprintf(cmd, "bm a %s", sel_elements[sel_n - 1]);
        -: 1168:
        1: 1169:	keybind_exec_cmd(cmd);
        1: 1169-block  0
call    0 returned 1
        1: 1170:	rl_reset_line_state();
call    0 returned 1
        1: 1171:	return EXIT_SUCCESS;
unconditional  0 taken 1
        -: 1172:}
        -: 1173:
        -: 1174:static int
function rl_kbinds_help called 1 returned 100% blocks executed 56%
        1: 1175:rl_kbinds_help(int count, int key)
        -: 1176:{
        -: 1177:	UNUSED(count); UNUSED(key);
        -: 1178:#ifndef _NO_SUGGESTIONS
       1*: 1179:	if (suggestion.printed && suggestion_buf)
        1: 1179-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 1179-block  1
branch  2 never executed
branch  3 never executed
    #####: 1180:		free_suggestion();
    %%%%%: 1180-block  0
call    0 never executed
unconditional  1 never executed
        -: 1181:#endif
        -: 1182:
        1: 1183:	char *mp = (char *)NULL;
        1: 1184:	char *p = getenv("MANPAGER");
        1: 1184-block  0
call    0 returned 1
        1: 1185:	if (p) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1186:		mp = (char *)xnmalloc(strlen(p) + 1, sizeof(char *));
    %%%%%: 1186-block  0
call    0 never executed
    #####: 1187:		strcpy(mp, p);
    #####: 1188:		unsetenv("MANPAGER");
call    0 never executed
unconditional  1 never executed
        -: 1189:	}
        -: 1190:	char cmd[PATH_MAX];
        1: 1191:	snprintf(cmd, PATH_MAX - 1,
        -: 1192:		"export PAGER=\"less -p ^[0-9]+\\.[[:space:]]KEYBOARD[[:space:]]SHORTCUTS\"; man %s\n",
        -: 1193:		PNL);
        1: 1194:	int ret = launch_execle(cmd) != EXIT_SUCCESS;
        1: 1194-block  0
call    0 returned 1
        -: 1195:
        1: 1196:	if (mp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1197:		setenv("MANPAGER", mp, 1);
    %%%%%: 1197-block  0
call    0 never executed
    #####: 1198:		free(mp);
unconditional  0 never executed
        -: 1199:	}
        -: 1200:
        1: 1201:	if (!ret)
        1: 1201-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1202:		return EXIT_FAILURE;
        1: 1202-block  0
unconditional  0 taken 1
    #####: 1203:	return EXIT_SUCCESS;
    %%%%%: 1203-block  0
unconditional  0 never executed
        -: 1204:}
        -: 1205:
        -: 1206:static int
function rl_cmds_help called 1 returned 100% blocks executed 56%
        1: 1207:rl_cmds_help(int count, int key)
        -: 1208:{
        -: 1209:	UNUSED(count); UNUSED(key);
        -: 1210:#ifndef _NO_SUGGESTIONS
       1*: 1211:	if (suggestion.printed && suggestion_buf)
        1: 1211-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 1211-block  1
branch  2 never executed
branch  3 never executed
    #####: 1212:		free_suggestion();
    %%%%%: 1212-block  0
call    0 never executed
unconditional  1 never executed
        -: 1213:#endif
        -: 1214:	
        1: 1215:	char *mp = (char *)NULL;
        1: 1216:	char *p = getenv("MANPAGER");
        1: 1216-block  0
call    0 returned 1
        1: 1217:	if (p) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1218:		mp = (char *)xnmalloc(strlen(p) + 1, sizeof(char *));
    %%%%%: 1218-block  0
call    0 never executed
    #####: 1219:		strcpy(mp, p);
    #####: 1220:		unsetenv("MANPAGER");
call    0 never executed
unconditional  1 never executed
        -: 1221:	}
        -: 1222:	char cmd[PATH_MAX];
        1: 1223:	snprintf(cmd, PATH_MAX - 1,
        -: 1224:		"export PAGER=\"less -p ^[0-9]+\\.[[:space:]]COMMANDS\"; man %s\n",
        -: 1225:		PNL);
        1: 1226:	int ret = launch_execle(cmd) != EXIT_SUCCESS;
        1: 1226-block  0
call    0 returned 1
        -: 1227:
        1: 1228:	if (mp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1229:		setenv("MANPAGER", mp, 1);
    %%%%%: 1229-block  0
call    0 never executed
    #####: 1230:		free(mp);
unconditional  0 never executed
        -: 1231:	}
        -: 1232:
        1: 1233:	if (!ret)
        1: 1233-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1234:		return EXIT_FAILURE;
        1: 1234-block  0
unconditional  0 taken 1
    #####: 1235:	return EXIT_SUCCESS;
    %%%%%: 1235-block  0
unconditional  0 never executed
        -: 1236:}
        -: 1237:
        -: 1238:static int
function rl_manpage called 2 returned 100% blocks executed 89%
        2: 1239:rl_manpage(int count, int key)
        -: 1240:{
        -: 1241:	UNUSED(count); UNUSED(key);
        -: 1242:#ifndef _NO_SUGGESTIONS
        2: 1243:	if (suggestion.printed && suggestion_buf)
        2: 1243-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 1243-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1244:		free_suggestion();
        1: 1244-block  0
call    0 returned 1
unconditional  1 taken 1
        -: 1245:#endif
        2: 1246:	char *cmd[] = {"man", PNL, NULL};
        2: 1247:	if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS)
        2: 1247-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####: 1248:		return EXIT_FAILURE;
    %%%%%: 1248-block  0
unconditional  0 never executed
        2: 1249:	return EXIT_SUCCESS;
        2: 1249-block  0
unconditional  0 taken 2
        -: 1250:}
        -: 1251:
        -: 1252:static int
function rl_pinned_dir called 1 returned 100% blocks executed 43%
        1: 1253:rl_pinned_dir(int count, int key)
        -: 1254:{
        -: 1255:	UNUSED(count); UNUSED(key);
        1: 1256:	if (!pinned_dir) {
        1: 1256-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1257:		printf(_("%s: No pinned file\n"), PROGRAM_NAME);
    %%%%%: 1257-block  0
call    0 never executed
call    1 never executed
    #####: 1258:		rl_reset_line_state();
call    0 never executed
    #####: 1259:		return EXIT_SUCCESS;
unconditional  0 never executed
        -: 1260:	}
        -: 1261:
        1: 1262:	return run_kb_cmd(",");
        1: 1262-block  0
call    0 returned 1
unconditional  1 taken 1
        -: 1263:}
        -: 1264:
        -: 1265:static int
function rl_ws1 called 5 returned 100% blocks executed 100%
        5: 1266:rl_ws1(int count, int key)
        -: 1267:{
        -: 1268:	UNUSED(count); UNUSED(key);
        5: 1269:	return run_kb_cmd("ws 1");
        5: 1269-block  0
call    0 returned 5
        -: 1270:}
        -: 1271:
        -: 1272:static int
function rl_ws2 called 5 returned 100% blocks executed 100%
        5: 1273:rl_ws2(int count, int key)
        -: 1274:{
        -: 1275:	UNUSED(count); UNUSED(key);
        5: 1276:	return run_kb_cmd("ws 2");
        5: 1276-block  0
call    0 returned 5
        -: 1277:}
        -: 1278:
        -: 1279:static int
function rl_ws3 called 4 returned 100% blocks executed 100%
        4: 1280:rl_ws3(int count, int key)
        -: 1281:{
        -: 1282:	UNUSED(count); UNUSED(key);
        4: 1283:	return run_kb_cmd("ws 3");
        4: 1283-block  0
call    0 returned 4
        -: 1284:}
        -: 1285:
        -: 1286:static int
function rl_ws4 called 2 returned 100% blocks executed 100%
        2: 1287:rl_ws4(int count, int key)
        -: 1288:{
        -: 1289:	UNUSED(count); UNUSED(key);
        2: 1290:	return run_kb_cmd("ws 4");
        2: 1290-block  0
call    0 returned 2
        -: 1291:}
        -: 1292:
        -: 1293:static int
function rl_plugin1 called 0 returned 0% blocks executed 0%
    #####: 1294:rl_plugin1(int count, int key)
        -: 1295:{
        -: 1296:	UNUSED(count); UNUSED(key);
    #####: 1297:	return run_kb_cmd("plugin1");
    %%%%%: 1297-block  0
call    0 never executed
        -: 1298:}
        -: 1299:
        -: 1300:static int
function rl_plugin2 called 0 returned 0% blocks executed 0%
    #####: 1301:rl_plugin2(int count, int key)
        -: 1302:{
        -: 1303:	UNUSED(count); UNUSED(key);
    #####: 1304:	return run_kb_cmd("plugin2");
    %%%%%: 1304-block  0
call    0 never executed
        -: 1305:}
        -: 1306:
        -: 1307:static int
function rl_plugin3 called 0 returned 0% blocks executed 0%
    #####: 1308:rl_plugin3(int count, int key)
        -: 1309:{
        -: 1310:	UNUSED(count); UNUSED(key);
    #####: 1311:	return run_kb_cmd("plugin3");
    %%%%%: 1311-block  0
call    0 never executed
        -: 1312:}
        -: 1313:
        -: 1314:static int
function rl_plugin4 called 0 returned 0% blocks executed 0%
    #####: 1315:rl_plugin4(int count, int key)
        -: 1316:{
        -: 1317:	UNUSED(count); UNUSED(key);
    #####: 1318:	return run_kb_cmd("plugin4");
    %%%%%: 1318-block  0
call    0 never executed
        -: 1319:}
        -: 1320:
        -: 1321:static int
function rl_onlydirs called 0 returned 0% blocks executed 0%
    #####: 1322:rl_onlydirs(int count, int key)
        -: 1323:{
        -: 1324:	UNUSED(count); UNUSED(key);
        -: 1325:
    #####: 1326:	if (kbind_busy)
    %%%%%: 1326-block  0
branch  0 never executed
branch  1 never executed
    #####: 1327:		return EXIT_SUCCESS;
    %%%%%: 1327-block  0
unconditional  0 never executed
        -: 1328:
    #####: 1329:	only_dirs = only_dirs ? 0 : 1;
        -: 1330:
    #####: 1331:	int exit_status = EXIT_SUCCESS;
    #####: 1332:	if (cd_lists_on_the_fly) {
    %%%%%: 1332-block  0
branch  0 never executed
branch  1 never executed
    #####: 1333:		if (clear_screen)
    %%%%%: 1333-block  0
branch  0 never executed
branch  1 never executed
    #####: 1334:			CLEAR;
    %%%%%: 1334-block  0
call    0 never executed
unconditional  1 never executed
    #####: 1335:		free_dirlist();
    %%%%%: 1335-block  0
call    0 never executed
    #####: 1336:		putchar('\n');
call    0 never executed
    #####: 1337:		exit_status = list_dir();
call    0 never executed
unconditional  1 never executed
        -: 1338:	} else {
    #####: 1339:		printf(_("%s: List only directories set to %s\n"),
    %%%%%: 1339-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
    #####: 1340:			PROGRAM_NAME, only_dirs ? _("true"): _("false"));
    %%%%%: 1340-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1340-block  1
call    2 never executed
unconditional  3 never executed
    %%%%%: 1340-block  2
call    4 never executed
unconditional  5 never executed
        -: 1341:	}
        -: 1342:
    #####: 1343:	rl_reset_line_state();
    %%%%%: 1343-block  0
call    0 never executed
    #####: 1344:	return exit_status;
unconditional  0 never executed
        -: 1345:}
        -: 1346:
        -: 1347:/*static int
        -: 1348:rl_test(int count, int key)
        -: 1349:{
        -: 1350:	UNUSED(count); UNUSED(key);
        -: 1351:	printf("test\n");
        -: 1352:	return EXIT_SUCCESS;
        -: 1353:} */
        -: 1354:
        -: 1355:/*
        -: 1356:void
        -: 1357:add_func_to_rl(void)
        -: 1358:{
        -: 1359:	rl_add_defun("my-test", rl_test, -1);
        -: 1360:} */
        -: 1361:
        -: 1362:/* To get the keyseq value for a given key do this in an Xterm terminal:
        -: 1363: * C-v and then press the key (or the key combination). So, for example,
        -: 1364: * C-v, C-right arrow gives "[[1;5C", which here should be written like
        -: 1365: * this:
        -: 1366: * "\\x1b[1;5C" */
        -: 1367:void
function readline_kbinds called 4 returned 100% blocks executed 70%
        4: 1368:readline_kbinds(void)
        -: 1369:{
        -: 1370:
        -: 1371:			/* ##############################
        -: 1372:			 * #        KEYBINDINGS         #
        -: 1373:			 * ##############################*/
        -: 1374:
        4: 1375:	if (kbinds_file) {
        4: 1375-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        -: 1376:		/* Help */
        4: 1377:		rl_bind_keyseq(find_key("show-manpage"), rl_manpage);
        4: 1377-block  0
call    0 returned 4
call    1 returned 4
        4: 1378:		rl_bind_keyseq(find_key("show-manpage2"), rl_manpage);
call    0 returned 4
call    1 returned 4
        4: 1379:		rl_bind_keyseq(find_key("show-cmds"), rl_cmds_help);
call    0 returned 4
call    1 returned 4
        4: 1380:		rl_bind_keyseq(find_key("show-cmds2"), rl_cmds_help);
call    0 returned 4
call    1 returned 4
        4: 1381:		rl_bind_keyseq(find_key("show-kbinds"), rl_kbinds_help);
call    0 returned 4
call    1 returned 4
        4: 1382:		rl_bind_keyseq(find_key("show-kbinds2"), rl_kbinds_help);
call    0 returned 4
call    1 returned 4
        -: 1383:
        -: 1384:		/* Navigation */
        -: 1385:		/* Define multiple keybinds for different terminals:
        -: 1386:		 * rxvt, xterm, kernel console */
        -: 1387:		/*      rl_bind_keyseq("\\M-[D", rl_test); // Left arrow key
        -: 1388:		rl_bind_keyseq("\\M-+", rl_test); */
        4: 1389:		rl_bind_keyseq(find_key("parent-dir"), rl_parent_dir);
call    0 returned 4
call    1 returned 4
        4: 1390:		rl_bind_keyseq(find_key("parent-dir2"), rl_parent_dir);
call    0 returned 4
call    1 returned 4
        4: 1391:		rl_bind_keyseq(find_key("parent-dir3"), rl_parent_dir);
call    0 returned 4
call    1 returned 4
        4: 1392:		rl_bind_keyseq(find_key("parent-dir4"), rl_parent_dir);
call    0 returned 4
call    1 returned 4
        4: 1393:		rl_bind_keyseq(find_key("previous-dir"), rl_previous_dir);
call    0 returned 4
call    1 returned 4
        4: 1394:		rl_bind_keyseq(find_key("previous-dir2"), rl_previous_dir);
call    0 returned 4
call    1 returned 4
        4: 1395:		rl_bind_keyseq(find_key("previous-dir3"), rl_previous_dir);
call    0 returned 4
call    1 returned 4
        4: 1396:		rl_bind_keyseq(find_key("previous-dir4"), rl_previous_dir);
call    0 returned 4
call    1 returned 4
        4: 1397:		rl_bind_keyseq(find_key("next-dir"), rl_next_dir);
call    0 returned 4
call    1 returned 4
        4: 1398:		rl_bind_keyseq(find_key("next-dir2"), rl_next_dir);
call    0 returned 4
call    1 returned 4
        4: 1399:		rl_bind_keyseq(find_key("next-dir3"), rl_next_dir);
call    0 returned 4
call    1 returned 4
        4: 1400:		rl_bind_keyseq(find_key("next-dir4"), rl_next_dir);
call    0 returned 4
call    1 returned 4
        4: 1401:		rl_bind_keyseq(find_key("home-dir"), rl_home_dir);
call    0 returned 4
call    1 returned 4
        4: 1402:		rl_bind_keyseq(find_key("home-dir2"), rl_home_dir);
call    0 returned 4
call    1 returned 4
        4: 1403:		rl_bind_keyseq(find_key("home-dir3"), rl_home_dir);
call    0 returned 4
call    1 returned 4
        4: 1404:		rl_bind_keyseq(find_key("home-dir4"), rl_home_dir);
call    0 returned 4
call    1 returned 4
        4: 1405:		rl_bind_keyseq(find_key("root-dir"), rl_root_dir);
call    0 returned 4
call    1 returned 4
        4: 1406:		rl_bind_keyseq(find_key("root-dir2"), rl_root_dir);
call    0 returned 4
call    1 returned 4
        4: 1407:		rl_bind_keyseq(find_key("root-dir3"), rl_root_dir);
call    0 returned 4
call    1 returned 4
        4: 1408:		rl_bind_keyseq(find_key("first-dir"), rl_first_dir);
call    0 returned 4
call    1 returned 4
        4: 1409:		rl_bind_keyseq(find_key("last-dir"), rl_last_dir);
call    0 returned 4
call    1 returned 4
        4: 1410:		rl_bind_keyseq(find_key("pinned-dir"), rl_pinned_dir);
call    0 returned 4
call    1 returned 4
        4: 1411:		rl_bind_keyseq(find_key("workspace1"), rl_ws1);
call    0 returned 4
call    1 returned 4
        4: 1412:		rl_bind_keyseq(find_key("workspace2"), rl_ws2);
call    0 returned 4
call    1 returned 4
        4: 1413:		rl_bind_keyseq(find_key("workspace3"), rl_ws3);
call    0 returned 4
call    1 returned 4
        4: 1414:		rl_bind_keyseq(find_key("workspace4"), rl_ws4);
call    0 returned 4
call    1 returned 4
        -: 1415:
        -: 1416:		/* Operations on files */
        4: 1417:		rl_bind_keyseq(find_key("create-file"), rl_create_file);
call    0 returned 4
call    1 returned 4
        4: 1418:		rl_bind_keyseq(find_key("bookmark-sel"), rl_bm_sel);
call    0 returned 4
call    1 returned 4
        4: 1419:		rl_bind_keyseq(find_key("archive-sel"), rl_archive_sel);
call    0 returned 4
call    1 returned 4
        4: 1420:		rl_bind_keyseq(find_key("open-sel"), rl_open_sel);
call    0 returned 4
call    1 returned 4
        4: 1421:		rl_bind_keyseq(find_key("export-sel"), rl_export_sel);
call    0 returned 4
call    1 returned 4
        4: 1422:		rl_bind_keyseq(find_key("move-sel"), rl_move_sel);
call    0 returned 4
call    1 returned 4
        4: 1423:		rl_bind_keyseq(find_key("rename-sel"), rl_rename_sel);
call    0 returned 4
call    1 returned 4
        4: 1424:		rl_bind_keyseq(find_key("remove-sel"), rl_remove_sel);
call    0 returned 4
call    1 returned 4
        4: 1425:		rl_bind_keyseq(find_key("trash-sel"), rl_trash_sel);
call    0 returned 4
call    1 returned 4
        4: 1426:		rl_bind_keyseq(find_key("untrash-all"), rl_untrash_all);
call    0 returned 4
call    1 returned 4
        4: 1427:		rl_bind_keyseq(find_key("paste-sel"), rl_paste_sel);
call    0 returned 4
call    1 returned 4
        4: 1428:		rl_bind_keyseq(find_key("select-all"), rl_select_all);
call    0 returned 4
call    1 returned 4
        4: 1429:		rl_bind_keyseq(find_key("deselect-all"), rl_deselect_all);
call    0 returned 4
call    1 returned 4
        -: 1430:
        -: 1431:		/* Config files */
        4: 1432:		rl_bind_keyseq(find_key("open-mime"), rl_open_mime);
call    0 returned 4
call    1 returned 4
        4: 1433:		rl_bind_keyseq(find_key("open-jump-db"), rl_open_jump_db);
call    0 returned 4
call    1 returned 4
        4: 1434:		rl_bind_keyseq(find_key("edit-color-scheme"), rl_open_cscheme);
call    0 returned 4
call    1 returned 4
        4: 1435:		rl_bind_keyseq(find_key("open-config"), rl_open_config);
call    0 returned 4
call    1 returned 4
        4: 1436:		rl_bind_keyseq(find_key("open-keybinds"), rl_open_keybinds);
call    0 returned 4
call    1 returned 4
        4: 1437:		rl_bind_keyseq(find_key("open-bookmarks"), rl_open_bm_file);
call    0 returned 4
call    1 returned 4
        -: 1438:
        -: 1439:		/* Settings */
        4: 1440:		rl_bind_keyseq(find_key("clear-msgs"), rl_clear_msgs);
call    0 returned 4
call    1 returned 4
        4: 1441:		rl_bind_keyseq(find_key("next-profile"), rl_next_profile);
call    0 returned 4
call    1 returned 4
        4: 1442:		rl_bind_keyseq(find_key("previous-profile"), rl_previous_profile);
call    0 returned 4
call    1 returned 4
        4: 1443:		rl_bind_keyseq(find_key("quit"), rl_quit);
call    0 returned 4
call    1 returned 4
        4: 1444:		rl_bind_keyseq(find_key("lock"), rl_lock);
call    0 returned 4
call    1 returned 4
        4: 1445:		rl_bind_keyseq(find_key("refresh-screen"), rl_refresh);
call    0 returned 4
call    1 returned 4
        4: 1446:		rl_bind_keyseq(find_key("clear-line"), rl_clear_line);
call    0 returned 4
call    1 returned 4
        4: 1447:		rl_bind_keyseq(find_key("toggle-hidden"), rl_hidden);
call    0 returned 4
call    1 returned 4
        4: 1448:		rl_bind_keyseq(find_key("toggle-hidden2"), rl_hidden);
call    0 returned 4
call    1 returned 4
        4: 1449:		rl_bind_keyseq(find_key("toggle-long"), rl_long);
call    0 returned 4
call    1 returned 4
        4: 1450:		rl_bind_keyseq(find_key("toggle-light"), rl_light);
call    0 returned 4
call    1 returned 4
        4: 1451:		rl_bind_keyseq(find_key("folders-first"), rl_folders_first);
call    0 returned 4
call    1 returned 4
        4: 1452:		rl_bind_keyseq(find_key("sort-previous"), rl_sort_previous);
call    0 returned 4
call    1 returned 4
        4: 1453:		rl_bind_keyseq(find_key("sort-next"), rl_sort_next);
call    0 returned 4
call    1 returned 4
        4: 1454:		rl_bind_keyseq(find_key("only-dirs"), rl_onlydirs);
call    0 returned 4
call    1 returned 4
        -: 1455:
        4: 1456:		rl_bind_keyseq(find_key("new-instance"), rl_new_instance);
call    0 returned 4
call    1 returned 4
        4: 1457:		rl_bind_keyseq(find_key("show-dirhist"), rl_dirhist);
call    0 returned 4
call    1 returned 4
        4: 1458:		rl_bind_keyseq(find_key("bookmarks"), rl_bookmarks);
call    0 returned 4
call    1 returned 4
        4: 1459:		rl_bind_keyseq(find_key("mountpoints"), rl_mountpoints);
call    0 returned 4
call    1 returned 4
        4: 1460:		rl_bind_keyseq(find_key("selbox"), rl_selbox);
call    0 returned 4
call    1 returned 4
        4: 1461:		rl_bind_keyseq(find_key("prepend-sudo"), rl_prepend_sudo);
call    0 returned 4
call    1 returned 4
        -: 1462:
        -: 1463:		/* Plugins */
        4: 1464:		rl_bind_keyseq(find_key("plugin1"), rl_plugin1);
call    0 returned 4
call    1 returned 4
        4: 1465:		rl_bind_keyseq(find_key("plugin2"), rl_plugin2);
call    0 returned 4
call    1 returned 4
        4: 1466:		rl_bind_keyseq(find_key("plugin3"), rl_plugin3);
call    0 returned 4
call    1 returned 4
        4: 1467:		rl_bind_keyseq(find_key("plugin4"), rl_plugin4);
call    0 returned 4
call    1 returned 4
        -: 1468:
        4: 1469:		rl_bind_keyseq(find_key("quit"), rl_quit);
call    0 returned 4
call    1 returned 4
unconditional  2 taken 4
        -: 1470:	}
        -: 1471:
        -: 1472:	/* If no kbinds file is found, set the defaults */
        -: 1473:	else {
        -: 1474:		/* Help */
    #####: 1475:		rl_bind_keyseq("\\eOP", rl_manpage);
    %%%%%: 1475-block  0
call    0 never executed
    #####: 1476:		rl_bind_keyseq("\\eOQ", rl_cmds_help);
call    0 never executed
    #####: 1477:		rl_bind_keyseq("\\eOR", rl_kbinds_help);
call    0 never executed
    #####: 1478:		rl_bind_keyseq("\\e[11~", rl_manpage);
call    0 never executed
    #####: 1479:		rl_bind_keyseq("\\e[12~", rl_cmds_help);
call    0 never executed
    #####: 1480:		rl_bind_keyseq("\\e[13~", rl_kbinds_help);
call    0 never executed
        -: 1481:
        -: 1482:		/* Navigation */
    #####: 1483:		rl_bind_keyseq("\\M-u", rl_parent_dir);
call    0 never executed
    #####: 1484:		rl_bind_keyseq("\\e[a", rl_parent_dir);
call    0 never executed
    #####: 1485:		rl_bind_keyseq("\\e[2A", rl_parent_dir);
call    0 never executed
    #####: 1486:		rl_bind_keyseq("\\e[1;2A", rl_parent_dir);
call    0 never executed
    #####: 1487:		rl_bind_keyseq("\\M-j", rl_previous_dir);
call    0 never executed
    #####: 1488:		rl_bind_keyseq("\\e[d", rl_previous_dir);
call    0 never executed
    #####: 1489:		rl_bind_keyseq("\\e[2D", rl_previous_dir);
call    0 never executed
    #####: 1490:		rl_bind_keyseq("\\e[1;2D", rl_previous_dir);
call    0 never executed
    #####: 1491:		rl_bind_keyseq("\\M-k", rl_next_dir);
call    0 never executed
    #####: 1492:		rl_bind_keyseq("\\e[c", rl_next_dir);
call    0 never executed
    #####: 1493:		rl_bind_keyseq("\\e[2C", rl_next_dir);
call    0 never executed
    #####: 1494:		rl_bind_keyseq("\\e[1;2C", rl_next_dir);
call    0 never executed
    #####: 1495:		rl_bind_keyseq("\\M-e", rl_home_dir);
call    0 never executed
    #####: 1496:		rl_bind_keyseq("\\e[1~", rl_home_dir);
call    0 never executed
    #####: 1497:		rl_bind_keyseq("\\e[7~", rl_home_dir);
call    0 never executed
    #####: 1498:		rl_bind_keyseq("\\e[H", rl_home_dir);
call    0 never executed
    #####: 1499:		rl_bind_keyseq("\\M-r", rl_root_dir);
call    0 never executed
    #####: 1500:		rl_bind_keyseq("\\e/", rl_root_dir);
call    0 never executed
    #####: 1501:		rl_bind_keyseq("\\C-\\M-j", rl_first_dir);
call    0 never executed
    #####: 1502:		rl_bind_keyseq("\\C-\\M-k", rl_last_dir);
call    0 never executed
    #####: 1503:		rl_bind_keyseq("\\M-p", rl_pinned_dir);
call    0 never executed
    #####: 1504:		rl_bind_keyseq("\\M-1", rl_ws1);
call    0 never executed
    #####: 1505:		rl_bind_keyseq("\\M-2", rl_ws2);
call    0 never executed
    #####: 1506:		rl_bind_keyseq("\\M-3", rl_ws3);
call    0 never executed
    #####: 1507:		rl_bind_keyseq("\\M-4", rl_ws4);
call    0 never executed
        -: 1508:
        -: 1509:		/* Operations on files */
    #####: 1510:		rl_bind_keyseq("\\M-n", rl_create_file);
call    0 never executed
    #####: 1511:		rl_bind_keyseq("\\C-\\M-b", rl_bm_sel);
call    0 never executed
    #####: 1512:		rl_bind_keyseq("\\C-\\M-a", rl_archive_sel);
call    0 never executed
    #####: 1513:		rl_bind_keyseq("\\C-\\M-g", rl_open_sel);
call    0 never executed
    #####: 1514:		rl_bind_keyseq("\\C-\\M-e", rl_export_sel);
call    0 never executed
    #####: 1515:		rl_bind_keyseq("\\C-\\M-n", rl_move_sel);
call    0 never executed
    #####: 1516:		rl_bind_keyseq("\\C-\\M-r", rl_rename_sel);
call    0 never executed
    #####: 1517:		rl_bind_keyseq("\\C-\\M-d", rl_remove_sel);
call    0 never executed
    #####: 1518:		rl_bind_keyseq("\\C-\\M-t", rl_trash_sel);
call    0 never executed
    #####: 1519:		rl_bind_keyseq("\\C-\\M-u", rl_untrash_all);
call    0 never executed
    #####: 1520:		rl_bind_keyseq("\\C-\\M-v", rl_paste_sel);
call    0 never executed
    #####: 1521:		rl_bind_keyseq("\\M-a", rl_select_all);
call    0 never executed
    #####: 1522:		rl_bind_keyseq("\\M-d", rl_deselect_all);
call    0 never executed
    #####: 1523:		rl_bind_keyseq("\\M-v", rl_prepend_sudo);
call    0 never executed
        -: 1524:
        -: 1525:		/* Config files */
    #####: 1526:		rl_bind_keyseq("\\e[17~", rl_open_mime);
call    0 never executed
    #####: 1527:		rl_bind_keyseq("\\e[18~", rl_open_jump_db);
call    0 never executed
    #####: 1528:		rl_bind_keyseq("\\e[19~", rl_open_cscheme);
call    0 never executed
    #####: 1529:		rl_bind_keyseq("\\e[20~", rl_open_keybinds);
call    0 never executed
    #####: 1530:		rl_bind_keyseq("\\e[21~", rl_open_config);
call    0 never executed
    #####: 1531:		rl_bind_keyseq("\\e[23~", rl_open_bm_file);
call    0 never executed
        -: 1532:
        -: 1533:		/* Settings */
    #####: 1534:		rl_bind_keyseq("\\M-t", rl_clear_msgs);
call    0 never executed
        -: 1535:		/*      rl_bind_keyseq("", rl_next_profile);
        -: 1536:		rl_bind_keyseq("", rl_previous_profile); */
    #####: 1537:		rl_bind_keyseq("\\M-o", rl_lock);
call    0 never executed
    #####: 1538:		rl_bind_keyseq("\\C-r", rl_refresh);
call    0 never executed
    #####: 1539:		rl_bind_keyseq("\\M-c", rl_clear_line);
call    0 never executed
    #####: 1540:		rl_bind_keyseq("\\M-i", rl_hidden);
call    0 never executed
    #####: 1541:		rl_bind_keyseq("\\M-.", rl_hidden);
call    0 never executed
    #####: 1542:		rl_bind_keyseq("\\M-l", rl_long);
call    0 never executed
    #####: 1543:		rl_bind_keyseq("\\M-y", rl_light);
call    0 never executed
    #####: 1544:		rl_bind_keyseq("\\M-g", rl_folders_first);
call    0 never executed
    #####: 1545:		rl_bind_keyseq("\\M-z", rl_sort_previous);
call    0 never executed
    #####: 1546:		rl_bind_keyseq("\\M-x", rl_sort_next);
call    0 never executed
    #####: 1547:		rl_bind_keyseq("\\M-,", rl_onlydirs);
call    0 never executed
        -: 1548:
    #####: 1549:		rl_bind_keyseq("\\C-x", rl_new_instance);
call    0 never executed
    #####: 1550:		rl_bind_keyseq("\\M-h", rl_dirhist);
call    0 never executed
    #####: 1551:		rl_bind_keyseq("\\M-b", rl_bookmarks);
call    0 never executed
    #####: 1552:		rl_bind_keyseq("\\M-m", rl_mountpoints);
call    0 never executed
    #####: 1553:		rl_bind_keyseq("\\M-s", rl_selbox);
call    0 never executed
        -: 1554:
    #####: 1555:		rl_bind_keyseq("\\e[24~", rl_quit);
call    0 never executed
unconditional  1 never executed
        -: 1556:	}
        -: 1557:
        -: 1558:/*	char *term = getenv("TERM");
        -: 1559:	tgetent(NULL, term);
        -: 1560:	char *_right_arrow = tgetstr("nd", NULL);
        -: 1561:	char *s_right_arrow = tgetstr("%i", NULL);
        -: 1562:	char *s_left_arrow = tgetstr("#4", NULL); */
        -: 1563:
        -: 1564:	/* Bind Right arrow key and Ctrl-f to accept the whole suggestion */
        -: 1565:/*	rl_bind_keyseq(_right_arrow, rl_accept_suggestion);
        -: 1566:	rl_bind_key(6, rl_accept_suggestion);
        -: 1567:	rl_bind_keyseq(s_left_arrow, rl_previous_dir);
        -: 1568:	rl_bind_keyseq(s_right_arrow, rl_next_dir); */
        -: 1569:
        -: 1570:#ifndef _NO_SUGGESTIONS
        -: 1571:#ifndef __HAIKU__
        4: 1572:	rl_bind_keyseq("\\C-f", rl_accept_suggestion);
        4: 1572-block  0
call    0 returned 4
        4: 1573:	rl_bind_keyseq("\x1b[C", rl_accept_suggestion);
call    0 returned 4
        4: 1574:	rl_bind_keyseq("\x1bOC", rl_accept_suggestion);
call    0 returned 4
        -: 1575:
        -: 1576:	/* Bind Alt-Right and Alt-f to accept the first suggested word */
        -: 1577:/*	rl_bind_key(('f' | 0200), rl_accept_first_word); */ // Alt-f
        4: 1578:	rl_bind_keyseq("\x1b\x66", rl_accept_first_word);
call    0 returned 4
        4: 1579:	rl_bind_keyseq("\x1b[3C", rl_accept_first_word);
call    0 returned 4
        4: 1580:	rl_bind_keyseq("\x1b\x1b[C", rl_accept_first_word);
call    0 returned 4
        4: 1581:	rl_bind_keyseq("\x1b[1;3C", rl_accept_first_word);
call    0 returned 4
        -: 1582:#else
        -: 1583:	rl_bind_keyseq("\x1bOC", rl_accept_suggestion);
        -: 1584:	rl_bind_keyseq("\\C-f", rl_accept_first_word);
        -: 1585:#endif /* __HAIKU__ */
        -: 1586:#endif /* !_NO_SUGGESTIONS */
        4: 1587:}
