        -:    0:Source:aux.c
        -:    1:/* aux.c -- functions that do not fit in any other file */
        -:    2:
        -:    3:/*
        -:    4: * This file is part of CliFM
        -:    5: * 
        -:    6: * Copyright (C) 2016-2021, L. Abramovich <johndoe.arch@outlook.com>
        -:    7: * All rights reserved.
        -:    8:
        -:    9: * CliFM is free software; you can redistribute it and/or modify
        -:   10: * it under the terms of the GNU General Public License as published by
        -:   11: * the Free Software Foundation; either version 2 of the License, or
        -:   12: * (at your option) any later version.
        -:   13: *
        -:   14: * CliFM is distributed in the hope that it will be useful,
        -:   15: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   16: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   17: * GNU General Public License for more details.
        -:   18: *
        -:   19: * You should have received a copy of the GNU General Public License
        -:   20: * along with this program; if not, write to the Free Software
        -:   21: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
        -:   22: * MA 02110-1301, USA.
        -:   23: */
        -:   24:
        -:   25:#include "helpers.h"
        -:   26:
        -:   27:#include <ctype.h>
        -:   28:#include <dirent.h>
        -:   29:#include <errno.h>
        -:   30:#include <stdio.h>
        -:   31:#include <string.h>
        -:   32:#include <sys/stat.h>
        -:   33:#include <sys/types.h>
        -:   34:#include <termios.h>
        -:   35:#include <unistd.h>
        -:   36:#include <fcntl.h>
        -:   37:
        -:   38:#include "aux.h"
        -:   39:#include "exec.h"
        -:   40:#include "misc.h"
        -:   41:
        -:   42:/* Open a file for read only. Return a file stream associated to a file
        -:   43: * descriptor (FD) for the file named NAME */
        -:   44:FILE *
function open_fstream_r called 739 returned 100% blocks executed 75%
      739:   45:open_fstream_r(char *name, int *fd)
        -:   46:{
      739:   47:	if (!name || !*name)
      739:   47-block  0
branch  0 taken 739 (fallthrough)
branch  1 taken 0
      739:   47-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 739
    #####:   48:		return (FILE *)NULL;
    %%%%%:   48-block  0
unconditional  0 never executed
        -:   49:
      739:   50:	*fd = open(name, O_RDONLY);
      739:   50-block  0
call    0 returned 739
      739:   51:	if (*fd == -1)
branch  0 taken 469 (fallthrough)
branch  1 taken 270
      469:   52:		return (FILE *)NULL;
      469:   52-block  0
unconditional  0 taken 469
        -:   53:
      270:   54:	FILE *fp = fdopen(*fd, "r");
      270:   54-block  0
call    0 returned 270
      270:   55:	if (!fp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 270
    #####:   56:		close(*fd);
    %%%%%:   56-block  0
call    0 never executed
    #####:   57:		return (FILE *)NULL;
unconditional  0 never executed
        -:   58:	}
        -:   59:
      270:   60:	return fp;	
      270:   60-block  0
unconditional  0 taken 270
        -:   61:}
        -:   62:
        -:   63:/* Create a file for writing. Return a file stream associated to a file
        -:   64: * descriptor (FD) for the file named NAME */
        -:   65:FILE *
function open_fstream_w called 9 returned 100% blocks executed 67%
        9:   66:open_fstream_w(char *name, int *fd)
        -:   67:{
        9:   68:	if (!name || !*name)
        9:   68-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        9:   68-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 9
    #####:   69:		return (FILE *)NULL;
    %%%%%:   69-block  0
unconditional  0 never executed
        -:   70:
        9:   71:	*fd = open(name, O_WRONLY | O_CREAT | O_EXCL, S_IRUSR | S_IWUSR);
        9:   71-block  0
call    0 returned 9
        9:   72:	if (*fd == -1)
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    #####:   73:		return (FILE *)NULL;
    %%%%%:   73-block  0
unconditional  0 never executed
        -:   74:
        9:   75:	FILE *fp = fdopen(*fd, "w");
        9:   75-block  0
call    0 returned 9
        9:   76:	if (!fp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    #####:   77:		close(*fd);
    %%%%%:   77-block  0
call    0 never executed
    #####:   78:		return (FILE *)NULL;
unconditional  0 never executed
        -:   79:	}
        -:   80:
        9:   81:	return fp;	
        9:   81-block  0
unconditional  0 taken 9
        -:   82:}
        -:   83:
        -:   84:/* Close file stream FP and file descriptor FD */
        -:   85:void
function close_fstream called 279 returned 100% blocks executed 100%
      279:   86:close_fstream(FILE *fp, int fd)
        -:   87:{
      279:   88:	fclose(fp);
      279:   88-block  0
call    0 returned 279
      279:   89:	close(fd);
call    0 returned 279
      279:   90:}
        -:   91:
        -:   92:/*
        -:   93:static int
        -:   94:hex2int(char *str)
        -:   95:{
        -:   96:	int i, n[2] = { 0 };
        -:   97:	for (i = 1; i >= 0; i--) {
        -:   98:		if (str[i] >= '0' && str[i] <= '9') {
        -:   99:			n[i] = str[i] - '0';
        -:  100:		} else {
        -:  101:			switch (str[i]) {
        -:  102:			case 'A':
        -:  103:			case 'a':
        -:  104:				n[i] = 10;
        -:  105:				break;
        -:  106:			case 'B':
        -:  107:			case 'b':
        -:  108:				n[i] = 11;
        -:  109:				break;
        -:  110:			case 'C':
        -:  111:			case 'c':
        -:  112:				n[i] = 12;
        -:  113:				break;
        -:  114:			case 'D':
        -:  115:			case 'd':
        -:  116:				n[i] = 13;
        -:  117:				break;
        -:  118:			case 'E':
        -:  119:			case 'e':
        -:  120:				n[i] = 14;
        -:  121:				break;
        -:  122:			case 'F':
        -:  123:			case 'f':
        -:  124:				n[i] = 15;
        -:  125:				break;
        -:  126:			default:
        -:  127:				break;
        -:  128:			}
        -:  129:		}
        -:  130:	}
        -:  131:
        -:  132:	return ((n[0] * 16) + n[1]);
        -:  133:} */
        -:  134:
        -:  135:/* Given this value: \xA0\xA1\xA2, return an array of integers with
        -:  136: * the integer values for A0, A1, and A2 respectivelly */
        -:  137:/*int *
        -:  138:get_hex_num(const char *str)
        -:  139:{
        -:  140:	size_t i = 0;
        -:  141:	int *hex_n = (int *)xnmalloc(3, sizeof(int));
        -:  142:
        -:  143:	while (*str) {
        -:  144:		if (*str != '\\') {
        -:  145:			str++;
        -:  146:			continue;
        -:  147:		}
        -:  148:
        -:  149:		if (*(str + 1) != 'x')
        -:  150:			break;
        -:  151:
        -:  152:		str += 2;
        -:  153:		char *tmp = xnmalloc(3, sizeof(char));
        -:  154:		xstrsncpy(tmp, str, 2);
        -:  155:
        -:  156:		if (i >= 3)
        -:  157:			hex_n = xrealloc(hex_n, (i + 1) * sizeof(int *));
        -:  158:
        -:  159:		hex_n[i++] = hex2int(tmp);
        -:  160:
        -:  161:		free(tmp);
        -:  162:		tmp = (char *)NULL;
        -:  163:		str++;
        -:  164:	}
        -:  165:
        -:  166:	hex_n = xrealloc(hex_n, (i + 1) * sizeof(int));
        -:  167:	hex_n[i] = -1; // -1 marks the end of the int array
        -:  168:
        -:  169:	return hex_n;
        -:  170:} */
        -:  171:
        -:  172:/* Count files in DIR_PATH, including self and parent. If POP is set to 1,
        -:  173: * The function will just check if the directory is populated (it has at
        -:  174: * least 3 files, including self and parent)*/
        -:  175:int
function count_dir called 3453 returned 100% blocks executed 88%
     3453:  176:count_dir(const char *dir, int pop)
        -:  177:{
     3453:  178:	if (!dir)
     3453:  178-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3453
    #####:  179:		return -1;
    %%%%%:  179-block  0
unconditional  0 never executed
        -:  180:
        -:  181:	DIR *p;
     3453:  182:	if ((p = opendir(dir)) == NULL) {
     3453:  182-block  0
call    0 returned 3453
branch  1 taken 10 (fallthrough)
branch  2 taken 3443
       10:  183:		if (errno == ENOMEM)
       10:  183-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    #####:  184:			exit(EXIT_FAILURE);
    %%%%%:  184-block  0
call    0 never executed
        -:  185:		else
       10:  186:			return -1;
       10:  186-block  0
unconditional  0 taken 10
        -:  187:	}
        -:  188:
     3443:  189:	int c = 0;
        -:  190://	struct dirent *ent;
        -:  191:
   185318:  192:	while (readdir(p)) {
     3443:  192-block  0
unconditional  0 taken 3443
   185318:  192-block  1
call    1 returned 185318
branch  2 taken 181876
branch  3 taken 3442 (fallthrough)
   181876:  193:		c++;
   181876:  194:		if (pop && c > 2)
   181876:  194-block  0
branch  0 taken 81 (fallthrough)
branch  1 taken 181795
       81:  194-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 80
        1:  195:			break;
        1:  195-block  0
unconditional  0 taken 1
        -:  196:	}
        -:  197:
     3443:  198:	closedir(p);
     3443:  198-block  0
call    0 returned 3443
     3443:  199:	return c;
unconditional  0 taken 3443
        -:  200:}
        -:  201:
        -:  202:/* Get the path of a given command from the PATH environment variable.
        -:  203: * It basically does the same as the 'which' Unix command */
        -:  204:char *
function get_cmd_path called 44 returned 100% blocks executed 89%
       44:  205:get_cmd_path(const char *cmd)
        -:  206:{
       44:  207:	char *cmd_path = (char *)NULL;
        -:  208:	size_t i;
        -:  209:
       44:  210:	cmd_path = (char *)xnmalloc(PATH_MAX + 1, sizeof(char));
       44:  210-block  0
call    0 returned 44
        -:  211:
      132:  212:	for (i = 0; i < path_n; i++) { /* Get each path from PATH */
unconditional  0 taken 44
       88:  212-block  0
unconditional  1 taken 88
      132:  212-block  1
branch  2 taken 132
branch  3 taken 0 (fallthrough)
        -:  213:		/* Append cmd to each path and check if it exists and is
        -:  214:		 * executable */
      132:  215:		snprintf(cmd_path, PATH_MAX, "%s/%s", paths[i], cmd);
        -:  216:
      132:  217:		if (access(cmd_path, X_OK) == 0)
      132:  217-block  0
call    0 returned 132
branch  1 taken 44 (fallthrough)
branch  2 taken 88
       44:  218:			return cmd_path;
       44:  218-block  0
unconditional  0 taken 44
        -:  219:	}
        -:  220:
    #####:  221:	free(cmd_path);
    #####:  222:	return (char *)NULL;
    %%%%%:  222-block  0
unconditional  0 never executed
        -:  223:}
        -:  224:
        -:  225:/* Convert FILE_SIZE to human readeable form */
        -:  226:char *
function get_size_unit called 236 returned 100% blocks executed 100%
      236:  227:get_size_unit(off_t size)
        -:  228:{
        -:  229:#define MAX_UNIT_SIZE 9
        -:  230:	/* Max size type length == 9 == "1023.99K\0" */
      236:  231:	char *str = xnmalloc(MAX_UNIT_SIZE, sizeof(char));
      236:  231-block  0
call    0 returned 236
        -:  232:
      236:  233:	size_t n = 0;
      236:  234:	float s = (float)size;
        -:  235:
      408:  236:	while (s > 1024) {
unconditional  0 taken 236
      408:  236-block  0
branch  1 taken 172
branch  2 taken 236 (fallthrough)
      172:  237:		s = s / 1024;
      172:  238:		++n;
      172:  238-block  0
unconditional  0 taken 172
        -:  239:	}
        -:  240:
      236:  241:	int x = (int)s;
        -:  242:	/* If s - x == 0, then S has no reminder (zero)
        -:  243:	 * We don't want to print the reminder when it is zero */
        -:  244:
      236:  245:	const char *const u = "BKMGTPEZY";
      236:  246:	snprintf(str, MAX_UNIT_SIZE, "%.*f%c", (s == 0 || s - (float)x == 0)
      218:  246-block  0
branch  0 taken 154 (fallthrough)
branch  1 taken 64
      172:  246-block  1
unconditional  2 taken 172
       64:  246-block  2
unconditional  3 taken 64
      236:  247:			? 0 : 2, (double)s, u[n]);
      236:  247-block  0
branch  0 taken 218 (fallthrough)
branch  1 taken 18
        -:  248:
      236:  249:	return str;
      236:  249-block  0
unconditional  0 taken 236
        -:  250:}
        -:  251:
        -:  252:off_t
function dir_size called 1 returned 100% blocks executed 82%
        1:  253:dir_size(char *dir)
        -:  254:{
        1:  255:	if (!dir)
        1:  255-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  256:		return -1;
    %%%%%:  256-block  0
unconditional  0 never executed
        -:  257:
        1:  258:	char *rand_ext = gen_rand_str(6);
        1:  258-block  0
call    0 returned 1
        1:  259:	if (!rand_ext)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  260:		return -1;
    %%%%%:  260-block  0
unconditional  0 never executed
        -:  261:
        -:  262:	char file[15];
        1:  263:	sprintf(file, "/tmp/du.%s", rand_ext);
        1:  264:	free(rand_ext);
        -:  265:
        -:  266:	int fd;
        1:  267:	FILE *fp = open_fstream_w(file, &fd);
        1:  267-block  0
call    0 returned 1
        1:  268:	if (!fp)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  269:		return -1;
    %%%%%:  269-block  0
unconditional  0 never executed
        -:  270:
        1:  271:	int stdout_bk = dup(STDOUT_FILENO); /* Save original stdout */
        1:  271-block  0
call    0 returned 1
        1:  272:	dup2(fileno(fp), STDOUT_FILENO); /* Redirect stdout to the desired
call    0 returned 1
call    1 returned 1
        -:  273:																				 file */
        1:  274:	close_fstream(fp, fd);
call    0 returned 1
        -:  275:
        1:  276:	char *cmd[] = {"du", "-ks", dir, NULL};
        1:  277:	launch_execve(cmd, FOREGROUND, E_NOSTDERR);
call    0 returned 1
        -:  278:
        1:  279:	dup2(stdout_bk, STDOUT_FILENO); /* Restore original stdout */
call    0 returned 1
        1:  280:	close(stdout_bk);
call    0 returned 1
        -:  281:
        1:  282:	off_t retval = -1;
        -:  283:
        1:  284:	if (access(file, F_OK) == 0) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  285:		fp = open_fstream_r(file, &fd);
        1:  285-block  0
call    0 returned 1
        1:  286:		if (fp) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  287:			/* I only need here the first field of the line, which is a
        -:  288:			 * file size and could only take a few bytes, so that 32
        -:  289:			 * bytes is more than enough */
        1:  290:			char line[32] = "";
        1:  291:			if (fgets(line, (int)sizeof(line), fp) == NULL) {
        1:  291-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  292:				close_fstream(fp, fd);
    %%%%%:  292-block  0
call    0 never executed
    #####:  293:				unlink(file);
call    0 never executed
    #####:  294:				return -1;
unconditional  0 never executed
        -:  295:			}
        -:  296:
        1:  297:			char *file_size = strbfr(line, '\t');
        1:  297-block  0
call    0 returned 1
        1:  298:			if (file_size) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  299:				retval = (off_t)atoll(file_size);
        1:  300:				free(file_size);
        1:  300-block  0
unconditional  0 taken 1
        -:  301:			}
        -:  302:
        1:  303:			close_fstream(fp, fd);
        1:  303-block  0
call    0 returned 1
        -:  304:		}
        -:  305:
        1:  306:		unlink(file);
        1:  306-block  0
call    0 returned 1
unconditional  1 taken 1
        -:  307:	}
        -:  308:
        1:  309:	return retval;
        1:  309-block  0
unconditional  0 taken 1
        -:  310:}
        -:  311:
        -:  312:/* Return the file type of the file pointed to by LINK, or -1 in case of
        -:  313: * error. Possible return values:
        -:  314:S_IFDIR: 40000 (octal) / 16384 (decimal, integer)
        -:  315:S_IFREG: 100000 / 32768
        -:  316:S_IFLNK: 120000 / 40960
        -:  317:S_IFSOCK: 140000 / 49152
        -:  318:S_IFBLK: 60000 / 24576
        -:  319:S_IFCHR: 20000 / 8192
        -:  320:S_IFIFO: 10000 / 4096
        -:  321: * See the inode manpage */
        -:  322:int
function get_link_ref called 0 returned 0% blocks executed 0%
    #####:  323:get_link_ref(const char *link)
        -:  324:{
    #####:  325:	if (!link)
    %%%%%:  325-block  0
branch  0 never executed
branch  1 never executed
    #####:  326:		return (-1);
    %%%%%:  326-block  0
unconditional  0 never executed
        -:  327:
    #####:  328:	char *linkname = realpath(link, (char *)NULL);
    %%%%%:  328-block  0
call    0 never executed
    #####:  329:	if (linkname) {
branch  0 never executed
branch  1 never executed
        -:  330:		struct stat file_attrib;
    #####:  331:		stat(linkname, &file_attrib);
    %%%%%:  331-block  0
call    0 never executed
    #####:  332:		free(linkname);
    #####:  333:		return (int)(file_attrib.st_mode & S_IFMT);
unconditional  0 never executed
        -:  334:	}
        -:  335:
    #####:  336:	return (-1);
    %%%%%:  336-block  0
unconditional  0 never executed
        -:  337:}
        -:  338:
        -:  339:/* Transform an integer (N) into a string of chars
        -:  340: * This exists because some Operating systems do not support itoa */
        -:  341:char *
function xitoa called 2540 returned 100% blocks executed 88%
     2540:  342:xitoa(int n)
        -:  343:{
     2540:  344:	if (!n)
     2540:  344-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2540
    #####:  345:		return "0";
    %%%%%:  345-block  0
unconditional  0 never executed
        -:  346:
        -:  347:	static char buf[32] = {0};
     2540:  348:	int i = 30;
        -:  349:
     5980:  350:	while (n && i) {
     2540:  350-block  0
unconditional  0 taken 2540
     5980:  350-block  1
branch  1 taken 3440 (fallthrough)
branch  2 taken 2540
     3440:  350-block  2
branch  3 taken 3440
branch  4 taken 0 (fallthrough)
     3440:  351:		int rem = n / 10;
     3440:  352:		buf[i] = (char)('0' + (n - (rem * 10)));
     3440:  353:		n = rem;
     3440:  354:		--i;
     3440:  354-block  0
unconditional  0 taken 3440
        -:  355:	}
        -:  356:
     2540:  357:	return &buf[++i];
     2540:  357-block  0
unconditional  0 taken 2540
        -:  358:}
        -:  359:
        -:  360:/* Some memory wrapper functions */
        -:  361:void *
function xrealloc called 84449 returned 100% blocks executed 50%
    84449:  362:xrealloc(void *ptr, size_t size)
        -:  363:{
    84449:  364:	void *new_ptr = realloc(ptr, size);
        -:  365:
    84449:  366:	if (!new_ptr) {
    84449:  366-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 84449
    #####:  367:		free(ptr);
    #####:  368:		_err(0, NOPRINT_PROMPT, _("%s: %s failed to allocate %zu bytes\n"),
    %%%%%:  368-block  0
call    0 never executed
call    1 never executed
        -:  369:				PROGRAM_NAME, __func__, size);
    #####:  370:		exit(EXIT_FAILURE);
call    0 never executed
        -:  371:	}
        -:  372:
    84449:  373:	return new_ptr;
    84449:  373-block  0
unconditional  0 taken 84449
        -:  374:}
        -:  375:
        -:  376:void *
function xcalloc called 869 returned 100% blocks executed 50%
      869:  377:xcalloc(size_t nmemb, size_t size)
        -:  378:{
      869:  379:	void *new_ptr = calloc(nmemb, size);
        -:  380:
      869:  381:	if (!new_ptr) {
      869:  381-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 869
    #####:  382:		_err(0, NOPRINT_PROMPT, _("%s: %s failed to allocate %zu bytes\n"),
    %%%%%:  382-block  0
call    0 never executed
call    1 never executed
        -:  383:				PROGRAM_NAME, __func__, nmemb * size);
    #####:  384:		exit(EXIT_FAILURE);
call    0 never executed
        -:  385:	}
        -:  386:
      869:  387:	return new_ptr;
      869:  387-block  0
unconditional  0 taken 869
        -:  388:}
        -:  389:
        -:  390:void *
function xnmalloc called 67076 returned 100% blocks executed 50%
    67076:  391:xnmalloc(size_t nmemb, size_t size)
        -:  392:{
    67076:  393:	void *new_ptr = malloc(nmemb * size);
        -:  394:
    67076:  395:	if (!new_ptr) {
    67076:  395-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 67076
    #####:  396:		_err(0, NOPRINT_PROMPT, _("%s: %s failed to allocate %zu bytes\n"),
    %%%%%:  396-block  0
call    0 never executed
call    1 never executed
        -:  397:				PROGRAM_NAME, __func__, nmemb * size);
    #####:  398:		exit(EXIT_FAILURE);
call    0 never executed
        -:  399:	}
        -:  400:
    67076:  401:	return new_ptr;
    67076:  401-block  0
unconditional  0 taken 67076
        -:  402:}
        -:  403:
        -:  404:/* Unlike getchar this does not wait for newline('\n')
        -:  405:https://stackoverflow.com/questions/12710582/how-can-i-capture-a-key-stroke-immediately-in-linux 
        -:  406:*/
        -:  407:char
function xgetchar called 121 returned 100% blocks executed 100%
      121:  408:xgetchar(void)
        -:  409:{
        -:  410:	struct termios oldt, newt;
        -:  411:	char ch;
        -:  412:
      121:  413:	tcgetattr(STDIN_FILENO, &oldt);
      121:  413-block  0
call    0 returned 121
      121:  414:	newt = oldt;
      121:  415:	newt.c_lflag &= (tcflag_t)~(ICANON | ECHO);
      121:  416:	tcsetattr(STDIN_FILENO, TCSANOW, &newt);
call    0 returned 121
      121:  417:	ch = (char)getchar();
call    0 returned 121
      121:  418:	tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
call    0 returned 121
        -:  419:
      121:  420:	return ch;
unconditional  0 taken 121
        -:  421:}
        -:  422:
        -:  423:/* The following four functions (from_hex, to_hex, url_encode, and
        -:  424: * url_decode) were taken from "http://www.geekhideout.com/urlcode.shtml"
        -:  425: * and modified to comform to RFC 2395, as recommended by the
        -:  426: * freedesktop trash specification */
        -:  427:
        -:  428:/* Converts a hex char to its integer value */
        -:  429:char
function from_hex called 0 returned 0% blocks executed 0%
    #####:  430:from_hex(char c)
        -:  431:{
    #####:  432:	return (char)(isdigit(c) ? c - '0' : tolower(c) - 'a' + 10);
    %%%%%:  432-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  432-block  1
unconditional  2 never executed
    %%%%%:  432-block  2
unconditional  3 never executed
    %%%%%:  432-block  3
unconditional  4 never executed
        -:  433:}
        -:  434:
        -:  435:/* Converts an integer value to its hex form */
        -:  436:char
function to_hex called 0 returned 0% blocks executed 0%
    #####:  437:to_hex(char c)
        -:  438:{
        -:  439:	static char hex[] = "0123456789ABCDEF";
    #####:  440:	return hex[c & 15];
    %%%%%:  440-block  0
unconditional  0 never executed
        -:  441:}
        -:  442:
        -:  443:/* Returns a url-encoded version of str */
        -:  444:char *
function url_encode called 11 returned 100% blocks executed 75%
       11:  445:url_encode(char *str)
        -:  446:{
       11:  447:	if (!str || *str == '\0')
       11:  447-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11:  447-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 11
    #####:  448:		return (char *)NULL;
    %%%%%:  448-block  0
unconditional  0 never executed
        -:  449:
        -:  450:	char *p;
       11:  451:	p = (char *)calloc((strlen(str) * 3) + 1, sizeof(char));
        -:  452:	/* The max lenght of our buffer is 3 times the length of STR plus
        -:  453:	 * 1 extra byte for the null byte terminator: each char in STR will
        -:  454:	 * be, if encoded, %XX (3 chars) */
       11:  455:	if (!p)
       11:  455-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####:  456:		return (char *)NULL;
    %%%%%:  456-block  0
unconditional  0 never executed
        -:  457:
        -:  458:	char *buf;
       11:  459:	buf = p;
       11:  460:	p = (char *)NULL;
        -:  461:
        -:  462:	/* Copies of STR and BUF pointers to be able
        -:  463:	 * to increase and/or decrease them without loosing the original
        -:  464:	 * memory location */
        -:  465:	char *pstr, *pbuf;
       11:  466:	pstr = str;
       11:  467:	pbuf = buf;
        -:  468:
      468:  469:	for (; *pstr; pstr++) {
       11:  469-block  0
unconditional  0 taken 11
      457:  469-block  1
unconditional  1 taken 457
      468:  469-block  2
branch  2 taken 457
branch  3 taken 11 (fallthrough)
      457:  470:		if (isalnum(*pstr) || *pstr == '-' || *pstr == '_' || *pstr == '.'
      457:  470-block  0
branch  0 taken 84 (fallthrough)
branch  1 taken 373
       84:  470-block  1
branch  2 taken 84 (fallthrough)
branch  3 taken 0
       84:  470-block  2
branch  4 taken 70 (fallthrough)
branch  5 taken 14
       70:  470-block  3
branch  6 taken 66 (fallthrough)
branch  7 taken 4
       66:  471:		|| *pstr == '~' || *pstr == '/') {
       66:  471-block  0
branch  0 taken 66 (fallthrough)
branch  1 taken 0
       66:  471-block  1
branch  2 taken 66 (fallthrough)
branch  3 taken 0
        -:  472:			/* Do not encode the above chars */
      457:  473:			*pbuf++ = *pstr;
      457:  473-block  0
unconditional  0 taken 457
        -:  474:		} else {
        -:  475:			/* Encode char to URL format. Example: space char to %20 */
    #####:  476:			*pbuf++ = '%';
    #####:  477:			*pbuf++ = to_hex(*pstr >> 4); /* Right shift operation */
    %%%%%:  477-block  0
call    0 never executed
    #####:  478:			*pbuf++ = to_hex(*pstr & 15); /* Bitwise AND operation */
call    0 never executed
unconditional  1 never executed
        -:  479:		}
        -:  480:	}
        -:  481:
       11:  482:	return buf;
       11:  482-block  0
unconditional  0 taken 11
        -:  483:}
        -:  484:
        -:  485:/* Returns a url-decoded version of str */
        -:  486:char *
function url_decode called 10 returned 100% blocks executed 59%
       10:  487:url_decode(char *str)
        -:  488:{
       10:  489:	if (!str || str[0] == '\0')
       10:  489-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10:  489-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 10
    #####:  490:		return (char *)NULL;
    %%%%%:  490-block  0
unconditional  0 never executed
        -:  491:
       10:  492:	char *p = (char *)NULL;
       10:  493:	p = (char *)calloc(strlen(str) + 1, sizeof(char));
        -:  494:	/* The decoded string will be at most as long as the encoded
        -:  495:	 * string */
        -:  496:
       10:  497:	if (!p)
       10:  497-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    #####:  498:		return (char *)NULL;
    %%%%%:  498-block  0
unconditional  0 never executed
        -:  499:
        -:  500:	char *buf;
       10:  501:	buf = p;
       10:  502:	p = (char *)NULL;
        -:  503:
        -:  504:	char *pstr, *pbuf;
       10:  505:	pstr = str;
       10:  506:	pbuf = buf;
      427:  507:	for (; *pstr; pstr++) {
       10:  507-block  0
unconditional  0 taken 10
      417:  507-block  1
unconditional  1 taken 417
      427:  507-block  2
branch  2 taken 417
branch  3 taken 10 (fallthrough)
      417:  508:		if (*pstr == '%') {
      417:  508-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 417
    #####:  509:			if (pstr[1] && pstr[2]) {
    %%%%%:  509-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  509-block  1
branch  2 never executed
branch  3 never executed
        -:  510:				/* Decode URL code. Example: %20 to space char */
        -:  511:				/* Left shift and bitwise OR operations */
    #####:  512:				*pbuf++ = (char)(from_hex(pstr[1]) << 4 | from_hex(pstr[2]));
    %%%%%:  512-block  0
call    0 never executed
call    1 never executed
    #####:  513:				pstr += 2;
unconditional  0 never executed
        -:  514:			}
        -:  515:		} else {
      417:  516:			*pbuf++ = *pstr;
      417:  516-block  0
unconditional  0 taken 417
        -:  517:		}
        -:  518:	}
        -:  519:
       10:  520:	return buf;
       10:  520-block  0
unconditional  0 taken 10
        -:  521:}
        -:  522:
        -:  523:/* Convert octal string into integer.
        -:  524: * Taken from: https://www.geeksforgeeks.org/program-octal-decimal-conversion/
        -:  525: * Used by decode_prompt() to make things like this work: \033[1;34m */
        -:  526:int
function read_octal called 0 returned 0% blocks executed 0%
    #####:  527:read_octal(char *str)
        -:  528:{
    #####:  529:	if (!str)
    %%%%%:  529-block  0
branch  0 never executed
branch  1 never executed
    #####:  530:		return -1;
    %%%%%:  530-block  0
unconditional  0 never executed
        -:  531:
    #####:  532:	int n = atoi(str);
    #####:  533:	int num = n;
    #####:  534:	int dec_value = 0;
        -:  535:
        -:  536:	/* Initializing base value to 1, i.e 8^0 */
    #####:  537:	int base = 1;
        -:  538:
    #####:  539:	int temp = num;
    #####:  540:	while (temp) {
    %%%%%:  540-block  0
unconditional  0 never executed
    %%%%%:  540-block  1
branch  1 never executed
branch  2 never executed
        -:  541:		/* Extracting last digit */
    #####:  542:		int last_digit = temp % 10;
    #####:  543:		temp = temp / 10;
        -:  544:
        -:  545:		/* Multiplying last digit with appropriate
        -:  546:		 * base value and adding it to dec_value */
    #####:  547:		dec_value += last_digit * base;
    #####:  548:		base = base * 8;
    %%%%%:  548-block  0
unconditional  0 never executed
        -:  549:	}
        -:  550:
    #####:  551:	return dec_value;
    %%%%%:  551-block  0
unconditional  0 never executed
        -:  552:}
