        -:    0:Source:exec.c
        -:    1:/* exec.c -- functions controlling the execution of programs */
        -:    2:
        -:    3:/*
        -:    4: * This file is part of CliFM
        -:    5: * 
        -:    6: * Copyright (C) 2016-2021, L. Abramovich <johndoe.arch@outlook.com>
        -:    7: * All rights reserved.
        -:    8:
        -:    9: * CliFM is free software; you can redistribute it and/or modify
        -:   10: * it under the terms of the GNU General Public License as published by
        -:   11: * the Free Software Foundation; either version 2 of the License, or
        -:   12: * (at your option) any later version.
        -:   13: *
        -:   14: * CliFM is distributed in the hope that it will be useful,
        -:   15: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   16: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   17: * GNU General Public License for more details.
        -:   18: *
        -:   19: * You should have received a copy of the GNU General Public License
        -:   20: * along with this program; if not, write to the Free Software
        -:   21: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
        -:   22: * MA 02110-1301, USA.
        -:   23:*/
        -:   24:
        -:   25:#include "helpers.h"
        -:   26:#ifdef __OpenBSD__
        -:   27:#include <sys/dirent.h>
        -:   28:#endif
        -:   29:#include <dirent.h>
        -:   30:#include <errno.h>
        -:   31:#include <fcntl.h>
        -:   32:#include <stdio.h>
        -:   33:#include <string.h>
        -:   34:#include <sys/stat.h>
        -:   35:#include <sys/wait.h>
        -:   36:#include <unistd.h>
        -:   37:#include <readline/readline.h>
        -:   38:
        -:   39:#include "actions.h"
        -:   40:#ifndef _NO_ARCHIVING
        -:   41:#include "archives.h"
        -:   42:#endif
        -:   43:#include "aux.h"
        -:   44:#include "bookmarks.h"
        -:   45:#include "checks.h"
        -:   46:#include "colors.h"
        -:   47:#include "config.h"
        -:   48:#include "exec.h"
        -:   49:#include "file_operations.h"
        -:   50:#include "history.h"
        -:   51:#include "init.h"
        -:   52:#include "jump.h"
        -:   53:#include "keybinds.h"
        -:   54:#include "listing.h"
        -:   55:#include "mime.h"
        -:   56:#include "misc.h"
        -:   57:#include "navigation.h"
        -:   58:#include "profiles.h"
        -:   59:#include "properties.h"
        -:   60:#include "readline.h"
        -:   61:#include "remotes.h"
        -:   62:#include "search.h"
        -:   63:#include "selection.h"
        -:   64:#include "sort.h"
        -:   65:#include "strings.h"
        -:   66:#ifndef _NO_TRASH
        -:   67:#include "trash.h"
        -:   68:#endif
        -:   69:#include "messages.h"
        -:   70:
        -:   71:char **_comm = (char **)NULL;
        -:   72:
        -:   73:/* Run a command via execle() and refresh the screen in case of success */
        -:   74:int
function run_and_refresh called 4 returned 100% blocks executed 58%
        4:   75:run_and_refresh(char **comm)
        -:   76:{
        4:   77:	if (!comm)
        4:   77-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:   78:		return EXIT_FAILURE;
    %%%%%:   78-block  0
unconditional  0 never executed
        -:   79:
        4:   80:	log_function(comm);
        4:   80-block  0
call    0 returned 4
        -:   81:
        4:   82:	size_t i = 0, total_len = 0;
       16:   83:	for (i = 0; i <= args_n; i++)
unconditional  0 taken 4
       16:   83-block  0
branch  1 taken 12
branch  2 taken 4 (fallthrough)
       12:   84:		total_len += strlen(comm[i]);
       12:   84-block  0
unconditional  0 taken 12
        -:   85:
        4:   86:	char *tmp_cmd = (char *)NULL;
        4:   87:	tmp_cmd = (char *)xcalloc(total_len + (i + 1) + 1, sizeof(char));
        4:   87-block  0
call    0 returned 4
        -:   88:
       16:   89:	for (i = 0; i <= args_n; i++) {
unconditional  0 taken 4
       16:   89-block  0
branch  1 taken 12
branch  2 taken 4 (fallthrough)
       12:   90:		strcat(tmp_cmd, comm[i]);
       12:   91:		strcat(tmp_cmd, " ");
       12:   91-block  0
unconditional  0 taken 12
        -:   92:	}
        -:   93:
        4:   94:	int ret = launch_execle(tmp_cmd);
        4:   94-block  0
call    0 returned 4
        4:   95:	free(tmp_cmd);
        -:   96:
        4:   97:	if (ret != EXIT_SUCCESS)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:   98:		return EXIT_FAILURE;
    %%%%%:   98-block  0
unconditional  0 never executed
        -:   99:	/* Error messages will be printed by launch_execve() itself */
        -:  100:
        -:  101:	/* If 'rm sel' and command is successful, deselect everything */
       4*:  102:	if (is_sel && *comm[0] == 'r' && comm[0][1] == 'm' && (!comm[0][2]
        4:  102-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%:  102-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  102-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:  102-block  3
branch  6 never executed
branch  7 never executed
    #####:  103:	|| comm[0][2] == ' ')) {
    %%%%%:  103-block  0
branch  0 never executed
branch  1 never executed
    #####:  104:		int j = (int)sel_n;
    #####:  105:		while (--j >= 0)
    %%%%%:  105-block  0
unconditional  0 never executed
    %%%%%:  105-block  1
branch  1 never executed
branch  2 never executed
    #####:  106:			free(sel_elements[j]);
    %%%%%:  106-block  0
unconditional  0 never executed
    #####:  107:		sel_n = 0;
    #####:  108:		save_sel();
    %%%%%:  108-block  0
call    0 never executed
unconditional  1 never executed
        -:  109:	}
        -:  110:
        -:  111:#ifdef __HAIKU__
        -:  112:	if (cd_lists_on_the_fly && strcmp(comm[1], "--help") != 0
        -:  113:	&& strcmp(comm[1], "--version") != 0) {
        -:  114:		free_dirlist();
        -:  115:		list_dir();
        -:  116:	}
        -:  117:#endif
        -:  118:
        4:  119:	return EXIT_SUCCESS;
        4:  119-block  0
unconditional  0 taken 4
        -:  120:}
        -:  121:
        -:  122:static int
function run_in_foreground called 118 returned 100% blocks executed 50%
      118:  123:run_in_foreground(pid_t pid)
        -:  124:{
      118:  125:	int status = 0;
        -:  126:
        -:  127:	/* The parent process calls waitpid() on the child */
      118:  128:	if (waitpid(pid, &status, 0) > 0) {
      118:  128-block  0
call    0 returned 118
branch  1 taken 118 (fallthrough)
branch  2 taken 0
      118:  129:		if (WIFEXITED(status) && !WEXITSTATUS(status)) {
      118:  129-block  0
branch  0 taken 118 (fallthrough)
branch  1 taken 0
      118:  129-block  1
branch  2 taken 118 (fallthrough)
branch  3 taken 0
        -:  130:			/* The program terminated normally and executed successfully
        -:  131:			 * (WEXITSTATUS(status) == 0) */
      118:  132:			return EXIT_SUCCESS;
      118:  132-block  0
unconditional  0 taken 118
    #####:  133:		} else if (WIFEXITED(status) && WEXITSTATUS(status)) {
    %%%%%:  133-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  133-block  1
branch  2 never executed
branch  3 never executed
        -:  134:			/* Program terminated normally, but returned a
        -:  135:			 * non-zero status. Error codes should be printed by the
        -:  136:			 * program itself */
    #####:  137:			return WEXITSTATUS(status);
    %%%%%:  137-block  0
unconditional  0 never executed
        -:  138:		} else {
        -:  139:			/* The program didn't terminate normally. In this case too,
        -:  140:			 * error codes should be printed by the program */
    #####:  141:			return EXCRASHERR;
    %%%%%:  141-block  0
unconditional  0 never executed
        -:  142:		}
        -:  143:	} else {
        -:  144:		/* waitpid() failed */
    #####:  145:		fprintf(stderr, "%s: waitpid: %s\n", PROGRAM_NAME,
call    0 never executed
    #####:  146:		    strerror(errno));
    %%%%%:  146-block  0
call    0 never executed
    #####:  147:		return errno;
unconditional  0 never executed
        -:  148:	}
        -:  149:
        -:  150:	return EXIT_FAILURE; /* Never reached */
        -:  151:}
        -:  152:
        -:  153:static void
function run_in_background called 5 returned 100% blocks executed 100%
        5:  154:run_in_background(pid_t pid)
        -:  155:{
        5:  156:	int status = 0;
        -:  157:	/* Keep it in the background */
        5:  158:	waitpid(pid, &status, WNOHANG); /* or: kill(pid, SIGCONT); */
        5:  158-block  0
call    0 returned 5
        5:  159:}
        -:  160:
        -:  161:/* Execute a command using the system shell (/bin/sh), which takes care
        -:  162: * of special functions such as pipes and stream redirection, and special
        -:  163: * chars like wildcards, quotes, and escape sequences. Use only when the
        -:  164: * shell is needed; otherwise, launch_execve() should be used instead. */
        -:  165:int
function launch_execle called 1532 returned 100% blocks executed 44%
     1532:  166:launch_execle(const char *cmd)
        -:  167:{
     1532:  168:	if (!cmd)
     1532:  168-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1532
    #####:  169:		return EXNULLERR;
    %%%%%:  169-block  0
unconditional  0 never executed
        -:  170:
        -:  171:	/* Reenable SIGCHLD, in case it was disabled. Otherwise, waitpid won't
        -:  172:	 * be able to catch error codes coming from the child */
     1532:  173:	signal(SIGCHLD, SIG_DFL);
     1532:  173-block  0
call    0 returned 1532
        -:  174:
        -:  175:	int status;
     1532:  176:	pid_t pid = fork();
call    0 returned 1532
     1532:  177:	if (pid < 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1532
    #####:  178:		fprintf(stderr, "%s: fork: %s\n", PROGRAM_NAME, strerror(errno));
    %%%%%:  178-block  0
call    0 never executed
call    1 never executed
    #####:  179:		return EXFORKERR;
unconditional  0 never executed
     1532:  180:	} else if (pid == 0) {
     1532:  180-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1532
        -:  181:		/* Reenable signals only for the child, in case they were
        -:  182:		 * disabled for the parent */
    #####:  183:		signal(SIGHUP, SIG_DFL);
    %%%%%:  183-block  0
call    0 never executed
    #####:  184:		signal(SIGINT, SIG_DFL);
call    0 never executed
    #####:  185:		signal(SIGQUIT, SIG_DFL);
call    0 never executed
    #####:  186:		signal(SIGTERM, SIG_DFL);
call    0 never executed
        -:  187:
        -:  188:		/* Get shell base name */
    #####:  189:		char *name = strrchr(user.shell, '/');
        -:  190:
    #####:  191:		execl(user.shell, name ? name + 1 : user.shell, "-c", cmd, NULL);
branch  0 never executed
branch  1 never executed
    %%%%%:  191-block  0
unconditional  2 never executed
    %%%%%:  191-block  1
unconditional  3 never executed
    %%%%%:  191-block  2
call    4 never executed
    #####:  192:		fprintf(stderr, "%s: %s: execle: %s\n", PROGRAM_NAME, user.shell,
call    0 never executed
    #####:  193:		    strerror(errno));
call    0 never executed
    #####:  194:		_exit(errno);
call    0 never executed
        -:  195:	}
        -:  196:	/* Get command status */
        -:  197:	else {
        -:  198:		/* The parent process calls waitpid() on the child */
     1532:  199:		if (waitpid(pid, &status, 0) > 0) {
     1532:  199-block  0
call    0 returned 1532
branch  1 taken 1532 (fallthrough)
branch  2 taken 0
     1532:  200:			if (WIFEXITED(status) && !WEXITSTATUS(status)) {
     1532:  200-block  0
branch  0 taken 1532 (fallthrough)
branch  1 taken 0
     1532:  200-block  1
branch  2 taken 1035 (fallthrough)
branch  3 taken 497
        -:  201:				/* The program terminated normally and executed
        -:  202:				 * successfully */
     1035:  203:				return EXIT_SUCCESS;
     1035:  203-block  0
unconditional  0 taken 1035
      497:  204:			} else if (WIFEXITED(status) && WEXITSTATUS(status)) {
      497:  204-block  0
branch  0 taken 497 (fallthrough)
branch  1 taken 0
      497:  204-block  1
branch  2 taken 497 (fallthrough)
branch  3 taken 0
        -:  205:				/* Either "command not found" (WEXITSTATUS(status) == 127),
        -:  206:				 * "permission denied" (not executable) (WEXITSTATUS(status) ==
        -:  207:				 * 126) or the program terminated normally, but returned a
        -:  208:				 * non-zero status. These exit codes will be handled by the
        -:  209:				 * system shell itself, since we're using here execle() */
      497:  210:				return WEXITSTATUS(status);
      497:  210-block  0
unconditional  0 taken 497
        -:  211:			} else {
        -:  212:				/* The program didn't terminate normally */
    #####:  213:				return EXCRASHERR;
    %%%%%:  213-block  0
unconditional  0 never executed
        -:  214:			}
        -:  215:		} else {
        -:  216:			/* Waitpid() failed */
    #####:  217:			fprintf(stderr, "%s: waitpid: %s\n", PROGRAM_NAME,
call    0 never executed
    #####:  218:			    strerror(errno));
    %%%%%:  218-block  0
call    0 never executed
    #####:  219:			return errno;
unconditional  0 never executed
        -:  220:		}
        -:  221:	}
        -:  222:
        -:  223:	/* Never reached */
        -:  224:	return EXIT_FAILURE;
        -:  225:}
        -:  226:
        -:  227:/* Execute a command and return the corresponding exit status. The exit
        -:  228: * status could be: zero, if everything went fine, or a non-zero value
        -:  229: * in case of error. The function takes as first arguement an array of
        -:  230: * strings containing the command name to be executed and its arguments
        -:  231: * (cmd), an integer (bg) specifying if the command should be
        -:  232: * backgrounded (1) or not (0), and a flag to control file descriptors */
        -:  233:int
function launch_execve called 123 returned 100% blocks executed 33%
      123:  234:launch_execve(char **cmd, int bg, int xflags)
        -:  235:{
      123:  236:	if (!cmd)
      123:  236-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 123
    #####:  237:		return EXNULLERR;
    %%%%%:  237-block  0
unconditional  0 never executed
        -:  238:
        -:  239:	/* Reenable SIGCHLD, in case it was disabled. Otherwise, waitpid
        -:  240:	 * won't be able to catch error codes coming from the child. */
      123:  241:	signal(SIGCHLD, SIG_DFL);
      123:  241-block  0
call    0 returned 123
        -:  242:
      123:  243:	pid_t pid = fork();
call    0 returned 123
      123:  244:	if (pid < 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 123
    #####:  245:		fprintf(stderr, "%s: fork: %s\n", PROGRAM_NAME, strerror(errno));
    %%%%%:  245-block  0
call    0 never executed
call    1 never executed
    #####:  246:		return errno;
unconditional  0 never executed
      123:  247:	} else if (pid == 0) {
      123:  247-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 123
    #####:  248:		if (!bg) {
    %%%%%:  248-block  0
branch  0 never executed
branch  1 never executed
        -:  249:			/* If the program runs in the foreground, reenable signals
        -:  250:			 * only for the child, in case they were disabled for the
        -:  251:			 * parent */
    #####:  252:			signal(SIGHUP, SIG_DFL);
    %%%%%:  252-block  0
call    0 never executed
    #####:  253:			signal(SIGINT, SIG_DFL);
call    0 never executed
    #####:  254:			signal(SIGQUIT, SIG_DFL);
call    0 never executed
    #####:  255:			signal(SIGTERM, SIG_DFL);
call    0 never executed
unconditional  1 never executed
        -:  256:		}
        -:  257:
    #####:  258:		if (xflags) {
    %%%%%:  258-block  0
branch  0 never executed
branch  1 never executed
    #####:  259:			int fd = open("/dev/null", O_WRONLY, 0200);
    %%%%%:  259-block  0
call    0 never executed
        -:  260:
    #####:  261:			if (xflags & E_NOSTDIN)
branch  0 never executed
branch  1 never executed
    #####:  262:				dup2(fd, STDIN_FILENO);
    %%%%%:  262-block  0
call    0 never executed
unconditional  1 never executed
        -:  263:
    #####:  264:			if (xflags & E_NOSTDOUT)
    %%%%%:  264-block  0
branch  0 never executed
branch  1 never executed
    #####:  265:				dup2(fd, STDOUT_FILENO);
    %%%%%:  265-block  0
call    0 never executed
unconditional  1 never executed
        -:  266:
    #####:  267:			if (xflags & E_NOSTDERR)
    %%%%%:  267-block  0
branch  0 never executed
branch  1 never executed
    #####:  268:				dup2(fd, STDERR_FILENO);
    %%%%%:  268-block  0
call    0 never executed
unconditional  1 never executed
        -:  269:
    #####:  270:			close(fd);
    %%%%%:  270-block  0
call    0 never executed
unconditional  1 never executed
        -:  271:		}
        -:  272:
    #####:  273:		execvp(cmd[0], cmd);
    %%%%%:  273-block  0
call    0 never executed
    #####:  274:		fprintf(stderr, "%s: %s: %s\n", PROGRAM_NAME, cmd[0],
call    0 never executed
    #####:  275:		    strerror(errno));
call    0 never executed
    #####:  276:		_exit(errno);
call    0 never executed
        -:  277:	}
        -:  278:
        -:  279:	/* Get command status (pid > 0) */
        -:  280:	else {
      123:  281:		if (bg) {
      123:  281-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 118
        5:  282:			run_in_background(pid);
        5:  282-block  0
call    0 returned 5
        5:  283:			return EXIT_SUCCESS;
unconditional  0 taken 5
        -:  284:		} else {
      118:  285:			return run_in_foreground(pid);
      118:  285-block  0
call    0 returned 118
unconditional  1 taken 118
        -:  286:		}
        -:  287:	}
        -:  288:
        -:  289:	/* Never reached */
        -:  290:	return EXIT_FAILURE;
        -:  291:}
        -:  292:
        -:  293:/* Take the command entered by the user, already splitted into substrings
        -:  294: * by parse_input_str(), and call the corresponding function. Return zero
        -:  295: * in case of success and one in case of error */
        -:  296:int
function exec_cmd called 503 returned 99% blocks executed 68%
      503:  297:exec_cmd(char **comm)
        -:  298:{
      503:  299:	fputs(df_c, stdout);
      503:  299-block  0
call    0 returned 503
        -:  300:
        -:  301:	/* Exit flag. exit_code is zero (sucess) by default. In case of error
        -:  302:	 * in any of the functions below, it will be set to one (failure).
        -:  303:	 * This will be the value returned by this function. Used by the \z
        -:  304:	 * escape code in the prompt to print the exit status of the last
        -:  305:	 * executed command */
      503:  306:	exit_code = EXIT_SUCCESS;
        -:  307:
      503:  308:	if (*comm[0] == '#')
branch  0 taken 0 (fallthrough)
branch  1 taken 503
    #####:  309:		return exit_code;
    %%%%%:  309-block  0
unconditional  0 never executed
        -:  310:
        -:  311:				/* ##########################
        -:  312:				 * #     	AUTOJUMP	    #
        -:  313:				 * ########################## */
        -:  314:
        -:  315:/*	if (autojump) {
        -:  316:		exit_code = run_autojump(comm);
        -:  317:		if (exit_code != -1)
        -:  318:			return exit_code;
        -:  319:	} */
        -:  320:
        -:  321:	/* Warn when using the ',' keyword and there's no pinned file */
      503:  322:	int k = (int)args_n + 1;
     1231:  323:	while (--k >= 0) {
      503:  323-block  0
unconditional  0 taken 503
     1231:  323-block  1
branch  1 taken 728
branch  2 taken 503 (fallthrough)
     728*:  324:		if (*comm[k] == ',' && !comm[k][1]) {
      728:  324-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 728
    %%%%%:  324-block  1
branch  2 never executed
branch  3 never executed
    #####:  325:			fprintf(stderr, _("%s: No pinned file\n"), PROGRAM_NAME);
    %%%%%:  325-block  0
call    0 never executed
call    1 never executed
    #####:  326:			return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
        -:  327:		}
        -:  328:	}
        -:  329:
        -:  330:	/* User defined actions */
      503:  331:	if (actions_n) {
      503:  331-block  0
branch  0 taken 503 (fallthrough)
branch  1 taken 0
      503:  332:		int i = (int)actions_n;
    12023:  333:		while (--i >= 0) {
      503:  333-block  0
unconditional  0 taken 503
    12023:  333-block  1
branch  1 taken 11522
branch  2 taken 501 (fallthrough)
    11522:  334:			if (*comm[0] == *usr_actions[i].name
    11522:  334-block  0
branch  0 taken 283 (fallthrough)
branch  1 taken 11239
      283:  335:			&& strcmp(comm[0], usr_actions[i].name) == 0)
      283:  335-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 281
        2:  336:				return (exit_code = run_action(usr_actions[i].value, comm));
        2:  336-block  0
call    0 returned 2
unconditional  1 taken 2
        -:  337:		}
        -:  338:	}
        -:  339:
        -:  340:	/* User defined variables */
      501:  341:	if (flags & IS_USRVAR_DEF) {
      501:  341-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 501
    #####:  342:		flags &= ~IS_USRVAR_DEF;
    #####:  343:		return (exit_code = create_usr_var(comm[0]));
    %%%%%:  343-block  0
call    0 never executed
unconditional  1 never executed
        -:  344:	}
        -:  345:
      501:  346:	if (comm[0][0] == ';' || comm[0][0] == ':') {
      501:  346-block  0
branch  0 taken 499 (fallthrough)
branch  1 taken 2
      499:  346-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 498
        3:  347:		if (!comm[0][1]) {
        3:  347-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        -:  348:			/* If just ":" or ";", launch the default shell */
        2:  349:			char *cmd[] = {user.shell, NULL};
        2:  350:			if (launch_execve(cmd, FOREGROUND, E_NOFLAG) != EXIT_SUCCESS)
        2:  350-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:  351:				exit_code = EXIT_FAILURE;
    %%%%%:  351-block  0
unconditional  0 never executed
        2:  352:			return exit_code;
        2:  352-block  0
unconditional  0 taken 2
        1:  353:		} else if (comm[0][1] == ';' || comm[0][1] == ':') {
        1:  353-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  353-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:  354:		/* If double semi colon or colon (or ";:" or ":;") */
    #####:  355:			fprintf(stderr, _("%s: '%s': Syntax error\n"), PROGRAM_NAME, comm[0]);
    %%%%%:  355-block  0
call    0 never executed
call    1 never executed
    #####:  356:			return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
        -:  357:		}
        -:  358:	}
        -:  359:
        -:  360:				/* ###############################
        -:  361:				 * #    AUTOCD & AUTO-OPEN (1)   #
        -:  362:				 * ############################### */
        -:  363:
      499:  364:	char *deq_str = (char *)NULL;
      499:  365:	if (autocd || auto_open) {
      499:  365-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 495
        4:  365-block  1
branch  2 taken 4 (fallthrough)
branch  3 taken 0
        -:  366:		/* Expand tilde */
      499:  367:		if (*comm[0] == '~') {
      499:  367-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 499
    #####:  368:			char *exp_path = tilde_expand(comm[0]);
    %%%%%:  368-block  0
call    0 never executed
    #####:  369:			if (exp_path) {
branch  0 never executed
branch  1 never executed
    #####:  370:				comm[0] = (char *)xrealloc(comm[0], (strlen(exp_path) + 1) * sizeof(char));
    %%%%%:  370-block  0
call    0 never executed
    #####:  371:				strcpy(comm[0], exp_path);
    #####:  372:				free(exp_path);
unconditional  0 never executed
        -:  373:			}
        -:  374:		}
        -:  375:
        -:  376:		/* Deescape the string (only if file name) */
      499:  377:		if (strchr(comm[0], '\\')) {
      499:  377-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 499
    #####:  378:			deq_str = dequote_str(comm[0], 0);
    %%%%%:  378-block  0
call    0 never executed
unconditional  1 never executed
        -:  379:/*			if (deq_str) {
        -:  380:				if (access(deq_str, F_OK) == 0)
        -:  381:					strcpy(comm[0], deq_str);
        -:  382:				free(deq_str);
        -:  383:			} */
        -:  384:		}
        -:  385:	}
        -:  386:
        -:  387:	/* Only autocd or auto-open here if not absolute path and if there
        -:  388:	 * is no second argument or if second argument is "&" */
      499:  389:	if (*comm[0] != '/' && (autocd || auto_open) && (!comm[1]
      499:  389-block  0
branch  0 taken 477 (fallthrough)
branch  1 taken 22
      477:  389-block  1
branch  2 taken 4 (fallthrough)
branch  3 taken 473
        4:  389-block  2
branch  4 taken 4 (fallthrough)
branch  5 taken 0
      477:  389-block  3
branch  6 taken 173 (fallthrough)
branch  7 taken 304
     173*:  390:	|| (*comm[1] == '&' && !comm[1][1]))) {
      173:  390-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 173
    %%%%%:  390-block  1
branch  2 never executed
branch  3 never executed
     304*:  391:		char *tmp = deq_str ? deq_str : comm[0];
      304:  391-block  0
branch  0 taken 304 (fallthrough)
branch  1 taken 0
      304:  391-block  1
unconditional  2 taken 304
    %%%%%:  391-block  2
unconditional  3 never executed
      304:  392:		size_t tmp_len = strlen(tmp);
      304:  393:		if (tmp[tmp_len - 1] == '/')
      304:  393-block  0
branch  0 taken 15 (fallthrough)
branch  1 taken 289
       15:  394:			tmp[tmp_len - 1] = '\0';
       15:  394-block  0
unconditional  0 taken 15
        -:  395:
      304:  396:		if (autocd && cdpath_n && !comm[1]
      304:  396-block  0
branch  0 taken 301 (fallthrough)
branch  1 taken 3
      301:  396-block  1
branch  2 taken 300 (fallthrough)
branch  3 taken 1
      300:  396-block  2
branch  4 taken 300 (fallthrough)
branch  5 taken 0
      300:  397:		&& cd_function(comm[0], CD_NO_PRINT_ERROR) == EXIT_SUCCESS) {
      300:  397-block  0
call    0 returned 300
branch  1 taken 16 (fallthrough)
branch  2 taken 284
       16:  398:			free(deq_str);
       16:  399:			return EXIT_SUCCESS;
       16:  399-block  0
unconditional  0 taken 16
        -:  400:		}
        -:  401:
      288:  402:		int i = (int)files;
    50965:  403:		while (--i >= 0) {
      288:  403-block  0
unconditional  0 taken 288
    50965:  403-block  1
branch  1 taken 50689
branch  2 taken 276 (fallthrough)
    50689:  404:			if (*tmp != *file_info[i].name)
    50689:  404-block  0
branch  0 taken 48796 (fallthrough)
branch  1 taken 1893
    48796:  405:				continue;
    48796:  405-block  0
unconditional  0 taken 48796
        -:  406:
     1893:  407:			if (strcmp(tmp, file_info[i].name) != 0)
     1893:  407-block  0
branch  0 taken 1881 (fallthrough)
branch  1 taken 12
     1881:  408:				continue;
     1881:  408-block  0
unconditional  0 taken 1881
        -:  409:
       12:  410:			free(deq_str);
       12:  411:			deq_str = (char *)NULL;
        -:  412:
       12:  413:			if (autocd && (file_info[i].type == DT_DIR || file_info[i].dir == 1))
       12:  413-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 1
       11:  413-block  1
branch  2 taken 11 (fallthrough)
branch  3 taken 0
       11:  413-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 11
    #####:  414:				return (exit_code = cd_function(comm[0], CD_PRINT_ERROR));
    %%%%%:  414-block  0
call    0 never executed
unconditional  1 never executed
        -:  415:
       12:  416:			if (auto_open && (file_info[i].type == DT_REG
       12:  416-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 1
       11:  416-block  1
branch  2 taken 6 (fallthrough)
branch  3 taken 5
        6:  417:			|| file_info[i].type == DT_LNK)) {
        6:  417-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 1
       10:  418:				char *cmd[] = {"open", comm[0],
        -:  419:				    comm[1] ? comm[1] : NULL, NULL};
       10:  420:				return (exit_code = open_function(cmd));
       10:  420-block  0
call    0 returned 10
unconditional  1 taken 10
        -:  421:			} else {
        -:  422:				break;
        -:  423:			}
        -:  424:		}
        -:  425:	}
        -:  426:
      473:  427:	free(deq_str);
        -:  428:
        -:  429:	/* The more often a function is used, the more on top should it be
        -:  430:	 * in this if...else..if chain. It will be found faster this way. */
        -:  431:
        -:  432:	/* ####################################################
        -:  433:	 * #                 BUILTIN COMMANDS                 #
        -:  434:	 * ####################################################*/
        -:  435:
        -:  436:	/*          ############### CD ##################     */
      473:  437:	if (*comm[0] == 'c' && comm[0][1] == 'd' && !comm[0][2]) {
      473:  437-block  0
branch  0 taken 20 (fallthrough)
branch  1 taken 453
       20:  437-block  1
branch  2 taken 5 (fallthrough)
branch  3 taken 15
        5:  437-block  2
branch  4 taken 5 (fallthrough)
branch  5 taken 0
        5:  438:		if (!comm[1])
        5:  438-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 1
        4:  439:			exit_code = cd_function(NULL, CD_PRINT_ERROR);
        4:  439-block  0
call    0 returned 4
unconditional  1 taken 4
       1*:  440:		else if (*comm[1] == '-' && strcmp(comm[1], "--help") == 0)
        1:  440-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  440-block  1
branch  2 never executed
branch  3 never executed
    #####:  441:			puts(_(CD_USAGE));
    %%%%%:  441-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  442:		else
        1:  443:			exit_code = cd_function(comm[1], CD_PRINT_ERROR);
        1:  443-block  0
call    0 returned 1
unconditional  1 taken 1
        5:  444:		return exit_code;
        5:  444-block  0
unconditional  0 taken 5
        -:  445:	}
        -:  446:
        -:  447:	/*         ############### OPEN ##################     */
     468*:  448:	else if (*comm[0] == 'o' && (!comm[0][1] || strcmp(comm[0], "open") == 0)) {
      468:  448-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 466
        2:  448-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    %%%%%:  448-block  2
branch  4 never executed
branch  5 never executed
        2:  449:		if (!comm[1]) {
        2:  449-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  450:			puts(_(OPEN_USAGE));
    %%%%%:  450-block  0
call    0 never executed
call    1 never executed
    #####:  451:			exit_code = EXIT_FAILURE;
unconditional  0 never executed
       2*:  452:		} else if (*comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        2:  452-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:  452-block  1
branch  2 never executed
branch  3 never executed
    #####:  453:			puts(_(OPEN_USAGE));
    %%%%%:  453-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  454:		} else {
        2:  455:			exit_code = open_function(comm);
        2:  455-block  0
call    0 returned 2
unconditional  1 taken 2
        -:  456:		}
        2:  457:		return exit_code;
        2:  457-block  0
unconditional  0 taken 2
        -:  458:	}
        -:  459:
        -:  460:	/*   ############## DIRECTORY JUMPER ##################     */
      466:  461:	else if (*comm[0] == 'j' && (!comm[0][1] || ((comm[0][1] == 'c'
      466:  461-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 458
        8:  461-block  1
branch  2 taken 4 (fallthrough)
branch  3 taken 4
        4:  461-block  2
branch  4 taken 4 (fallthrough)
branch  5 taken 0
        4:  462:	|| comm[0][1] == 'p' || comm[0][1] == 'e' || comm[0][1] == 'o'
        4:  462-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3:  462-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 1
        2:  462-block  2
branch  4 taken 2 (fallthrough)
branch  5 taken 0
        4:  463:	|| comm[0][1] == 'l') && !comm[0][2])))
        2:  463-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        4:  463-block  1
branch  2 taken 4 (fallthrough)
branch  3 taken 0
        8:  464:		return (exit_code = dirjump(comm, NO_SUG_JUMP));
        8:  464-block  0
call    0 returned 8
unconditional  1 taken 8
        -:  465:
        -:  466:	/*       ############### REFRESH ##################     */
      458:  467:	else if (*comm[0] == 'r' && ((comm[0][1] == 'f' && !comm[0][2])
      458:  467-block  0
branch  0 taken 132 (fallthrough)
branch  1 taken 326
      132:  467-block  1
branch  2 taken 124 (fallthrough)
branch  3 taken 8
      124:  467-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 124
        8:  468:	|| strcmp(comm[0], "refresh") == 0)) {
        8:  468-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 8
      124:  469:		if (cd_lists_on_the_fly) {
      124:  469-block  0
branch  0 taken 124 (fallthrough)
branch  1 taken 0
      124:  470:			free_dirlist();
      124:  470-block  0
call    0 returned 124
      124:  471:			exit_code = list_dir();
call    0 returned 124
unconditional  1 taken 124
        -:  472:		}
      124:  473:		return exit_code;
      124:  473-block  0
unconditional  0 taken 124
        -:  474:	}
        -:  475:
        -:  476:	/*         ############### BOOKMARKS ##################     */
      334:  477:	else if (*comm[0] == 'b' && ((comm[0][1] == 'm' && !comm[0][2])
      334:  477-block  0
branch  0 taken 46 (fallthrough)
branch  1 taken 288
       46:  477-block  1
branch  2 taken 17 (fallthrough)
branch  3 taken 29
       17:  477-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 17
       29:  478:	|| strcmp(comm[0], "bookmarks") == 0)) {
       29:  478-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 29
       17:  479:		if (comm[1] && strcmp(comm[1], "--help") == 0) {
       17:  479-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 8
        9:  479-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 9
    #####:  480:			puts(_(BOOKMARKS_USAGE));
    %%%%%:  480-block  0
call    0 never executed
call    1 never executed
    #####:  481:			return EXIT_SUCCESS;
unconditional  0 never executed
        -:  482:		}
        -:  483:		/* Disable keyboard shortcuts. Otherwise, the function will
        -:  484:		 * still be waiting for input while the screen have been taken
        -:  485:		 * by another function */
       17:  486:		kbind_busy = 1;
        -:  487:		/* Disable TAB completion while in Bookmarks */
       17:  488:		rl_attempted_completion_function = NULL;
       17:  489:		exit_code = bookmarks_function(comm);
       17:  489-block  0
call    0 returned 17
        -:  490:		/* Reenable TAB completion */
       17:  491:		rl_attempted_completion_function = my_rl_completion;
        -:  492:		/* Reenable keyboard shortcuts */
       17:  493:		kbind_busy = 0;
       17:  494:		return exit_code;
unconditional  0 taken 17
        -:  495:	}
        -:  496:
        -:  497:	/*       ############### BACK AND FORTH ##################     */
      317:  498:	else if (*comm[0] == 'b' && (!comm[0][1] || strcmp(comm[0], "back") == 0))
      317:  498-block  0
branch  0 taken 29 (fallthrough)
branch  1 taken 288
       29:  498-block  1
branch  2 taken 4 (fallthrough)
branch  3 taken 25
        4:  498-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 4
       25:  499:		return (exit_code = back_function(comm));
       25:  499-block  0
call    0 returned 25
unconditional  1 taken 25
        -:  500:
      292:  501:	else if (*comm[0] == 'f' && (!comm[0][1] || strcmp(comm[0], "forth") == 0))
      292:  501-block  0
branch  0 taken 19 (fallthrough)
branch  1 taken 273
       19:  501-block  1
branch  2 taken 16 (fallthrough)
branch  3 taken 3
       16:  501-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 16
        3:  502:		return (exit_code = forth_function(comm));
        3:  502-block  0
call    0 returned 3
unconditional  1 taken 3
        -:  503:
      289:  504:	else if ((*comm[0] == 'b' && comm[0][1] == 'h' && !comm[0][2])
      289:  504-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 285
        4:  504-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 3
        1:  504-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 1
     288*:  505:	|| (*comm[0] == 'f' && comm[0][1] == 'h' && !comm[0][2])) {
      288:  505-block  0
branch  0 taken 16 (fallthrough)
branch  1 taken 272
       16:  505-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 16
    %%%%%:  505-block  2
branch  4 never executed
branch  5 never executed
        -:  506:		int i;
      111:  507:		for (i = 0; i < dirhist_total_index; i++) {
        1:  507-block  0
unconditional  0 taken 1
      110:  507-block  1
unconditional  1 taken 110
      111:  507-block  2
branch  2 taken 110
branch  3 taken 1 (fallthrough)
     110*:  508:			if (!old_pwd[i] || *old_pwd[i] == _ESC)
      110:  508-block  0
branch  0 taken 110 (fallthrough)
branch  1 taken 0
      110:  508-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 110
    #####:  509:				continue;
    %%%%%:  509-block  0
unconditional  0 never executed
      110:  510:			if (i == dirhist_cur_index)
      110:  510-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 109
        1:  511:				printf("  %d  %s%s%s\n", i + 1, dh_c, old_pwd[i], df_c);
        1:  511-block  0
call    0 returned 1
unconditional  1 taken 1
        -:  512:			else
      109:  513:				printf("  %d  %s\n", i + 1, old_pwd[i]);
      109:  513-block  0
call    0 returned 109
unconditional  1 taken 109
        -:  514:		}
        1:  515:		return EXIT_SUCCESS;
        1:  515-block  0
unconditional  0 taken 1
        -:  516:	}
        -:  517:
        -:  518:
        -:  519:	/*     ############### NEW FILE ##################     */
      288:  520:	else if (*comm[0] == 'n' && (!comm[0][1] || strcmp(comm[0], "new") == 0))
      288:  520-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 276
       12:  520-block  1
branch  2 taken 10 (fallthrough)
branch  3 taken 2
       10:  520-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 10
        2:  521:		exit_code = create_file(comm);
        2:  521-block  0
call    0 returned 2
unconditional  1 taken 2
        -:  522:
        -:  523:	/*     ############### DUPLICATE FILE ##################     */
      286:  524:	else if (*comm[0] == 'd' && (!comm[0][1] || strcmp(comm[0], "dup") == 0)) {
      286:  524-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 273
       13:  524-block  1
branch  2 taken 11 (fallthrough)
branch  3 taken 2
       11:  524-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 11
       2*:  525:		if (!comm[1] || (*comm[1] == '-' && strcmp(comm[1], "--help") == 0)) {
        2:  525-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  525-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    %%%%%:  525-block  2
branch  4 never executed
branch  5 never executed
    #####:  526:			puts(DUP_USAGE);
    %%%%%:  526-block  0
call    0 never executed
    #####:  527:			return EXIT_SUCCESS;
unconditional  0 never executed
        -:  528:		}
        2:  529:		exit_code = dup_file(comm[1], comm[2] ? comm[2] : NULL);
        2:  529-block  0
call    0 returned 2
unconditional  1 taken 2
        -:  530:	}
        -:  531:
        -:  532:#ifdef __HAIKU__
        -:  533:	else if ((*comm[0] == 'c' || *comm[0] == 'r' || *comm[0] == 'm'
        -:  534:	|| *comm[0] == 't' || *comm[0] == 'u' || *comm[0] == 'l')
        -:  535:	&& (strcmp(comm[0], "cp") == 0 || strcmp(comm[0], "rm") == 0
        -:  536:	|| strcmp(comm[0], "mkdir") == 0 || strcmp(comm[0], "unlink") == 0
        -:  537:	|| strcmp(comm[0], "touch") == 0 || strcmp(comm[0], "ln") == 0
        -:  538:	|| strcmp(comm[0], "chmod") == 0))
        -:  539:		return (exit_code = run_and_refresh(comm));
        -:  540:#endif
        -:  541:
        -:  542:	/*     ############### COPY AND MOVE ##################     */
      284:  543:	else if ((*comm[0] == 'c' && (!comm[0][1] || (comm[0][1] == 'p'
      284:  543-block  0
branch  0 taken 15 (fallthrough)
branch  1 taken 269
       15:  543-block  1
branch  2 taken 12 (fallthrough)
branch  3 taken 3
       12:  543-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 12
    #####:  544:	&& !comm[0][2])))
    %%%%%:  544-block  0
branch  0 never executed
branch  1 never executed
        -:  545:
      281:  546:		|| (*comm[0] == 'm' && (!comm[0][1] || (comm[0][1] == 'v'
      281:  546-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 271
       10:  546-block  1
branch  2 taken 7 (fallthrough)
branch  3 taken 3
        7:  546-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 7
    #####:  547:		&& !comm[0][2])))
    %%%%%:  547-block  0
branch  0 never executed
branch  1 never executed
        -:  548:
      278:  549:		|| (*comm[0] == 'v' && (!comm[0][1] || (comm[0][1] == 'v'
      278:  549-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 277
        1:  549-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  549-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    #####:  550:		&& !comm[0][2])))
    %%%%%:  550-block  0
branch  0 never executed
branch  1 never executed
        -:  551:
      278:  552:		|| (*comm[0] == 'p' && strcmp(comm[0], "paste") == 0)) {
      278:  552-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 264
       14:  552-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 14
        -:  553:
        6:  554:		if (((*comm[0] == 'c' || *comm[0] == 'v') && !comm[0][1])
        6:  554-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 3
        3:  554-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 3
        3:  554-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 3
       3*:  555:		|| (*comm[0] == 'v' && comm[0][1] == 'v' && !comm[0][2])
        3:  555-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%:  555-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  555-block  2
branch  4 never executed
branch  5 never executed
        3:  556:		|| strcmp(comm[0], "paste") == 0) {
        3:  556-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  557:
       3*:  558:			if (comm[1] && *comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        3:  558-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  558-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 3
    %%%%%:  558-block  2
branch  4 never executed
branch  5 never executed
    #####:  559:				puts(_(WRAPPERS_USAGE));
    %%%%%:  559-block  0
call    0 never executed
call    1 never executed
    #####:  560:				return EXIT_SUCCESS;
unconditional  0 never executed
        -:  561:			}
        -:  562:
       3*:  563:			if (*comm[0] == 'v' && comm[0][1] == 'v' && !comm[0][2])
        3:  563-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%:  563-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  563-block  2
branch  4 never executed
branch  5 never executed
    #####:  564:				copy_n_rename = 1;
    %%%%%:  564-block  0
unconditional  0 never executed
        -:  565:
        3:  566:			comm[0] = (char *)xrealloc(comm[0], 12 * sizeof(char));
        3:  566-block  0
call    0 returned 3
        3:  567:			if (!copy_n_rename) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  568:				if (cp_cmd == CP_CP)
        3:  568-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  569:					strcpy(comm[0], "cp -iRp");
        3:  569-block  0
unconditional  0 taken 3
    #####:  570:				else if (cp_cmd == CP_ADVCP)
    %%%%%:  570-block  0
branch  0 never executed
branch  1 never executed
    #####:  571:					strcpy(comm[0], "advcp -giRp");
    %%%%%:  571-block  0
unconditional  0 never executed
        -:  572:				else
    #####:  573:					strcpy(comm[0], "wcp");
    %%%%%:  573-block  0
unconditional  0 never executed
        -:  574:			} else {
    #####:  575:				strcpy(comm[0], "cp");
    %%%%%:  575-block  0
unconditional  0 never executed
        -:  576:			}
        3:  577:		} else if (*comm[0] == 'm' && !comm[0][1]) {
        3:  577-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  577-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 0
       3*:  578:			if (comm[1] && *comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        3:  578-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  578-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 3
    %%%%%:  578-block  2
branch  4 never executed
branch  5 never executed
    #####:  579:				puts(_(WRAPPERS_USAGE));
    %%%%%:  579-block  0
call    0 never executed
call    1 never executed
    #####:  580:				return EXIT_SUCCESS;
unconditional  0 never executed
        -:  581:			}	
        3:  582:			comm[0] = (char *)xrealloc(comm[0], 10 * sizeof(char));
        3:  582-block  0
call    0 returned 3
        3:  583:			if (mv_cmd == MV_MV)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  584:				strcpy(comm[0], "mv -i");
        3:  584-block  0
unconditional  0 taken 3
        -:  585:			else
    #####:  586:				strcpy(comm[0], "advmv -gi");
    %%%%%:  586-block  0
unconditional  0 never executed
        -:  587:		}
        -:  588:
        6:  589:		kbind_busy = 1;
        6:  590:		exit_code = copy_function(comm);
        6:  590-block  0
call    0 returned 6
        6:  591:		kbind_busy = 0;
unconditional  0 taken 6
        -:  592:	}
        -:  593:
        -:  594:	/*         ############### TRASH ##################     */
      278:  595:	else if (*comm[0] == 't' && (!comm[0][1] || strcmp(comm[0], "tr") == 0
      278:  595-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 267
       11:  595-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 8
        3:  595-block  2
branch  4 taken 3 (fallthrough)
branch  5 taken 0
        3:  596:	|| strcmp(comm[0], "trash") == 0)) {
        3:  596-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  597:#ifndef _NO_TRASH
       8*:  598:		if (comm[1] && *comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        8:  598-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 1
        7:  598-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 7
    %%%%%:  598-block  2
branch  4 never executed
branch  5 never executed
    #####:  599:			puts(_(TRASH_USAGE));
    %%%%%:  599-block  0
call    0 never executed
call    1 never executed
    #####:  600:			return EXIT_SUCCESS;
unconditional  0 never executed
        -:  601:		}
        -:  602:
        8:  603:		exit_code = trash_function(comm);
        8:  603-block  0
call    0 returned 8
        -:  604:
        8:  605:		if (is_sel) { /* If 'tr sel', deselect everything */
branch  0 taken 1 (fallthrough)
branch  1 taken 7
        1:  606:			int i = (int)sel_n;
        5:  607:			while (--i >= 0)
        1:  607-block  0
unconditional  0 taken 1
        5:  607-block  1
branch  1 taken 4
branch  2 taken 1 (fallthrough)
        4:  608:				free(sel_elements[i]);
        4:  608-block  0
unconditional  0 taken 4
        1:  609:			sel_n = 0;
        1:  610:			if (save_sel() != 0)
        1:  610-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  611:				exit_code = EXIT_FAILURE;
    %%%%%:  611-block  0
unconditional  0 never executed
        -:  612:		}
        -:  613:#else
        -:  614:		fprintf(stderr, _("%s: trash: %s\n"), PROGRAM_NAME, _(NOT_AVAILABLE));
        -:  615:		return EXIT_FAILURE;
        -:  616:#endif /* !_NO_TRASH */
        -:  617:	}
        -:  618:		
      270:  619:	else if (*comm[0] == 'u' && (!comm[0][1] || strcmp(comm[0], "undel") == 0
      270:  619-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 260
       10:  619-block  1
branch  2 taken 6 (fallthrough)
branch  3 taken 4
        6:  619-block  2
branch  4 taken 6 (fallthrough)
branch  5 taken 0
        6:  620:	|| strcmp(comm[0], "untrash") == 0)) {
        6:  620-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -:  621:#ifndef _NO_TRASH
       4*:  622:		if (comm[1] && *comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        4:  622-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:  622-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    %%%%%:  622-block  2
branch  4 never executed
branch  5 never executed
    #####:  623:			puts(_(UNTRASH_USAGE));
    %%%%%:  623-block  0
call    0 never executed
call    1 never executed
    #####:  624:			return EXIT_SUCCESS;
unconditional  0 never executed
        -:  625:		}
        -:  626:
        4:  627:		kbind_busy = 1;
        4:  628:		rl_attempted_completion_function = NULL;
        4:  629:		exit_code = untrash_function(comm);
        4:  629-block  0
call    0 returned 4
        4:  630:		rl_attempted_completion_function = my_rl_completion;
        4:  631:		kbind_busy = 0;
unconditional  0 taken 4
        -:  632:#else
        -:  633:		fprintf(stderr, _("%s: trash: %s\n"), PROGRAM_NAME, _(NOT_AVAILABLE));
        -:  634:		return EXIT_FAILURE;
        -:  635:#endif /* !_NO_TRASH */
        -:  636:	}
        -:  637:
        -:  638:	/*         ############### SELECTION ##################     */
      266:  639:	else if (*comm[0] == 's' && (!comm[0][1] || strcmp(comm[0], "sel") == 0))
      266:  639-block  0
branch  0 taken 29 (fallthrough)
branch  1 taken 237
       29:  639-block  1
branch  2 taken 19 (fallthrough)
branch  3 taken 10
       19:  639-block  2
branch  4 taken 3 (fallthrough)
branch  5 taken 16
       13:  640:		return (exit_code = sel_function(comm));
       13:  640-block  0
call    0 returned 13
unconditional  1 taken 13
        -:  641:
      253:  642:	else if (*comm[0] == 's' && (strcmp(comm[0], "sb") == 0
      253:  642-block  0
branch  0 taken 16 (fallthrough)
branch  1 taken 237
       16:  642-block  1
branch  2 taken 15 (fallthrough)
branch  3 taken 1
       15:  643:	|| strcmp(comm[0], "selbox") == 0)) {
       15:  643-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 15
        1:  644:		show_sel_files();
        1:  644-block  0
call    0 returned 1
        1:  645:		return EXIT_SUCCESS;
unconditional  0 taken 1
        -:  646:	}
        -:  647:
      252:  648:	else if (*comm[0] == 'd' && (strcmp(comm[0], "ds") == 0
      252:  648-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 241
       11:  648-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 11
    #####:  649:	|| strcmp(comm[0], "desel") == 0)) {
    %%%%%:  649-block  0
branch  0 never executed
branch  1 never executed
      11*:  650:		if (comm[1] && *comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
       11:  650-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 3
        8:  650-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 8
    %%%%%:  650-block  2
branch  4 never executed
branch  5 never executed
    #####:  651:			puts(_(DESEL_USAGE));
    %%%%%:  651-block  0
call    0 never executed
call    1 never executed
    #####:  652:			return EXIT_SUCCESS;
unconditional  0 never executed
        -:  653:		}
        -:  654:
       11:  655:		kbind_busy = 1;
       11:  656:		rl_attempted_completion_function = NULL;
       11:  657:		exit_code = deselect(comm);
       11:  657-block  0
call    0 returned 11
       11:  658:		rl_attempted_completion_function = my_rl_completion;
       11:  659:		kbind_busy = 0;
       11:  660:		return exit_code;
unconditional  0 taken 11
        -:  661:	}
        -:  662:
        -:  663:	/*  ############### SOME SHELL CMD WRAPPERS ##################  */
        -:  664:
      241:  665:	else if ((*comm[0] == 'r' || *comm[0] == 'm' || *comm[0] == 'l')
      241:  665-block  0
branch  0 taken 233 (fallthrough)
branch  1 taken 8
      233:  665-block  1
branch  2 taken 226 (fallthrough)
branch  3 taken 7
      226:  665-block  2
branch  4 taken 12 (fallthrough)
branch  5 taken 214
       27:  666:	&& (strcmp(comm[0], "r") == 0 || strcmp(comm[0], "l") == 0
       27:  666-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 4
       23:  666-block  1
branch  2 taken 22 (fallthrough)
branch  3 taken 1
       22:  667:	|| strcmp(comm[0], "md") == 0 || strcmp(comm[0], "le") == 0)) {
       22:  667-block  0
branch  0 taken 22 (fallthrough)
branch  1 taken 0
       22:  667-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 20
        -:  668:		/* This help is only for c, l, le, m, r, t, and md commands */
       7*:  669:		if (comm[1] && *comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        7:  669-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:  669-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 7
    %%%%%:  669-block  2
branch  4 never executed
branch  5 never executed
    #####:  670:			puts(_(WRAPPERS_USAGE));
    %%%%%:  670-block  0
call    0 never executed
call    1 never executed
    #####:  671:			return EXIT_SUCCESS;
unconditional  0 never executed
        -:  672:		}
        -:  673:
        7:  674:		if (*comm[0] == 'l' && !comm[0][1]) {
        7:  674-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 4
        3:  674-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 2
        1:  675:			comm[0] = (char *)xrealloc(comm[0], 7 * sizeof(char));
        1:  675-block  0
call    0 returned 1
        1:  676:			strcpy(comm[0], "ln -sn");
        -:  677:
        -:  678:			/* Make sure the symlink source is always an absolute path */
        1:  679:			if (comm[1] && *comm[1] != '/' && *comm[1] != '~') {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  679-block  0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  679-block  1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        -:  680:				char tmp[NAME_MAX];
        1:  681:				xstrsncpy(tmp, comm[1], NAME_MAX);
        1:  681-block  0
call    0 returned 1
        2:  682:				comm[1] = (char *)xrealloc(comm[1], (strlen(tmp)
        1:  683:							+ strlen(ws[cur_ws].path) + 2) * sizeof(char));
call    0 returned 1
        1:  684:				sprintf(comm[1], "%s/%s", ws[cur_ws].path, tmp);
unconditional  0 taken 1
        -:  685:			}
        6:  686:		} else if (*comm[0] == 'r' && !comm[0][1]) {
        6:  686-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        4:  686-block  1
branch  2 taken 4 (fallthrough)
branch  3 taken 0
        4:  687:			exit_code = remove_file(comm);
        4:  687-block  0
call    0 returned 4
        4:  688:			goto CHECK_EVENTS;
unconditional  0 taken 4
       2*:  689:		} else if (*comm[0] == 'm' && comm[0][1] == 'd' && !comm[0][2]) {
        2:  689-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:  689-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  689-block  2
branch  4 never executed
branch  5 never executed
    #####:  690:			comm[0] = (char *)xrealloc(comm[0], 9 * sizeof(char));
    %%%%%:  690-block  0
call    0 never executed
    #####:  691:			strcpy(comm[0], "mkdir -p");
unconditional  0 never executed
        -:  692:		}
        -:  693:
        3:  694:		if (*comm[0] == 'l' && comm[0][1] == 'e' && !comm[0][2]) {
        3:  694-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  694-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 1
        2:  694-block  2
branch  4 taken 2 (fallthrough)
branch  5 taken 0
        2:  695:			if (!comm[1]) {
        2:  695-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  696:				fprintf(stderr, "%s\n", _(LE_USAGE));
    %%%%%:  696-block  0
call    0 never executed
call    1 never executed
    #####:  697:				return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
        -:  698:			}
        2:  699:			exit_code = edit_link(comm[1]);
        2:  699-block  0
call    0 returned 2
        2:  700:			goto CHECK_EVENTS;
unconditional  0 taken 2
        1:  701:		} else if (*comm[0] == 'l' && comm[0][1] == 'n' && !comm[0][2]) {
        1:  701-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  701-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  701-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    #####:  702:			if (comm[1] && (strcmp(comm[1], "edit") == 0
    %%%%%:  702-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  702-block  1
branch  2 never executed
branch  3 never executed
    #####:  703:			|| strcmp(comm[1], "e") == 0)) {
    %%%%%:  703-block  0
branch  0 never executed
branch  1 never executed
    #####:  704:				if (!comm[2]) {
    %%%%%:  704-block  0
branch  0 never executed
branch  1 never executed
    #####:  705:					fprintf(stderr, "%s\n", _(LE_USAGE));
    %%%%%:  705-block  0
call    0 never executed
call    1 never executed
    #####:  706:					return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
        -:  707:				}
    #####:  708:				exit_code = edit_link(comm[2]);
    %%%%%:  708-block  0
call    0 never executed
    #####:  709:				goto CHECK_EVENTS;
unconditional  0 never executed
        -:  710:			}
        -:  711:		}
        -:  712:
        1:  713:		kbind_busy = 1;
        1:  714:		exit_code = run_and_refresh(comm);
        1:  714-block  0
call    0 returned 1
        1:  715:		kbind_busy = 0;
unconditional  0 taken 1
        -:  716:	}
        -:  717:
        -:  718:	/*    ############### TOGGLE EXEC ##################     */
      236:  719:	else if (*comm[0] == 't' && comm[0][1] == 'e' && !comm[0][2]) {
      234:  719-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 231
        3:  719-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 1
        2:  719-block  2
branch  4 taken 2 (fallthrough)
branch  5 taken 0
        2:  719-block  3
unconditional  6 taken 2
       2*:  720:		if (!comm[1] || (*comm[1] == '-' && strcmp(comm[1], "--help") == 0)) {
        2:  720-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  720-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    %%%%%:  720-block  2
branch  4 never executed
branch  5 never executed
    #####:  721:			puts(_(TE_USAGE));
    %%%%%:  721-block  0
call    0 never executed
call    1 never executed
    #####:  722:			return EXIT_SUCCESS;
unconditional  0 never executed
        -:  723:		}
        -:  724:
        -:  725:		size_t j;
        4:  726:		for (j = 1; comm[j]; j++) {
        2:  726-block  0
unconditional  0 taken 2
        2:  726-block  1
unconditional  1 taken 2
        4:  726-block  2
branch  2 taken 2
branch  3 taken 2 (fallthrough)
        -:  727:			struct stat attr;
        2:  728:			if (strchr(comm[j], '\\')) {
        2:  728-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  729:				char *tmp = dequote_str(comm[j], 0);
    %%%%%:  729-block  0
call    0 never executed
    #####:  730:				if (tmp) {
branch  0 never executed
branch  1 never executed
    #####:  731:					strcpy(comm[j], tmp);
    #####:  732:					free(tmp);
    %%%%%:  732-block  0
unconditional  0 never executed
        -:  733:				}
        -:  734:			}
        -:  735:
       2*:  736:			if (lstat(comm[j], &attr) == -1) {
        2:  736-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:  737:				fprintf(stderr, "stat: %s: %s\n", comm[j], strerror(errno));
    %%%%%:  737-block  0
call    0 never executed
call    1 never executed
    #####:  738:				exit_code = EXIT_FAILURE;
    #####:  739:				continue;
unconditional  0 never executed
        -:  740:			}
        -:  741:
        2:  742:			if (xchmod(comm[j], attr.st_mode) == -1)
        2:  742-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:  743:				exit_code = EXIT_FAILURE;
    %%%%%:  743-block  0
unconditional  0 never executed
        -:  744:		}
        -:  745:
        2:  746:		if (exit_code == EXIT_SUCCESS)
        2:  746-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  747:			printf(_("%s: Toggled executable bit on %zu file(s)\n"),
        2:  747-block  0
call    0 returned 2
call    1 returned 2
unconditional  2 taken 2
        -:  748:			    PROGRAM_NAME, args_n);
        -:  749:	}
        -:  750:
        -:  751:	/*    ############### PINNED FILE ##################     */
      232:  752:	else if (*comm[0] == 'p' && strcmp(comm[0], "pin") == 0) {
      232:  752-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 218
       14:  752-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 13
        1:  753:		if (comm[1]) {
        1:  753-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
       1*:  754:			if (*comm[1] == '-' && strcmp(comm[1], "--help") == 0)
        1:  754-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  754-block  1
branch  2 never executed
branch  3 never executed
    #####:  755:				puts(PIN_USAGE);
    %%%%%:  755-block  0
call    0 never executed
unconditional  1 never executed
        -:  756:			else
        1:  757:				exit_code = pin_directory(comm[1]);
        1:  757-block  0
call    0 returned 1
unconditional  1 taken 1
        -:  758:		} else {
    #####:  759:			if (pinned_dir)
    %%%%%:  759-block  0
branch  0 never executed
branch  1 never executed
    #####:  760:				printf(_("pinned file: %s\n"), pinned_dir);
    %%%%%:  760-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  761:			else
    #####:  762:				puts(_("No pinned file"));
    %%%%%:  762-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  763:		}
        1:  764:		return exit_code;
        1:  764-block  0
unconditional  0 taken 1
        -:  765:	}
        -:  766:
      231:  767:	else if (*comm[0] == 'u' && strcmp(comm[0], "unpin") == 0)
      231:  767-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 225
        6:  767-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 4
        2:  768:		return (exit_code = unpin_dir());
        2:  768-block  0
call    0 returned 2
unconditional  1 taken 2
        -:  769:
        -:  770:	/*    ############### PROPERTIES ##################     */
      229:  771:	else if (*comm[0] == 'p' && (!comm[0][1] || strcmp(comm[0], "pr") == 0
      229:  771-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 216
       13:  771-block  1
branch  2 taken 11 (fallthrough)
branch  3 taken 2
       11:  771-block  2
branch  4 taken 11 (fallthrough)
branch  5 taken 0
       11:  772:	|| strcmp(comm[0], "pp") == 0 || strcmp(comm[0], "prop") == 0)) {
       11:  772-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 1
       10:  772-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 10
        3:  773:		if (!comm[1]) {
        3:  773-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  774:			fprintf(stderr, "%s\n", _(PROP_USAGE));
    %%%%%:  774-block  0
call    0 never executed
call    1 never executed
    #####:  775:			exit_code = EXIT_FAILURE;
    #####:  776:			return EXIT_FAILURE;
unconditional  0 never executed
       3*:  777:		} else if (*comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        3:  777-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%:  777-block  1
branch  2 never executed
branch  3 never executed
    #####:  778:			puts(_(PROP_USAGE));
    %%%%%:  778-block  0
call    0 never executed
call    1 never executed
    #####:  779:			return EXIT_SUCCESS;
unconditional  0 never executed
        -:  780:		}
        -:  781:
        3:  782:		return (exit_code = properties_function(comm));
        3:  782-block  0
call    0 returned 3
unconditional  1 taken 3
        -:  783:	}
        -:  784:
        -:  785:	/*     ############### SEARCH ##################     */
      226:  786:	else if (*comm[0] == '/' && access(comm[0], F_OK) != 0) {
      226:  786-block  0
branch  0 taken 22 (fallthrough)
branch  1 taken 204
       22:  786-block  1
call    2 returned 22
branch  3 taken 5 (fallthrough)
branch  4 taken 17
        -:  787:		/* If not absolute path */
        -:  788:		/* Try first globbing, and if no result, try regex */
        5:  789:		if (search_glob(comm, (comm[0][1] == '!') ? 1 : 0) == EXIT_FAILURE)
        5:  789-block  0
call    0 returned 5
branch  1 taken 2 (fallthrough)
branch  2 taken 3
        2:  790:			exit_code = search_regex(comm, (comm[0][1] == '!') ? 1 : 0);
        2:  790-block  0
call    0 returned 2
unconditional  1 taken 2
        -:  791:		else
        3:  792:			exit_code = EXIT_SUCCESS;
        3:  792-block  0
unconditional  0 taken 3
        5:  793:		return exit_code;
        5:  793-block  0
unconditional  0 taken 5
        -:  794:	}
        -:  795:
        -:  796:	/*      ############### HISTORY ##################     */
      221:  797:	else if (*comm[0] == '!' && comm[0][1] != ' ' && comm[0][1] != '\t'
      221:  797-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 219
        2:  797-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2:  797-block  2
branch  4 taken 2 (fallthrough)
branch  5 taken 0
        2:  798:	&& comm[0][1] != '\n' && comm[0][1] != '=' && comm[0][1] != '(')
        2:  798-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  798-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2:  798-block  2
branch  4 taken 2 (fallthrough)
branch  5 taken 0
        2:  799:		exit_code = run_history_cmd(comm[0] + 1);
        2:  799-block  0
call    0 returned 2
unconditional  1 taken 2
        -:  800:
        -:  801:	/*    ############### BATCH LINK ##################     */
     219*:  802:	else if (*comm[0] == 'b' && comm[0][1] == 'l' && !comm[0][2])
      219:  802-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 216
        3:  802-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 3
    %%%%%:  802-block  2
branch  4 never executed
branch  5 never executed
    #####:  803:		exit_code = batch_link(comm);
    %%%%%:  803-block  0
call    0 never executed
unconditional  1 never executed
        -:  804:
        -:  805:	/*    ############### BULK RENAME ##################     */
      219:  806:	else if (*comm[0] == 'b' && ((comm[0][1] == 'r' && !comm[0][2])
      219:  806-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 216
        3:  806-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        3:  806-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 3
    #####:  807:	|| strcmp(comm[0], "bulk") == 0)) {
    %%%%%:  807-block  0
branch  0 never executed
branch  1 never executed
        3:  808:		if (!comm[1]) {
        3:  808-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  809:			fprintf(stderr, "%s\n", _(BULK_USAGE));
    %%%%%:  809-block  0
call    0 never executed
call    1 never executed
    #####:  810:			return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
        -:  811:		}
        -:  812:
       3*:  813:		if (*comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        3:  813-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%:  813-block  1
branch  2 never executed
branch  3 never executed
    #####:  814:			puts(_(BULK_USAGE));
    %%%%%:  814-block  0
call    0 never executed
call    1 never executed
    #####:  815:			return EXIT_SUCCESS;
unconditional  0 never executed
        -:  816:		}
        3:  817:		exit_code = bulk_rename(comm);
        3:  817-block  0
call    0 returned 3
unconditional  1 taken 3
        -:  818:	}
        -:  819:
        -:  820:	/*      ################ SORT ##################     */
      216:  821:	else if (*comm[0] == 's' && ((comm[0][1] == 't' && !comm[0][2])
      216:  821-block  0
branch  0 taken 15 (fallthrough)
branch  1 taken 201
       15:  821-block  1
branch  2 taken 9 (fallthrough)
branch  3 taken 6
        9:  821-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 9
        6:  822:	|| strcmp(comm[0], "sort") == 0)) {
        6:  822-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
       9*:  823:		if (comm[1] && *comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        9:  823-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 3
        6:  823-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 6
    %%%%%:  823-block  2
branch  4 never executed
branch  5 never executed
    #####:  824:			puts(_(SORT_USAGE));
    %%%%%:  824-block  0
call    0 never executed
call    1 never executed
    #####:  825:			return EXIT_SUCCESS;
unconditional  0 never executed
        -:  826:		}
        9:  827:		return (exit_code = sort_function(comm));
        9:  827-block  0
call    0 returned 9
unconditional  1 taken 9
        -:  828:	}
        -:  829:
        -:  830:	/*   ################ ARCHIVER ##################     */
      207:  831:	else if (*comm[0] == 'a' && ((comm[0][1] == 'c' || comm[0][1] == 'd')
      207:  831-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 189
       18:  831-block  1
branch  2 taken 7 (fallthrough)
branch  3 taken 11
        7:  831-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 6
       12:  832:	&& !comm[0][2])) {
       12:  832-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 9
        -:  833:#ifndef _NO_ARCHIVING
       3*:  834:		if (!comm[1] || (*comm[1] == '-' && strcmp(comm[1], "--help") == 0)) {
        3:  834-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  834-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 3
    %%%%%:  834-block  2
branch  4 never executed
branch  5 never executed
    #####:  835:			puts(_(ARCHIVE_USAGE));
    %%%%%:  835-block  0
call    0 never executed
call    1 never executed
    #####:  836:			return EXIT_SUCCESS;
unconditional  0 never executed
        -:  837:		}
        -:  838:
        3:  839:		if (comm[0][1] == 'c')
        3:  839-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  840:			exit_code = archiver(comm, 'c');
        2:  840-block  0
call    0 returned 2
unconditional  1 taken 2
        -:  841:		else
        1:  842:			exit_code = archiver(comm, 'd');
        1:  842-block  0
call    0 returned 1
unconditional  1 taken 1
        -:  843:#else
        -:  844:		fprintf(stderr, _("%s: archiving: %s\n"), PROGRAM_NAME, _(NOT_AVAILABLE));
        -:  845:		return EXIT_FAILURE;
        -:  846:#endif
        -:  847:	}
        -:  848:
        -:  849:	/* ##################################################
        -:  850:	 * #                 MINOR FUNCTIONS                #
        -:  851:	 * ##################################################*/
        -:  852:
      204:  853:	else if (*comm[0] == 'w' && comm[0][1] == 's' && !comm[0][2])
      204:  853-block  0
branch  0 taken 19 (fallthrough)
branch  1 taken 185
       19:  853-block  1
branch  2 taken 19 (fallthrough)
branch  3 taken 0
       19:  853-block  2
branch  4 taken 18 (fallthrough)
branch  5 taken 1
       18:  854:		return (exit_code = workspaces(comm[1] ? comm[1] : NULL));
       18:  854-block  0
call    0 returned 18
unconditional  1 taken 18
        -:  855:
      186:  856:	else if (*comm[0] == 'f' && ((comm[0][1] == 't' && !comm[0][2])
      186:  856-block  0
branch  0 taken 16 (fallthrough)
branch  1 taken 170
       16:  856-block  1
branch  2 taken 7 (fallthrough)
branch  3 taken 9
        7:  856-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 7
        9:  857:	|| strcmp(comm[0], "filter") == 0))
        9:  857-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 9
        7:  858:		return (exit_code = filter_function(comm[1]));
        7:  858-block  0
call    0 returned 7
unconditional  1 taken 7
        -:  859:
      179:  860:	else if (*comm[0] == 'c' && ((comm[0][1] == 'l' && !comm[0][2])
      179:  860-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 167
       12:  860-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 9
        3:  860-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 2
       10:  861:	|| strcmp(comm[0], "columns") == 0)) {
       10:  861-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10
       2*:  862:		if (!comm[1] || (*comm[1] == '-' && strcmp(comm[1], "--help") == 0)) {
        2:  862-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  862-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    %%%%%:  862-block  2
branch  4 never executed
branch  5 never executed
    #####:  863:			puts(_(COLUMNS_USAGE));
    %%%%%:  863-block  0
call    0 never executed
call    1 never executed
    #####:  864:			return EXIT_SUCCESS;
unconditional  0 never executed
        2:  865:		} else if (*comm[1] == 'o' && comm[1][1] == 'n' && !comm[1][2]) {
        2:  865-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  865-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1:  865-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:  866:			columned = 1;
        1:  867:			if (cd_lists_on_the_fly) {
        1:  867-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  868:				free_dirlist();
        1:  868-block  0
call    0 returned 1
        1:  869:				exit_code = list_dir();
call    0 returned 1
unconditional  1 taken 1
        -:  870:			}
        1:  871:		} else if (*comm[1] == 'o' && strcmp(comm[1], "off") == 0) {
        1:  871-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  871-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  872:			columned = 0;
        1:  873:			if (cd_lists_on_the_fly) {
        1:  873-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  874:				free_dirlist();
        1:  874-block  0
call    0 returned 1
        1:  875:				exit_code = list_dir();
call    0 returned 1
unconditional  1 taken 1
        -:  876:			}
        -:  877:		} else {
    #####:  878:			fprintf(stderr, "%s\n", _(COLUMNS_USAGE));
    %%%%%:  878-block  0
call    0 never executed
call    1 never executed
    #####:  879:			exit_code = EXIT_FAILURE;
    #####:  880:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  881:		}
        2:  882:		return exit_code;
        2:  882-block  0
unconditional  0 taken 2
        -:  883:	}
      177:  884:	else if (*comm[0] == 'i' && strcmp(comm[0], "icons") == 0) {
      177:  884-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 174
        3:  884-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        -:  885:#ifndef _NO_ICONS
       3*:  886:		if (!comm[1] || (*comm[1] == '-' && strcmp(comm[1], "--help") == 0)) {
        3:  886-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  886-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    %%%%%:  886-block  2
branch  4 never executed
branch  5 never executed
        1:  887:			puts(_(ICONS_USAGE));
        1:  887-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        2:  888:		} else if (*comm[1] == 'o' && comm[1][1] == 'n' && !comm[1][2]) {
        2:  888-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  888-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1:  888-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:  889:			icons = 1;
        1:  890:			if (cd_lists_on_the_fly) {
        1:  890-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  891:				free_dirlist();
        1:  891-block  0
call    0 returned 1
        1:  892:				exit_code = list_dir();
call    0 returned 1
unconditional  1 taken 1
        -:  893:			}
        1:  894:		} else if (*comm[1] == 'o' && strcmp(comm[1], "off") == 0) {
        1:  894-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  894-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  895:			icons = 0;
        1:  896:			if (cd_lists_on_the_fly) {
        1:  896-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  897:				free_dirlist();
        1:  897-block  0
call    0 returned 1
        1:  898:				exit_code = list_dir();
call    0 returned 1
unconditional  1 taken 1
        -:  899:			}
        -:  900:		} else {
    #####:  901:			fprintf(stderr, "%s\n", _(ICONS_USAGE));
    %%%%%:  901-block  0
call    0 never executed
call    1 never executed
    #####:  902:			exit_code = EXIT_FAILURE;
    #####:  903:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  904:		}
        -:  905:
        3:  906:		return EXIT_SUCCESS;
        3:  906-block  0
unconditional  0 taken 3
        -:  907:#else
        -:  908:		fprintf(stderr, _("%s: icons: %s\n"), PROGRAM_NAME, _(NOT_AVAILABLE));
        -:  909:		return EXIT_SUCCESS;
        -:  910:#endif /* _NO_ICONS */
        -:  911:	}
        -:  912:
      174:  913:	else if (*comm[0] == 'c' && ((comm[0][1] == 's' && !comm[0][2])
      174:  913-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 164
       10:  913-block  1
branch  2 taken 5 (fallthrough)
branch  3 taken 5
        5:  913-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 5
        5:  914:	|| strcmp(comm[0], "colorschemes") == 0))
        5:  914-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  915:		return (exit_code = cschemes_function(comm));
        5:  915-block  0
call    0 returned 5
unconditional  1 taken 5
        -:  916:
      169:  917:	else if (*comm[0] == 'k' && ((comm[0][1] == 'b' && !comm[0][2])
      169:  917-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 164
        5:  917-block  1
branch  2 taken 4 (fallthrough)
branch  3 taken 1
        4:  917-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 4
        1:  918:	|| strcmp(comm[0], "keybinds") == 0))
        1:  918-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        4:  919:		return (exit_code = kbinds_function(comm));
        4:  919-block  0
call    0 returned 4
unconditional  1 taken 4
        -:  920:
      165:  921:	else if (*comm[0] == 'e' && (strcmp(comm[0], "exp") == 0
      165:  921-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 151
       14:  921-block  1
branch  2 taken 12 (fallthrough)
branch  3 taken 2
       12:  922:	|| strcmp(comm[0], "export") == 0)) {
       12:  922-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 12
       2*:  923:		if (comm[1] && *comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        2:  923-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  923-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  923-block  2
branch  4 never executed
branch  5 never executed
    #####:  924:			puts(_(EXPORT_USAGE));
    %%%%%:  924-block  0
call    0 never executed
call    1 never executed
    #####:  925:			return EXIT_SUCCESS;
unconditional  0 never executed
        -:  926:		}
        -:  927:
        2:  928:		char *ret = export(comm, 1);
        2:  928-block  0
call    0 returned 2
        2:  929:		if (ret) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  930:			printf("Files exported to: %s\n", ret);
        2:  930-block  0
call    0 returned 2
        2:  931:			free(ret);
        2:  932:			return EXIT_SUCCESS;
unconditional  0 taken 2
        -:  933:		}
        -:  934:
    #####:  935:		return (exit_code = EXIT_FAILURE);
    %%%%%:  935-block  0
unconditional  0 never executed
        -:  936:	}
        -:  937:
     163*:  938:	else if (*comm[0] == 'o' && strcmp(comm[0], "opener") == 0) {
      163:  938-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 163
    %%%%%:  938-block  1
branch  2 never executed
branch  3 never executed
    #####:  939:		if (!comm[1]) {
    %%%%%:  939-block  0
branch  0 never executed
branch  1 never executed
    #####:  940:			printf("opener: %s\n", (opener) ? opener : "lira (built-in)");
    %%%%%:  940-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  940-block  1
unconditional  2 never executed
    %%%%%:  940-block  2
unconditional  3 never executed
    %%%%%:  940-block  3
call    4 never executed
    #####:  941:			return EXIT_SUCCESS;
unconditional  0 never executed
        -:  942:		}
    #####:  943:		if (*comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
    %%%%%:  943-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  943-block  1
branch  2 never executed
branch  3 never executed
    #####:  944:			puts(_(OPENER_USAGE));
    %%%%%:  944-block  0
call    0 never executed
call    1 never executed
    #####:  945:			return EXIT_SUCCESS;
unconditional  0 never executed
        -:  946:		}
    #####:  947:		if (opener) {
    %%%%%:  947-block  0
branch  0 never executed
branch  1 never executed
    #####:  948:			free(opener);
    #####:  949:			opener = (char *)NULL;
    %%%%%:  949-block  0
unconditional  0 never executed
        -:  950:		}
    #####:  951:		if (strcmp(comm[1], "default") != 0 && strcmp(comm[1], "lira") != 0) {
    %%%%%:  951-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  951-block  1
branch  2 never executed
branch  3 never executed
    #####:  952:			opener = (char *)xnmalloc(strlen(comm[1]) + 1, sizeof(char));
    %%%%%:  952-block  0
call    0 never executed
    #####:  953:			strcpy(opener, comm[1]);
unconditional  0 never executed
        -:  954:		}
    #####:  955:		printf(_("opener: Opener set to '%s'\n"), (opener) ? opener
    %%%%%:  955-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  955-block  1
unconditional  2 never executed
    %%%%%:  955-block  2
unconditional  3 never executed
    %%%%%:  955-block  3
call    4 never executed
call    5 never executed
        -:  956:								   : "lira (built-in)");
    #####:  957:		return EXIT_SUCCESS;
unconditional  0 never executed
        -:  958:	}
        -:  959:
        -:  960:	/* #### TIPS #### */
      163:  961:	else if (*comm[0] == 't' && strcmp(comm[0], "tips") == 0) {
      163:  961-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 162
        1:  961-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  962:		print_tips(1);
        1:  962-block  0
call    0 returned 1
        1:  963:		return EXIT_SUCCESS;
unconditional  0 taken 1
        -:  964:	}
        -:  965:
        -:  966:	/* #### ACTIONS #### */
      162:  967:	else if (*comm[0] == 'a' && strcmp(comm[0], "actions") == 0) {
      162:  967-block  0
branch  0 taken 15 (fallthrough)
branch  1 taken 147
       15:  967-block  1
branch  2 taken 6 (fallthrough)
branch  3 taken 9
        6:  968:		if (!comm[1]) {
        6:  968-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 3
        3:  969:			if (actions_n) {
        3:  969-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -:  970:				size_t i;
       73:  971:				for (i = 0; i < actions_n; i++)
        3:  971-block  0
unconditional  0 taken 3
unconditional  1 taken 70
       73:  971-block  1
branch  2 taken 70
branch  3 taken 3
       70:  972:					printf("%s %s->%s %s\n", usr_actions[i].name,
       70:  973:					    mi_c, df_c, usr_actions[i].value);
       70:  973-block  0
call    0 returned 70
        -:  974:			} else {
    #####:  975:				puts(_("actions: No actions defined. Use the 'actions "
    %%%%%:  975-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  976:				       "edit' command to add some"));
        -:  977:			}
        3:  978:		} else if (strcmp(comm[1], "edit") == 0) {
        3:  978-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  979:			return (exit_code = edit_actions());
        3:  979-block  0
call    0 returned 3
unconditional  1 taken 3
    #####:  980:		} else if (*comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
    %%%%%:  980-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  980-block  1
branch  2 never executed
branch  3 never executed
    #####:  981:			puts(_(ACTIONS_USAGE));
    %%%%%:  981-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  982:		} else {
    #####:  983:			fprintf(stderr, "%s\n", _(ACTIONS_USAGE));
    %%%%%:  983-block  0
call    0 never executed
call    1 never executed
    #####:  984:			exit_code = EXIT_FAILURE;
    #####:  985:			return EXIT_FAILURE;
unconditional  0 never executed
        -:  986:		}
        3:  987:		return exit_code;
        3:  987-block  0
unconditional  0 taken 3
        -:  988:	}
        -:  989:
        -:  990:	/* #### LIGHT MODE #### */
      156:  991:	else if (*comm[0] == 'l' && comm[0][1] == 'm' && !comm[0][2]) {
      156:  991-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 147
        9:  991-block  1
branch  2 taken 4 (fallthrough)
branch  3 taken 5
        4:  991-block  2
branch  4 taken 4 (fallthrough)
branch  5 taken 0
        4:  992:		if (comm[1]) {
        4:  992-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  993:			if (*comm[1] == 'o' && strcmp(comm[1], "on") == 0) {
        4:  993-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:  993-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1:  994:				light_mode = 1;
        1:  995:				puts(_("Light mode is on"));
        1:  995-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        3:  996:			} else if (*comm[1] == 'o' && strcmp(comm[1], "off") == 0) {
        3:  996-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  996-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  997:				light_mode = 0;
        1:  998:				puts(_("Light mode is off"));
        1:  998-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        -:  999:			} else {
        2: 1000:				puts(_(LM_USAGE));
        2: 1000-block  0
call    0 returned 2
call    1 returned 2
        2: 1001:				exit_code = EXIT_FAILURE;
unconditional  0 taken 2
        -: 1002:			}
        -: 1003:		} else {
    #####: 1004:			fprintf(stderr, "%s\n", _(LM_USAGE));
    %%%%%: 1004-block  0
call    0 never executed
call    1 never executed
    #####: 1005:			exit_code = EXIT_FAILURE;
unconditional  0 never executed
        -: 1006:		}
        4: 1007:		return exit_code;
        4: 1007-block  0
unconditional  0 taken 4
        -: 1008:	}
        -: 1009:
        -: 1010:	/*    ############### RELOAD ##################     */
      152: 1011:	else if (*comm[0] == 'r' && ((comm[0][1] == 'l' && !comm[0][2])
      152: 1011-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 148
        4: 1011-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 3
        1: 1011-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 1
        3: 1012:	|| strcmp(comm[0], "reload") == 0)) {
        3: 1012-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        3: 1013:		exit_code = reload_config();
        3: 1013-block  0
call    0 returned 3
        3: 1014:		welcome_message = 0;
        3: 1015:		if (cd_lists_on_the_fly) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 1016:			free_dirlist();
        3: 1016-block  0
call    0 returned 3
        3: 1017:			if (list_dir() != EXIT_SUCCESS)
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
    #####: 1018:				exit_code = EXIT_FAILURE;
    %%%%%: 1018-block  0
unconditional  0 never executed
        -: 1019:		}
        3: 1020:		return exit_code;
        3: 1020-block  0
unconditional  0 taken 3
        -: 1021:	}
        -: 1022:
        -: 1023:	/* #### NEW INSTANCE #### */
      149: 1024:	else if ((*comm[0] == 'x' || *comm[0] == 'X') && !comm[0][1]) {
      149: 1024-block  0
branch  0 taken 147 (fallthrough)
branch  1 taken 2
      147: 1024-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 146
        3: 1024-block  2
branch  4 taken 3 (fallthrough)
branch  5 taken 0
        3: 1025:		if (comm[1]) {
        3: 1025-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
       2*: 1026:			if (*comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        2: 1026-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1026-block  1
branch  2 never executed
branch  3 never executed
    #####: 1027:				puts(_(X_USAGE));
    %%%%%: 1027-block  0
call    0 never executed
call    1 never executed
    #####: 1028:				return EXIT_SUCCESS;
unconditional  0 never executed
        2: 1029:			} else if (*comm[0] == 'x') {
        2: 1029-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1030:				exit_code = new_instance(comm[1], 0);
        2: 1030-block  0
call    0 returned 2
unconditional  1 taken 2
        -: 1031:			} else { /* Run as root */
    #####: 1032:				exit_code = new_instance(comm[1], 1);
    %%%%%: 1032-block  0
call    0 never executed
unconditional  1 never executed
        -: 1033:			}
        -: 1034:		} else {
        -: 1035:		/* Run new instance in CWD */
        1: 1036:			if (*comm[0] == 'x')
        1: 1036-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1037:				exit_code = new_instance(ws[cur_ws].path, 0);
    %%%%%: 1037-block  0
call    0 never executed
unconditional  1 never executed
        -: 1038:			else
        1: 1039:				exit_code = new_instance(ws[cur_ws].path, 1);
        1: 1039-block  0
call    0 returned 1
unconditional  1 taken 1
        -: 1040:		}
        -: 1041:
        3: 1042:		return exit_code;
        3: 1042-block  0
unconditional  0 taken 3
        -: 1043:	}
        -: 1044:
        -: 1045:	/* #### NET #### */
      146: 1046:	else if (*comm[0] == 'n' && (strcmp(comm[0], "net") == 0))
      146: 1046-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 136
       10: 1046-block  1
branch  2 taken 10 (fallthrough)
branch  3 taken 0
       10: 1047:		return (exit_code = remotes_function(comm));
       10: 1047-block  0
call    0 returned 10
unconditional  1 taken 10
        -: 1048:
        -: 1049:	/* #### MIME #### */
      136: 1050:	else if (*comm[0] == 'm' && ((comm[0][1] == 'm' && !comm[0][2])
      136: 1050-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 129
        7: 1050-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 5
        2: 1050-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
        5: 1051:	|| strcmp(comm[0], "mime") == 0)) {
        5: 1051-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -: 1052:#ifndef _NO_LIRA
        2: 1053:		return (exit_code = mime_open(comm));
        2: 1053-block  0
call    0 returned 2
unconditional  1 taken 2
        -: 1054:#else
        -: 1055:		fprintf(stderr, _("%s: Lira: %s\n"), PROGRAM_NAME, _(NOT_AVAILABLE));
        -: 1056:		return EXIT_FAILURE;
        -: 1057:#endif
        -: 1058:	}
        -: 1059:
     134*: 1060:	else if (*comm[0] == 'l' && comm[0][1] == 's' && !comm[0][2] && !cd_lists_on_the_fly) {
      134: 1060-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 129
        5: 1060-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 5
    %%%%%: 1060-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 1060-block  3
branch  6 never executed
branch  7 never executed
    #####: 1061:		free_dirlist();
    %%%%%: 1061-block  0
call    0 never executed
    #####: 1062:		exit_code = list_dir();
call    0 never executed
    #####: 1063:		if (get_sel_files() != EXIT_SUCCESS)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1064:			exit_code = EXIT_FAILURE;
    %%%%%: 1064-block  0
unconditional  0 never executed
    #####: 1065:		return exit_code;
    %%%%%: 1065-block  0
unconditional  0 never executed
        -: 1066:	}
        -: 1067:
        -: 1068:	/* #### PROFILE #### */
      134: 1069:	else if (*comm[0] == 'p' && ((comm[0][1] == 'f' && !comm[0][2]) || strcmp(comm[0], "prof") == 0 || strcmp(comm[0], "profile") == 0))
      134: 1069-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 124
       10: 1069-block  1
branch  2 taken 4 (fallthrough)
branch  3 taken 6
        4: 1069-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 4
        6: 1069-block  3
branch  6 taken 6 (fallthrough)
branch  7 taken 0
        6: 1069-block  4
branch  8 taken 0 (fallthrough)
branch  9 taken 6
        4: 1070:		return (exit_code = profile_function(comm));
        4: 1070-block  0
call    0 returned 4
unconditional  1 taken 4
        -: 1071:
        -: 1072:	/* #### MOUNTPOINTS #### */
      130: 1073:	else if (*comm[0] == 'm' && ((comm[0][1] == 'p' && !comm[0][2]) || strcmp(comm[0], "mountpoints") == 0)) {
      130: 1073-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 125
        5: 1073-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 4
        1: 1073-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 1
        4: 1073-block  3
branch  6 taken 0 (fallthrough)
branch  7 taken 4
       1*: 1074:		if (comm[1] && *comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        1: 1074-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 1074-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1074-block  2
branch  4 never executed
branch  5 never executed
    #####: 1075:			puts(_(MOUNPOINTS_USAGE));
    %%%%%: 1075-block  0
call    0 never executed
call    1 never executed
    #####: 1076:			return EXIT_SUCCESS;
unconditional  0 never executed
        -: 1077:		} else {
        1: 1078:			kbind_busy = 1;
        1: 1079:			rl_attempted_completion_function = NULL;
        1: 1080:			exit_code = list_mountpoints();
        1: 1080-block  0
call    0 returned 1
        1: 1081:			rl_attempted_completion_function = my_rl_completion;
        1: 1082:			kbind_busy = 0;
        1: 1083:			return exit_code;
unconditional  0 taken 1
        -: 1084:		}
        -: 1085:	}
        -: 1086:
        -: 1087:	/* #### MAX FILES #### */
      129: 1088:	else if (*comm[0] == 'm' && comm[0][1] == 'f' && !comm[0][2]) {
      129: 1088-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 125
        4: 1088-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 2
        2: 1088-block  2
branch  4 taken 2 (fallthrough)
branch  5 taken 0
        2: 1089:		if (!comm[1]) {
        2: 1089-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 1090:			printf(_("Max files: %d"), max_files);
    %%%%%: 1090-block  0
call    0 never executed
call    1 never executed
    #####: 1091:			if (max_files == -1)
branch  0 never executed
branch  1 never executed
    #####: 1092:				puts(_(" (no limit)"));
    %%%%%: 1092-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1093:			else
    #####: 1094:				putchar('\n');
    %%%%%: 1094-block  0
call    0 never executed
unconditional  1 never executed
    #####: 1095:			return EXIT_SUCCESS;
    %%%%%: 1095-block  0
unconditional  0 never executed
        -: 1096:		}
        -: 1097:
        2: 1098:		if (*comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        2: 1098-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 1098-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 1099:			puts(_(MF_USAGE));
    %%%%%: 1099-block  0
call    0 never executed
call    1 never executed
    #####: 1100:			return EXIT_SUCCESS;
unconditional  0 never executed
        -: 1101:		}
        -: 1102:
        2: 1103:		if (strcmp(comm[1], "-1") != 0 && !is_number(comm[1])) {
        2: 1103-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 1103-block  1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 1104:			fprintf(stderr, _("%s: %s\n"), PROGRAM_NAME, MF_USAGE);
    %%%%%: 1104-block  0
call    0 never executed
call    1 never executed
    #####: 1105:			return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
        -: 1106:		}
        -: 1107:
        2: 1108:		int inum = atoi(comm[1]);
        2: 1109:		if (inum < -1) {
        2: 1109-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 1110:			max_files = inum;
    #####: 1111:			fprintf(stderr, _("%s: %d: Invalid number\n"), PROGRAM_NAME,
    %%%%%: 1111-block  0
call    0 never executed
call    1 never executed
        -: 1112:			    inum);
    #####: 1113:			return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
        -: 1114:		}
        -: 1115:
        2: 1116:		max_files = inum;
        2: 1117:		if (max_files == -1)
        2: 1117-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 1118:			puts(_("Max files unset"));
        1: 1118-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        -: 1119:		else
        1: 1120:			printf(_("Max files set to %d\n"), max_files);
        1: 1120-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        2: 1121:		return EXIT_SUCCESS;
        2: 1121-block  0
unconditional  0 taken 2
        -: 1122:	}
        -: 1123:
        -: 1124:	/* #### EXT #### */
      127: 1125:	else if (*comm[0] == 'e' && comm[0][1] == 'x' && comm[0][2] == 't'
      127: 1125-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 115
       12: 1125-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 9
        3: 1125-block  2
branch  4 taken 3 (fallthrough)
branch  5 taken 0
        3: 1126:	&& !comm[0][3]) {
        3: 1126-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 1127:		if (!comm[1]) {
        3: 1127-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 1128:			puts(_(EXT_USAGE));
    %%%%%: 1128-block  0
call    0 never executed
call    1 never executed
    #####: 1129:			return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
       3*: 1130:		} else if (*comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        3: 1130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%: 1130-block  1
branch  2 never executed
branch  3 never executed
    #####: 1131:			puts(_(EXT_USAGE));
    %%%%%: 1131-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1132:		} else {
        3: 1133:			if (*comm[1] == 's' && strcmp(comm[1], "status") == 0) {
        3: 1133-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1: 1133-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1134:				printf(_("%s: External commands %s\n"), PROGRAM_NAME,
        1: 1134-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
       1*: 1135:				    (ext_cmd_ok) ? _("enabled") : _("disabled"));
        1: 1135-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1135-block  1
call    2 returned 1
unconditional  3 taken 1
    %%%%%: 1135-block  2
call    4 never executed
unconditional  5 never executed
        2: 1136:			} else if (*comm[1] == 'o' && strcmp(comm[1], "on") == 0) {
        2: 1136-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1136-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 1137:				ext_cmd_ok = 1;
        1: 1138:				printf(_("%s: External commands enabled\n"), PROGRAM_NAME);
        1: 1138-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        1: 1139:			} else if (*comm[1] == 'o' && strcmp(comm[1], "off") == 0) {
        1: 1139-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1139-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1140:				ext_cmd_ok = 0;
        1: 1141:				printf(_("%s: External commands disabled\n"), PROGRAM_NAME);
        1: 1141-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        -: 1142:			} else {
    #####: 1143:				fprintf(stderr, "%s\n", _(EXT_USAGE));
    %%%%%: 1143-block  0
call    0 never executed
call    1 never executed
    #####: 1144:				exit_code = EXIT_FAILURE;
unconditional  0 never executed
        -: 1145:			}
        -: 1146:		}
        3: 1147:		return exit_code;
        3: 1147-block  0
unconditional  0 taken 3
        -: 1148:	}
        -: 1149:
        -: 1150:	/* #### PAGER #### */
      124: 1151:	else if (*comm[0] == 'p' && ((comm[0][1] == 'g' && !comm[0][2])
      124: 1151-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 118
        6: 1151-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 4
        2: 1151-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
        4: 1152:	|| strcmp(comm[0], "pager") == 0)) {
        4: 1152-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        2: 1153:		if (!comm[1]) {
        2: 1153-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 1154:			puts(_(PAGER_USAGE));
    %%%%%: 1154-block  0
call    0 never executed
call    1 never executed
    #####: 1155:			return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
       2*: 1156:		} else if (*comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        2: 1156-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1156-block  1
branch  2 never executed
branch  3 never executed
    #####: 1157:			puts(_(PAGER_USAGE));
    %%%%%: 1157-block  0
call    0 never executed
call    1 never executed
    #####: 1158:			return EXIT_SUCCESS;
unconditional  0 never executed
        -: 1159:		} else {
       2*: 1160:			if (*comm[1] == 's' && strcmp(comm[1], "status") == 0) {
        2: 1160-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1160-block  1
branch  2 never executed
branch  3 never executed
    #####: 1161:				printf(_("%s: Pager %s\n"), PROGRAM_NAME,
    %%%%%: 1161-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
    #####: 1162:				    (pager) ? _("enabled") : _("disabled"));
    %%%%%: 1162-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1162-block  1
call    2 never executed
unconditional  3 never executed
    %%%%%: 1162-block  2
call    4 never executed
unconditional  5 never executed
        2: 1163:			} else if (*comm[1] == 'o' && strcmp(comm[1], "on") == 0) {
        2: 1163-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1163-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 1164:				pager = 1;
        1: 1165:				printf(_("%s: Pager enabled\n"), PROGRAM_NAME);
        1: 1165-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        1: 1166:			} else if (*comm[1] == 'o' && strcmp(comm[1], "off") == 0) {
        1: 1166-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1166-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1167:				pager = 0;
        1: 1168:				printf(_("%s: Pager disabled\n"), PROGRAM_NAME);
        1: 1168-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        -: 1169:			} else {
    #####: 1170:				fprintf(stderr, "%s\n", _(PAGER_USAGE));
    %%%%%: 1170-block  0
call    0 never executed
call    1 never executed
    #####: 1171:				exit_code = EXIT_FAILURE;
unconditional  0 never executed
        -: 1172:			}
        -: 1173:		}
        2: 1174:		return exit_code;
        2: 1174-block  0
unconditional  0 taken 2
        -: 1175:	}
        -: 1176:
        -: 1177:	/* #### FILES COUNTER #### */
      122: 1178:	else if (*comm[0] == 'f' && ((comm[0][1] == 'c' && !comm[0][2])
      122: 1178-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 113
        9: 1178-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 7
        2: 1178-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
        7: 1179:	|| strcmp(comm[0], "filescounter") == 0)) {
        7: 1179-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
        2: 1180:		if (!comm[1]) {
        2: 1180-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 1181:			fprintf(stderr, "%s\n", _(FC_USAGE));
    %%%%%: 1181-block  0
call    0 never executed
call    1 never executed
    #####: 1182:			return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
        -: 1183:		}
        -: 1184:
        2: 1185:		if (*comm[1] == 'o' && strcmp(comm[1], "on") == 0) {
        2: 1185-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1185-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 1186:			files_counter = 1;
        1: 1187:			puts(_("Filescounter is enabled"));
        1: 1187-block  0
call    0 returned 1
call    1 returned 1
        1: 1188:			return EXIT_SUCCESS;
unconditional  0 taken 1
        -: 1189:		}
        -: 1190:
        1: 1191:		if (*comm[1] == 'o' && strcmp(comm[1], "off") == 0) {
        1: 1191-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1191-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1192:			files_counter = 0;
        1: 1193:			puts(_("Filescounter is disabled"));
        1: 1193-block  0
call    0 returned 1
call    1 returned 1
        1: 1194:			return EXIT_SUCCESS;
unconditional  0 taken 1
        -: 1195:		}
        -: 1196:
    #####: 1197:		if (*comm[1] == 's' && strcmp(comm[1], "status") == 0) {
    %%%%%: 1197-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1197-block  1
branch  2 never executed
branch  3 never executed
    #####: 1198:			if (files_counter)
    %%%%%: 1198-block  0
branch  0 never executed
branch  1 never executed
    #####: 1199:				puts(_("Filescounter is enabled"));
    %%%%%: 1199-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1200:			else
    #####: 1201:				puts(_("Filescounter is disabled"));
    %%%%%: 1201-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
    #####: 1202:			return EXIT_SUCCESS;
    %%%%%: 1202-block  0
unconditional  0 never executed
        -: 1203:		} else {
    #####: 1204:			fprintf(stderr, "%s\n", _(FC_USAGE));
    %%%%%: 1204-block  0
call    0 never executed
call    1 never executed
    #####: 1205:			return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
        -: 1206:		}
        -: 1207:	}
        -: 1208:
        -: 1209:	/* #### UNICODE #### */
      120: 1210:	else if (*comm[0] == 'u' && ((comm[0][1] == 'c' && !comm[0][2])
      120: 1210-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 116
        4: 1210-block  1
branch  2 taken 4 (fallthrough)
branch  3 taken 0
        4: 1210-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 4
    #####: 1211:	|| strcmp(comm[0], "unicode") == 0)) {
    %%%%%: 1211-block  0
branch  0 never executed
branch  1 never executed
        4: 1212:		if (!comm[1]) {
        4: 1212-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1: 1213:			fprintf(stderr, "%s\n", _(UNICODE_USAGE));
        1: 1213-block  0
call    0 returned 1
call    1 returned 1
        1: 1214:			return (exit_code = EXIT_FAILURE);
unconditional  0 taken 1
       3*: 1215:		} else if (*comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        3: 1215-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%: 1215-block  1
branch  2 never executed
branch  3 never executed
    #####: 1216:			puts(_(UNICODE_USAGE));
    %%%%%: 1216-block  0
call    0 never executed
call    1 never executed
    #####: 1217:			return EXIT_SUCCESS;
unconditional  0 never executed
        -: 1218:		} else {
        3: 1219:			if (*comm[1] == 's' && strcmp(comm[1], "status") == 0) {
        3: 1219-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1: 1219-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1220:				printf(_("%s: Unicode %s\n"), PROGRAM_NAME,
        1: 1220-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
       1*: 1221:				    (unicode) ? _("enabled") : _("disabled"));
        1: 1221-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1221-block  1
call    2 returned 1
unconditional  3 taken 1
    %%%%%: 1221-block  2
call    4 never executed
unconditional  5 never executed
        2: 1222:			} else if (*comm[1] == 'o' && strcmp(comm[1], "on") == 0) {
        2: 1222-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1222-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 1223:				unicode = 1;
        1: 1224:				printf(_("%s: Unicode enabled\n"), PROGRAM_NAME);
        1: 1224-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        1: 1225:			} else if (*comm[1] == 'o' && strcmp(comm[1], "off") == 0) {
        1: 1225-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1225-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1226:				unicode = 0;
        1: 1227:				printf(_("%s: Unicode disabled\n"), PROGRAM_NAME);
        1: 1227-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        -: 1228:			} else {
    #####: 1229:				fprintf(stderr, "%s\n", _(UNICODE_USAGE));
    %%%%%: 1229-block  0
call    0 never executed
call    1 never executed
    #####: 1230:				exit_code = EXIT_FAILURE;
unconditional  0 never executed
        -: 1231:			}
        -: 1232:		}
        3: 1233:		return exit_code;
        3: 1233-block  0
unconditional  0 taken 3
        -: 1234:	}
        -: 1235:
        -: 1236:	/* #### FOLDERS FIRST #### */
      116: 1237:	else if (*comm[0] == 'f' && ((comm[0][1] == 'f' && !comm[0][2])
      116: 1237-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 109
        7: 1237-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 4
        3: 1237-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 3
        4: 1238:	|| strcmp(comm[0], "folders-first") == 0)) {
        4: 1238-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        3: 1239:		if (cd_lists_on_the_fly == 0)
        3: 1239-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 1240:			return EXIT_SUCCESS;
    %%%%%: 1240-block  0
unconditional  0 never executed
        3: 1241:		if (!comm[1]) {
        3: 1241-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 1242:			fprintf(stderr, "%s\n", _(FF_USAGE));
    %%%%%: 1242-block  0
call    0 never executed
call    1 never executed
    #####: 1243:			return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
        -: 1244:		}
       3*: 1245:		if (*comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        3: 1245-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%: 1245-block  1
branch  2 never executed
branch  3 never executed
    #####: 1246:			puts(_(FF_USAGE));
    %%%%%: 1246-block  0
call    0 never executed
call    1 never executed
    #####: 1247:			return EXIT_SUCCESS;
unconditional  0 never executed
        -: 1248:		}
        -: 1249:
        3: 1250:		int status = list_folders_first;
        3: 1251:		if (*comm[1] == 's' && strcmp(comm[1], "status") == 0) {
        3: 1251-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1: 1251-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1252:			printf(_("%s: Folders first %s\n"), PROGRAM_NAME,
        1: 1252-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
       1*: 1253:			    (list_folders_first) ? _("enabled") : _("disabled"));
        1: 1253-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1253-block  1
call    2 returned 1
unconditional  3 taken 1
    %%%%%: 1253-block  2
call    4 never executed
unconditional  5 never executed
        2: 1254:		}  else if (*comm[1] == 'o' && strcmp(comm[1], "on") == 0) {
        2: 1254-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1254-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 1255:			list_folders_first = 1;
        1: 1255-block  0
unconditional  0 taken 1
        1: 1256:		} else if (*comm[1] == 'o' && strcmp(comm[1], "off") == 0) {
        1: 1256-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1256-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1257:			list_folders_first = 0;
        1: 1257-block  0
unconditional  0 taken 1
        -: 1258:		} else {
    #####: 1259:			fprintf(stderr, "%s\n", _(FF_USAGE));
    %%%%%: 1259-block  0
call    0 never executed
call    1 never executed
    #####: 1260:			return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
        -: 1261:		}
        -: 1262:
        3: 1263:		if (list_folders_first != status) {
        3: 1263-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2: 1264:			if (cd_lists_on_the_fly) {
        2: 1264-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1265:				free_dirlist();
        2: 1265-block  0
call    0 returned 2
        2: 1266:				exit_code = list_dir();
call    0 returned 2
unconditional  1 taken 2
        -: 1267:			}
        -: 1268:		}
        3: 1269:		return exit_code;
        3: 1269-block  0
unconditional  0 taken 3
        -: 1270:	}
        -: 1271:
        -: 1272:	/* #### LOG #### */
      113: 1273:	else if (*comm[0] == 'l' && strcmp(comm[0], "log") == 0) {
      113: 1273-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 108
        5: 1273-block  1
branch  2 taken 5 (fallthrough)
branch  3 taken 0
        5: 1274:		if (comm[1] && *comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        5: 1274-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 3
        2: 1274-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 1274-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1: 1275:			puts(_(LOG_USAGE));
        1: 1275-block  0
call    0 returned 1
call    1 returned 1
        1: 1276:			return EXIT_SUCCESS;
unconditional  0 taken 1
        -: 1277:		}
        -: 1278:
        -: 1279:		/* I make this check here, and not in the function itself,
        -: 1280:		 * because this function is also called by other instances of
        -: 1281:		 * the program where no message should be printed */
        4: 1282:		if (!config_ok) {
        4: 1282-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####: 1283:			fprintf(stderr, _("%s: Log function disabled\n"), PROGRAM_NAME);
    %%%%%: 1283-block  0
call    0 never executed
call    1 never executed
    #####: 1284:			return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
        -: 1285:		}
        -: 1286:
        4: 1287:		return (exit_code = log_function(comm));
        4: 1287-block  0
call    0 returned 4
unconditional  1 taken 4
        -: 1288:	}
        -: 1289:
        -: 1290:	/* #### MESSAGES #### */
      108: 1291:	else if (*comm[0] == 'm' && (strcmp(comm[0], "msg") == 0
      108: 1291-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 106
        2: 1291-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    #####: 1292:	|| strcmp(comm[0], "messages") == 0)) {
    %%%%%: 1292-block  0
branch  0 never executed
branch  1 never executed
        2: 1293:		if (comm[1] && strcmp(comm[1], "--help") == 0) {
        2: 1293-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 1293-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 1294:			puts(_(MSG_USAGE));
    %%%%%: 1294-block  0
call    0 never executed
call    1 never executed
    #####: 1295:			return EXIT_SUCCESS;
unconditional  0 never executed
        -: 1296:		}
        -: 1297:
        2: 1298:		if (comm[1] && strcmp(comm[1], "clear") == 0) {
        2: 1298-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 1298-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1299:			if (!msgs_n) {
        1: 1299-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1300:				printf(_("%s: There are no messages\n"), PROGRAM_NAME);
    %%%%%: 1300-block  0
call    0 never executed
call    1 never executed
    #####: 1301:				return EXIT_SUCCESS;
unconditional  0 never executed
        -: 1302:			}
        -: 1303:
        -: 1304:			size_t i;
        3: 1305:			for (i = 0; i < (size_t)msgs_n; i++)
        1: 1305-block  0
unconditional  0 taken 1
        3: 1305-block  1
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        2: 1306:				free(messages[i]);
        2: 1306-block  0
unconditional  0 taken 2
        -: 1307:
        1: 1308:			msgs_n = 0;
        1: 1309:			pmsg = NOMSG;
        1: 1309-block  0
unconditional  0 taken 1
        -: 1310:		} else {
        1: 1311:			if (msgs_n) {
        1: 1311-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1312:				size_t i;
    #####: 1313:				for (i = 0; i < (size_t)msgs_n; i++)
    %%%%%: 1313-block  0
unconditional  0 never executed
unconditional  1 never executed
    %%%%%: 1313-block  1
branch  2 never executed
branch  3 never executed
    #####: 1314:					printf("%s", messages[i]);
    %%%%%: 1314-block  0
call    0 never executed
        -: 1315:			} else {
        1: 1316:				printf(_("%s: There are no messages\n"), PROGRAM_NAME);
        1: 1316-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        -: 1317:			}
        -: 1318:		}
        2: 1319:		return exit_code;
        2: 1319-block  0
unconditional  0 taken 2
        -: 1320:	}
        -: 1321:
        -: 1322:	/* #### ALIASES #### */
      106: 1323:	else if (*comm[0] == 'a' && strcmp(comm[0], "alias") == 0) {
      106: 1323-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 97
        9: 1323-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 8
        1: 1324:		if (comm[1]) {
        1: 1324-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1325:			if (*comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
    %%%%%: 1325-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1325-block  1
branch  2 never executed
branch  3 never executed
    #####: 1326:				puts(_(ALIAS_USAGE));
    %%%%%: 1326-block  0
call    0 never executed
call    1 never executed
    #####: 1327:				return EXIT_SUCCESS;
unconditional  0 never executed
    #####: 1328:			} else if (*comm[1] == 'i' && strcmp(comm[1], "import") == 0) {
    %%%%%: 1328-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1328-block  1
branch  2 never executed
branch  3 never executed
    #####: 1329:				if (!comm[2]) {
    %%%%%: 1329-block  0
branch  0 never executed
branch  1 never executed
    #####: 1330:					fprintf(stderr, "%s\n", _(ALIAS_USAGE));
    %%%%%: 1330-block  0
call    0 never executed
call    1 never executed
    #####: 1331:					return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
        -: 1332:				}
    #####: 1333:				return (exit_code = alias_import(comm[2]));
    %%%%%: 1333-block  0
call    0 never executed
unconditional  1 never executed
        -: 1334:			}
        -: 1335:		}
        -: 1336:
        1: 1337:		if (aliases_n) {
        1: 1337-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 1338:			size_t i;
        6: 1339:			for (i = 0; i < aliases_n; i++)
        1: 1339-block  0
unconditional  0 taken 1
unconditional  1 taken 5
        6: 1339-block  1
branch  2 taken 5
branch  3 taken 1 (fallthrough)
        5: 1340:				printf("%s", aliases[i]);
        5: 1340-block  0
call    0 returned 5
        -: 1341:		}
        1: 1342:		return EXIT_SUCCESS;
        1: 1342-block  0
unconditional  0 taken 1
        -: 1343:	}
        -: 1344:
        -: 1345:	/* #### SHELL #### */
      105: 1346:	else if (*comm[0] == 's' && strcmp(comm[0], "shell") == 0) {
      105: 1346-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 99
        6: 1346-block  1
branch  2 taken 5 (fallthrough)
branch  3 taken 1
        5: 1347:		if (!comm[1]) {
        5: 1347-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 3
        2: 1348:			if (user.shell)
        2: 1348-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1349:				printf("%s: shell: %s\n", PROGRAM_NAME, user.shell);
        2: 1349-block  0
call    0 returned 2
unconditional  1 taken 2
        -: 1350:			else
    #####: 1351:				printf(_("%s: shell: unknown\n"), PROGRAM_NAME);
    %%%%%: 1351-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        3: 1352:		} else if (*comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        3: 1352-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1: 1352-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1353:			puts(_(SHELL_USAGE));
        1: 1353-block  0
call    0 returned 1
call    1 returned 1
        1: 1354:			return EXIT_SUCCESS;
unconditional  0 taken 1
        -: 1355:		} else {
        2: 1356:			return (exit_code = set_shell(comm[1]));
        2: 1356-block  0
call    0 returned 2
unconditional  1 taken 2
        -: 1357:		}
        -: 1358:	}
        -: 1359:
        -: 1360:	/* #### EDIT #### */
      100: 1361:	else if (*comm[0] == 'e' && strcmp(comm[0], "edit") == 0)
      100: 1361-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 91
        9: 1361-block  1
branch  2 taken 9 (fallthrough)
branch  3 taken 0
        9: 1362:		return (exit_code = edit_function(comm));
        9: 1362-block  0
call    0 returned 9
unconditional  1 taken 9
        -: 1363:
        -: 1364:	/* #### HISTORY #### */
       91: 1365:	else if (*comm[0] == 'h' && strcmp(comm[0], "history") == 0)
       91: 1365-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 84
        7: 1365-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 6
        1: 1366:		return (exit_code = history_function(comm));
        1: 1366-block  0
call    0 returned 1
unconditional  1 taken 1
        -: 1367:
        -: 1368:	/* #### HIDDEN FILES #### */
       90: 1369:	else if (*comm[0] == 'h' && ((comm[0][1] == 'f' && !comm[0][2])
       90: 1369-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 84
        6: 1369-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 3
        3: 1369-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 3
        3: 1370:	|| strcmp(comm[0], "hidden") == 0)) {
        3: 1370-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        3: 1371:		if (!comm[1]) {
        3: 1371-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 1372:			fprintf(stderr, "%s\n", _(HF_USAGE));
    %%%%%: 1372-block  0
call    0 never executed
call    1 never executed
    #####: 1373:			return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
       3*: 1374:		} else if (*comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
        3: 1374-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%: 1374-block  1
branch  2 never executed
branch  3 never executed
        -: 1375:			/* The same message is in hidden_function(), and printed
        -: 1376:			 * whenever an invalid argument is entered */
    #####: 1377:			puts(_(HF_USAGE));
    %%%%%: 1377-block  0
call    0 never executed
call    1 never executed
    #####: 1378:			return EXIT_SUCCESS;
unconditional  0 never executed
        -: 1379:		} else {
        3: 1380:			return (exit_code = hidden_function(comm));
        3: 1380-block  0
call    0 returned 3
unconditional  1 taken 3
        -: 1381:		}
        -: 1382:	}
        -: 1383:
        -: 1384:	/* #### AUTOCD #### */
       87: 1385:	else if (*comm[0] == 'a' && (strcmp(comm[0], "acd") == 0
       87: 1385-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 79
        8: 1385-block  1
branch  2 taken 5 (fallthrough)
branch  3 taken 3
        5: 1386:	|| strcmp(comm[0], "autocd") == 0)) {
        5: 1386-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        3: 1387:		if (!comm[1]) {
        3: 1387-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 1388:			fprintf(stderr, "%s\n", _(AUTOCD_USAGE));
    %%%%%: 1388-block  0
call    0 never executed
call    1 never executed
    #####: 1389:			return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
        -: 1390:		}
        -: 1391:
        3: 1392:		if (strcmp(comm[1], "on") == 0) {
        3: 1392-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1: 1393:			autocd = 1;
        1: 1394:			printf(_("%s: autocd is enabled\n"), PROGRAM_NAME);
        1: 1394-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        2: 1395:		} else if (strcmp(comm[1], "off") == 0) {
        2: 1395-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 1396:			autocd = 0;
        1: 1397:			printf(_("%s: autocd is disabled\n"), PROGRAM_NAME);
        1: 1397-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        1: 1398:		} else if (strcmp(comm[1], "status") == 0) {
        1: 1398-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1399:			if (autocd)
        1: 1399-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1400:				printf(_("%s: autocd is enabled\n"), PROGRAM_NAME);
        1: 1400-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        -: 1401:			else
    #####: 1402:				printf(_("%s: autocd is disabled\n"), PROGRAM_NAME);
    %%%%%: 1402-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
    #####: 1403:		} else if (*comm[1] == '-' && strcmp(comm[1], "--help") == 0) {
    %%%%%: 1403-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1403-block  1
branch  2 never executed
branch  3 never executed
    #####: 1404:			puts(_(AUTOCD_USAGE));
    %%%%%: 1404-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1405:		} else {
    #####: 1406:			fprintf(stderr, "%s\n", _(AUTOCD_USAGE));
    %%%%%: 1406-block  0
call    0 never executed
call    1 never executed
    #####: 1407:			return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
        -: 1408:		}
        3: 1409:		return EXIT_SUCCESS;
        3: 1409-block  0
unconditional  0 taken 3
        -: 1410:	}
        -: 1411:
        -: 1412:	/* #### AUTO-OPEN #### */
       84: 1413:	else if (*comm[0] == 'a' && ((comm[0][1] == 'o' && !comm[0][2])
       84: 1413-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 79
        5: 1413-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 2
        3: 1413-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 3
        2: 1414:	|| strcmp(comm[0], "auto-open") == 0)) {
        2: 1414-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        3: 1415:		if (!comm[1]) {
        3: 1415-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 1416:			fprintf(stderr, "%s\n", _(AUTO_OPEN_USAGE));
    %%%%%: 1416-block  0
call    0 never executed
call    1 never executed
    #####: 1417:			return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
        -: 1418:		}
        -: 1419:
        3: 1420:		if (strcmp(comm[1], "on") == 0) {
        3: 1420-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1: 1421:			auto_open = 1;
        1: 1422:			printf(_("%s: auto-open is enabled\n"), PROGRAM_NAME);
        1: 1422-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        2: 1423:		} else if (strcmp(comm[1], "off") == 0) {
        2: 1423-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 1424:			auto_open = 0;
        1: 1425:			printf(_("%s: auto-open is disabled\n"), PROGRAM_NAME);
        1: 1425-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        1: 1426:		} else if (strcmp(comm[1], "status") == 0) {
        1: 1426-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1427:			if (auto_open)
        1: 1427-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1428:				printf(_("%s: auto-open is enabled\n"), PROGRAM_NAME);
        1: 1428-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
        -: 1429:			else
    #####: 1430:				printf(_("%s: auto-open is disabled\n"), PROGRAM_NAME);
    %%%%%: 1430-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
    #####: 1431:		} else if (strcmp(comm[1], "--help") == 0) {
    %%%%%: 1431-block  0
branch  0 never executed
branch  1 never executed
    #####: 1432:			puts(_(AUTO_OPEN_USAGE));
    %%%%%: 1432-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1433:		} else {
    #####: 1434:			fprintf(stderr, "%s\n", _(AUTO_OPEN_USAGE));
    %%%%%: 1434-block  0
call    0 never executed
call    1 never executed
    #####: 1435:			return (exit_code = EXIT_FAILURE);
unconditional  0 never executed
        -: 1436:		}
        3: 1437:		return EXIT_SUCCESS;
        3: 1437-block  0
unconditional  0 taken 3
        -: 1438:	}
        -: 1439:
        -: 1440:	/* #### COMMANDS #### */
       81: 1441:	else if (*comm[0] == 'c' && (strcmp(comm[0], "cmd") == 0
       81: 1441-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 76
        5: 1441-block  1
branch  2 taken 4 (fallthrough)
branch  3 taken 1
        4: 1442:	|| strcmp(comm[0], "commands") == 0))
        4: 1442-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        1: 1443:		return (exit_code = list_commands());
        1: 1443-block  0
call    0 returned 1
unconditional  1 taken 1
        -: 1444:
        -: 1445:	/* #### AND THESE ONES TOO #### */
        -: 1446:	/* These functions just print stuff, so that the value of exit_code
        -: 1447:	 * is always zero, that is to say, success */
       80: 1448:	else if (strcmp(comm[0], "path") == 0 || strcmp(comm[0], "cwd") == 0) {
       80: 1448-block  0
branch  0 taken 79 (fallthrough)
branch  1 taken 1
       79: 1448-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 78
        2: 1449:		printf("%s\n", ws[cur_ws].path);
        2: 1449-block  0
call    0 returned 2
        2: 1450:		return EXIT_SUCCESS;
unconditional  0 taken 2
        -: 1451:	}
        -: 1452:
       78: 1453:	else if ((*comm[0] == '?' && !comm[0][1]) || strcmp(comm[0], "help") == 0) {
       78: 1453-block  0
branch  0 taken 36 (fallthrough)
branch  1 taken 42
       36: 1453-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 36
       42: 1453-block  2
branch  4 taken 2 (fallthrough)
branch  5 taken 40
       38: 1454:		help_function();
       38: 1454-block  0
call    0 returned 38
       38: 1455:		return EXIT_SUCCESS;
unconditional  0 taken 38
        -: 1456:	}
        -: 1457:
       40: 1458:	else if (*comm[0] == 'c' && ((comm[0][1] == 'c' && !comm[0][2])
       40: 1458-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 37
        3: 1458-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 2
        1: 1458-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 1
        2: 1459:	|| strcmp(comm[0], "colors") == 0)) {
        2: 1459-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
       2*: 1460:		if (comm[1] && *comm[1] == '-' && strcmp(comm[1], "--help") == 0)
        2: 1460-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1460-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1460-block  2
branch  4 never executed
branch  5 never executed
    #####: 1461:			puts(_(COLORS_USAGE));
    %%%%%: 1461-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -: 1462:		else
        2: 1463:			color_codes();
        2: 1463-block  0
call    0 returned 2
unconditional  1 taken 2
        2: 1464:		return EXIT_SUCCESS;
        2: 1464-block  0
unconditional  0 taken 2
        -: 1465:	}
        -: 1466:
       38: 1467:	else if (*comm[0] == 'v' && (strcmp(comm[0], "ver") == 0
       38: 1467-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 37
        1: 1467-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 1468:	|| strcmp(comm[0], "version") == 0)) {
    %%%%%: 1468-block  0
branch  0 never executed
branch  1 never executed
        1: 1469:		version_function();
        1: 1469-block  0
call    0 returned 1
        1: 1470:		return EXIT_SUCCESS;
unconditional  0 taken 1
        -: 1471:	}
        -: 1472:
       37: 1473:	else if (*comm[0] == 'f' && comm[0][1] == 's' && !comm[0][2]) {
       37: 1473-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 33
        4: 1473-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 3
        1: 1473-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1: 1474:		free_software();
        1: 1474-block  0
call    0 returned 1
        1: 1475:		return EXIT_SUCCESS;
unconditional  0 taken 1
        -: 1476:	}
        -: 1477:
      36*: 1478:	else if (*comm[0] == 'b' && strcmp(comm[0], "bonus") == 0) {
       36: 1478-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 36
    %%%%%: 1478-block  1
branch  2 never executed
branch  3 never executed
    #####: 1479:		bonus_function();
    %%%%%: 1479-block  0
call    0 never executed
    #####: 1480:		return EXIT_SUCCESS;
unconditional  0 never executed
        -: 1481:	}
        -: 1482:
       36: 1483:	else if (*comm[0] == 's' && strcmp(comm[0], "splash") == 0) {
       36: 1483-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 35
        1: 1483-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1484:		splash();
        1: 1484-block  0
call    0 returned 1
        1: 1485:		return EXIT_SUCCESS;
unconditional  0 taken 1
        -: 1486:	}
        -: 1487:
        -: 1488:	/* #### QUIT #### */
       35: 1489:	else if ((*comm[0] == 'q' && !comm[0][1]) || strcmp(comm[0], "quit") == 0
       35: 1489-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 31
        4: 1489-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 4
       31: 1489-block  2
branch  4 taken 31 (fallthrough)
branch  5 taken 0
       31: 1490:	|| strcmp(comm[0], "exit") == 0) {
       31: 1490-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 31
        -: 1491:		/* Free everything and exit */
        4: 1492:		int i = (int)args_n + 1;
        8: 1493:		while (--i >= 0)
        4: 1493-block  0
unconditional  0 taken 4
        8: 1493-block  1
branch  1 taken 4
branch  2 taken 4 (fallthrough)
        4: 1494:			free(comm[i]);
        4: 1494-block  0
unconditional  0 taken 4
        4: 1495:		free(comm);
        4: 1496:		exit(exit_code);
        4: 1496-block  0
call    0 returned 0
        -: 1497:	}
        -: 1498:
      31*: 1499:	else if (*comm[0] == 'Q' && !comm[0][1]) {
       31: 1499-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 31
    %%%%%: 1499-block  1
branch  2 never executed
branch  3 never executed
    #####: 1500:		int i = (int)args_n + 1;
    #####: 1501:		while (--i >= 0)
    %%%%%: 1501-block  0
unconditional  0 never executed
    %%%%%: 1501-block  1
branch  1 never executed
branch  2 never executed
    #####: 1502:			free(comm[i]);
    %%%%%: 1502-block  0
unconditional  0 never executed
    #####: 1503:		free(comm);
    #####: 1504:		cd_on_quit = 1;
    #####: 1505:		exit(exit_code);
    %%%%%: 1505-block  0
call    0 never executed
        -: 1506:	}
        -: 1507:
        -: 1508:	else {
        -: 1509:
        -: 1510:				/* ###############################
        -: 1511:				 * #     AUTOCD & AUTO-OPEN (2)   #
        -: 1512:				 * ############################### */
        -: 1513:
       31: 1514:		if (autocd && cdpath_n && !comm[1]
       31: 1514-block  0
branch  0 taken 30 (fallthrough)
branch  1 taken 1
       30: 1514-block  1
branch  2 taken 30 (fallthrough)
branch  3 taken 0
       30: 1514-block  2
branch  4 taken 26 (fallthrough)
branch  5 taken 4
       26: 1515:		&& cd_function(comm[0], CD_NO_PRINT_ERROR) == EXIT_SUCCESS)
       26: 1515-block  0
call    0 returned 26
branch  1 taken 17 (fallthrough)
branch  2 taken 9
       24: 1516:			return (exit_code = EXIT_SUCCESS);
       17: 1516-block  0
unconditional  0 taken 17
       24: 1516-block  1
unconditional  1 taken 24
        -: 1517:
        -: 1518:		struct stat file_attrib;
       14: 1519:		if (stat(comm[0], &file_attrib) == 0) {
       14: 1519-block  0
call    0 returned 14
branch  1 taken 5 (fallthrough)
branch  2 taken 9
        5: 1520:			if ((file_attrib.st_mode & S_IFMT) == S_IFDIR) {
        5: 1520-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1: 1521:				if (autocd)
        1: 1521-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1522:					return (exit_code = cd_function(comm[0], CD_PRINT_ERROR));
    %%%%%: 1522-block  0
call    0 never executed
unconditional  1 never executed
        -: 1523:
        1: 1524:				fprintf(stderr, _("%s: %s: Is a directory\n"),
        1: 1524-block  0
call    0 returned 1
call    1 returned 1
        -: 1525:						PROGRAM_NAME, comm[0]);
        1: 1526:				return (exit_code = EXIT_FAILURE);
unconditional  0 taken 1
        4: 1527:			} else if (auto_open && (file_attrib.st_mode & S_IFMT) == S_IFREG) {
        4: 1527-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3: 1527-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        -: 1528:				/* Make sure we have not an executable file */
        3: 1529:				if (!(file_attrib.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH))) {
        3: 1529-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        9: 1530:					char *cmd[] = {"open", comm[0], (args_n >= 1) ? comm[1]
       3*: 1531:						: NULL, (args_n >= 2) ? comm[2] : NULL, NULL};
        3: 1531-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 1531-block  1
unconditional  2 taken 3
    %%%%%: 1531-block  2
unconditional  3 never executed
        3: 1531-block  3
branch  4 taken 0 (fallthrough)
branch  5 taken 3
    %%%%%: 1531-block  4
unconditional  6 never executed
        3: 1531-block  5
unconditional  7 taken 3
        3: 1532:					args_n++;
        3: 1533:					exit_code = open_function(cmd);
        3: 1533-block  0
call    0 returned 3
        3: 1534:					args_n--;
        3: 1535:					return exit_code;
unconditional  0 taken 3
        -: 1536:				}
        -: 1537:			}
        -: 1538:		}
        -: 1539:
        -: 1540:	/* ####################################################
        -: 1541:	 * #                EXTERNAL/SHELL COMMANDS           #
        -: 1542:	 * ####################################################*/
        -: 1543:
        -: 1544:		/* LOG EXTERNAL COMMANDS
        -: 1545:		* 'no_log' will be true when running profile or prompt commands */
       10: 1546:		if (!no_log)
       10: 1546-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 1547:			exit_code = log_function(comm);
       10: 1547-block  0
call    0 returned 10
unconditional  1 taken 10
        -: 1548:
        -: 1549:		/* PREVENT UNGRACEFUL EXIT */
        -: 1550:		/* Prevent the user from killing the program via the 'kill',
        -: 1551:		 * 'pkill' or 'killall' commands, from within CliFM itself.
        -: 1552:		 * Otherwise, the program will be forcefully terminated without
        -: 1553:		 * freeing allocated memory */
       10: 1554:		if ((*comm[0] == 'k' || *comm[0] == 'p') && (strcmp(comm[0], "kill") == 0 || strcmp(comm[0], "killall") == 0 || strcmp(comm[0], "pkill") == 0)) {
       10: 1554-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 1
        9: 1554-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 6
        4: 1554-block  2
branch  4 taken 4 (fallthrough)
branch  5 taken 0
        4: 1554-block  3
branch  6 taken 3 (fallthrough)
branch  7 taken 1
        3: 1554-block  4
branch  8 taken 0 (fallthrough)
branch  9 taken 3
        -: 1555:			size_t i;
       1*: 1556:			for (i = 1; i <= args_n; i++) {
        1: 1556-block  0
unconditional  0 taken 1
    %%%%%: 1556-block  1
unconditional  1 never executed
        1: 1556-block  2
branch  2 taken 1
branch  3 taken 0 (fallthrough)
       1*: 1557:				if ((strcmp(comm[0], "kill") == 0 && atoi(comm[i]) == (int)own_pid) || ((strcmp(comm[0], "killall") == 0 || strcmp(comm[0], "pkill") == 0) && strcmp(comm[i], argv_bk[0]) == 0)) {
        1: 1557-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 1557-block  1
branch  2 never executed
branch  3 never executed
        1: 1557-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 1557-block  3
branch  6 never executed
branch  7 never executed
        1: 1557-block  4
branch  8 taken 1 (fallthrough)
branch  9 taken 0
        1: 1558:					fprintf(stderr, _("%s: To gracefully quit enter 'quit'\n"),
        1: 1558-block  0
call    0 returned 1
call    1 returned 1
        -: 1559:							PROGRAM_NAME);
        1: 1560:					return (exit_code = EXIT_FAILURE);
unconditional  0 taken 1
        -: 1561:				}
        -: 1562:			}
        -: 1563:		}
        -: 1564:
        -: 1565:		/* CHECK WHETHER EXTERNAL COMMANDS ARE ALLOWED */
        9: 1566:		if (!ext_cmd_ok) {
        9: 1566-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 8
        1: 1567:			fprintf(stderr, _("%s: External commands are not allowed. "
        1: 1567-block  0
call    0 returned 1
call    1 returned 1
        -: 1568:					  "Run 'ext on' to enable them.\n"), PROGRAM_NAME);
        1: 1569:			return (exit_code = EXIT_FAILURE);
unconditional  0 taken 1
        -: 1570:		}
        -: 1571:
        8: 1572:		if (*comm[0] == *argv_bk[0] && strcmp(comm[0], argv_bk[0]) == 0) {
        8: 1572-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 7
        1: 1572-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1573:			fprintf(stderr, "%s: Nested instances are not allowed\n",
        1: 1573-block  0
call    0 returned 1
        -: 1574:			    PROGRAM_NAME);
        1: 1575:			return EXIT_FAILURE;
unconditional  0 taken 1
        -: 1576:		}
        -: 1577:
        -: 1578:		/*
        -: 1579:		 * By making precede the command by a colon or a semicolon, the
        -: 1580:		 * user can BYPASS CliFM parsing, expansions, and checks to be
        -: 1581:		 * executed DIRECTLY by the system shell (execle). For example:
        -: 1582:		 * if the amount of files listed on the screen (ELN's) is larger
        -: 1583:		 * or equal than 644 and the user tries to issue this command:
        -: 1584:		 * "chmod 644 filename", CLIFM will take 644 to be an ELN, and
        -: 1585:		 * will thereby try to expand it into the corresponding file name,
        -: 1586:		 * which is not what the user wants. To prevent this, simply run
        -: 1587:		 * the command as follows: ";chmod 644 filename" */
        -: 1588:
        7: 1589:		if (*comm[0] == ':' || *comm[0] == ';') {
        7: 1589-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7: 1589-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 6
        -: 1590:			/* Remove the colon from the beginning of the first argument,
        -: 1591:			 * that is, move the pointer to the next (second) position */
        1: 1592:			char *comm_tmp = savestring(comm[0] + 1, strlen(comm[0] + 1));
        1: 1592-block  0
call    0 returned 1
        -: 1593:			/* If string == ":" or ";" */
        1: 1594:			if (!comm_tmp || !*comm_tmp) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1594-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 1595:				fprintf(stderr, _("%s: '%c': Syntax error\n"),
call    0 never executed
    #####: 1596:				    PROGRAM_NAME, *comm[0]);
    %%%%%: 1596-block  0
call    0 never executed
    #####: 1597:				exit_code = EXIT_FAILURE;
    #####: 1598:				if (comm_tmp)
branch  0 never executed
branch  1 never executed
    #####: 1599:					free(comm_tmp);
    %%%%%: 1599-block  0
unconditional  0 never executed
    #####: 1600:				return EXIT_FAILURE;
    %%%%%: 1600-block  0
unconditional  0 never executed
        -: 1601:			} else {
        1: 1602:				strcpy(comm[0], comm_tmp);
        1: 1603:				free(comm_tmp);
        1: 1603-block  0
unconditional  0 taken 1
        -: 1604:			}
        -: 1605:		}
        -: 1606:
        -: 1607:		/* #### RUN THE EXTERNAL COMMAND #### */
        -: 1608:
        -: 1609:		/* Store the command and each argument into a single array to be
        -: 1610:		 * executed by execle() using the system shell (/bin/sh -c) */
        7: 1611:		char *ext_cmd = (char *)NULL;
        7: 1612:		size_t ext_cmd_len = strlen(comm[0]);
        7: 1613:		ext_cmd = (char *)xnmalloc(ext_cmd_len + 1, sizeof(char));
        7: 1613-block  0
call    0 returned 7
        7: 1614:		strcpy(ext_cmd, comm[0]);
        -: 1615:
        -: 1616:		register size_t i;
        7: 1617:		if (args_n) { /* This will be false in case of ";cmd" or ":cmd" */
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    #####: 1618:			for (i = 1; i <= args_n; i++) {
    %%%%%: 1618-block  0
unconditional  0 never executed
    %%%%%: 1618-block  1
branch  1 never executed
branch  2 never executed
    #####: 1619:				ext_cmd_len += strlen(comm[i]) + 1;
    #####: 1620:				ext_cmd = (char *)xrealloc(ext_cmd, (ext_cmd_len + 1) * sizeof(char));
    %%%%%: 1620-block  0
call    0 never executed
    #####: 1621:				strcat(ext_cmd, " ");
    #####: 1622:				strcat(ext_cmd, comm[i]);
unconditional  0 never executed
        -: 1623:			}
        -: 1624:		}
        -: 1625:
        -: 1626:		/* Append final ampersand if background */
        7: 1627:		if (bg_proc) {
        7: 1627-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    #####: 1628:			ext_cmd = (char *)xrealloc(ext_cmd, (ext_cmd_len + 2) * sizeof(char));
    %%%%%: 1628-block  0
call    0 never executed
    #####: 1629:			ext_cmd[ext_cmd_len] = '&';
    #####: 1630:			ext_cmd[ext_cmd_len + 1] = '\0';
unconditional  0 never executed
        -: 1631:		}
        -: 1632:
        -: 1633:		/* Since we modified LS_COLORS, store its current value and unset
        -: 1634:		 * it. Some shell commands use LS_COLORS to display their outputs
        -: 1635:		 * ("ls -l", for example, use the "no" value to print file
        -: 1636:		 * properties). So, we unset it to prevent wrong color output
        -: 1637:		 * for external commands. The disadvantage of this procedure is
        -: 1638:		 * that if the user uses a customized LS_COLORS, unsetting it
        -: 1639:		 * set its value to default, and the customization is lost. */
        -: 1640:
        -: 1641:#if defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
        -: 1642:		char *my_ls_colors = (char *)NULL, *p = (char *)NULL;
        -: 1643:		/* For some reason, when running on FreeBSD Valgrind complains
        -: 1644:		 * about overlapping source and destiny in setenv() if I just
        -: 1645:		 * copy the address returned by getenv() instead of the string
        -: 1646:		 * itself. Not sure why, but this makes the error go away */
        -: 1647:		p = getenv("LS_COLORS");
        -: 1648:		my_ls_colors = (char *)xnmalloc(strlen(p) + 1, sizeof(char *));
        -: 1649:		strcpy(my_ls_colors, p);
        -: 1650:		p = (char *)NULL;
        -: 1651:
        -: 1652:#else
        -: 1653:		static char *my_ls_colors = (char *)NULL;
        7: 1654:		my_ls_colors = getenv("LS_COLORS");
        7: 1654-block  0
call    0 returned 7
        -: 1655:#endif
        -: 1656:
        7: 1657:		if (ls_colors_bk && *ls_colors_bk != '\0')
branch  0 taken 6 (fallthrough)
branch  1 taken 1
        6: 1657-block  0
branch  2 taken 6 (fallthrough)
branch  3 taken 0
        6: 1658:			setenv("LS_COLORS", ls_colors_bk, 1);
        6: 1658-block  0
call    0 returned 6
unconditional  1 taken 6
        -: 1659:		else
        1: 1660:			unsetenv("LS_COLORS");
        1: 1660-block  0
call    0 returned 1
unconditional  1 taken 1
        -: 1661:
        7: 1662:		if (launch_execle(ext_cmd) != EXIT_SUCCESS)
        7: 1662-block  0
call    0 returned 7
branch  1 taken 6 (fallthrough)
branch  2 taken 1
        6: 1663:			exit_code = EXIT_FAILURE;
        6: 1663-block  0
unconditional  0 taken 6
        7: 1664:		free(ext_cmd);
        -: 1665:
        -: 1666:		/* Restore LS_COLORS value to use CliFM colors */
        7: 1667:		setenv("LS_COLORS", my_ls_colors, 1);
        7: 1667-block  0
call    0 returned 7
        -: 1668:
        -: 1669:#if defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
        -: 1670:		free(my_ls_colors);
        -: 1671:#endif
        -: 1672:
        -: 1673:		/* Reload the list of available commands in PATH for TAB completion.
        -: 1674:		 * Why? If this list is not updated, whenever some new program is
        -: 1675:		 * installed, renamed, or removed from some of the paths in PATH
        -: 1676:		 * while in CliFM, this latter needs to be restarted in order
        -: 1677:		 * to be able to recognize the new program for TAB completion */
        -: 1678:
        -: 1679:		int j;
        7: 1680:		if (bin_commands) {
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7: 1681:			j = (int)path_progsn;
    26222: 1682:			while (--j >= 0)
        7: 1682-block  0
unconditional  0 taken 7
    26222: 1682-block  1
branch  1 taken 26215
branch  2 taken 7 (fallthrough)
    26215: 1683:				free(bin_commands[j]);
    26215: 1683-block  0
unconditional  0 taken 26215
        7: 1684:			free(bin_commands);
        7: 1685:			bin_commands = (char **)NULL;
        7: 1685-block  0
unconditional  0 taken 7
        -: 1686:		}
        -: 1687:
        7: 1688:		if (paths) {
        7: 1688-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7: 1689:			j = (int)path_n;
       49: 1690:			while (--j >= 0)
        7: 1690-block  0
unconditional  0 taken 7
       49: 1690-block  1
branch  1 taken 42
branch  2 taken 7 (fallthrough)
       42: 1691:				free(paths[j]);
       42: 1691-block  0
unconditional  0 taken 42
        -: 1692:		}
        -: 1693:
        7: 1694:		path_n = (size_t)get_path_env();
        7: 1694-block  0
call    0 returned 7
        7: 1695:		get_path_programs();
call    0 returned 7
        -: 1696:	}
        -: 1697:
       48: 1698:CHECK_EVENTS:
       48: 1699:	if (!cd_lists_on_the_fly)
       48: 1699-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 48
    #####: 1700:		return exit_code;
    %%%%%: 1700-block  0
unconditional  0 never executed
        -: 1701:
        -: 1702:#ifdef LINUX_INOTIFY
       48: 1703:	if (watch)
       48: 1703-block  0
branch  0 taken 48 (fallthrough)
branch  1 taken 0
       48: 1704:		read_inotify();
       48: 1704-block  0
call    0 returned 48
unconditional  1 taken 48
        -: 1705:#elif defined(BSD_KQUEUE)
        -: 1706:	if (watch && event_fd >= 0)
        -: 1707:		read_kqueue();
        -: 1708:#endif
        -: 1709:
       48: 1710:	return exit_code;
       48: 1710-block  0
unconditional  0 taken 48
        -: 1711:}
        -: 1712:
        -: 1713:/* Execute chained commands (cmd1;cmd2 and/or cmd1 && cmd2). The function
        -: 1714: * is called by parse_input_str() if some non-quoted double ampersand or
        -: 1715: * semicolon is found in the input string AND at least one of these
        -: 1716: * chained commands is internal */
        -: 1717:void
function exec_chained_cmds called 0 returned 0% blocks executed 0%
    #####: 1718:exec_chained_cmds(char *cmd)
        -: 1719:{
    #####: 1720:	if (!cmd)
    %%%%%: 1720-block  0
branch  0 never executed
branch  1 never executed
    #####: 1721:		return;
    %%%%%: 1721-block  0
unconditional  0 never executed
        -: 1722:
    #####: 1723:	size_t i = 0, cmd_len = strlen(cmd);
    #####: 1724:	for (i = 0; i < cmd_len; i++) {
    %%%%%: 1724-block  0
unconditional  0 never executed
    %%%%%: 1724-block  1
unconditional  1 never executed
    %%%%%: 1724-block  2
branch  2 never executed
branch  3 never executed
    #####: 1725:		char *str = (char *)NULL;
    #####: 1726:		size_t len = 0, cond_exec = 0;
        -: 1727:
        -: 1728:		/* Get command */
    #####: 1729:		str = (char *)xcalloc(strlen(cmd) + 1, sizeof(char));
    %%%%%: 1729-block  0
call    0 never executed
    #####: 1730:		while (cmd[i] && cmd[i] != '&' && cmd[i] != ';')
unconditional  0 never executed
    %%%%%: 1730-block  0
branch  1 never executed
branch  2 never executed
    %%%%%: 1730-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1730-block  2
branch  5 never executed
branch  6 never executed
    #####: 1731:			str[len++] = cmd[i++];
    %%%%%: 1731-block  0
unconditional  0 never executed
        -: 1732:
    #####: 1733:		if (!*str) {
    %%%%%: 1733-block  0
branch  0 never executed
branch  1 never executed
    #####: 1734:			free(str);
    #####: 1735:			continue;
    %%%%%: 1735-block  0
unconditional  0 never executed
        -: 1736:		}
        -: 1737:
        -: 1738:		/* Should we execute conditionally? */
    #####: 1739:		if (cmd[i] == '&')
    %%%%%: 1739-block  0
branch  0 never executed
branch  1 never executed
    #####: 1740:			cond_exec = 1;
    %%%%%: 1740-block  0
unconditional  0 never executed
        -: 1741:
        -: 1742:		/* Execute the command */
    #####: 1743:		char **tmp_cmd = parse_input_str(str);
    %%%%%: 1743-block  0
call    0 never executed
    #####: 1744:		free(str);
        -: 1745:
    #####: 1746:		if (!tmp_cmd)
branch  0 never executed
branch  1 never executed
    #####: 1747:			continue;
    %%%%%: 1747-block  0
unconditional  0 never executed
        -: 1748:		
    #####: 1749:		int error_code = 0;
        -: 1750:		size_t j;
    #####: 1751:		char **alias_cmd = check_for_alias(tmp_cmd);
    %%%%%: 1751-block  0
call    0 never executed
    #####: 1752:		if (alias_cmd) {
branch  0 never executed
branch  1 never executed
    #####: 1753:			if (exec_cmd(alias_cmd) != 0)
    %%%%%: 1753-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1754:				error_code = 1;
    %%%%%: 1754-block  0
unconditional  0 never executed
    #####: 1755:			for (j = 0; alias_cmd[j]; j++)
    %%%%%: 1755-block  0
unconditional  0 never executed
    %%%%%: 1755-block  1
branch  1 never executed
branch  2 never executed
    #####: 1756:				free(alias_cmd[j]);
    %%%%%: 1756-block  0
unconditional  0 never executed
    #####: 1757:			free(alias_cmd);
    %%%%%: 1757-block  0
unconditional  0 never executed
        -: 1758:		} else {
    #####: 1759:			if (exec_cmd(tmp_cmd) != 0)
    %%%%%: 1759-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1760:				error_code = 1;
    %%%%%: 1760-block  0
unconditional  0 never executed
    #####: 1761:			for (j = 0; j <= args_n; j++)
    %%%%%: 1761-block  0
unconditional  0 never executed
    %%%%%: 1761-block  1
branch  1 never executed
branch  2 never executed
    #####: 1762:				free(tmp_cmd[j]);
    %%%%%: 1762-block  0
unconditional  0 never executed
    #####: 1763:			free(tmp_cmd);
    %%%%%: 1763-block  0
unconditional  0 never executed
        -: 1764:		}
        -: 1765:		/* Do not continue if the execution was condtional and
        -: 1766:		 * the previous command failed */
    #####: 1767:		if (cond_exec && error_code)
    %%%%%: 1767-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1767-block  1
branch  2 never executed
branch  3 never executed
    #####: 1768:			break;
    %%%%%: 1768-block  0
unconditional  0 never executed
        -: 1769:	}
        -: 1770:}
        -: 1771:
        -: 1772:void
function exec_profile called 13 returned 100% blocks executed 45%
       13: 1773:exec_profile(void)
        -: 1774:{
       13: 1775:	if (!config_ok || !profile_file)
       13: 1775-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 0
       13: 1775-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 13
    #####: 1776:		return;
    %%%%%: 1776-block  0
unconditional  0 never executed
    %%%%%: 1776-block  1
unconditional  1 never executed
        -: 1777:
       13: 1778:	FILE *fp = fopen(profile_file, "r");
       13: 1778-block  0
call    0 returned 13
       13: 1779:	if (!fp)
branch  0 taken 0 (fallthrough)
branch  1 taken 13
    #####: 1780:		return;
    %%%%%: 1780-block  0
unconditional  0 never executed
        -: 1781:
       13: 1782:	size_t line_size = 0;
       13: 1783:	char *line = (char *)NULL;
       13: 1784:	ssize_t line_len = 0;
        -: 1785:
       71: 1786:	while ((line_len = getline(&line, &line_size, fp)) > 0) {
       13: 1786-block  0
unconditional  0 taken 13
       71: 1786-block  1
call    1 returned 71
branch  2 taken 58
branch  3 taken 13 (fallthrough)
        -: 1787:		/* Skip empty and commented lines */
       58: 1788:		if (!*line || *line == '\n' || *line == '#')
       58: 1788-block  0
branch  0 taken 58 (fallthrough)
branch  1 taken 0
       58: 1788-block  1
branch  2 taken 58 (fallthrough)
branch  3 taken 0
       58: 1788-block  2
branch  4 taken 58 (fallthrough)
branch  5 taken 0
       58: 1789:			continue;
       58: 1789-block  0
unconditional  0 taken 58
        -: 1790:
        -: 1791:		/* Remove trailing new line char */
    #####: 1792:		if (line[line_len - 1] == '\n')
    %%%%%: 1792-block  0
branch  0 never executed
branch  1 never executed
    #####: 1793:			line[line_len - 1] = '\0';
    %%%%%: 1793-block  0
unconditional  0 never executed
        -: 1794:
    #####: 1795:		if (strchr(line, '=') && !_ISDIGIT(*line)) {
    %%%%%: 1795-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1795-block  1
branch  2 never executed
branch  3 never executed
    #####: 1796:			create_usr_var(line);
    %%%%%: 1796-block  0
call    0 never executed
unconditional  1 never executed
    #####: 1797:		} else if (strlen(line) != 0) {
    %%%%%: 1797-block  0
branch  0 never executed
branch  1 never executed
        -: 1798:		/* Parse line and execute it */
    #####: 1799:			args_n = 0;
        -: 1800:
    #####: 1801:			char **cmds = parse_input_str(line);
    %%%%%: 1801-block  0
call    0 never executed
        -: 1802:
    #####: 1803:			if (cmds) {
branch  0 never executed
branch  1 never executed
    #####: 1804:				no_log = 1;
    #####: 1805:				exec_cmd(cmds);
    %%%%%: 1805-block  0
call    0 never executed
    #####: 1806:				no_log = 0;
    #####: 1807:				int i = (int)args_n + 1;
    #####: 1808:				while (--i >= 0)
unconditional  0 never executed
    %%%%%: 1808-block  0
branch  1 never executed
branch  2 never executed
    #####: 1809:					free(cmds[i]);
    %%%%%: 1809-block  0
unconditional  0 never executed
    #####: 1810:				free(cmds);
    #####: 1811:				cmds = (char **)NULL;
    %%%%%: 1811-block  0
unconditional  0 never executed
        -: 1812:			}
    #####: 1813:			args_n = 0;
    %%%%%: 1813-block  0
unconditional  0 never executed
        -: 1814:		}
        -: 1815:	}
        -: 1816:
       13: 1817:	free(line);
       13: 1818:	fclose(fp);
       13: 1818-block  0
call    0 returned 13
        -: 1819:}
