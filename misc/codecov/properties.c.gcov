        -:    0:Source:properties.c
        -:    1:/* properties.c -- functions to get files properties */
        -:    2:
        -:    3:/*
        -:    4: * This file is part of CliFM
        -:    5: * 
        -:    6: * Copyright (C) 2016-2021, L. Abramovich <johndoe.arch@outlook.com>
        -:    7: * All rights reserved.
        -:    8:
        -:    9: * CliFM is free software; you can redistribute it and/or modify
        -:   10: * it under the terms of the GNU General Public License as published by
        -:   11: * the Free Software Foundation; either version 2 of the License, or
        -:   12: * (at your option) any later version.
        -:   13: *
        -:   14: * CliFM is distributed in the hope that it will be useful,
        -:   15: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   16: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   17: * GNU General Public License for more details.
        -:   18: *
        -:   19: * You should have received a copy of the GNU General Public License
        -:   20: * along with this program; if not, write to the Free Software
        -:   21: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
        -:   22: * MA 02110-1301, USA.
        -:   23:*/
        -:   24:
        -:   25:#include "helpers.h"
        -:   26:
        -:   27:#include <errno.h>
        -:   28:#include <stdio.h>
        -:   29:#include <string.h>
        -:   30:#include <sys/stat.h>
        -:   31:#include <time.h>
        -:   32:#include <unistd.h>
        -:   33:#ifdef __linux__
        -:   34:#include <sys/capability.h>
        -:   35:#endif
        -:   36:#include <fcntl.h>
        -:   37:#include <grp.h>
        -:   38:#include <pwd.h>
        -:   39:#include <sys/types.h>
        -:   40:
        -:   41:#include "aux.h"
        -:   42:#include "checks.h"
        -:   43:#include "colors.h"
        -:   44:
        -:   45:static int
function get_properties called 3 returned 100% blocks executed 66%
        3:   46:get_properties(char *filename, const int dsize)
        -:   47:{
        3:   48:	if (!filename || !*filename)
        3:   48-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:   48-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 3
    #####:   49:		return EXIT_FAILURE;
    %%%%%:   49-block  0
unconditional  0 never executed
        -:   50:
        3:   51:	size_t len = strlen(filename);
        3:   52:	if (filename[len - 1] == '/')
        3:   52-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   53:		filename[len - 1] = '\0';
        1:   53-block  0
unconditional  0 taken 1
        -:   54:
        -:   55:	/* Check file existence */
        -:   56:	struct stat file_attrib;
        3:   57:	if (lstat(filename, &file_attrib) == -1) {
        3:   57-block  0
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
    #####:   58:		fprintf(stderr, "%s: pr: '%s': %s\n", PROGRAM_NAME, filename,
call    0 never executed
    #####:   59:		    strerror(errno));
    %%%%%:   59-block  0
call    0 never executed
    #####:   60:		return EXIT_FAILURE;
unconditional  0 never executed
        -:   61:	}
        -:   62:
        -:   63:	/* Get file size */
        3:   64:	char *size_type = get_size_unit(file_attrib.st_size);
        3:   64-block  0
call    0 returned 3
        -:   65:
        -:   66:	/* Get file type (and color): */
        3:   67:	char file_type = 0;
        3:   68:	char *linkname = (char *)NULL, *color = (char *)NULL;
        -:   69:
        3:   70:	switch (file_attrib.st_mode & S_IFMT) {
branch  0 taken 1
branch  1 taken 1
branch  2 taken 1
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
        1:   71:	case S_IFREG: {
        1:   72:		char *ext = (char *)NULL;
        1:   73:		file_type = '-';
        1:   74:		if (light_mode)
        1:   74-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   75:			color = fi_c;
    %%%%%:   75-block  0
unconditional  0 never executed
        1:   76:		else if (access(filename, R_OK) == -1)
        1:   76-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:   77:			color = nf_c;
    %%%%%:   77-block  0
unconditional  0 never executed
        1:   78:		else if (file_attrib.st_mode & S_ISUID)
        1:   78-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   79:			color = su_c;
    %%%%%:   79-block  0
unconditional  0 never executed
        1:   80:		else if (file_attrib.st_mode & S_ISGID)
        1:   80-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   81:			color = sg_c;
    %%%%%:   81-block  0
unconditional  0 never executed
        -:   82:		else {
        -:   83:#ifdef _LINUX_CAP
        1:   84:			cap_t cap = cap_get_file(filename);
        1:   84-block  0
call    0 returned 1
        1:   85:			if (cap) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   86:				color = ca_c;
    #####:   87:				cap_free(cap);
    %%%%%:   87-block  0
call    0 never executed
unconditional  1 never executed
        1:   88:			} else if (file_attrib.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)) {
        1:   88-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   89:#else
        -:   90:			if (file_attrib.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)) {
        -:   91:#endif
        1:   92:				if (file_attrib.st_size == 0)
        1:   92-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   93:					color = ee_c;
    %%%%%:   93-block  0
unconditional  0 never executed
        -:   94:				else
        1:   95:					color = ex_c;
        1:   95-block  0
unconditional  0 taken 1
        -:   96:			}
        -:   97:
    #####:   98:			else if (file_attrib.st_size == 0)
    %%%%%:   98-block  0
branch  0 never executed
branch  1 never executed
    #####:   99:				color = ef_c;
    %%%%%:   99-block  0
unconditional  0 never executed
    #####:  100:			else if (file_attrib.st_nlink > 1)
    %%%%%:  100-block  0
branch  0 never executed
branch  1 never executed
    #####:  101:				color = mh_c;
    %%%%%:  101-block  0
unconditional  0 never executed
        -:  102:			else {
    #####:  103:				ext = strrchr(filename, '.');
    #####:  104:				if (ext) {
    %%%%%:  104-block  0
branch  0 never executed
branch  1 never executed
    #####:  105:					char *extcolor = get_ext_color(ext);
    %%%%%:  105-block  0
call    0 never executed
    #####:  106:					if (extcolor) {
branch  0 never executed
branch  1 never executed
    #####:  107:						char ext_color[MAX_COLOR] = "";
    #####:  108:						sprintf(ext_color, "\x1b[%sm", extcolor);
    #####:  109:						color = ext_color;
    #####:  110:						extcolor = (char *)NULL;
    %%%%%:  110-block  0
unconditional  0 never executed
        -:  111:					} else  { /* No matching extension found */
    #####:  112:						color = fi_c;
    %%%%%:  112-block  0
unconditional  0 never executed
        -:  113:					}
        -:  114:				} else {
    #####:  115:					color = fi_c;
    %%%%%:  115-block  0
unconditional  0 never executed
        -:  116:				}
        -:  117:			}
        -:  118:		}
        1:  119:	} break;
        1:  119-block  0
unconditional  0 taken 1
        1:  120:	case S_IFDIR:
        1:  121:		file_type = 'd';
        1:  122:		if (light_mode)
        1:  122-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  123:			color = di_c;
    %%%%%:  123-block  0
unconditional  0 never executed
        1:  124:		else if (access(filename, R_OK | X_OK) != 0) {
        1:  124-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  125:			color = nd_c;
    %%%%%:  125-block  0
unconditional  0 never executed
        -:  126:		} else {
        1:  127:			int sticky = 0;
        1:  128:			int is_oth_w = 0;
        1:  129:			if (file_attrib.st_mode & S_ISVTX)
        1:  129-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  130:				sticky = 1;
    %%%%%:  130-block  0
unconditional  0 never executed
        -:  131:
        1:  132:			if (file_attrib.st_mode & S_IWOTH)
        1:  132-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  133:				is_oth_w = 1;
    %%%%%:  133-block  0
unconditional  0 never executed
        -:  134:
        1:  135:			int files_dir = count_dir(filename, CPOP);
        1:  135-block  0
call    0 returned 1
        -:  136:
       2*:  137:			color = sticky ? (is_oth_w ? tw_c : st_c) : is_oth_w ? ow_c
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  137-block  0
branch  2 never executed
branch  3 never executed
    %%%%%:  137-block  1
unconditional  4 never executed
    %%%%%:  137-block  2
unconditional  5 never executed
    %%%%%:  137-block  3
unconditional  6 never executed
        1:  137-block  4
unconditional  7 taken 1
        1:  137-block  5
unconditional  8 taken 1
       1*:  138:				   : ((files_dir == 2 || files_dir == 0) ? ed_c : di_c);
        1:  138-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  138-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  138-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  138-block  3
unconditional  6 never executed
        1:  138-block  4
unconditional  7 taken 1
        1:  138-block  5
unconditional  8 taken 1
    %%%%%:  138-block  6
unconditional  9 never executed
        -:  139:		}
        -:  140:
        1:  141:		break;
        1:  141-block  0
unconditional  0 taken 1
        1:  142:	case S_IFLNK:
        1:  143:		file_type = 'l';
        1:  144:		if (light_mode) {
        1:  144-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  145:			color = ln_c;
    %%%%%:  145-block  0
unconditional  0 never executed
        -:  146:		} else {
        1:  147:			linkname = realpath(filename, (char *)NULL);
        1:  147-block  0
call    0 returned 1
        1:  148:			if (linkname)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  149:				color = ln_c;
        1:  149-block  0
unconditional  0 taken 1
        -:  150:			else
    #####:  151:				color = or_c;
    %%%%%:  151-block  0
unconditional  0 never executed
        -:  152:		}
        1:  153:		break;
        1:  153-block  0
unconditional  0 taken 1
    #####:  154:	case S_IFSOCK: file_type = 's';
    #####:  155:		color = so_c;
    #####:  156:		break;
    %%%%%:  156-block  0
unconditional  0 never executed
    #####:  157:	case S_IFBLK:
    #####:  158:		file_type = 'b';
    #####:  159:		color = bd_c;
    #####:  160:		break;
    %%%%%:  160-block  0
unconditional  0 never executed
    #####:  161:	case S_IFCHR:
    #####:  162:		file_type = 'c';
    #####:  163:		color = cd_c;
    #####:  164:		break;
    %%%%%:  164-block  0
unconditional  0 never executed
    #####:  165:	case S_IFIFO:
    #####:  166:		file_type = 'p';
    #####:  167:		color = pi_c;
    #####:  168:		break;
    %%%%%:  168-block  0
unconditional  0 never executed
    #####:  169:	default:
    #####:  170:		file_type = '?';
    #####:  171:		color = no_c;
    %%%%%:  171-block  0
unconditional  0 never executed
        -:  172:	}
        -:  173:
        -:  174:	/* Get file permissions */
        3:  175:	char read_usr = '-', write_usr = '-', exec_usr = '-',
        3:  176:	     read_grp = '-', write_grp = '-', exec_grp = '-',
        3:  177:	     read_others = '-', write_others = '-', exec_others = '-';
        -:  178:
        3:  179:	mode_t val = (file_attrib.st_mode & (mode_t)~S_IFMT);
        3:  180:	if (val & S_IRUSR) read_usr = 'r';
        3:  180-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  180-block  1
unconditional  2 taken 3
        3:  181:	if (val & S_IWUSR) write_usr = 'w';
        3:  181-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  181-block  1
unconditional  2 taken 3
        3:  182:	if (val & S_IXUSR) exec_usr = 'x';
        3:  182-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  182-block  1
unconditional  2 taken 3
        -:  183:
        3:  184:	if (val & S_IRGRP) read_grp = 'r';
        3:  184-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  184-block  1
unconditional  2 taken 1
        3:  185:	if (val & S_IWGRP) write_grp = 'w';
        3:  185-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  185-block  1
unconditional  2 taken 1
        3:  186:	if (val & S_IXGRP) exec_grp = 'x';
        3:  186-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  186-block  1
unconditional  2 taken 2
        -:  187:
        3:  188:	if (val & S_IROTH) read_others = 'r';
        3:  188-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  188-block  1
unconditional  2 taken 1
        3:  189:	if (val & S_IWOTH) write_others = 'w';
        3:  189-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  189-block  1
unconditional  2 taken 1
        3:  190:	if (val & S_IXOTH) exec_others = 'x';
        3:  190-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  190-block  1
unconditional  2 taken 2
        -:  191:
        3:  192:	if (file_attrib.st_mode & S_ISUID)
        3:  192-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  193:		(val & S_IXUSR) ? (exec_usr = 's') : (exec_usr = 'S');
    %%%%%:  193-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  193-block  1
unconditional  2 never executed
    %%%%%:  193-block  2
unconditional  3 never executed
        3:  194:	if (file_attrib.st_mode & S_ISGID)
        3:  194-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  195:		(val & S_IXGRP) ? (exec_grp = 's') : (exec_grp = 'S');
    %%%%%:  195-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  195-block  1
unconditional  2 never executed
    %%%%%:  195-block  2
unconditional  3 never executed
        3:  196:	if (file_attrib.st_mode & S_ISVTX)
        3:  196-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  197:		(val & S_IXOTH) ? (exec_others = 't'): (exec_others = 'T');
    %%%%%:  197-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  197-block  1
unconditional  2 never executed
    %%%%%:  197-block  2
unconditional  3 never executed
        -:  198:
        -:  199:	/* Get number of links to the file */
        3:  200:	nlink_t link_n = file_attrib.st_nlink;
        -:  201:
        -:  202:	/* Get modification time */
        3:  203:	time_t time = (time_t)file_attrib.st_mtim.tv_sec;
        -:  204:	struct tm tm;
        3:  205:	localtime_r(&time, &tm);
        3:  205-block  0
call    0 returned 3
        3:  206:	char mod_time[128] = "";
        -:  207:
        3:  208:	if (time)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -:  209:		/* Store formatted (and localized) date-time string into
        -:  210:		 * mod_time */
        3:  211:		strftime(mod_time, sizeof(mod_time), "%b %d %H:%M:%S %Y", &tm);
        3:  211-block  0
unconditional  0 taken 3
        -:  212:	else
    #####:  213:		mod_time[0] = '-';
    %%%%%:  213-block  0
unconditional  0 never executed
        -:  214:
        -:  215:	/* Get owner and group names */
        3:  216:	uid_t owner_id = file_attrib.st_uid; /* owner ID */
        3:  217:	gid_t group_id = file_attrib.st_gid; /* group ID */
        -:  218:	struct group *group;
        -:  219:	struct passwd *owner;
        3:  220:	group = getgrgid(group_id);
        3:  220-block  0
call    0 returned 3
        3:  221:	owner = getpwuid(owner_id);
call    0 returned 3
        -:  222:
        -:  223:	/* Print file properties */
       6*:  224:	printf("(%04o)%c/%c%c%c/%c%c%c/%c%c%c%s %zu %s %s %s %s ",
        3:  224-block  0
unconditional  0 taken 3
    %%%%%:  224-block  1
unconditional  1 never executed
        3:  224-block  2
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        3:  224-block  3
unconditional  4 taken 3
    %%%%%:  224-block  4
unconditional  5 never executed
        3:  224-block  5
branch  6 taken 0 (fallthrough)
branch  7 taken 3
        3:  224-block  6
unconditional  8 taken 3
        3:  224-block  7
branch  9 taken 0 (fallthrough)
branch 10 taken 3
        3:  224-block  8
unconditional 11 taken 3
branch 12 taken 0 (fallthrough)
branch 13 taken 3
    %%%%%:  224-block  9
unconditional 14 never executed
        3:  224-block 10
unconditional 15 taken 3
        3:  225:	    file_attrib.st_mode & 07777, file_type,
        3:  225-block  0
call    0 returned 3
        -:  226:	    read_usr, write_usr, exec_usr, read_grp,
        -:  227:	    write_grp, exec_grp, read_others, write_others, exec_others,
        3:  228:	    is_acl(filename) ? "+" : "", (size_t)link_n,
        3:  228-block  0
call    0 returned 3
    #####:  229:	    (!owner) ? _("unknown") : owner->pw_name,
    %%%%%:  229-block  0
call    0 never executed
unconditional  1 never executed
    #####:  230:	    (!group) ? _("unknown") : group->gr_name,
    %%%%%:  230-block  0
call    0 never executed
unconditional  1 never executed
        -:  231:	    (size_type) ? size_type : "?",
        3:  232:	    (mod_time[0] != '\0') ? mod_time : "?");
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -:  233:
        3:  234:	if (file_type && file_type != 'l') {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  234-block  0
branch  2 taken 2 (fallthrough)
branch  3 taken 1
        2:  235:		printf("%s%s%s\n", color, filename, df_c);
        2:  235-block  0
call    0 returned 2
unconditional  1 taken 2
        1:  236:	} else if (linkname) {
        1:  236-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  237:		printf("%s%s%s -> %s\n", color, filename, df_c, linkname);
        1:  237-block  0
call    0 returned 1
        1:  238:		free(linkname);
unconditional  0 taken 1
        -:  239:	} else { /* Broken link */
    #####:  240:		char link[PATH_MAX] = "";
    #####:  241:		ssize_t ret = readlink(filename, link, PATH_MAX);
    %%%%%:  241-block  0
call    0 never executed
        -:  242:
    #####:  243:		if (ret) {
branch  0 never executed
branch  1 never executed
    #####:  244:			printf(_("%s%s%s -> %s (broken link)\n"), color, filename,
    %%%%%:  244-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:  245:			    df_c, link);
        -:  246:		} else {
    #####:  247:			printf("%s%s%s -> ???\n", color, filename, df_c);
    %%%%%:  247-block  0
call    0 never executed
unconditional  1 never executed
        -:  248:		}
        -:  249:	}
        -:  250:
        -:  251:	/* Stat information */
        -:  252:	/* Last access time */
        3:  253:	time = (time_t)file_attrib.st_atim.tv_sec;
        3:  254:	localtime_r(&time, &tm);
        3:  254-block  0
call    0 returned 3
        3:  255:	char access_time[128] = "";
        -:  256:
        3:  257:	if (time)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -:  258:		/* Store formatted (and localized) date-time string into
        -:  259:		 * access_time */
        3:  260:		strftime(access_time, sizeof(access_time), "%b %d %H:%M:%S %Y", &tm);
        3:  260-block  0
unconditional  0 taken 3
        -:  261:	else
    #####:  262:		access_time[0] = '-';
    %%%%%:  262-block  0
unconditional  0 never executed
        -:  263:
        -:  264:	/* Last properties change time */
        3:  265:	time = (time_t)file_attrib.st_ctim.tv_sec;
        3:  266:	localtime_r(&time, &tm);
        3:  266-block  0
call    0 returned 3
        3:  267:	char change_time[128] = "";
        3:  268:	if (time)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  269:		strftime(change_time, sizeof(change_time), "%b %d %H:%M:%S %Y", &tm);
        3:  269-block  0
unconditional  0 taken 3
        -:  270:	else
    #####:  271:		change_time[0] = '-';
    %%%%%:  271-block  0
unconditional  0 never executed
        -:  272:
        -:  273:		/* Get creation (birth) time */
        -:  274:#if defined(HAVE_ST_BIRTHTIME) || defined(__BSD_VISIBLE)
        -:  275:#ifdef __OpenBSD__
        -:  276:	time = file_attrib.__st_birthtim.tv_sec;
        -:  277:#else
        -:  278:	time = file_attrib.st_birthtime;
        -:  279:#endif
        -:  280:	localtime_r(&time, &tm);
        -:  281:	char creation_time[128] = "";
        -:  282:	if (!time)
        -:  283:		creation_time[0] = '-';
        -:  284:	else
        -:  285:		strftime(creation_time, sizeof(creation_time),
        -:  286:		    "%b %d %H:%M:%S %Y", &tm);
        -:  287:#elif defined(_STATX)
        -:  288:	struct statx attrx;
        3:  289:	statx(AT_FDCWD, filename, AT_SYMLINK_NOFOLLOW, STATX_BTIME, &attrx);
        3:  289-block  0
call    0 returned 3
        3:  290:	time = (time_t)attrx.stx_btime.tv_sec;
        3:  291:	localtime_r(&time, &tm);
call    0 returned 3
        3:  292:	char creation_time[128] = "";
        -:  293:
        3:  294:	if (!time) {
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  295:		creation_time[0] = '-';
    %%%%%:  295-block  0
unconditional  0 never executed
        -:  296:	} else {
        3:  297:		strftime(creation_time, sizeof(creation_time),
        3:  297-block  0
unconditional  0 taken 3
        -:  298:		    "%b %d %H:%M:%S %Y", &tm);
        -:  299:	}
        -:  300:#endif
        -:  301:
        3:  302:	switch (file_type) {
        3:  302-block  0
branch  0 taken 1
branch  1 taken 0
branch  2 taken 1
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 1
branch  7 taken 0
        1:  303:	case 'd': printf(_("Directory")); break;
        1:  303-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
    #####:  304:	case 's': printf(_("Socket")); break;
    %%%%%:  304-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        1:  305:	case 'l': printf(_("Symbolic link")); break;
        1:  305-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
    #####:  306:	case 'b': printf(_("Block special file")); break;
    %%%%%:  306-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
    #####:  307:	case 'c': printf(_("Character special file")); break;
    %%%%%:  307-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
    #####:  308:	case 'p': printf(_("Fifo")); break;
    %%%%%:  308-block  0
call    0 never executed
call    1 never executed
unconditional  2 never executed
        1:  309:	case '-': printf(_("Regular file")); break;
        1:  309-block  0
call    0 returned 1
call    1 returned 1
unconditional  2 taken 1
    #####:  310:	default: break;
    %%%%%:  310-block  0
unconditional  0 never executed
        -:  311:	}
        -:  312:#ifdef __OpenBSD__
        -:  313:	printf(_("\tBlocks: %lld"), file_attrib.st_blocks);
        -:  314:#else
        3:  315:	printf(_("\tBlocks: %ld"), file_attrib.st_blocks);
        3:  315-block  0
call    0 returned 3
call    1 returned 3
        -:  316:#endif
        -:  317:#if defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
        -:  318:	printf(_("\tIO Block: %d"), file_attrib.st_blksize);
        -:  319:#else
        3:  320:	printf(_("\tIO Block: %ld"), file_attrib.st_blksize);
call    0 returned 3
call    1 returned 3
        -:  321:#endif
        -:  322:#ifdef __OpenBSD__
        -:  323:	printf(_("\tInode: %llu\n"), file_attrib.st_ino);
        -:  324:#else
        3:  325:	printf(_("\tInode: %zu\n"), file_attrib.st_ino);
call    0 returned 3
call    1 returned 3
        -:  326:#endif
        -:  327:#ifdef __OpenBSD__
        -:  328:	printf(_("Device: %d"), file_attrib.st_dev);
        -:  329:#else
        3:  330:	printf(_("Device: %zu"), file_attrib.st_dev);
call    0 returned 3
call    1 returned 3
        -:  331:#endif
       3*:  332:	printf(_("\tUid: %u (%s)"), file_attrib.st_uid, (!owner) ? _("unknown")
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%:  332-block  0
call    2 never executed
unconditional  3 never executed
        3:  332-block  1
unconditional  4 taken 3
        3:  332-block  2
call    5 returned 3
call    6 returned 3
        -:  333:			: owner->pw_name);
       3*:  334:	printf(_("\tGid: %u (%s)\n"), file_attrib.st_gid, (!group) ? _("unknown")
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%:  334-block  0
call    2 never executed
unconditional  3 never executed
        3:  334-block  1
unconditional  4 taken 3
        3:  334-block  2
call    5 returned 3
call    6 returned 3
        -:  335:			: group->gr_name);
        -:  336:
        -:  337:	/* Print file timestamps */
        3:  338:	printf(_("Access: \t%s\n"), access_time);
call    0 returned 3
call    1 returned 3
        3:  339:	printf(_("Modify: \t%s\n"), mod_time);
call    0 returned 3
call    1 returned 3
        3:  340:	printf(_("Change: \t%s\n"), change_time);
call    0 returned 3
call    1 returned 3
        -:  341:
        -:  342:#if defined(HAVE_ST_BIRTHTIME) || defined(__BSD_VISIBLE) || defined(_STATX)
        3:  343:	printf(_("Birth: \t\t%s\n"), creation_time);
call    0 returned 3
call    1 returned 3
        -:  344:#endif
        -:  345:
        -:  346:	/* Print size */
        3:  347:	if ((file_attrib.st_mode & S_IFMT) == S_IFDIR) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  348:		if (dsize) {
        1:  348-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  349:			fputs(_("Total size: \t"), stdout);
        1:  349-block  0
call    0 returned 1
call    1 returned 1
        1:  350:			off_t total_size = dir_size(filename);
call    0 returned 1
        1:  351:			if (total_size != -1) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  352:				char *human_size = get_size_unit(total_size * 1024);
        1:  352-block  0
call    0 returned 1
        1:  353:				if (human_size) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  354:					printf("%s\n", human_size);
        1:  354-block  0
call    0 returned 1
        1:  355:					free(human_size);
unconditional  0 taken 1
        -:  356:				} else {
    #####:  357:					puts("?");
    %%%%%:  357-block  0
call    0 never executed
unconditional  1 never executed
        -:  358:				}
        -:  359:			} else {
    #####:  360:				puts("?");
    %%%%%:  360-block  0
call    0 never executed
unconditional  1 never executed
        -:  361:			}
        -:  362:		}
        -:  363:	} else {
       2*:  364:		printf(_("Size: \t\t%s\n"), size_type ? size_type : "?");
        2:  364-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  364-block  1
unconditional  2 taken 2
    %%%%%:  364-block  2
unconditional  3 never executed
        2:  364-block  3
call    4 returned 2
call    5 returned 2
unconditional  6 taken 2
        -:  365:	}
        -:  366:
        3:  367:	if (size_type)
        3:  367-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  368:		free(size_type);
        3:  368-block  0
unconditional  0 taken 3
        -:  369:
        3:  370:	return EXIT_SUCCESS;
        3:  370-block  0
unconditional  0 taken 3
        -:  371:}
        -:  372:
        -:  373:int
function print_entry_props called 214 returned 100% blocks executed 70%
      214:  374:print_entry_props(const struct fileinfo *props, size_t max)
        -:  375:{
        -:  376:	/* Get file size */
      214:  377:	char *size_type = get_size_unit(props->size);
      214:  377-block  0
call    0 returned 214
        -:  378:
        -:  379:	/* Get file type indicator */
      214:  380:	char file_type = 0;
        -:  381:
      214:  382:	switch (props->mode & S_IFMT) {
branch  0 taken 111
branch  1 taken 97
branch  2 taken 6
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
      111:  383:	case S_IFREG: file_type = '-'; break;
      111:  383-block  0
unconditional  0 taken 111
       97:  384:	case S_IFDIR: file_type = 'd'; break;
       97:  384-block  0
unconditional  0 taken 97
        6:  385:	case S_IFLNK: file_type = 'l'; break;
        6:  385-block  0
unconditional  0 taken 6
    #####:  386:	case S_IFSOCK: file_type = 's'; break;
    %%%%%:  386-block  0
unconditional  0 never executed
    #####:  387:	case S_IFBLK: file_type = 'b'; break;
    %%%%%:  387-block  0
unconditional  0 never executed
    #####:  388:	case S_IFCHR: file_type = 'c'; break;
    %%%%%:  388-block  0
unconditional  0 never executed
    #####:  389:	case S_IFIFO: file_type = 'p'; break;
    %%%%%:  389-block  0
unconditional  0 never executed
    #####:  390:	default: file_type = '?';
    %%%%%:  390-block  0
unconditional  0 never executed
        -:  391:	}
        -:  392:
        -:  393:	/* Get file permissions */
      214:  394:	char read_usr = '-', write_usr = '-', exec_usr = '-',
      214:  395:	     read_grp = '-', write_grp = '-', exec_grp = '-',
      214:  396:	     read_others = '-', write_others = '-', exec_others = '-';
        -:  397:
      214:  398:	mode_t val = (props->mode & (mode_t)~S_IFMT);
      214:  399:	if (val & S_IRUSR) read_usr = 'r';
      214:  399-block  0
branch  0 taken 214 (fallthrough)
branch  1 taken 0
      214:  399-block  1
unconditional  2 taken 214
      214:  400:	if (val & S_IWUSR) write_usr = 'w';
      214:  400-block  0
branch  0 taken 214 (fallthrough)
branch  1 taken 0
      214:  400-block  1
unconditional  2 taken 214
      214:  401:	if (val & S_IXUSR) exec_usr = 'x';
      214:  401-block  0
branch  0 taken 107 (fallthrough)
branch  1 taken 107
      107:  401-block  1
unconditional  2 taken 107
        -:  402:
      214:  403:	if (val & S_IRGRP) read_grp = 'r';
      214:  403-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 201
       13:  403-block  1
unconditional  2 taken 13
      214:  404:	if (val & S_IWGRP) write_grp = 'w';
      214:  404-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 206
        8:  404-block  1
unconditional  2 taken 8
      214:  405:	if (val & S_IXGRP) exec_grp = 'x';
      214:  405-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 202
       12:  405-block  1
unconditional  2 taken 12
        -:  406:
      214:  407:	if (val & S_IROTH) read_others = 'r';
      214:  407-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 201
       13:  407-block  1
unconditional  2 taken 13
      214:  408:	if (val & S_IWOTH) write_others = 'w';
      214:  408-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 208
        6:  408-block  1
unconditional  2 taken 6
      214:  409:	if (val & S_IXOTH) exec_others = 'x';
      214:  409-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 202
       12:  409-block  1
unconditional  2 taken 12
        -:  410:
      214:  411:	if (props->mode & S_ISUID)
      214:  411-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 214
    #####:  412:		(val & S_IXUSR) ? (exec_usr = 's') : (exec_usr = 'S');
    %%%%%:  412-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  412-block  1
unconditional  2 never executed
    %%%%%:  412-block  2
unconditional  3 never executed
      214:  413:	if (props->mode & S_ISGID)
      214:  413-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 214
    #####:  414:		(val & S_IXGRP) ? (exec_grp = 's') : (exec_grp = 'S');
    %%%%%:  414-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  414-block  1
unconditional  2 never executed
    %%%%%:  414-block  2
unconditional  3 never executed
      214:  415:	if (props->mode & S_ISVTX)
      214:  415-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 214
    #####:  416:		(val & S_IXOTH) ? (exec_others = 't'): (exec_others = 'T');
    %%%%%:  416-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  416-block  1
unconditional  2 never executed
    %%%%%:  416-block  2
unconditional  3 never executed
        -:  417:
        -:  418:	/* Get modification time */
        -:  419:	char mod_time[128];
      214:  420:	if (props->ltime) {
      214:  420-block  0
branch  0 taken 214 (fallthrough)
branch  1 taken 0
        -:  421:		struct tm t;
      214:  422:		localtime_r(&props->ltime, &t);
      214:  422-block  0
call    0 returned 214
      214:  423:		snprintf(mod_time, 128, "%d-%02d-%02d %02d:%02d", t.tm_year + 1900,
      214:  424:		    t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min);
unconditional  0 taken 214
        -:  425:	} else {
    #####:  426:		strcpy(mod_time, "-               ");
    %%%%%:  426-block  0
unconditional  0 never executed
        -:  427:	}
        -:  428:
        -:  429:	/* Get owner and group names */
        -:  430:	/*  struct group *group;
        -:  431:	struct passwd *owner;
        -:  432:	group = getgrgid(props->uid);
        -:  433:	owner = getpwuid(props->gid); */
        -:  434:
        -:  435:	/*  If file name length is greater than max, truncate it
        -:  436:	 * to max (later a tilde (~) will be appended to let the user know
        -:  437:	 * the file name was truncated) */
        -:  438:	char trim_name[NAME_MAX];
      214:  439:	int trim = 0;
        -:  440:
      214:  441:	size_t cur_len = (size_t)props->eln_n + 1 + props->len;
        -:  442:#ifndef _NO_ICONS
      214:  443:	if (icons) {
      214:  443-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 214
    #####:  444:		cur_len += 3;
    #####:  445:		max += 3;
    %%%%%:  445-block  0
unconditional  0 never executed
        -:  446:	}
        -:  447:#endif
        -:  448:
      214:  449:	if (cur_len > max) {
      214:  449-block  0
branch  0 taken 16 (fallthrough)
branch  1 taken 198
       16:  450:		int rest = (int)(cur_len - max);
       16:  451:		trim = 1;
       16:  452:		strcpy(trim_name, props->name);
       16:  453:		int a = (int)props->len - rest - 1;
       16:  454:		if (a < 0)
       16:  454-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 16
    #####:  455:			a = 0;
    %%%%%:  455-block  0
unconditional  0 never executed
       16:  456:		if (unicode)
       16:  456-block  0
branch  0 taken 16 (fallthrough)
branch  1 taken 0
       16:  457:			u8truncstr(trim_name, (size_t)(a));
       16:  457-block  0
call    0 returned 16
unconditional  1 taken 16
        -:  458:		else
    #####:  459:			trim_name[a] = '\0';
    %%%%%:  459-block  0
unconditional  0 never executed
       16:  460:		cur_len -= (size_t)rest;
       16:  460-block  0
unconditional  0 taken 16
        -:  461:	}
        -:  462:
        -:  463:	/* Calculate pad for each file */
        -:  464:	int pad;
      214:  465:	pad = (int)(max - cur_len);
      214:  466:	if (pad < 0)
      214:  466-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 214
    #####:  467:		pad = 0;
    %%%%%:  467-block  0
unconditional  0 never executed
        -:  468:
        -:  469:#ifndef _NO_ICONS
    1712*:  470:	printf("%s%s%c%s%s%s%-*s%s%c %c/%c%c%c/%c%c%c/%c%c%c%s  "
      214:  470-block  0
branch  0 taken 214 (fallthrough)
branch  1 taken 0
      214:  470-block  1
unconditional  2 taken 214
    %%%%%:  470-block  2
unconditional  3 never executed
      214:  470-block  3
unconditional  4 taken 214
    %%%%%:  470-block  4
unconditional  5 never executed
branch  6 taken 0 (fallthrough)
branch  7 taken 214
    %%%%%:  470-block  5
unconditional  8 never executed
      214:  470-block  6
unconditional  9 taken 214
      214:  470-block  7
branch 10 taken 16 (fallthrough)
branch 11 taken 198
       16:  470-block  8
unconditional 12 taken 16
      198:  470-block  9
unconditional 13 taken 198
    %%%%%:  470-block 10
unconditional 14 never executed
      214:  470-block 11
unconditional 15 taken 214
      214:  470-block 12
branch 16 taken 198 (fallthrough)
branch 17 taken 16
      198:  470-block 13
unconditional 18 taken 198
       16:  470-block 14
unconditional 19 taken 16
      214:  470-block 15
unconditional 20 taken 214
    %%%%%:  470-block 16
unconditional 21 never executed
    %%%%%:  470-block 17
unconditional 22 never executed
      214:  470-block 18
unconditional 23 taken 214
    %%%%%:  470-block 19
unconditional 24 never executed
      214:  470-block 20
unconditional 25 taken 214
      214:  470-block 21
unconditional 26 taken 214
    %%%%%:  470-block 22
unconditional 27 never executed
      214:  470-block 23
call   28 returned 214
        -:  471:	       "%u:%u  %s  %s\n",
      214:  472:	    colorize ? props->icon_color : "",
      214:  472-block  0
branch  0 taken 214 (fallthrough)
branch  1 taken 0
      428:  473:	    icons ? props->icon : "", icons ? ' ' : 0,
      214:  473-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 214
      214:  473-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 214
        -:  474:#else
        -:  475:	printf("%s%s%s%-*s%s%c %c/%c%c%c/%c%c%c/%c%c%c%s  "
        -:  476:	       "%u:%u  %s  %s\n",
        -:  477:#endif
      214:  478:	    colorize ? props->color : "",
      214:  478-block  0
branch  0 taken 214 (fallthrough)
branch  1 taken 0
        -:  479:	    !trim ? props->name : trim_name,
      214:  480:	    light_mode ? "" : df_c, pad, "", df_c,
      214:  480-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 214
        -:  481:	    trim ? '~' : 0, file_type,
        -:  482:	    read_usr, write_usr, exec_usr,
        -:  483:	    read_grp, write_grp, exec_grp,
        -:  484:	    read_others, write_others, exec_others,
      214:  485:	    is_acl(props->name) ? "+" : "",
        -:  486:	    /*          !owner ? _("?") : owner->pw_name,
        -:  487:			!group ? _("?") : group->gr_name, */
      214:  488:	    props->uid, props->gid,
      214:  488-block  0
call    0 returned 214
      214:  489:	    *mod_time ? mod_time : "?",
      214:  489-block  0
branch  0 taken 214 (fallthrough)
branch  1 taken 0
        -:  490:	    size_type ? size_type : "?");
        -:  491:
      214:  492:	if (size_type)
branch  0 taken 214 (fallthrough)
branch  1 taken 0
      214:  493:		free(size_type);
      214:  493-block  0
unconditional  0 taken 214
        -:  494:
      214:  495:	return EXIT_SUCCESS;
      214:  495-block  0
unconditional  0 taken 214
        -:  496:}
        -:  497:
        -:  498:int
function properties_function called 3 returned 100% blocks executed 62%
        3:  499:properties_function(char **comm)
        -:  500:{
        3:  501:	if (!comm)
        3:  501-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  502:		return EXIT_FAILURE;
    %%%%%:  502-block  0
unconditional  0 never executed
        -:  503:
        -:  504:	size_t i;
        3:  505:	int exit_status = EXIT_SUCCESS;
        3:  506:	int _dir_size = 0;
        -:  507:
        3:  508:	if (*comm[0] == 'p' && comm[0][1] == 'p' && !comm[0][2])
        3:  508-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  508-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 2
        1:  508-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:  509:		_dir_size = 1;
        1:  509-block  0
unconditional  0 taken 1
        -:  510:
        -:  511:	/* If "pr file file..." */
        6:  512:	for (i = 1; i <= args_n; i++) {
        3:  512-block  0
unconditional  0 taken 3
        3:  512-block  1
unconditional  1 taken 3
        6:  512-block  2
branch  2 taken 3
branch  3 taken 3 (fallthrough)
        3:  513:		if (strchr(comm[i], '\\')) {
        3:  513-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  514:			char *deq_file = dequote_str(comm[i], 0);
    %%%%%:  514-block  0
call    0 never executed
    #####:  515:			if (!deq_file) {
branch  0 never executed
branch  1 never executed
    #####:  516:				fprintf(stderr, _("%s: %s: Error dequoting file name\n"),
call    0 never executed
    #####:  517:				    PROGRAM_NAME, comm[i]);
    %%%%%:  517-block  0
call    0 never executed
    #####:  518:				exit_status = EXIT_FAILURE;
    #####:  519:				continue;
unconditional  0 never executed
        -:  520:			}
        -:  521:
    #####:  522:			strcpy(comm[i], deq_file);
    #####:  523:			free(deq_file);
    %%%%%:  523-block  0
unconditional  0 never executed
        -:  524:		}
        -:  525:
        3:  526:		if (get_properties(comm[i], _dir_size) != 0)
        3:  526-block  0
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
    #####:  527:			exit_status = EXIT_FAILURE;
    %%%%%:  527-block  0
unconditional  0 never executed
        -:  528:	}
        -:  529:
        3:  530:	return exit_status;
        3:  530-block  0
unconditional  0 taken 3
        -:  531:}
